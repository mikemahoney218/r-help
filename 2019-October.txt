From herd_dog @end|ng |rom cox@net  Wed Oct  2 04:32:04 2019
From: herd_dog @end|ng |rom cox@net (Phillip Heinrich)
Date: Tue, 1 Oct 2019 19:32:04 -0700
Subject: [R] mapple
Message-ID: <7DB8E2F1CE2B46DF961581C29E043846@OWNERPC>

With the snippet of data below I?m trying to do an if/then type of thing:
    row 1 ? if all five variables equal 0 then code equals 1;
    row 3 ? if v1 = 1 and v2 = 1 then code = 5;
    row 7 ? if v1 = 0 and v2 = 1 and v3 = 2 then code = 10

There are 24 codes in the complete database.


   v1 v2 v3 v4 v5 code
1   0  0  0  0  0    1
2   1  4  0  0  0    1
3   1  1  0  0  0    1
4   1  0  1  0  0    1
5   2  0  1  0  0    1
6   0  1  0  0  0    1
7   0  1  2  0  0    1
8   0  1  2  3  0    1
9   0  2  3  4  4    1
10  0  0  0  2  3    1  I understand that the mapply function can do things like this but I have been reading documentation and poking around with Google but am getting nowhere.  Any advise whould be greatly appreciated.  
	[[alternative HTML version deleted]]


From drj|m|emon @end|ng |rom gm@||@com  Wed Oct  2 05:24:43 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Wed, 2 Oct 2019 13:24:43 +1000
Subject: [R] mapple
In-Reply-To: <7DB8E2F1CE2B46DF961581C29E043846@OWNERPC>
References: <7DB8E2F1CE2B46DF961581C29E043846@OWNERPC>
Message-ID: <CA+8X3fUzHhyQvmO1K-QtFBqcfRCe27Ppa3nvoGJ_N=5FK2KGpA@mail.gmail.com>

Hi Phillip,
The following seems to do what you want:

phdf<-read.table(text="v1 v2 v3 v4 v5 code
 0  0  0  0  0    1
 1  4  0  0  0    1
 1  1  0  0  0    1
 1  0  1  0  0    1
 2  0  1  0  0    1
 0  1  0  0  0    1
 0  1  2  0  0    1
 0  1  2  3  0    1
 0  2  3  4  4    1
 0  0  0  2  3    1",
 header=TRUE,
 stringsAsFactors=FALSE)
rules<-list("x[1]==0&&x[2]==0&&x[3]==0&&x[4]==0&&x[5]==0",
 "x[1]==1&&x[2]==1","x[1]==0&&x[2]==1&&x[3]==2")
outcomes<-c(1,5,10)
apply_rule<-function(x,rule) return(eval(parse(text=rule)))
for(ri in 1:length(rules))
 phdf[apply(phdf,1,apply_rule,rules[[ri]]),"code"] <- outcomes[ri]

and can be expanded to the number of rules that you want. BUT, you
have not specified a non-match value, so your initial values for
"code" will persist.

Jim

On Wed, Oct 2, 2019 at 12:32 PM Phillip Heinrich <herd_dog at cox.net> wrote:
>
> With the snippet of data below I?m trying to do an if/then type of thing:
>     row 1 ? if all five variables equal 0 then code equals 1;
>     row 3 ? if v1 = 1 and v2 = 1 then code = 5;
>     row 7 ? if v1 = 0 and v2 = 1 and v3 = 2 then code = 10
>
> There are 24 codes in the complete database.
>
>
>    v1 v2 v3 v4 v5 code
> 1   0  0  0  0  0    1
> 2   1  4  0  0  0    1
> 3   1  1  0  0  0    1
> 4   1  0  1  0  0    1
> 5   2  0  1  0  0    1
> 6   0  1  0  0  0    1
> 7   0  1  2  0  0    1
> 8   0  1  2  3  0    1
> 9   0  2  3  4  4    1
> 10  0  0  0  2  3    1  I understand that the mapply function can do things like this but I have been reading documentation and poking around with Google but am getting nowhere.  Any advise whould be greatly appreciated.
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From m@rtyn@p|ummer @end|ng |rom gm@||@com  Wed Oct  2 11:27:04 2019
From: m@rtyn@p|ummer @end|ng |rom gm@||@com (Martyn Plummer)
Date: Wed, 2 Oct 2019 10:27:04 +0100
Subject: [R] Call for proposals to host useR! 2021
Message-ID: <CA+aisX01eZ3huimMy7xMsooE2KLaZWtwyQMxoxAOqBjWo0Wevw@mail.gmail.com>

A call for proposals to host useR! 2021 has been published on the R project
web site:

https://www.r-project.org/useR-2021_call.html

For reasons of sustainability and accessibility we are looking to develop a
distributed conference model with one venue hosting the main useR!
conference and ?useR! hubs? running in parallel on other continents. This
call is for groups wishing to host the main venue. We welcome hosts that
are keen to cooperate with us in shaping and developing the new hub model.

The deadline for submitting an outline proposal is *Friday 01 November 2019*
.
On behalf of the R Foundation
Martyn Plummer

	[[alternative HTML version deleted]]

_______________________________________________
R-announce at r-project.org mailing list
https://stat.ethz.ch/mailman/listinfo/r-announce


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Oct  2 16:15:52 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 2 Oct 2019 15:15:52 +0100
Subject: [R] mapple
In-Reply-To: <CA+8X3fUzHhyQvmO1K-QtFBqcfRCe27Ppa3nvoGJ_N=5FK2KGpA@mail.gmail.com>
References: <7DB8E2F1CE2B46DF961581C29E043846@OWNERPC>
 <CA+8X3fUzHhyQvmO1K-QtFBqcfRCe27Ppa3nvoGJ_N=5FK2KGpA@mail.gmail.com>
Message-ID: <be4c6b3b-1751-b67e-9365-2cd85fe9ce7a@sapo.pt>

Hello,

A logical index seems right. (And even intuitive?)

Create an index based on the conditions, multiplying 0/1 (FALSE/TRUE) by 
the condition number. If all conditions are false, the index will be 0.

Then use ifelse() to update 'code'.

new_values <- c(1, 5, 10)
i <- apply(phdf[-6], 1, function(x){
     1*all(x == 0) +                       # rule 1
     2*(x[1] == 1 & x[2] == 1) +           # rule 2
     3*(x[1] == 0 & x[2] == 1 & x[3] == 2) # rule 3
})
phdf$code <- ifelse(i == 0, phdf$code, new_values[i])


Hope this helps,

Rui Barradas

?s 04:24 de 02/10/19, Jim Lemon escreveu:
> Hi Phillip,
> The following seems to do what you want:
> 
> phdf<-read.table(text="v1 v2 v3 v4 v5 code
>   0  0  0  0  0    1
>   1  4  0  0  0    1
>   1  1  0  0  0    1
>   1  0  1  0  0    1
>   2  0  1  0  0    1
>   0  1  0  0  0    1
>   0  1  2  0  0    1
>   0  1  2  3  0    1
>   0  2  3  4  4    1
>   0  0  0  2  3    1",
>   header=TRUE,
>   stringsAsFactors=FALSE)
> rules<-list("x[1]==0&&x[2]==0&&x[3]==0&&x[4]==0&&x[5]==0",
>   "x[1]==1&&x[2]==1","x[1]==0&&x[2]==1&&x[3]==2")
> outcomes<-c(1,5,10)
> apply_rule<-function(x,rule) return(eval(parse(text=rule)))
> for(ri in 1:length(rules))
>   phdf[apply(phdf,1,apply_rule,rules[[ri]]),"code"] <- outcomes[ri]
> 
> and can be expanded to the number of rules that you want. BUT, you
> have not specified a non-match value, so your initial values for
> "code" will persist.
> 
> Jim
> 
> On Wed, Oct 2, 2019 at 12:32 PM Phillip Heinrich <herd_dog at cox.net> wrote:
>>
>> With the snippet of data below I?m trying to do an if/then type of thing:
>>      row 1 ? if all five variables equal 0 then code equals 1;
>>      row 3 ? if v1 = 1 and v2 = 1 then code = 5;
>>      row 7 ? if v1 = 0 and v2 = 1 and v3 = 2 then code = 10
>>
>> There are 24 codes in the complete database.
>>
>>
>>     v1 v2 v3 v4 v5 code
>> 1   0  0  0  0  0    1
>> 2   1  4  0  0  0    1
>> 3   1  1  0  0  0    1
>> 4   1  0  1  0  0    1
>> 5   2  0  1  0  0    1
>> 6   0  1  0  0  0    1
>> 7   0  1  2  0  0    1
>> 8   0  1  2  3  0    1
>> 9   0  2  3  4  4    1
>> 10  0  0  0  2  3    1  I understand that the mapply function can do things like this but I have been reading documentation and poking around with Google but am getting nowhere.  Any advise whould be greatly appreciated.
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From drj|m|emon @end|ng |rom gm@||@com  Wed Oct  2 23:42:49 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 3 Oct 2019 07:42:49 +1000
Subject: [R] mapple
In-Reply-To: <E7EF4D1D798A479F9B74A8C066B2574A@OWNERPC>
References: <7DB8E2F1CE2B46DF961581C29E043846@OWNERPC>
 <CA+8X3fUzHhyQvmO1K-QtFBqcfRCe27Ppa3nvoGJ_N=5FK2KGpA@mail.gmail.com>
 <E7EF4D1D798A479F9B74A8C066B2574A@OWNERPC>
Message-ID: <CA+8X3fWA4KmFgYTeF2Ad53YNT7XU12-ZXdv=Jdtdixtz0AVsLQ@mail.gmail.com>

Hi Phillip,
You have chosen one of the best methods to learn any computer language
(and many other things) by using it to do something that you want to
do. Start with your "change of date" problem. As you saw, different
people suggested different ways to get the same result. If I remember
correctly, I suggested using the difference between successive dates:

# create some dates
dates<-as.Date(paste(rep(2019,10),rep(9,10),c(10,10,11,11,11,14,17,19,19,20
),sep="-"))
dates
[1] "2019-09-10" "2019-09-10" "2019-09-11" "2019-09-11" "2019-09-11"
[6] "2019-09-14" "2019-09-17" "2019-09-19" "2019-09-19" "2019-09-20"
# get the difference between successive dates
diffdates<-diff(dates)
diffdates
Time differences in days
[1] 0 1 0 0 3 3 2 0 1
# a change of date produces a difference greater than 0
diffdates > 0
[1] FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE
# because a logical value will automatically be coerced to numeric
# in a calculation, you can show the _changes_ in dates using the
# cumulative sum of the TRUE (1) values
cumsum(diffdates > 0)
[1] 0 1 1 1 2 3 4 4 5
# note that because the length of the differences will be one less
# then the length of values, you have to make up the first value
# probably NA or zero

How did I choose the three simple functions to get the result? Because
I knew that you wanted to count the changes in date, I chose "diff" to
give me a vector of the change values. From here, you just want to
_increment_ a count based on the changes, regardless of their values.
So I converted each date change value to a logical value. If the
change value was zero, it remained zero. If it was greater than zero,
it became TRUE (1). As you can see, the cumulative sum of these
logical values returns a cumulative count of changes.
There are two stages in this. First, create a sequence of steps to go
from the information you have to that you want:

1) find where the date changes occur
2) manipulate this vector into a vector that increments its value at each change

This part can be hard for almost anyone. If you have a mind that is
good at analyzing a problem, it's a lot easier. Second, choose
functions that actually perform the steps:

1) find where the date changes occur (diff)
2) change this vector into the increment values you want (>0 produces
TRUE/FALSE = 1/0)
3) sum up the increments (cumsum)

The second part is the hard one for most beginners. Sure, I can
imagine what steps are needed, but which of the hundreds of basic,
cryptically-named functions will perform these steps? My view is that
these two rely on both native ability and experience.

Now for the conditional to value problem. When I run the code I sent
you, I get the answer I expected:

phdf<-read.table(text="v1 v2 v3 v4 v5 code
+  0  0  0  0  0    1
+  1  4  0  0  0    1
+  1  1  0  0  0    1
+  1  0  1  0  0    1
+  2  0  1  0  0    1
+  0  1  0  0  0    1
+  0  1  2  0  0    1
+  0  1  2  3  0    1
+  0  2  3  4  4    1
+  0  0  0  2  3    1",
+  header=TRUE,
+  stringsAsFactors=FALSE)
> rules<-list("x[1]==0&&x[2]==0&&x[3]==0&&x[4]==0&&x[5]==0",
+  "x[1]==1&&x[2]==1","x[1]==0&&x[2]==1&&x[3]==2")
> outcomes<-c(1,5,10)
> apply_rule<-function(x,rule) return(eval(parse(text=rule)))
> for(ri in 1:length(rules))
+  phdf[apply(phdf,1,apply_rule,rules[[ri]]),"code"] <- outcomes[ri]
> phdf
  v1 v2 v3 v4 v5 code
1   0  0  0  0  0    1
2   1  4  0  0  0    1
3   1  1  0  0  0    5
4   1  0  1  0  0    1
5   2  0  1  0  0    1
6   0  1  0  0  0    1
7   0  1  2  0  0   10
8   0  1  2  3  0   10
9   0  2  3  4  4    1
10  0  0  0  2  3    1

What I did here was to create a list of rules (conditional statements
that return TRUE/FALSE) and a vector of values that will be
substituted when the corresponding conditional statement is TRUE.
Next, I have to create a function that can be passed as the FUN
argument to a *apply statement. What it does is to convert the
character string of a conditional statement in "rules" to an
expression, evaluate it, and return the logical outcome.
Stepping through the rules one by one produces a logical vector of
TRUE/FALSE for each rule. I use that vector to index the rows of phdf,
indexing the column with its name ("code") thereby changing the value
of phdf$code where the condition is TRUE to the corresponding value of
"outcomes".
Again, this was done by working out the steps necessary to get the
result, then deciding which functions would perform those steps. It
may seem difficult because it is. Like the famous Socratic dialog in
which he appears to get one of Meno's slaves to answer a mathematical
problem that is clearly beyond his knowledge, Socrates carefully
frames his questions in a way that the slave can answer correctly. I
will not claim, as Socrates did, that this proves that the soul of a
function is immortal and already possesses the knowledge to solve the
problem. Socrates demonstrated that if you ask the right simple
questions, you can put the simple answers together to get the result
you want. There are a lot of people who still do this, but in science
it is known as "confirmatory bias".

Jim

On Thu, Oct 3, 2019 at 1:45 AM Phillip Heinrich <herd_dog at cox.net> wrote:
>
> Can't seem to get past the rules statement that you suggested.  I get an
> invalid argument to unary operator error.  The class of the dataframe is
> "list" and the structure is "factor".  Looked up "unary operator" but I
> don't really understand what that means.
>
> Thanks.
>
> class(phdf)
> [1] "list"
>
> > str(phdf)
> List of 6
> $ v1  : Factor w/ 3 levels "0","1","2": 1 2 2 2 3 1 1 1 1 1
> $ v2  : Factor w/ 4 levels "0","1","2","4": 1 4 2 1 1 2 2 2 3 1
> $ v3  : Factor w/ 4 levels "0","1","2","3": 1 1 1 2 2 1 3 3 4 1
> $ v4  : Factor w/ 4 levels "0","2","3","4": 1 1 1 1 1 1 1 3 4 2
> $ v5  : Factor w/ 3 levels "0","3","4": 1 1 1 1 1 1 1 1 3 2
> $ code: Factor w/ 1 level "1": 1 1 1 1 1 1 1 1 1 1
>
> > rules <- list("x[1]==0 && x[2]==0 && x[3]==0 && x[4]==0 && x[5]==0",+
> +                "x[1]==1 && x[2]==1 && x[3]==0 && x[4]==0 && x[5]==10")
>
> Error in +"x[1]==1 && x[2]==1 && x[3]==0 && x[4]==0 && x[5]==10" :
>   invalid argument to unary operator
>
> -----Original Message-----
> From: Jim Lemon
> Sent: Tuesday, October 1, 2019 8:24 PM
> To: Phillip Heinrich
> Cc: r-help
> Subject: Re: [R] mapple
>
> Hi Phillip,
> The following seems to do what you want:
>
> phdf<-read.table(text="v1 v2 v3 v4 v5 code
> 0  0  0  0  0    1
> 1  4  0  0  0    1
> 1  1  0  0  0    1
> 1  0  1  0  0    1
> 2  0  1  0  0    1
> 0  1  0  0  0    1
> 0  1  2  0  0    1
> 0  1  2  3  0    1
> 0  2  3  4  4    1
> 0  0  0  2  3    1",
> header=TRUE,
> stringsAsFactors=FALSE)
> rules<-list("x[1]==0&&x[2]==0&&x[3]==0&&x[4]==0&&x[5]==0",
> "x[1]==1&&x[2]==1","x[1]==0&&x[2]==1&&x[3]==2")
> outcomes<-c(1,5,10)
> apply_rule<-function(x,rule) return(eval(parse(text=rule)))
> for(ri in 1:length(rules))
> phdf[apply(phdf,1,apply_rule,rules[[ri]]),"code"] <- outcomes[ri]
>
> and can be expanded to the number of rules that you want. BUT, you
> have not specified a non-match value, so your initial values for
> "code" will persist.
>
> Jim
>
> On Wed, Oct 2, 2019 at 12:32 PM Phillip Heinrich <herd_dog at cox.net> wrote:
> >
> > With the snippet of data below I?m trying to do an if/then type of thing:
> >     row 1 ? if all five variables equal 0 then code equals 1;
> >     row 3 ? if v1 = 1 and v2 = 1 then code = 5;
> >     row 7 ? if v1 = 0 and v2 = 1 and v3 = 2 then code = 10
> >
> > There are 24 codes in the complete database.
> >
> >
> >    v1 v2 v3 v4 v5 code
> > 1   0  0  0  0  0    1
> > 2   1  4  0  0  0    1
> > 3   1  1  0  0  0    1
> > 4   1  0  1  0  0    1
> > 5   2  0  1  0  0    1
> > 6   0  1  0  0  0    1
> > 7   0  1  2  0  0    1
> > 8   0  1  2  3  0    1
> > 9   0  2  3  4  4    1
> > 10  0  0  0  2  3    1  I understand that the mapply function can do
> > things like this but I have been reading documentation and poking around
> > with Google but am getting nowhere.  Any advise whould be greatly
> > appreciated.
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>


From |@r@dj@g @end|ng |rom gm@||@com  Thu Oct  3 13:17:07 2019
From: |@r@dj@g @end|ng |rom gm@||@com (Faradj Koliev)
Date: Thu, 3 Oct 2019 13:17:07 +0200
Subject: [R] Creating a before-and-after variable in R
Message-ID: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>

Dear R-users, 

I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0. 

What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1. 

For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this: 
 
country

year

x

treatment

USA

1982

0

-18

USA

1983

0

-17

USA

1984

0

-16

USA

1985

0

-15

USA

1986

0

-14

USA

1987

0

-13

USA

1988

0

-12

USA

1989

0

-11

USA

1990

0

-10

USA

1991

0

-9

USA

1992

0

-8

USA

1993

0

-7

USA

1994

0

-6

USA

1995

0

-5

USA

1996

0

-4

USA

1997

0

-3

USA

1998

0

-2

USA

1999

0

-1

USA

2000

1

0

USA

2001

0

1

USA

2002

0

2

USA

2003

0

3

USA

2004

0

4

USA

2005

0

5

USA

2006

0

6

USA

2007

0

7

USA

2008

0

8

USA

2009

0

9

USA

2010

0

10

USA

2011

0

11

USA

2012

0

12

USA

2013

0

13



Do you have any idea as how I can generate this? All suggestions are appreciated!


I?ve tried to create it but failed. I only could generate positive counts using this code: 
require(data.table)
setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]

My sample below: 
dput(data)
structure(list(country_code = c(900L, 900L, 900L, 900L, 900L, 
900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L, 
305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L, 
220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L, 
481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L, 
367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 
367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L, 
570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L, 
212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L, 
359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 
359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L, 
600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L, 
565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 
565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L, 
235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L, 
317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 
317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L, 
230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L, 
380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L, 
640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 
1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L, 
1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924, 
5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847, 
8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924, 
8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924, 
7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771, 
6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771, 
6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008, 
13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008, 
13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458, 
9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958, 
9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847, 
7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771, 
7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771, 
7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924, 
6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924, 
6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042, 
11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042, 
11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954, 
11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771, 
4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046, 
14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046, 
14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076, 
6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981, 
11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981, 
11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886, 
8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008, 
12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008, 
11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023, 
14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023, 
14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031, 
13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038, 
14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031, 
13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992, 
12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989, 
12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989, 
12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924, 
7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924, 
7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977, 
13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977, 
13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979, 
7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 
7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015, 
11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015, 
11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25, 
15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924, 
2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA, 
-722L))






	[[alternative HTML version deleted]]


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Thu Oct  3 14:24:41 2019
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Thu, 3 Oct 2019 13:24:41 +0100
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
Message-ID: <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>

Dear Faradj

I am afraid your post is unreadable since this is a plain text list and 
you sent in HTML.

Michael

On 03/10/2019 12:17, Faradj Koliev wrote:
> Dear R-users,
> 
> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
> 
> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
> 
> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
>   
> country
> 
> year
> 
> x
> 
> treatment
> 
> USA
> 
> 1982
> 
> 0
> 
> -18
> 
> USA
> 
> 1983
> 
> 0
> 
> -17
> 
> USA
> 
> 1984
> 
> 0
> 
> -16
> 
> USA
> 
> 1985
> 
> 0
> 
> -15
> 
> USA
> 
> 1986
> 
> 0
> 
> -14
> 
> USA
> 
> 1987
> 
> 0
> 
> -13
> 
> USA
> 
> 1988
> 
> 0
> 
> -12
> 
> USA
> 
> 1989
> 
> 0
> 
> -11
> 
> USA
> 
> 1990
> 
> 0
> 
> -10
> 
> USA
> 
> 1991
> 
> 0
> 
> -9
> 
> USA
> 
> 1992
> 
> 0
> 
> -8
> 
> USA
> 
> 1993
> 
> 0
> 
> -7
> 
> USA
> 
> 1994
> 
> 0
> 
> -6
> 
> USA
> 
> 1995
> 
> 0
> 
> -5
> 
> USA
> 
> 1996
> 
> 0
> 
> -4
> 
> USA
> 
> 1997
> 
> 0
> 
> -3
> 
> USA
> 
> 1998
> 
> 0
> 
> -2
> 
> USA
> 
> 1999
> 
> 0
> 
> -1
> 
> USA
> 
> 2000
> 
> 1
> 
> 0
> 
> USA
> 
> 2001
> 
> 0
> 
> 1
> 
> USA
> 
> 2002
> 
> 0
> 
> 2
> 
> USA
> 
> 2003
> 
> 0
> 
> 3
> 
> USA
> 
> 2004
> 
> 0
> 
> 4
> 
> USA
> 
> 2005
> 
> 0
> 
> 5
> 
> USA
> 
> 2006
> 
> 0
> 
> 6
> 
> USA
> 
> 2007
> 
> 0
> 
> 7
> 
> USA
> 
> 2008
> 
> 0
> 
> 8
> 
> USA
> 
> 2009
> 
> 0
> 
> 9
> 
> USA
> 
> 2010
> 
> 0
> 
> 10
> 
> USA
> 
> 2011
> 
> 0
> 
> 11
> 
> USA
> 
> 2012
> 
> 0
> 
> 12
> 
> USA
> 
> 2013
> 
> 0
> 
> 13
> 
> 
> 
> Do you have any idea as how I can generate this? All suggestions are appreciated!
> 
> 
> I?ve tried to create it but failed. I only could generate positive counts using this code:
> require(data.table)
> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> 
> My sample below:
> dput(data)
> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
> -722L))
> 
> 
> 
> 
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 
> ---
> This email has been checked for viruses by AVG.
> https://www.avg.com
> 
> .
> 

-- 
Michael
http://www.dewey.myzen.co.uk/home.html


From |@r@dj@g @end|ng |rom gm@||@com  Thu Oct  3 14:35:07 2019
From: |@r@dj@g @end|ng |rom gm@||@com (Faradj Koliev)
Date: Thu, 3 Oct 2019 14:35:07 +0200
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
Message-ID: <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>

Dear Michael Dewey, 

Thanks for reaching out about this. I trying again, now with plain text, and hope it works. 

Best, 
Faradj 



Dear R-users, 

I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0. 

What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1. 

For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this: 
 
country

year

x

treatment

USA

1982

0

-18

USA

1983

0

-17

USA

1984

0

-16

USA

1985

0

-15

USA

1986

0

-14

USA

1987

0

-13

USA

1988

0

-12

USA

1989

0

-11

USA

1990

0

-10

USA

1991

0

-9

USA

1992

0

-8

USA

1993

0

-7

USA

1994

0

-6

USA

1995

0

-5

USA

1996

0

-4

USA

1997

0

-3

USA

1998

0

-2

USA

1999

0

-1

USA

2000

1

0

USA

2001

0

1

USA

2002

0

2

USA

2003

0

3

USA

2004

0

4

USA

2005

0

5

USA

2006

0

6

USA

2007

0

7

USA

2008

0

8

USA

2009

0

9

USA

2010

0

10

USA

2011

0

11

USA

2012

0

12

USA

2013

0

13



Do you have any idea as how I can generate this? All suggestions are appreciated!


I?ve tried to create it but failed. I only could generate positive counts using this code: 
require(data.table)
setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]

My sample below: 
dput(data)
structure(list(country_code = c(900L, 900L, 900L, 900L, 900L, 
900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L, 
305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L, 
220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L, 
481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L, 
367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 
367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L, 
570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L, 
212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L, 
359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 
359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L, 
600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L, 
565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 
565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L, 
235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L, 
317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 
317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L, 
230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L, 
380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L, 
640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 
1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L, 
1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924, 
5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847, 
8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924, 
8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924, 
7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771, 
6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771, 
6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008, 
13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008, 
13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11, 
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458, 
9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958, 
9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847, 
7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771, 
7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771, 
7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924, 
6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924, 
6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042, 
11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042, 
11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954, 
11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771, 
4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046, 
14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046, 
14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076, 
6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981, 
11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981, 
11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886, 
8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008, 
12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008, 
11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023, 
14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023, 
14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031, 
13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038, 
14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031, 
13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992, 
12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989, 
12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989, 
12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924, 
7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924, 
7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977, 
13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977, 
13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979, 
7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 
7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015, 
11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015, 
11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25, 
15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924, 
2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA, 
-722L))




> 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> 
> Dear Faradj
> 
> I am afraid your post is unreadable since this is a plain text list and you sent in HTML.
> 
> Michael
> 
> On 03/10/2019 12:17, Faradj Koliev wrote:
>> Dear R-users,
>> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
>> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
>> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
>>  country
>> year
>> x
>> treatment
>> USA
>> 1982
>> 0
>> -18
>> USA
>> 1983
>> 0
>> -17
>> USA
>> 1984
>> 0
>> -16
>> USA
>> 1985
>> 0
>> -15
>> USA
>> 1986
>> 0
>> -14
>> USA
>> 1987
>> 0
>> -13
>> USA
>> 1988
>> 0
>> -12
>> USA
>> 1989
>> 0
>> -11
>> USA
>> 1990
>> 0
>> -10
>> USA
>> 1991
>> 0
>> -9
>> USA
>> 1992
>> 0
>> -8
>> USA
>> 1993
>> 0
>> -7
>> USA
>> 1994
>> 0
>> -6
>> USA
>> 1995
>> 0
>> -5
>> USA
>> 1996
>> 0
>> -4
>> USA
>> 1997
>> 0
>> -3
>> USA
>> 1998
>> 0
>> -2
>> USA
>> 1999
>> 0
>> -1
>> USA
>> 2000
>> 1
>> 0
>> USA
>> 2001
>> 0
>> 1
>> USA
>> 2002
>> 0
>> 2
>> USA
>> 2003
>> 0
>> 3
>> USA
>> 2004
>> 0
>> 4
>> USA
>> 2005
>> 0
>> 5
>> USA
>> 2006
>> 0
>> 6
>> USA
>> 2007
>> 0
>> 7
>> USA
>> 2008
>> 0
>> 8
>> USA
>> 2009
>> 0
>> 9
>> USA
>> 2010
>> 0
>> 10
>> USA
>> 2011
>> 0
>> 11
>> USA
>> 2012
>> 0
>> 12
>> USA
>> 2013
>> 0
>> 13
>> Do you have any idea as how I can generate this? All suggestions are appreciated!
>> I?ve tried to create it but failed. I only could generate positive counts using this code:
>> require(data.table)
>> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
>> My sample below:
>> dput(data)
>> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
>> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
>> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
>> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
>> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
>> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
>> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
>> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
>> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
>> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
>> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
>> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
>> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
>> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
>> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
>> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
>> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
>> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
>> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
>> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
>> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
>> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
>> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
>> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
>> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
>> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
>> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
>> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
>> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
>> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
>> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
>> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
>> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
>> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
>> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
>> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
>> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
>> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
>> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
>> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
>> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
>> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
>> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
>> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
>> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
>> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
>> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
>> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
>> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
>> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
>> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
>> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
>> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
>> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
>> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
>> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
>> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
>> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
>> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
>> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
>> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
>> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
>> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
>> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
>> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
>> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
>> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
>> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
>> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
>> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
>> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
>> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
>> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
>> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
>> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
>> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
>> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
>> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
>> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
>> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
>> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
>> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
>> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
>> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
>> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
>> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
>> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
>> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
>> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
>> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
>> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
>> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
>> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
>> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
>> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
>> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
>> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
>> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
>> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
>> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
>> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
>> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
>> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
>> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
>> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
>> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
>> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
>> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
>> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
>> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
>> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
>> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
>> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
>> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
>> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
>> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
>> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
>> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
>> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
>> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
>> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
>> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
>> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
>> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
>> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
>> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
>> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
>> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
>> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
>> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
>> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
>> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
>> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
>> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
>> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
>> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
>> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
>> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
>> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
>> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
>> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
>> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
>> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
>> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
>> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
>> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
>> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
>> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
>> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
>> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
>> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
>> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
>> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
>> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
>> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
>> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
>> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
>> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
>> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
>> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
>> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
>> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
>> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
>> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
>> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
>> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
>> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
>> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
>> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
>> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
>> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
>> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
>> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
>> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
>> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
>> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
>> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
>> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
>> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
>> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
>> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
>> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
>> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
>> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
>> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
>> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
>> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
>> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
>> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
>> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
>> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
>> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
>> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
>> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
>> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
>> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
>> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
>> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
>> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
>> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
>> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
>> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
>> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
>> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
>> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
>> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
>> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
>> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
>> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
>> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
>> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
>> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
>> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
>> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
>> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
>> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
>> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
>> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
>> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
>> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
>> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
>> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
>> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
>> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
>> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
>> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
>> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
>> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
>> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
>> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
>> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
>> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
>> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
>> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
>> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
>> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
>> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
>> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
>> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
>> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
>> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
>> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
>> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
>> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
>> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
>> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
>> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
>> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
>> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
>> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
>> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
>> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
>> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
>> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
>> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
>> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
>> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
>> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
>> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
>> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
>> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
>> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
>> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
>> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
>> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
>> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
>> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
>> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
>> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
>> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
>> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
>> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
>> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
>> -722L))
>> 	[[alternative HTML version deleted]]
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>> ---
>> This email has been checked for viruses by AVG.
>> https://www.avg.com
>> .
> 
> -- 
> Michael
> http://www.dewey.myzen.co.uk/home.html


	[[alternative HTML version deleted]]


From er|cjberger @end|ng |rom gm@||@com  Thu Oct  3 15:18:25 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Thu, 3 Oct 2019 16:18:25 +0300
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
Message-ID: <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>

Hi Faradj,
Suppose your data frame is labeled 'a'. Then the following seems to do what
you want.

v <- rep(NA_integer_,max(a$country_code))
v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] -
v[a$country_code[i]]})

HTH,
Eric


On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com> wrote:

> Dear Michael Dewey,
>
> Thanks for reaching out about this. I trying again, now with plain text,
> and hope it works.
>
> Best,
> Faradj
>
>
>
> Dear R-users,
>
> I need an urgent help with the following: I have a country-year data
> covering the period 1982 - 2013. I want to assess how the variable X (a
> certain policy) affects the Y variable. The X variable is =1 when a country
> introduces that policy in a specific year, otherwise =0.
>
> What I want to do is to create a treatment variable, that would be a
> negative count until the X=1, and then  positive counts  for the years
> after X=1.
>
> For example, let?s say that the U.S. introduced the policy x in year 2000.
> The treatment variable would look be like this:
>
> country
>
> year
>
> x
>
> treatment
>
> USA
>
> 1982
>
> 0
>
> -18
>
> USA
>
> 1983
>
> 0
>
> -17
>
> USA
>
> 1984
>
> 0
>
> -16
>
> USA
>
> 1985
>
> 0
>
> -15
>
> USA
>
> 1986
>
> 0
>
> -14
>
> USA
>
> 1987
>
> 0
>
> -13
>
> USA
>
> 1988
>
> 0
>
> -12
>
> USA
>
> 1989
>
> 0
>
> -11
>
> USA
>
> 1990
>
> 0
>
> -10
>
> USA
>
> 1991
>
> 0
>
> -9
>
> USA
>
> 1992
>
> 0
>
> -8
>
> USA
>
> 1993
>
> 0
>
> -7
>
> USA
>
> 1994
>
> 0
>
> -6
>
> USA
>
> 1995
>
> 0
>
> -5
>
> USA
>
> 1996
>
> 0
>
> -4
>
> USA
>
> 1997
>
> 0
>
> -3
>
> USA
>
> 1998
>
> 0
>
> -2
>
> USA
>
> 1999
>
> 0
>
> -1
>
> USA
>
> 2000
>
> 1
>
> 0
>
> USA
>
> 2001
>
> 0
>
> 1
>
> USA
>
> 2002
>
> 0
>
> 2
>
> USA
>
> 2003
>
> 0
>
> 3
>
> USA
>
> 2004
>
> 0
>
> 4
>
> USA
>
> 2005
>
> 0
>
> 5
>
> USA
>
> 2006
>
> 0
>
> 6
>
> USA
>
> 2007
>
> 0
>
> 7
>
> USA
>
> 2008
>
> 0
>
> 8
>
> USA
>
> 2009
>
> 0
>
> 9
>
> USA
>
> 2010
>
> 0
>
> 10
>
> USA
>
> 2011
>
> 0
>
> 11
>
> USA
>
> 2012
>
> 0
>
> 12
>
> USA
>
> 2013
>
> 0
>
> 13
>
>
>
> Do you have any idea as how I can generate this? All suggestions are
> appreciated!
>
>
> I?ve tried to create it but failed. I only could generate positive counts
> using this code:
> require(data.table)
> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
>
> My sample below:
> dput(data)
> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame",
> row.names = c(NA,
> -722L))
>
>
>
>
> > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> >
> > Dear Faradj
> >
> > I am afraid your post is unreadable since this is a plain text list and
> you sent in HTML.
> >
> > Michael
> >
> > On 03/10/2019 12:17, Faradj Koliev wrote:
> >> Dear R-users,
> >> I need an urgent help with the following: I have a country-year data
> covering the period 1982 - 2013. I want to assess how the variable X (a
> certain policy) affects the Y variable. The X variable is =1 when a country
> introduces that policy in a specific year, otherwise =0.
> >> What I want to do is to create a treatment variable, that would be a
> negative count until the X=1, and then  positive counts  for the years
> after X=1.
> >> For example, let?s say that the U.S. introduced the policy x in year
> 2000. The treatment variable would look be like this:
> >>  country
> >> year
> >> x
> >> treatment
> >> USA
> >> 1982
> >> 0
> >> -18
> >> USA
> >> 1983
> >> 0
> >> -17
> >> USA
> >> 1984
> >> 0
> >> -16
> >> USA
> >> 1985
> >> 0
> >> -15
> >> USA
> >> 1986
> >> 0
> >> -14
> >> USA
> >> 1987
> >> 0
> >> -13
> >> USA
> >> 1988
> >> 0
> >> -12
> >> USA
> >> 1989
> >> 0
> >> -11
> >> USA
> >> 1990
> >> 0
> >> -10
> >> USA
> >> 1991
> >> 0
> >> -9
> >> USA
> >> 1992
> >> 0
> >> -8
> >> USA
> >> 1993
> >> 0
> >> -7
> >> USA
> >> 1994
> >> 0
> >> -6
> >> USA
> >> 1995
> >> 0
> >> -5
> >> USA
> >> 1996
> >> 0
> >> -4
> >> USA
> >> 1997
> >> 0
> >> -3
> >> USA
> >> 1998
> >> 0
> >> -2
> >> USA
> >> 1999
> >> 0
> >> -1
> >> USA
> >> 2000
> >> 1
> >> 0
> >> USA
> >> 2001
> >> 0
> >> 1
> >> USA
> >> 2002
> >> 0
> >> 2
> >> USA
> >> 2003
> >> 0
> >> 3
> >> USA
> >> 2004
> >> 0
> >> 4
> >> USA
> >> 2005
> >> 0
> >> 5
> >> USA
> >> 2006
> >> 0
> >> 6
> >> USA
> >> 2007
> >> 0
> >> 7
> >> USA
> >> 2008
> >> 0
> >> 8
> >> USA
> >> 2009
> >> 0
> >> 9
> >> USA
> >> 2010
> >> 0
> >> 10
> >> USA
> >> 2011
> >> 0
> >> 11
> >> USA
> >> 2012
> >> 0
> >> 12
> >> USA
> >> 2013
> >> 0
> >> 13
> >> Do you have any idea as how I can generate this? All suggestions are
> appreciated!
> >> I?ve tried to create it but failed. I only could generate positive
> counts using this code:
> >> require(data.table)
> >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> >> My sample below:
> >> dput(data)
> >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L)), .Names = c("country_code", "year", "y", "x"), class =
> "data.frame", row.names = c(NA,
> >> -722L))
> >>      [[alternative HTML version deleted]]
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >> ---
> >> This email has been checked for viruses by AVG.
> >> https://www.avg.com
> >> .
> >
> > --
> > Michael
> > http://www.dewey.myzen.co.uk/home.html
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
>

	[[alternative HTML version deleted]]


From |@r@dj@g @end|ng |rom gm@||@com  Thu Oct  3 15:54:17 2019
From: |@r@dj@g @end|ng |rom gm@||@com (Faradj Koliev)
Date: Thu, 3 Oct 2019 15:54:17 +0200
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
 <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
Message-ID: <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>

Dear Eric, 

Thank you very much for this - it worked perfectly! 

A small thing: I wonder whether it?s possible to include those cases where the x is =0 for the whole study period. I have countries with x=0 for the whole period and the treatment variable is=NA for these observations. 

Best, 
Faradj 


> 3 okt. 2019 kl. 15:18 skrev Eric Berger <ericjberger at gmail.com>:
> 
> Hi Faradj,
> Suppose your data frame is labeled 'a'. Then the following seems to do what you want.
> 
> v <- rep(NA_integer_,max(a$country_code))
> v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
> a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] - v[a$country_code[i]]})
> 
> HTH,
> Eric
> 
> 
> On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> Dear Michael Dewey, 
> 
> Thanks for reaching out about this. I trying again, now with plain text, and hope it works. 
> 
> Best, 
> Faradj 
> 
> 
> 
> Dear R-users, 
> 
> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0. 
> 
> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1. 
> 
> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this: 
> 
> country
> 
> year
> 
> x
> 
> treatment
> 
> USA
> 
> 1982
> 
> 0
> 
> -18
> 
> USA
> 
> 1983
> 
> 0
> 
> -17
> 
> USA
> 
> 1984
> 
> 0
> 
> -16
> 
> USA
> 
> 1985
> 
> 0
> 
> -15
> 
> USA
> 
> 1986
> 
> 0
> 
> -14
> 
> USA
> 
> 1987
> 
> 0
> 
> -13
> 
> USA
> 
> 1988
> 
> 0
> 
> -12
> 
> USA
> 
> 1989
> 
> 0
> 
> -11
> 
> USA
> 
> 1990
> 
> 0
> 
> -10
> 
> USA
> 
> 1991
> 
> 0
> 
> -9
> 
> USA
> 
> 1992
> 
> 0
> 
> -8
> 
> USA
> 
> 1993
> 
> 0
> 
> -7
> 
> USA
> 
> 1994
> 
> 0
> 
> -6
> 
> USA
> 
> 1995
> 
> 0
> 
> -5
> 
> USA
> 
> 1996
> 
> 0
> 
> -4
> 
> USA
> 
> 1997
> 
> 0
> 
> -3
> 
> USA
> 
> 1998
> 
> 0
> 
> -2
> 
> USA
> 
> 1999
> 
> 0
> 
> -1
> 
> USA
> 
> 2000
> 
> 1
> 
> 0
> 
> USA
> 
> 2001
> 
> 0
> 
> 1
> 
> USA
> 
> 2002
> 
> 0
> 
> 2
> 
> USA
> 
> 2003
> 
> 0
> 
> 3
> 
> USA
> 
> 2004
> 
> 0
> 
> 4
> 
> USA
> 
> 2005
> 
> 0
> 
> 5
> 
> USA
> 
> 2006
> 
> 0
> 
> 6
> 
> USA
> 
> 2007
> 
> 0
> 
> 7
> 
> USA
> 
> 2008
> 
> 0
> 
> 8
> 
> USA
> 
> 2009
> 
> 0
> 
> 9
> 
> USA
> 
> 2010
> 
> 0
> 
> 10
> 
> USA
> 
> 2011
> 
> 0
> 
> 11
> 
> USA
> 
> 2012
> 
> 0
> 
> 12
> 
> USA
> 
> 2013
> 
> 0
> 
> 13
> 
> 
> 
> Do you have any idea as how I can generate this? All suggestions are appreciated!
> 
> 
> I?ve tried to create it but failed. I only could generate positive counts using this code: 
> require(data.table)
> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> 
> My sample below: 
> dput(data)
> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L, 
> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L, 
> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L, 
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L, 
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L, 
> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 
> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L, 
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L, 
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L, 
> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 
> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L, 
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L, 
> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 
> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L, 
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L, 
> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 
> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L, 
> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L, 
> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L, 
> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 
> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L, 
> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924, 
> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847, 
> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924, 
> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924, 
> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4, 
> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771, 
> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771, 
> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134, 
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886, 
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008, 
> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008, 
> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11, 
> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458, 
> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958, 
> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847, 
> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771, 
> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771, 
> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924, 
> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924, 
> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042, 
> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042, 
> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954, 
> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771, 
> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008, 
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046, 
> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046, 
> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076, 
> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981, 
> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981, 
> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992, 
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886, 
> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008, 
> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008, 
> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023, 
> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023, 
> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031, 
> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038, 
> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031, 
> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992, 
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989, 
> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989, 
> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076, 
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924, 
> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924, 
> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977, 
> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977, 
> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979, 
> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 
> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015, 
> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015, 
> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25, 
> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924, 
> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12, 
> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA, 
> -722L))
> 
> 
> 
> 
> > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> > 
> > Dear Faradj
> > 
> > I am afraid your post is unreadable since this is a plain text list and you sent in HTML.
> > 
> > Michael
> > 
> > On 03/10/2019 12:17, Faradj Koliev wrote:
> >> Dear R-users,
> >> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
> >> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
> >> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
> >>  country
> >> year
> >> x
> >> treatment
> >> USA
> >> 1982
> >> 0
> >> -18
> >> USA
> >> 1983
> >> 0
> >> -17
> >> USA
> >> 1984
> >> 0
> >> -16
> >> USA
> >> 1985
> >> 0
> >> -15
> >> USA
> >> 1986
> >> 0
> >> -14
> >> USA
> >> 1987
> >> 0
> >> -13
> >> USA
> >> 1988
> >> 0
> >> -12
> >> USA
> >> 1989
> >> 0
> >> -11
> >> USA
> >> 1990
> >> 0
> >> -10
> >> USA
> >> 1991
> >> 0
> >> -9
> >> USA
> >> 1992
> >> 0
> >> -8
> >> USA
> >> 1993
> >> 0
> >> -7
> >> USA
> >> 1994
> >> 0
> >> -6
> >> USA
> >> 1995
> >> 0
> >> -5
> >> USA
> >> 1996
> >> 0
> >> -4
> >> USA
> >> 1997
> >> 0
> >> -3
> >> USA
> >> 1998
> >> 0
> >> -2
> >> USA
> >> 1999
> >> 0
> >> -1
> >> USA
> >> 2000
> >> 1
> >> 0
> >> USA
> >> 2001
> >> 0
> >> 1
> >> USA
> >> 2002
> >> 0
> >> 2
> >> USA
> >> 2003
> >> 0
> >> 3
> >> USA
> >> 2004
> >> 0
> >> 4
> >> USA
> >> 2005
> >> 0
> >> 5
> >> USA
> >> 2006
> >> 0
> >> 6
> >> USA
> >> 2007
> >> 0
> >> 7
> >> USA
> >> 2008
> >> 0
> >> 8
> >> USA
> >> 2009
> >> 0
> >> 9
> >> USA
> >> 2010
> >> 0
> >> 10
> >> USA
> >> 2011
> >> 0
> >> 11
> >> USA
> >> 2012
> >> 0
> >> 12
> >> USA
> >> 2013
> >> 0
> >> 13
> >> Do you have any idea as how I can generate this? All suggestions are appreciated!
> >> I?ve tried to create it but failed. I only could generate positive counts using this code:
> >> require(data.table)
> >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> >> My sample below:
> >> dput(data)
> >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> >> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
> >> -722L))
> >>      [[alternative HTML version deleted]]
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >> ---
> >> This email has been checked for viruses by AVG.
> >> https://www.avg.com
> >> .
> > 
> > -- 
> > Michael
> > http://www.dewey.myzen.co.uk/home.html
> 
> 
>         [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 


From er|cjberger @end|ng |rom gm@||@com  Thu Oct  3 16:11:08 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Thu, 3 Oct 2019 17:11:08 +0300
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
 <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
 <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>
Message-ID: <CAGgJW76U4LTySTct68i9dPgZkwn3TY5jLPQPSbw5p076Y0JRgA@mail.gmail.com>

Hi Faradj,
What should the treatment variable be in those cases? If you want to set it
to a constant y (such as y=0), you can add something like

y <- 0
a$treatment[ is.na(a$treatment) ] <- y

HTH,
Eric


On Thu, Oct 3, 2019 at 4:54 PM Faradj Koliev <faradj.g at gmail.com> wrote:

> Dear Eric,
>
> Thank you very much for this - it worked perfectly!
>
> A small thing: I wonder whether it?s possible to include those cases where
> the x is =0 for the whole study period. I have countries with x=0 for the
> whole period and the treatment variable is=NA for these observations.
>
> Best,
> Faradj
>
>
> > 3 okt. 2019 kl. 15:18 skrev Eric Berger <ericjberger at gmail.com>:
> >
> > Hi Faradj,
> > Suppose your data frame is labeled 'a'. Then the following seems to do
> what you want.
> >
> > v <- rep(NA_integer_,max(a$country_code))
> > v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
> > a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] -
> v[a$country_code[i]]})
> >
> > HTH,
> > Eric
> >
> >
> > On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > Dear Michael Dewey,
> >
> > Thanks for reaching out about this. I trying again, now with plain text,
> and hope it works.
> >
> > Best,
> > Faradj
> >
> >
> >
> > Dear R-users,
> >
> > I need an urgent help with the following: I have a country-year data
> covering the period 1982 - 2013. I want to assess how the variable X (a
> certain policy) affects the Y variable. The X variable is =1 when a country
> introduces that policy in a specific year, otherwise =0.
> >
> > What I want to do is to create a treatment variable, that would be a
> negative count until the X=1, and then  positive counts  for the years
> after X=1.
> >
> > For example, let?s say that the U.S. introduced the policy x in year
> 2000. The treatment variable would look be like this:
> >
> > country
> >
> > year
> >
> > x
> >
> > treatment
> >
> > USA
> >
> > 1982
> >
> > 0
> >
> > -18
> >
> > USA
> >
> > 1983
> >
> > 0
> >
> > -17
> >
> > USA
> >
> > 1984
> >
> > 0
> >
> > -16
> >
> > USA
> >
> > 1985
> >
> > 0
> >
> > -15
> >
> > USA
> >
> > 1986
> >
> > 0
> >
> > -14
> >
> > USA
> >
> > 1987
> >
> > 0
> >
> > -13
> >
> > USA
> >
> > 1988
> >
> > 0
> >
> > -12
> >
> > USA
> >
> > 1989
> >
> > 0
> >
> > -11
> >
> > USA
> >
> > 1990
> >
> > 0
> >
> > -10
> >
> > USA
> >
> > 1991
> >
> > 0
> >
> > -9
> >
> > USA
> >
> > 1992
> >
> > 0
> >
> > -8
> >
> > USA
> >
> > 1993
> >
> > 0
> >
> > -7
> >
> > USA
> >
> > 1994
> >
> > 0
> >
> > -6
> >
> > USA
> >
> > 1995
> >
> > 0
> >
> > -5
> >
> > USA
> >
> > 1996
> >
> > 0
> >
> > -4
> >
> > USA
> >
> > 1997
> >
> > 0
> >
> > -3
> >
> > USA
> >
> > 1998
> >
> > 0
> >
> > -2
> >
> > USA
> >
> > 1999
> >
> > 0
> >
> > -1
> >
> > USA
> >
> > 2000
> >
> > 1
> >
> > 0
> >
> > USA
> >
> > 2001
> >
> > 0
> >
> > 1
> >
> > USA
> >
> > 2002
> >
> > 0
> >
> > 2
> >
> > USA
> >
> > 2003
> >
> > 0
> >
> > 3
> >
> > USA
> >
> > 2004
> >
> > 0
> >
> > 4
> >
> > USA
> >
> > 2005
> >
> > 0
> >
> > 5
> >
> > USA
> >
> > 2006
> >
> > 0
> >
> > 6
> >
> > USA
> >
> > 2007
> >
> > 0
> >
> > 7
> >
> > USA
> >
> > 2008
> >
> > 0
> >
> > 8
> >
> > USA
> >
> > 2009
> >
> > 0
> >
> > 9
> >
> > USA
> >
> > 2010
> >
> > 0
> >
> > 10
> >
> > USA
> >
> > 2011
> >
> > 0
> >
> > 11
> >
> > USA
> >
> > 2012
> >
> > 0
> >
> > 12
> >
> > USA
> >
> > 2013
> >
> > 0
> >
> > 13
> >
> >
> >
> > Do you have any idea as how I can generate this? All suggestions are
> appreciated!
> >
> >
> > I?ve tried to create it but failed. I only could generate positive
> counts using this code:
> > require(data.table)
> > setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> >
> > My sample below:
> > dput(data)
> > structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> > 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > 0L)), .Names = c("country_code", "year", "y", "x"), class =
> "data.frame", row.names = c(NA,
> > -722L))
> >
> >
> >
> >
> > > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> > >
> > > Dear Faradj
> > >
> > > I am afraid your post is unreadable since this is a plain text list
> and you sent in HTML.
> > >
> > > Michael
> > >
> > > On 03/10/2019 12:17, Faradj Koliev wrote:
> > >> Dear R-users,
> > >> I need an urgent help with the following: I have a country-year data
> covering the period 1982 - 2013. I want to assess how the variable X (a
> certain policy) affects the Y variable. The X variable is =1 when a country
> introduces that policy in a specific year, otherwise =0.
> > >> What I want to do is to create a treatment variable, that would be a
> negative count until the X=1, and then  positive counts  for the years
> after X=1.
> > >> For example, let?s say that the U.S. introduced the policy x in year
> 2000. The treatment variable would look be like this:
> > >>  country
> > >> year
> > >> x
> > >> treatment
> > >> USA
> > >> 1982
> > >> 0
> > >> -18
> > >> USA
> > >> 1983
> > >> 0
> > >> -17
> > >> USA
> > >> 1984
> > >> 0
> > >> -16
> > >> USA
> > >> 1985
> > >> 0
> > >> -15
> > >> USA
> > >> 1986
> > >> 0
> > >> -14
> > >> USA
> > >> 1987
> > >> 0
> > >> -13
> > >> USA
> > >> 1988
> > >> 0
> > >> -12
> > >> USA
> > >> 1989
> > >> 0
> > >> -11
> > >> USA
> > >> 1990
> > >> 0
> > >> -10
> > >> USA
> > >> 1991
> > >> 0
> > >> -9
> > >> USA
> > >> 1992
> > >> 0
> > >> -8
> > >> USA
> > >> 1993
> > >> 0
> > >> -7
> > >> USA
> > >> 1994
> > >> 0
> > >> -6
> > >> USA
> > >> 1995
> > >> 0
> > >> -5
> > >> USA
> > >> 1996
> > >> 0
> > >> -4
> > >> USA
> > >> 1997
> > >> 0
> > >> -3
> > >> USA
> > >> 1998
> > >> 0
> > >> -2
> > >> USA
> > >> 1999
> > >> 0
> > >> -1
> > >> USA
> > >> 2000
> > >> 1
> > >> 0
> > >> USA
> > >> 2001
> > >> 0
> > >> 1
> > >> USA
> > >> 2002
> > >> 0
> > >> 2
> > >> USA
> > >> 2003
> > >> 0
> > >> 3
> > >> USA
> > >> 2004
> > >> 0
> > >> 4
> > >> USA
> > >> 2005
> > >> 0
> > >> 5
> > >> USA
> > >> 2006
> > >> 0
> > >> 6
> > >> USA
> > >> 2007
> > >> 0
> > >> 7
> > >> USA
> > >> 2008
> > >> 0
> > >> 8
> > >> USA
> > >> 2009
> > >> 0
> > >> 9
> > >> USA
> > >> 2010
> > >> 0
> > >> 10
> > >> USA
> > >> 2011
> > >> 0
> > >> 11
> > >> USA
> > >> 2012
> > >> 0
> > >> 12
> > >> USA
> > >> 2013
> > >> 0
> > >> 13
> > >> Do you have any idea as how I can generate this? All suggestions are
> appreciated!
> > >> I?ve tried to create it but failed. I only could generate positive
> counts using this code:
> > >> require(data.table)
> > >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > >> My sample below:
> > >> dput(data)
> > >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958,
> > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958,
> > >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992,
> 12.82999992,
> > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> 7.46999979,
> > >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L)), .Names = c("country_code", "year", "y", "x"), class =
> "data.frame", row.names = c(NA,
> > >> -722L))
> > >>      [[alternative HTML version deleted]]
> > >> ______________________________________________
> > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > >> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > >> and provide commented, minimal, self-contained, reproducible code.
> > >> ---
> > >> This email has been checked for viruses by AVG.
> > >> https://www.avg.com
> > >> .
> > >
> > > --
> > > Michael
> > > http://www.dewey.myzen.co.uk/home.html
> >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
>

	[[alternative HTML version deleted]]


From |@r@dj@g @end|ng |rom gm@||@com  Thu Oct  3 16:19:39 2019
From: |@r@dj@g @end|ng |rom gm@||@com (Faradj Koliev)
Date: Thu, 3 Oct 2019 16:19:39 +0200
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <CAGgJW76U4LTySTct68i9dPgZkwn3TY5jLPQPSbw5p076Y0JRgA@mail.gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
 <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
 <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>
 <CAGgJW76U4LTySTct68i9dPgZkwn3TY5jLPQPSbw5p076Y0JRgA@mail.gmail.com>
Message-ID: <82402127-335C-419D-9652-7D5BDF8DC299@gmail.com>

Hi, 

I was thinking that it could simply show the negative counts. For ex: if a country hasn?t introduced the policy X, and it's in the dataset from 1982 to 2014, then the treatment variable would take a value -33 in 1982 and -1 in 2014. 

Best, 
Faradj 


> 3 okt. 2019 kl. 16:11 skrev Eric Berger <ericjberger at gmail.com>:
> 
> Hi Faradj,
> What should the treatment variable be in those cases? If you want to set it to a constant y (such as y=0), you can add something like
> 
> y <- 0
> a$treatment[ is.na(a$treatment) ] <- y
> 
> HTH,
> Eric
> 
> 
> On Thu, Oct 3, 2019 at 4:54 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> Dear Eric, 
> 
> Thank you very much for this - it worked perfectly! 
> 
> A small thing: I wonder whether it?s possible to include those cases where the x is =0 for the whole study period. I have countries with x=0 for the whole period and the treatment variable is=NA for these observations. 
> 
> Best, 
> Faradj 
> 
> 
> > 3 okt. 2019 kl. 15:18 skrev Eric Berger <ericjberger at gmail.com>:
> > 
> > Hi Faradj,
> > Suppose your data frame is labeled 'a'. Then the following seems to do what you want.
> > 
> > v <- rep(NA_integer_,max(a$country_code))
> > v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
> > a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] - v[a$country_code[i]]})
> > 
> > HTH,
> > Eric
> > 
> > 
> > On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > Dear Michael Dewey, 
> > 
> > Thanks for reaching out about this. I trying again, now with plain text, and hope it works. 
> > 
> > Best, 
> > Faradj 
> > 
> > 
> > 
> > Dear R-users, 
> > 
> > I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0. 
> > 
> > What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1. 
> > 
> > For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this: 
> > 
> > country
> > 
> > year
> > 
> > x
> > 
> > treatment
> > 
> > USA
> > 
> > 1982
> > 
> > 0
> > 
> > -18
> > 
> > USA
> > 
> > 1983
> > 
> > 0
> > 
> > -17
> > 
> > USA
> > 
> > 1984
> > 
> > 0
> > 
> > -16
> > 
> > USA
> > 
> > 1985
> > 
> > 0
> > 
> > -15
> > 
> > USA
> > 
> > 1986
> > 
> > 0
> > 
> > -14
> > 
> > USA
> > 
> > 1987
> > 
> > 0
> > 
> > -13
> > 
> > USA
> > 
> > 1988
> > 
> > 0
> > 
> > -12
> > 
> > USA
> > 
> > 1989
> > 
> > 0
> > 
> > -11
> > 
> > USA
> > 
> > 1990
> > 
> > 0
> > 
> > -10
> > 
> > USA
> > 
> > 1991
> > 
> > 0
> > 
> > -9
> > 
> > USA
> > 
> > 1992
> > 
> > 0
> > 
> > -8
> > 
> > USA
> > 
> > 1993
> > 
> > 0
> > 
> > -7
> > 
> > USA
> > 
> > 1994
> > 
> > 0
> > 
> > -6
> > 
> > USA
> > 
> > 1995
> > 
> > 0
> > 
> > -5
> > 
> > USA
> > 
> > 1996
> > 
> > 0
> > 
> > -4
> > 
> > USA
> > 
> > 1997
> > 
> > 0
> > 
> > -3
> > 
> > USA
> > 
> > 1998
> > 
> > 0
> > 
> > -2
> > 
> > USA
> > 
> > 1999
> > 
> > 0
> > 
> > -1
> > 
> > USA
> > 
> > 2000
> > 
> > 1
> > 
> > 0
> > 
> > USA
> > 
> > 2001
> > 
> > 0
> > 
> > 1
> > 
> > USA
> > 
> > 2002
> > 
> > 0
> > 
> > 2
> > 
> > USA
> > 
> > 2003
> > 
> > 0
> > 
> > 3
> > 
> > USA
> > 
> > 2004
> > 
> > 0
> > 
> > 4
> > 
> > USA
> > 
> > 2005
> > 
> > 0
> > 
> > 5
> > 
> > USA
> > 
> > 2006
> > 
> > 0
> > 
> > 6
> > 
> > USA
> > 
> > 2007
> > 
> > 0
> > 
> > 7
> > 
> > USA
> > 
> > 2008
> > 
> > 0
> > 
> > 8
> > 
> > USA
> > 
> > 2009
> > 
> > 0
> > 
> > 9
> > 
> > USA
> > 
> > 2010
> > 
> > 0
> > 
> > 10
> > 
> > USA
> > 
> > 2011
> > 
> > 0
> > 
> > 11
> > 
> > USA
> > 
> > 2012
> > 
> > 0
> > 
> > 12
> > 
> > USA
> > 
> > 2013
> > 
> > 0
> > 
> > 13
> > 
> > 
> > 
> > Do you have any idea as how I can generate this? All suggestions are appreciated!
> > 
> > 
> > I?ve tried to create it but failed. I only could generate positive counts using this code: 
> > require(data.table)
> > setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > 
> > My sample below: 
> > dput(data)
> > structure(list(country_code = c(900L, 900L, 900L, 900L, 900L, 
> > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
> > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
> > 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L, 
> > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
> > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
> > 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> > 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> > 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> > 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
> > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
> > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L, 
> > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
> > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
> > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L, 
> > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
> > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
> > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L, 
> > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 
> > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L, 
> > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
> > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
> > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L, 
> > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
> > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
> > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L, 
> > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 
> > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L, 
> > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
> > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
> > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L, 
> > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 
> > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L, 
> > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
> > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
> > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L, 
> > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 
> > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L, 
> > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
> > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
> > 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L, 
> > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
> > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
> > 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L, 
> > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
> > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
> > 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> > 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
> > 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
> > 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> > 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> > 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
> > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
> > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
> > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
> > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
> > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
> > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
> > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
> > 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 
> > 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
> > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
> > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
> > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
> > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
> > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
> > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
> > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> > 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
> > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
> > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
> > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
> > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
> > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
> > 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> > 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
> > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
> > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
> > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
> > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
> > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
> > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
> > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> > 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
> > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L, 
> > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
> > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> > 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924, 
> > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
> > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
> > 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847, 
> > 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924, 
> > 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
> > 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
> > 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
> > 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924, 
> > 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4, 
> > 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
> > 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771, 
> > 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771, 
> > 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134, 
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886, 
> > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> > 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008, 
> > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008, 
> > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11, 
> > 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
> > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
> > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
> > 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458, 
> > 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958, 
> > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
> > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
> > 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
> > 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
> > 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847, 
> > 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771, 
> > 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771, 
> > 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924, 
> > 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924, 
> > 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042, 
> > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042, 
> > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954, 
> > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
> > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
> > 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771, 
> > 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008, 
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046, 
> > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046, 
> > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076, 
> > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
> > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981, 
> > 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981, 
> > 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992, 
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886, 
> > 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008, 
> > 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008, 
> > 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023, 
> > 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023, 
> > 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031, 
> > 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038, 
> > 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031, 
> > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
> > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
> > 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992, 
> > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> > 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989, 
> > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989, 
> > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076, 
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924, 
> > 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924, 
> > 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977, 
> > 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977, 
> > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979, 
> > 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 
> > 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015, 
> > 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015, 
> > 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25, 
> > 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924, 
> > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
> > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
> > 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12, 
> > 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA, 
> > -722L))
> > 
> > 
> > 
> > 
> > > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> > > 
> > > Dear Faradj
> > > 
> > > I am afraid your post is unreadable since this is a plain text list and you sent in HTML.
> > > 
> > > Michael
> > > 
> > > On 03/10/2019 12:17, Faradj Koliev wrote:
> > >> Dear R-users,
> > >> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
> > >> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
> > >> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
> > >>  country
> > >> year
> > >> x
> > >> treatment
> > >> USA
> > >> 1982
> > >> 0
> > >> -18
> > >> USA
> > >> 1983
> > >> 0
> > >> -17
> > >> USA
> > >> 1984
> > >> 0
> > >> -16
> > >> USA
> > >> 1985
> > >> 0
> > >> -15
> > >> USA
> > >> 1986
> > >> 0
> > >> -14
> > >> USA
> > >> 1987
> > >> 0
> > >> -13
> > >> USA
> > >> 1988
> > >> 0
> > >> -12
> > >> USA
> > >> 1989
> > >> 0
> > >> -11
> > >> USA
> > >> 1990
> > >> 0
> > >> -10
> > >> USA
> > >> 1991
> > >> 0
> > >> -9
> > >> USA
> > >> 1992
> > >> 0
> > >> -8
> > >> USA
> > >> 1993
> > >> 0
> > >> -7
> > >> USA
> > >> 1994
> > >> 0
> > >> -6
> > >> USA
> > >> 1995
> > >> 0
> > >> -5
> > >> USA
> > >> 1996
> > >> 0
> > >> -4
> > >> USA
> > >> 1997
> > >> 0
> > >> -3
> > >> USA
> > >> 1998
> > >> 0
> > >> -2
> > >> USA
> > >> 1999
> > >> 0
> > >> -1
> > >> USA
> > >> 2000
> > >> 1
> > >> 0
> > >> USA
> > >> 2001
> > >> 0
> > >> 1
> > >> USA
> > >> 2002
> > >> 0
> > >> 2
> > >> USA
> > >> 2003
> > >> 0
> > >> 3
> > >> USA
> > >> 2004
> > >> 0
> > >> 4
> > >> USA
> > >> 2005
> > >> 0
> > >> 5
> > >> USA
> > >> 2006
> > >> 0
> > >> 6
> > >> USA
> > >> 2007
> > >> 0
> > >> 7
> > >> USA
> > >> 2008
> > >> 0
> > >> 8
> > >> USA
> > >> 2009
> > >> 0
> > >> 9
> > >> USA
> > >> 2010
> > >> 0
> > >> 10
> > >> USA
> > >> 2011
> > >> 0
> > >> 11
> > >> USA
> > >> 2012
> > >> 0
> > >> 12
> > >> USA
> > >> 2013
> > >> 0
> > >> 13
> > >> Do you have any idea as how I can generate this? All suggestions are appreciated!
> > >> I?ve tried to create it but failed. I only could generate positive counts using this code:
> > >> require(data.table)
> > >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > >> My sample below:
> > >> dput(data)
> > >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> > >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > >> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
> > >> -722L))
> > >>      [[alternative HTML version deleted]]
> > >> ______________________________________________
> > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > >> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > >> and provide commented, minimal, self-contained, reproducible code.
> > >> ---
> > >> This email has been checked for viruses by AVG.
> > >> https://www.avg.com
> > >> .
> > > 
> > > -- 
> > > Michael
> > > http://www.dewey.myzen.co.uk/home.html
> > 
> > 
> >         [[alternative HTML version deleted]]
> > 
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> > 
> 


From |@r@dj@g @end|ng |rom gm@||@com  Thu Oct  3 16:39:23 2019
From: |@r@dj@g @end|ng |rom gm@||@com (Faradj Koliev)
Date: Thu, 3 Oct 2019 16:39:23 +0200
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <CAGgJW74tUTghhmJ0--m4BeeaGqocRuyTFqb_9EJ73GnTzs_9Jw@mail.gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
 <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
 <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>
 <CAGgJW76U4LTySTct68i9dPgZkwn3TY5jLPQPSbw5p076Y0JRgA@mail.gmail.com>
 <82402127-335C-419D-9652-7D5BDF8DC299@gmail.com>
 <CAGgJW74tUTghhmJ0--m4BeeaGqocRuyTFqb_9EJ73GnTzs_9Jw@mail.gmail.com>
Message-ID: <89533356-EC4C-4D8D-9BF0-BE31BC1DF468@gmail.com>

Thank you very much for your help!

All the best, 
Faradj 

> 3 okt. 2019 kl. 16:37 skrev Eric Berger <ericjberger at gmail.com>:
> 
> You can replace the last line in my first suggestion by the following two lines
> 
> d <- 2014  # the default (set by the user)
> a$treatment <- sapply( 1:nrow(a), function(i) { b <- v[a$country_code[i]]; a$year[i] - ifelse(is.na(b),d,b)})
> 
> Best,
> Eric
> 
> 
> 
> 
> 
> On Thu, Oct 3, 2019 at 5:19 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> Hi, 
> 
> I was thinking that it could simply show the negative counts. For ex: if a country hasn?t introduced the policy X, and it's in the dataset from 1982 to 2014, then the treatment variable would take a value -33 in 1982 and -1 in 2014. 
> 
> Best, 
> Faradj 
> 
> 
> > 3 okt. 2019 kl. 16:11 skrev Eric Berger <ericjberger at gmail.com>:
> > 
> > Hi Faradj,
> > What should the treatment variable be in those cases? If you want to set it to a constant y (such as y=0), you can add something like
> > 
> > y <- 0
> > a$treatment[ is.na(a$treatment) ] <- y
> > 
> > HTH,
> > Eric
> > 
> > 
> > On Thu, Oct 3, 2019 at 4:54 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > Dear Eric, 
> > 
> > Thank you very much for this - it worked perfectly! 
> > 
> > A small thing: I wonder whether it?s possible to include those cases where the x is =0 for the whole study period. I have countries with x=0 for the whole period and the treatment variable is=NA for these observations. 
> > 
> > Best, 
> > Faradj 
> > 
> > 
> > > 3 okt. 2019 kl. 15:18 skrev Eric Berger <ericjberger at gmail.com>:
> > > 
> > > Hi Faradj,
> > > Suppose your data frame is labeled 'a'. Then the following seems to do what you want.
> > > 
> > > v <- rep(NA_integer_,max(a$country_code))
> > > v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
> > > a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] - v[a$country_code[i]]})
> > > 
> > > HTH,
> > > Eric
> > > 
> > > 
> > > On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > > Dear Michael Dewey, 
> > > 
> > > Thanks for reaching out about this. I trying again, now with plain text, and hope it works. 
> > > 
> > > Best, 
> > > Faradj 
> > > 
> > > 
> > > 
> > > Dear R-users, 
> > > 
> > > I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0. 
> > > 
> > > What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1. 
> > > 
> > > For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this: 
> > > 
> > > country
> > > 
> > > year
> > > 
> > > x
> > > 
> > > treatment
> > > 
> > > USA
> > > 
> > > 1982
> > > 
> > > 0
> > > 
> > > -18
> > > 
> > > USA
> > > 
> > > 1983
> > > 
> > > 0
> > > 
> > > -17
> > > 
> > > USA
> > > 
> > > 1984
> > > 
> > > 0
> > > 
> > > -16
> > > 
> > > USA
> > > 
> > > 1985
> > > 
> > > 0
> > > 
> > > -15
> > > 
> > > USA
> > > 
> > > 1986
> > > 
> > > 0
> > > 
> > > -14
> > > 
> > > USA
> > > 
> > > 1987
> > > 
> > > 0
> > > 
> > > -13
> > > 
> > > USA
> > > 
> > > 1988
> > > 
> > > 0
> > > 
> > > -12
> > > 
> > > USA
> > > 
> > > 1989
> > > 
> > > 0
> > > 
> > > -11
> > > 
> > > USA
> > > 
> > > 1990
> > > 
> > > 0
> > > 
> > > -10
> > > 
> > > USA
> > > 
> > > 1991
> > > 
> > > 0
> > > 
> > > -9
> > > 
> > > USA
> > > 
> > > 1992
> > > 
> > > 0
> > > 
> > > -8
> > > 
> > > USA
> > > 
> > > 1993
> > > 
> > > 0
> > > 
> > > -7
> > > 
> > > USA
> > > 
> > > 1994
> > > 
> > > 0
> > > 
> > > -6
> > > 
> > > USA
> > > 
> > > 1995
> > > 
> > > 0
> > > 
> > > -5
> > > 
> > > USA
> > > 
> > > 1996
> > > 
> > > 0
> > > 
> > > -4
> > > 
> > > USA
> > > 
> > > 1997
> > > 
> > > 0
> > > 
> > > -3
> > > 
> > > USA
> > > 
> > > 1998
> > > 
> > > 0
> > > 
> > > -2
> > > 
> > > USA
> > > 
> > > 1999
> > > 
> > > 0
> > > 
> > > -1
> > > 
> > > USA
> > > 
> > > 2000
> > > 
> > > 1
> > > 
> > > 0
> > > 
> > > USA
> > > 
> > > 2001
> > > 
> > > 0
> > > 
> > > 1
> > > 
> > > USA
> > > 
> > > 2002
> > > 
> > > 0
> > > 
> > > 2
> > > 
> > > USA
> > > 
> > > 2003
> > > 
> > > 0
> > > 
> > > 3
> > > 
> > > USA
> > > 
> > > 2004
> > > 
> > > 0
> > > 
> > > 4
> > > 
> > > USA
> > > 
> > > 2005
> > > 
> > > 0
> > > 
> > > 5
> > > 
> > > USA
> > > 
> > > 2006
> > > 
> > > 0
> > > 
> > > 6
> > > 
> > > USA
> > > 
> > > 2007
> > > 
> > > 0
> > > 
> > > 7
> > > 
> > > USA
> > > 
> > > 2008
> > > 
> > > 0
> > > 
> > > 8
> > > 
> > > USA
> > > 
> > > 2009
> > > 
> > > 0
> > > 
> > > 9
> > > 
> > > USA
> > > 
> > > 2010
> > > 
> > > 0
> > > 
> > > 10
> > > 
> > > USA
> > > 
> > > 2011
> > > 
> > > 0
> > > 
> > > 11
> > > 
> > > USA
> > > 
> > > 2012
> > > 
> > > 0
> > > 
> > > 12
> > > 
> > > USA
> > > 
> > > 2013
> > > 
> > > 0
> > > 
> > > 13
> > > 
> > > 
> > > 
> > > Do you have any idea as how I can generate this? All suggestions are appreciated!
> > > 
> > > 
> > > I?ve tried to create it but failed. I only could generate positive counts using this code: 
> > > require(data.table)
> > > setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > > 
> > > My sample below: 
> > > dput(data)
> > > structure(list(country_code = c(900L, 900L, 900L, 900L, 900L, 
> > > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
> > > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 
> > > 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L, 
> > > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
> > > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 
> > > 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> > > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> > > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 
> > > 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> > > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> > > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 
> > > 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> > > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> > > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 
> > > 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> > > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> > > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 
> > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
> > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 
> > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L, 
> > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
> > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 
> > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L, 
> > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
> > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 
> > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L, 
> > > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 
> > > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L, 
> > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
> > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 
> > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L, 
> > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
> > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 
> > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L, 
> > > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 
> > > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L, 
> > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
> > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 
> > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L, 
> > > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 
> > > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L, 
> > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
> > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 
> > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L, 
> > > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 
> > > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L, 
> > > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
> > > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 
> > > 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L, 
> > > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
> > > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 
> > > 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L, 
> > > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
> > > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 
> > > 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> > > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> > > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 
> > > 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
> > > 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 
> > > 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> > > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> > > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 
> > > 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> > > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> > > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 
> > > 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
> > > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
> > > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
> > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> > > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
> > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> > > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
> > > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
> > > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
> > > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
> > > 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 
> > > 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
> > > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
> > > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
> > > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
> > > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
> > > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
> > > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
> > > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> > > 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 
> > > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 
> > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> > > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 
> > > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 
> > > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 
> > > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 
> > > 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> > > 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 
> > > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 
> > > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 
> > > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 
> > > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 
> > > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 
> > > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 
> > > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 
> > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 
> > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 
> > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 
> > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 
> > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 
> > > 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 
> > > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 
> > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 
> > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L, 
> > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 
> > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 
> > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 
> > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 
> > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 
> > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 
> > > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 
> > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 
> > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 
> > > 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924, 
> > > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
> > > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924, 
> > > 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847, 
> > > 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924, 
> > > 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
> > > 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771, 
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076, 
> > > 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
> > > 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076, 
> > > 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924, 
> > > 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4, 
> > > 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
> > > 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771, 
> > > 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771, 
> > > 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134, 
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134, 
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924, 
> > > 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886, 
> > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886, 
> > > 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008, 
> > > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008, 
> > > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11, 
> > > 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
> > > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
> > > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076, 
> > > 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458, 
> > > 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958, 
> > > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
> > > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 
> > > 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
> > > 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962, 
> > > 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847, 
> > > 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771, 
> > > 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771, 
> > > 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809, 
> > > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > > 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924, 
> > > 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924, 
> > > 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042, 
> > > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042, 
> > > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954, 
> > > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
> > > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954, 
> > > 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771, 
> > > 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008, 
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008, 
> > > 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046, 
> > > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046, 
> > > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076, 
> > > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
> > > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076, 
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229, 
> > > 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981, 
> > > 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981, 
> > > 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992, 
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992, 
> > > 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886, 
> > > 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008, 
> > > 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008, 
> > > 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023, 
> > > 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023, 
> > > 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031, 
> > > 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038, 
> > > 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015, 
> > > 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031, 
> > > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
> > > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985, 
> > > 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992, 
> > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992, 
> > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 
> > > 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989, 
> > > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989, 
> > > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076, 
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076, 
> > > 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924, 
> > > 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924, 
> > > 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977, 
> > > 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977, 
> > > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008, 
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979, 
> > > 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 
> > > 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015, 
> > > 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015, 
> > > 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25, 
> > > 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924, 
> > > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
> > > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924, 
> > > 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12, 
> > > 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 
> > > 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA, 
> > > -722L))
> > > 
> > > 
> > > 
> > > 
> > > > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> > > > 
> > > > Dear Faradj
> > > > 
> > > > I am afraid your post is unreadable since this is a plain text list and you sent in HTML.
> > > > 
> > > > Michael
> > > > 
> > > > On 03/10/2019 12:17, Faradj Koliev wrote:
> > > >> Dear R-users,
> > > >> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
> > > >> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
> > > >> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
> > > >>  country
> > > >> year
> > > >> x
> > > >> treatment
> > > >> USA
> > > >> 1982
> > > >> 0
> > > >> -18
> > > >> USA
> > > >> 1983
> > > >> 0
> > > >> -17
> > > >> USA
> > > >> 1984
> > > >> 0
> > > >> -16
> > > >> USA
> > > >> 1985
> > > >> 0
> > > >> -15
> > > >> USA
> > > >> 1986
> > > >> 0
> > > >> -14
> > > >> USA
> > > >> 1987
> > > >> 0
> > > >> -13
> > > >> USA
> > > >> 1988
> > > >> 0
> > > >> -12
> > > >> USA
> > > >> 1989
> > > >> 0
> > > >> -11
> > > >> USA
> > > >> 1990
> > > >> 0
> > > >> -10
> > > >> USA
> > > >> 1991
> > > >> 0
> > > >> -9
> > > >> USA
> > > >> 1992
> > > >> 0
> > > >> -8
> > > >> USA
> > > >> 1993
> > > >> 0
> > > >> -7
> > > >> USA
> > > >> 1994
> > > >> 0
> > > >> -6
> > > >> USA
> > > >> 1995
> > > >> 0
> > > >> -5
> > > >> USA
> > > >> 1996
> > > >> 0
> > > >> -4
> > > >> USA
> > > >> 1997
> > > >> 0
> > > >> -3
> > > >> USA
> > > >> 1998
> > > >> 0
> > > >> -2
> > > >> USA
> > > >> 1999
> > > >> 0
> > > >> -1
> > > >> USA
> > > >> 2000
> > > >> 1
> > > >> 0
> > > >> USA
> > > >> 2001
> > > >> 0
> > > >> 1
> > > >> USA
> > > >> 2002
> > > >> 0
> > > >> 2
> > > >> USA
> > > >> 2003
> > > >> 0
> > > >> 3
> > > >> USA
> > > >> 2004
> > > >> 0
> > > >> 4
> > > >> USA
> > > >> 2005
> > > >> 0
> > > >> 5
> > > >> USA
> > > >> 2006
> > > >> 0
> > > >> 6
> > > >> USA
> > > >> 2007
> > > >> 0
> > > >> 7
> > > >> USA
> > > >> 2008
> > > >> 0
> > > >> 8
> > > >> USA
> > > >> 2009
> > > >> 0
> > > >> 9
> > > >> USA
> > > >> 2010
> > > >> 0
> > > >> 10
> > > >> USA
> > > >> 2011
> > > >> 0
> > > >> 11
> > > >> USA
> > > >> 2012
> > > >> 0
> > > >> 12
> > > >> USA
> > > >> 2013
> > > >> 0
> > > >> 13
> > > >> Do you have any idea as how I can generate this? All suggestions are appreciated!
> > > >> I?ve tried to create it but failed. I only could generate positive counts using this code:
> > > >> require(data.table)
> > > >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > > >> My sample below:
> > > >> dput(data)
> > > >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > > >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > > >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > > >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > > >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > > >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > > >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > > >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > > >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > > >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > > >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > > >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > > >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > > >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > > >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > > >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > > >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > > >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > > >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > > >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > > >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > > >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > > >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > > >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > > >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > > >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > > >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > > >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > > >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > > >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > > >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> > > >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > > >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > > >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > > >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > > >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
> > > >> -722L))
> > > >>      [[alternative HTML version deleted]]
> > > >> ______________________________________________
> > > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > > >> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > >> and provide commented, minimal, self-contained, reproducible code.
> > > >> ---
> > > >> This email has been checked for viruses by AVG.
> > > >> https://www.avg.com
> > > >> .
> > > > 
> > > > -- 
> > > > Michael
> > > > http://www.dewey.myzen.co.uk/home.html
> > > 
> > > 
> > >         [[alternative HTML version deleted]]
> > > 
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > > 
> > 
> 


From er|cjberger @end|ng |rom gm@||@com  Thu Oct  3 16:37:12 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Thu, 3 Oct 2019 17:37:12 +0300
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <82402127-335C-419D-9652-7D5BDF8DC299@gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
 <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
 <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>
 <CAGgJW76U4LTySTct68i9dPgZkwn3TY5jLPQPSbw5p076Y0JRgA@mail.gmail.com>
 <82402127-335C-419D-9652-7D5BDF8DC299@gmail.com>
Message-ID: <CAGgJW74tUTghhmJ0--m4BeeaGqocRuyTFqb_9EJ73GnTzs_9Jw@mail.gmail.com>

You can replace the last line in my first suggestion by the following two
lines

d <- 2014  # the default (set by the user)
a$treatment <- sapply( 1:nrow(a), function(i) { b <- v[a$country_code[i]];
a$year[i] - ifelse(is.na(b),d,b)})

Best,
Eric





On Thu, Oct 3, 2019 at 5:19 PM Faradj Koliev <faradj.g at gmail.com> wrote:

> Hi,
>
> I was thinking that it could simply show the negative counts. For ex: if a
> country hasn?t introduced the policy X, and it's in the dataset from 1982
> to 2014, then the treatment variable would take a value -33 in 1982 and -1
> in 2014.
>
> Best,
> Faradj
>
>
> > 3 okt. 2019 kl. 16:11 skrev Eric Berger <ericjberger at gmail.com>:
> >
> > Hi Faradj,
> > What should the treatment variable be in those cases? If you want to set
> it to a constant y (such as y=0), you can add something like
> >
> > y <- 0
> > a$treatment[ is.na(a$treatment) ] <- y
> >
> > HTH,
> > Eric
> >
> >
> > On Thu, Oct 3, 2019 at 4:54 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > Dear Eric,
> >
> > Thank you very much for this - it worked perfectly!
> >
> > A small thing: I wonder whether it?s possible to include those cases
> where the x is =0 for the whole study period. I have countries with x=0 for
> the whole period and the treatment variable is=NA for these observations.
> >
> > Best,
> > Faradj
> >
> >
> > > 3 okt. 2019 kl. 15:18 skrev Eric Berger <ericjberger at gmail.com>:
> > >
> > > Hi Faradj,
> > > Suppose your data frame is labeled 'a'. Then the following seems to do
> what you want.
> > >
> > > v <- rep(NA_integer_,max(a$country_code))
> > > v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
> > > a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] -
> v[a$country_code[i]]})
> > >
> > > HTH,
> > > Eric
> > >
> > >
> > > On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com>
> wrote:
> > > Dear Michael Dewey,
> > >
> > > Thanks for reaching out about this. I trying again, now with plain
> text, and hope it works.
> > >
> > > Best,
> > > Faradj
> > >
> > >
> > >
> > > Dear R-users,
> > >
> > > I need an urgent help with the following: I have a country-year data
> covering the period 1982 - 2013. I want to assess how the variable X (a
> certain policy) affects the Y variable. The X variable is =1 when a country
> introduces that policy in a specific year, otherwise =0.
> > >
> > > What I want to do is to create a treatment variable, that would be a
> negative count until the X=1, and then  positive counts  for the years
> after X=1.
> > >
> > > For example, let?s say that the U.S. introduced the policy x in year
> 2000. The treatment variable would look be like this:
> > >
> > > country
> > >
> > > year
> > >
> > > x
> > >
> > > treatment
> > >
> > > USA
> > >
> > > 1982
> > >
> > > 0
> > >
> > > -18
> > >
> > > USA
> > >
> > > 1983
> > >
> > > 0
> > >
> > > -17
> > >
> > > USA
> > >
> > > 1984
> > >
> > > 0
> > >
> > > -16
> > >
> > > USA
> > >
> > > 1985
> > >
> > > 0
> > >
> > > -15
> > >
> > > USA
> > >
> > > 1986
> > >
> > > 0
> > >
> > > -14
> > >
> > > USA
> > >
> > > 1987
> > >
> > > 0
> > >
> > > -13
> > >
> > > USA
> > >
> > > 1988
> > >
> > > 0
> > >
> > > -12
> > >
> > > USA
> > >
> > > 1989
> > >
> > > 0
> > >
> > > -11
> > >
> > > USA
> > >
> > > 1990
> > >
> > > 0
> > >
> > > -10
> > >
> > > USA
> > >
> > > 1991
> > >
> > > 0
> > >
> > > -9
> > >
> > > USA
> > >
> > > 1992
> > >
> > > 0
> > >
> > > -8
> > >
> > > USA
> > >
> > > 1993
> > >
> > > 0
> > >
> > > -7
> > >
> > > USA
> > >
> > > 1994
> > >
> > > 0
> > >
> > > -6
> > >
> > > USA
> > >
> > > 1995
> > >
> > > 0
> > >
> > > -5
> > >
> > > USA
> > >
> > > 1996
> > >
> > > 0
> > >
> > > -4
> > >
> > > USA
> > >
> > > 1997
> > >
> > > 0
> > >
> > > -3
> > >
> > > USA
> > >
> > > 1998
> > >
> > > 0
> > >
> > > -2
> > >
> > > USA
> > >
> > > 1999
> > >
> > > 0
> > >
> > > -1
> > >
> > > USA
> > >
> > > 2000
> > >
> > > 1
> > >
> > > 0
> > >
> > > USA
> > >
> > > 2001
> > >
> > > 0
> > >
> > > 1
> > >
> > > USA
> > >
> > > 2002
> > >
> > > 0
> > >
> > > 2
> > >
> > > USA
> > >
> > > 2003
> > >
> > > 0
> > >
> > > 3
> > >
> > > USA
> > >
> > > 2004
> > >
> > > 0
> > >
> > > 4
> > >
> > > USA
> > >
> > > 2005
> > >
> > > 0
> > >
> > > 5
> > >
> > > USA
> > >
> > > 2006
> > >
> > > 0
> > >
> > > 6
> > >
> > > USA
> > >
> > > 2007
> > >
> > > 0
> > >
> > > 7
> > >
> > > USA
> > >
> > > 2008
> > >
> > > 0
> > >
> > > 8
> > >
> > > USA
> > >
> > > 2009
> > >
> > > 0
> > >
> > > 9
> > >
> > > USA
> > >
> > > 2010
> > >
> > > 0
> > >
> > > 10
> > >
> > > USA
> > >
> > > 2011
> > >
> > > 0
> > >
> > > 11
> > >
> > > USA
> > >
> > > 2012
> > >
> > > 0
> > >
> > > 12
> > >
> > > USA
> > >
> > > 2013
> > >
> > > 0
> > >
> > > 13
> > >
> > >
> > >
> > > Do you have any idea as how I can generate this? All suggestions are
> appreciated!
> > >
> > >
> > > I?ve tried to create it but failed. I only could generate positive
> counts using this code:
> > > require(data.table)
> > > setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > >
> > > My sample below:
> > > dput(data)
> > > structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > > 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > > 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > > 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > > 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > > 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > > 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > > 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > > 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > > 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > > 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958,
> > > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958,
> > > 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > > 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > > 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > > 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > > 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > > 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > > 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > > 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > > 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > > 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > > 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > > 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > > 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > > 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > > 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > > 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992,
> 12.82999992,
> > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > > 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > > 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > > 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > > 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > > 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> 7.46999979,
> > > 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > > 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > > 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > > 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > > 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > 0L)), .Names = c("country_code", "year", "y", "x"), class =
> "data.frame", row.names = c(NA,
> > > -722L))
> > >
> > >
> > >
> > >
> > > > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> > > >
> > > > Dear Faradj
> > > >
> > > > I am afraid your post is unreadable since this is a plain text list
> and you sent in HTML.
> > > >
> > > > Michael
> > > >
> > > > On 03/10/2019 12:17, Faradj Koliev wrote:
> > > >> Dear R-users,
> > > >> I need an urgent help with the following: I have a country-year
> data covering the period 1982 - 2013. I want to assess how the variable X
> (a certain policy) affects the Y variable. The X variable is =1 when a
> country introduces that policy in a specific year, otherwise =0.
> > > >> What I want to do is to create a treatment variable, that would be
> a negative count until the X=1, and then  positive counts  for the years
> after X=1.
> > > >> For example, let?s say that the U.S. introduced the policy x in
> year 2000. The treatment variable would look be like this:
> > > >>  country
> > > >> year
> > > >> x
> > > >> treatment
> > > >> USA
> > > >> 1982
> > > >> 0
> > > >> -18
> > > >> USA
> > > >> 1983
> > > >> 0
> > > >> -17
> > > >> USA
> > > >> 1984
> > > >> 0
> > > >> -16
> > > >> USA
> > > >> 1985
> > > >> 0
> > > >> -15
> > > >> USA
> > > >> 1986
> > > >> 0
> > > >> -14
> > > >> USA
> > > >> 1987
> > > >> 0
> > > >> -13
> > > >> USA
> > > >> 1988
> > > >> 0
> > > >> -12
> > > >> USA
> > > >> 1989
> > > >> 0
> > > >> -11
> > > >> USA
> > > >> 1990
> > > >> 0
> > > >> -10
> > > >> USA
> > > >> 1991
> > > >> 0
> > > >> -9
> > > >> USA
> > > >> 1992
> > > >> 0
> > > >> -8
> > > >> USA
> > > >> 1993
> > > >> 0
> > > >> -7
> > > >> USA
> > > >> 1994
> > > >> 0
> > > >> -6
> > > >> USA
> > > >> 1995
> > > >> 0
> > > >> -5
> > > >> USA
> > > >> 1996
> > > >> 0
> > > >> -4
> > > >> USA
> > > >> 1997
> > > >> 0
> > > >> -3
> > > >> USA
> > > >> 1998
> > > >> 0
> > > >> -2
> > > >> USA
> > > >> 1999
> > > >> 0
> > > >> -1
> > > >> USA
> > > >> 2000
> > > >> 1
> > > >> 0
> > > >> USA
> > > >> 2001
> > > >> 0
> > > >> 1
> > > >> USA
> > > >> 2002
> > > >> 0
> > > >> 2
> > > >> USA
> > > >> 2003
> > > >> 0
> > > >> 3
> > > >> USA
> > > >> 2004
> > > >> 0
> > > >> 4
> > > >> USA
> > > >> 2005
> > > >> 0
> > > >> 5
> > > >> USA
> > > >> 2006
> > > >> 0
> > > >> 6
> > > >> USA
> > > >> 2007
> > > >> 0
> > > >> 7
> > > >> USA
> > > >> 2008
> > > >> 0
> > > >> 8
> > > >> USA
> > > >> 2009
> > > >> 0
> > > >> 9
> > > >> USA
> > > >> 2010
> > > >> 0
> > > >> 10
> > > >> USA
> > > >> 2011
> > > >> 0
> > > >> 11
> > > >> USA
> > > >> 2012
> > > >> 0
> > > >> 12
> > > >> USA
> > > >> 2013
> > > >> 0
> > > >> 13
> > > >> Do you have any idea as how I can generate this? All suggestions
> are appreciated!
> > > >> I?ve tried to create it but failed. I only could generate positive
> counts using this code:
> > > >> require(data.table)
> > > >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > > >> My sample below:
> > > >> dput(data)
> > > >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > > >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > > >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > > >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > > >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > > >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > > >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > > >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > > >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > > >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > > >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958,
> > > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> 9.43999958,
> > > >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > > >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > > >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > > >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > > >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > > >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > > >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > > >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > > >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > > >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > > >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > > >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > > >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > > >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > > >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > > >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992,
> 12.82999992,
> > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> 8.31000042,
> > > >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > > >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > > >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > > >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > > >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> 7.46999979,
> > > >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > > >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > > >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > > >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > > >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > >> 0L)), .Names = c("country_code", "year", "y", "x"), class =
> "data.frame", row.names = c(NA,
> > > >> -722L))
> > > >>      [[alternative HTML version deleted]]
> > > >> ______________________________________________
> > > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > > >> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > > >> and provide commented, minimal, self-contained, reproducible code.
> > > >> ---
> > > >> This email has been checked for viruses by AVG.
> > > >> https://www.avg.com
> > > >> .
> > > >
> > > > --
> > > > Michael
> > > > http://www.dewey.myzen.co.uk/home.html
> > >
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > >
> >
>
>

	[[alternative HTML version deleted]]


From @|e@z|b @end|ng |rom gm@||@com  Thu Oct  3 09:35:21 2019
From: @|e@z|b @end|ng |rom gm@||@com (=?UTF-8?B?QWxlxaEgxb1pYmVybmE=?=)
Date: Thu, 3 Oct 2019 09:35:21 +0200
Subject: [R] stats::lm has inconsistent output when adding constant to
 dependent variable
In-Reply-To: <5b4fcb05-5669-fdd4-618a-0f6b2a9da573@sapo.pt>
References: <b4546e64-4105-fced-25f3-6103cfd3d7ee@berkeley.edu>
 <5b4fcb05-5669-fdd4-618a-0f6b2a9da573@sapo.pt>
Message-ID: <CAOB2iXyg6QUX_NYfsReM8tJCtWqkFmozCmnQnUczcQTMExm40A@mail.gmail.com>

In one case they are exactly 0 and in the other they are almost zero. This
is the reason for different results.

Of course, they should be exactly the same, but this is due to some integer
values not being exactly represented as real values on binary computers.

Best,
Ale? ?iberna

On Fri, Sep 27, 2019 at 9:01 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> Maybe FAQ 7.31?
>
> Check the residuals, they are all "zero" in both cases:
>
> fit0 <- lm(y~x)
> fit1 <- lm(1+y~x)
>
> # residuals
> table(resid(fit0))
> #
> # 0
> #30
>
> table(resid(fit1))
> #
> #-5.21223595241838e-16 -4.93038065763132e-31  3.12734157145103e-15
> #                    6                    23                     1
>
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 18:05 de 27/09/19, David J. Birke escreveu:
> > Dear R community,
> >
> > I just stumbled upon the following behavior in R version 3.6.0:
> >
> > set.seed(42)
> > y <- rep(0, 30)
> > x <- rbinom(30, 1, prob = 0.91)
> > # The following will not show any t-statistic or p-value
> > summary(lm(y~x))
> > #  The following will show t-statistic and p-value
> > summary(lm(1+y~x))
> >
> > My expected output is that the first case should report t-statistic and
> > p-value. My intuition might be tricking me, but I think that a constant
> > shift of the data should be fully absorbed by the constant and not
> > affect inference about the slope.
> >
> > Is this a bug or is there a reason why there should be a discrepancy
> > between the two outputs?
> >
> > Best,
> > David
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct  3 20:58:55 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Thu, 3 Oct 2019 13:58:55 -0500
Subject: [R] can not extract rows which match a string
Message-ID: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>

Hello,

I have a dataframe (t1) with many columns, but the one I care about it this:
> unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
[1] NA    "Yes"

it has these two values.

I would like to remove from my dataframe t1 all rows which have "Yes"
in t1$sex_chromosome_aneuploidy_f22019_0_0

I tried selecting those rows with "Yes" via:

t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]

but I got t11 which has the exact same number of rows as t1.

If I do:
> table(t1$sex_chromosome_aneuploidy_f22019_0_0)

Yes
620

So there is for sure 620 rows which have "Yes". How to remove those
from my t1 data frame?

Thanks
Ana


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct  3 21:17:20 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 3 Oct 2019 20:17:20 +0100
Subject: [R] can not extract rows which match a string
In-Reply-To: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
Message-ID: <23846a80-79d5-6a00-6140-ed8342be0320@sapo.pt>

Hello,

You have to use is.na to get the NA values.


t1 <- data.frame(sex_chromosome_aneuploidy_f22019_0_0 = c(NA, "Yes"),
                  other = 1:2)

i <- t1$sex_chromosome_aneuploidy_f22019_0_0 == "Yes" & 
!is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)
i
t1[i, ]


Hope this helps,

Rui Barradas

?s 19:58 de 03/10/19, Ana Marija escreveu:
> Hello,
> 
> I have a dataframe (t1) with many columns, but the one I care about it this:
>> unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
> [1] NA    "Yes"
> 
> it has these two values.
> 
> I would like to remove from my dataframe t1 all rows which have "Yes"
> in t1$sex_chromosome_aneuploidy_f22019_0_0
> 
> I tried selecting those rows with "Yes" via:
> 
> t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]
> 
> but I got t11 which has the exact same number of rows as t1.
> 
> If I do:
>> table(t1$sex_chromosome_aneuploidy_f22019_0_0)
> 
> Yes
> 620
> 
> So there is for sure 620 rows which have "Yes". How to remove those
> from my t1 data frame?
> 
> Thanks
> Ana
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From wjm1 @end|ng |rom c@@@co|umb|@@edu  Thu Oct  3 21:45:59 2019
From: wjm1 @end|ng |rom c@@@co|umb|@@edu (William Michels)
Date: Thu, 3 Oct 2019 12:45:59 -0700
Subject: [R] can not extract rows which match a string
In-Reply-To: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
Message-ID: <CAA99HCw6izKAdzBJYVjUJm3EUtkEaeegVS-pUK4Qcd=6egPwmg@mail.gmail.com>

Hello,

I expected the code you posted to work just as you presumed it would,
but without a reproducible example--I can only speculate as to why it
didn't.

In the t1 dataframe, if indeed you only want to remove rows of the
t1$sex_chromosome_aneuploidy_f22019_0_0 column which are undefined,
you could try the following:

> t11 <- t1[ !is.na(t1$sex_chromosome_aneuploidy_f22019_0_0), ]

HTH, Bill.

W. Michels, Ph.D.



On Thu, Oct 3, 2019 at 11:59 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hello,
>
> I have a dataframe (t1) with many columns, but the one I care about it this:
> > unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
> [1] NA    "Yes"
>
> it has these two values.
>
> I would like to remove from my dataframe t1 all rows which have "Yes"
> in t1$sex_chromosome_aneuploidy_f22019_0_0
>
> I tried selecting those rows with "Yes" via:
>
> t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]
>
> but I got t11 which has the exact same number of rows as t1.
>
> If I do:
> > table(t1$sex_chromosome_aneuploidy_f22019_0_0)
>
> Yes
> 620
>
> So there is for sure 620 rows which have "Yes". How to remove those
> from my t1 data frame?
>
> Thanks
> Ana
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct  3 22:21:52 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 3 Oct 2019 21:21:52 +0100
Subject: [R] can not extract rows which match a string
In-Reply-To: <CAF9-5jNq1qyphFS0Xb8uZdKCjJa6q1ttMK1z+1f9VxnB8CcQrg@mail.gmail.com>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
 <23846a80-79d5-6a00-6140-ed8342be0320@sapo.pt>
 <CAF9-5jNq1qyphFS0Xb8uZdKCjJa6q1ttMK1z+1f9VxnB8CcQrg@mail.gmail.com>
Message-ID: <4f9933d4-088e-3cc3-235f-91faa1669b72@sapo.pt>

Hello,

Then it's easier, is.na alone will do it.

j <- is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)
t1[j, ]


Hope this helps,

Rui Barradas


?s 20:29 de 03/10/19, Ana Marija escreveu:
> Hi Rui,
> 
> sorry for confusion, I would only need to extract from my t1 dataframe
> rows which have NA in sex_chromosome_aneuploidy_f22019_0_0
> in other words to REMOVE rows with "Yes" and to keep rows with NA. How
> to do that?
> 
> On Thu, Oct 3, 2019 at 2:26 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>
>> Hello,
>>
>> You have to use is.na to get the NA values.
>>
>>
>> t1 <- data.frame(sex_chromosome_aneuploidy_f22019_0_0 = c(NA, "Yes"),
>>                    other = 1:2)
>>
>> i <- t1$sex_chromosome_aneuploidy_f22019_0_0 == "Yes" &
>> !is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)
>> i
>> t1[i, ]
>>
>>
>> Hope this helps,
>>
>> Rui Barradas
>>
>> ?s 19:58 de 03/10/19, Ana Marija escreveu:
>>> Hello,
>>>
>>> I have a dataframe (t1) with many columns, but the one I care about it this:
>>>> unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
>>> [1] NA    "Yes"
>>>
>>> it has these two values.
>>>
>>> I would like to remove from my dataframe t1 all rows which have "Yes"
>>> in t1$sex_chromosome_aneuploidy_f22019_0_0
>>>
>>> I tried selecting those rows with "Yes" via:
>>>
>>> t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]
>>>
>>> but I got t11 which has the exact same number of rows as t1.
>>>
>>> If I do:
>>>> table(t1$sex_chromosome_aneuploidy_f22019_0_0)
>>>
>>> Yes
>>> 620
>>>
>>> So there is for sure 620 rows which have "Yes". How to remove those
>>> from my t1 data frame?
>>>
>>> Thanks
>>> Ana
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct  3 22:27:43 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 3 Oct 2019 21:27:43 +0100
Subject: [R] can not extract rows which match a string
In-Reply-To: <4f9933d4-088e-3cc3-235f-91faa1669b72@sapo.pt>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
 <23846a80-79d5-6a00-6140-ed8342be0320@sapo.pt>
 <CAF9-5jNq1qyphFS0Xb8uZdKCjJa6q1ttMK1z+1f9VxnB8CcQrg@mail.gmail.com>
 <4f9933d4-088e-3cc3-235f-91faa1669b72@sapo.pt>
Message-ID: <e746347c-8b7f-fded-a761-1ee1ad21d4f4@sapo.pt>

Hello again,

Sometimes it's better to create indices for each condition and then 
assemble them with logical operations as needed.


i <- t1$sex_chromosome_aneuploidy_f22019_0_0 == "Yes"
j <- is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)

t1[!i & j, ]


j means is.na(.)
!i means (.) != "Yes"


Hope this helps,

Rui Barradas

?s 21:21 de 03/10/19, Rui Barradas escreveu:
> Hello,
> 
> Then it's easier, is.na alone will do it.
> 
> j <- is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)
> t1[j, ]
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
> 
> ?s 20:29 de 03/10/19, Ana Marija escreveu:
>> Hi Rui,
>>
>> sorry for confusion, I would only need to extract from my t1 dataframe
>> rows which have NA in sex_chromosome_aneuploidy_f22019_0_0
>> in other words to REMOVE rows with "Yes" and to keep rows with NA. How
>> to do that?
>>
>> On Thu, Oct 3, 2019 at 2:26 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>>
>>> Hello,
>>>
>>> You have to use is.na to get the NA values.
>>>
>>>
>>> t1 <- data.frame(sex_chromosome_aneuploidy_f22019_0_0 = c(NA, "Yes"),
>>> ?????????????????? other = 1:2)
>>>
>>> i <- t1$sex_chromosome_aneuploidy_f22019_0_0 == "Yes" &
>>> !is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)
>>> i
>>> t1[i, ]
>>>
>>>
>>> Hope this helps,
>>>
>>> Rui Barradas
>>>
>>> ?s 19:58 de 03/10/19, Ana Marija escreveu:
>>>> Hello,
>>>>
>>>> I have a dataframe (t1) with many columns, but the one I care about 
>>>> it this:
>>>>> unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
>>>> [1] NA??? "Yes"
>>>>
>>>> it has these two values.
>>>>
>>>> I would like to remove from my dataframe t1 all rows which have "Yes"
>>>> in t1$sex_chromosome_aneuploidy_f22019_0_0
>>>>
>>>> I tried selecting those rows with "Yes" via:
>>>>
>>>> t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]
>>>>
>>>> but I got t11 which has the exact same number of rows as t1.
>>>>
>>>> If I do:
>>>>> table(t1$sex_chromosome_aneuploidy_f22019_0_0)
>>>>
>>>> Yes
>>>> 620
>>>>
>>>> So there is for sure 620 rows which have "Yes". How to remove those
>>>> from my t1 data frame?
>>>>
>>>> Thanks
>>>> Ana
>>>>
>>>> ______________________________________________
>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>> PLEASE do read the posting guide 
>>>> http://www.R-project.org/posting-guide.html
>>>> and provide commented, minimal, self-contained, reproducible code.
>>>>
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide 
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From hp@ge@ @end|ng |rom |redhutch@org  Thu Oct  3 23:32:43 2019
From: hp@ge@ @end|ng |rom |redhutch@org (Pages, Herve)
Date: Thu, 3 Oct 2019 21:32:43 +0000
Subject: [R] can not extract rows which match a string
In-Reply-To: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
Message-ID: <1e9e3dff-fec9-10a1-724c-22b8dda61e8b@fredhutch.org>

Hi,

On 10/3/19 11:58, Ana Marija wrote:
> Hello,
> 
> I have a dataframe (t1) with many columns, but the one I care about it this:
>> unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
> [1] NA    "Yes"
> 
> it has these two values.
> 
> I would like to remove from my dataframe t1 all rows which have "Yes"
> in t1$sex_chromosome_aneuploidy_f22019_0_0
> 
> I tried selecting those rows with "Yes" via:
> 
> t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]

It's important that you realize that instead of removing rows with "Yes" 
this actually keeps them.

> 
> but I got t11 which has the exact same number of rows as t1.

which should not be outrageously unexpected. After all it's not entirely 
impossible that when you selected the rows with "Yes" you selected them all.

> 
> If I do:
>> table(t1$sex_chromosome_aneuploidy_f22019_0_0)
> 
> Yes
> 620
> 
> So there is for sure 620 rows which have "Yes".

This **seems** to indicate that all the rows contain "Yes". And this 
would explain why when you selected the rows with "Yes" you selected 
them all.

> How to remove those
> from my t1 data frame?

Unfortunately, this is a situation where we cannot trust the appearances.

Appearances: it **looks** like all the rows contain "Yes" and this seems 
to be confirmed by the fact that selecting the rows with "Yes" didn't 
drop any rows.

The truth: the truth is that there are some rows that don't contain 
"Yes". However by default table() doesn't report counts for NAs so you 
need to explicitly ask for that:

 > table(t1$sex_chromosome_aneuploidy_f22019_0_0, useNA="always")

  Yes <NA>
  620  111

So now you know how many rows to expect after removing those with "Yes". 
Another complication is that the == operator propagates NAs so it tends 
to return a subscript that is not safe to use for subsetting because 
it's contaminated with NAs.

Other people have suggested that you use 
is.na(t1$sex_chromosome_aneuploidy_f22019_0_0) or other more complicated 
things (like t1$sex_chromosome_aneuploidy_f22019_0_0 != "Yes" & 
is.na(t1$sex_chromosome_aneuploidy_f22019_0_0)) to work around this. 
However the simplest and safest way to translate "compute the index of 
the rows that match string 'babar'" into R code is with:

   t1$sex_chromosome_aneuploidy_f22019_0_0 %in% "babar"

Another advantage of using %in% is that you can have more than one 
string on the right. For example

   t1$sex_chromosome_aneuploidy_f22019_0_0 %in% c("babar", "foo")

will produce an index that can be used to select the rows that match 
"babar" or "foo". To remove these rows, use


   !(t1$sex_chromosome_aneuploidy_f22019_0_0 %in% c("babar", "foo"))

instead (parenthesis around the %in% operation highly recommended for 
readability).

The bottom line is that %in% is almost always better than == for 
computing a subscript because it doesn't propagate NAs.

Hope this helps,
H.

> 
> Thanks
> Ana
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=-q949hHmNa2Zy6QlxHGK0kwN06YpOLpQaCPLdbT448o&s=hnmydGYEu22xzrlJku0qKP-I0n-HY-PrhTEttCmyC0g&e=
> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwICAg&c=eRAMFD45gAfqt84VtBcfhQ&r=BK7q3XeAvimeWdGbWY_wJYbW0WYiZvSXAJJKaaPhzWA&m=-q949hHmNa2Zy6QlxHGK0kwN06YpOLpQaCPLdbT448o&s=m_46Zit63H4OkJrgOFPzWqqdpgHNvW8B5jC0Rw9O1h4&e=
> and provide commented, minimal, self-contained, reproducible code.
> 

-- 
Herv? Pag?s

Program in Computational Biology
Division of Public Health Sciences
Fred Hutchinson Cancer Research Center
1100 Fairview Ave. N, M1-B514
P.O. Box 19024
Seattle, WA 98109-1024

E-mail: hpages at fredhutch.org
Phone:  (206) 667-5791
Fax:    (206) 667-1319

From r@oknz @end|ng |rom gm@||@com  Fri Oct  4 00:20:51 2019
From: r@oknz @end|ng |rom gm@||@com (Richard O'Keefe)
Date: Fri, 4 Oct 2019 11:20:51 +1300
Subject: [R] Creating a before-and-after variable in R
In-Reply-To: <89533356-EC4C-4D8D-9BF0-BE31BC1DF468@gmail.com>
References: <D1A53AEE-C8DB-4406-88F3-1661084C93A0@gmail.com>
 <1af26f93-ed3c-3852-7220-6600edd58e3a@dewey.myzen.co.uk>
 <D5B782E3-51B6-4178-9B1E-89F5C3F42479@gmail.com>
 <CAGgJW76QHVa23tY-LfrnXSJhQ71GR2Yfp4uWQ2LUN9szOsXowA@mail.gmail.com>
 <3B363704-CD2C-4404-8760-05097A3BE4E8@gmail.com>
 <CAGgJW76U4LTySTct68i9dPgZkwn3TY5jLPQPSbw5p076Y0JRgA@mail.gmail.com>
 <82402127-335C-419D-9652-7D5BDF8DC299@gmail.com>
 <CAGgJW74tUTghhmJ0--m4BeeaGqocRuyTFqb_9EJ73GnTzs_9Jw@mail.gmail.com>
 <89533356-EC4C-4D8D-9BF0-BE31BC1DF468@gmail.com>
Message-ID: <CABcYAdLEDTjMz=9sSVBwm7Pb-rCP9YN9s8c3pbdQzJBxhObRhg@mail.gmail.com>

Can we do this very simply?
My understanding is that you have a column where all the elements are
zero except for perhaps a single one.
Consider an example 0 0 1 0 0 where you want -2 -1 0 1 2.  This is 1 2
3 4 5 - 3.
> v <- c(0,0,1,0,0)
> w <- which(v == 1)
> a <- seq(along=v) - if (length(w) == 0) 0 else w[1]
> a
[1] -2 -1  0  1  2

I may have misunderstood and you may want -2 -1 1 2 3.  If so, just
> a <- a + (a >= 0)
will do the trick.


On Fri, 4 Oct 2019 at 03:46, Faradj Koliev <faradj.g at gmail.com> wrote:
>
> Thank you very much for your help!
>
> All the best,
> Faradj
>
> > 3 okt. 2019 kl. 16:37 skrev Eric Berger <ericjberger at gmail.com>:
> >
> > You can replace the last line in my first suggestion by the following two lines
> >
> > d <- 2014  # the default (set by the user)
> > a$treatment <- sapply( 1:nrow(a), function(i) { b <- v[a$country_code[i]]; a$year[i] - ifelse(is.na(b),d,b)})
> >
> > Best,
> > Eric
> >
> >
> >
> >
> >
> > On Thu, Oct 3, 2019 at 5:19 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > Hi,
> >
> > I was thinking that it could simply show the negative counts. For ex: if a country hasn?t introduced the policy X, and it's in the dataset from 1982 to 2014, then the treatment variable would take a value -33 in 1982 and -1 in 2014.
> >
> > Best,
> > Faradj
> >
> >
> > > 3 okt. 2019 kl. 16:11 skrev Eric Berger <ericjberger at gmail.com>:
> > >
> > > Hi Faradj,
> > > What should the treatment variable be in those cases? If you want to set it to a constant y (such as y=0), you can add something like
> > >
> > > y <- 0
> > > a$treatment[ is.na(a$treatment) ] <- y
> > >
> > > HTH,
> > > Eric
> > >
> > >
> > > On Thu, Oct 3, 2019 at 4:54 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > > Dear Eric,
> > >
> > > Thank you very much for this - it worked perfectly!
> > >
> > > A small thing: I wonder whether it?s possible to include those cases where the x is =0 for the whole study period. I have countries with x=0 for the whole period and the treatment variable is=NA for these observations.
> > >
> > > Best,
> > > Faradj
> > >
> > >
> > > > 3 okt. 2019 kl. 15:18 skrev Eric Berger <ericjberger at gmail.com>:
> > > >
> > > > Hi Faradj,
> > > > Suppose your data frame is labeled 'a'. Then the following seems to do what you want.
> > > >
> > > > v <- rep(NA_integer_,max(a$country_code))
> > > > v[ a$country_code[a$x==1] ] <- a$year[a$x==1]
> > > > a$treatment <- sapply( 1:nrow(a), function(i) { a$year[i] - v[a$country_code[i]]})
> > > >
> > > > HTH,
> > > > Eric
> > > >
> > > >
> > > > On Thu, Oct 3, 2019 at 3:36 PM Faradj Koliev <faradj.g at gmail.com> wrote:
> > > > Dear Michael Dewey,
> > > >
> > > > Thanks for reaching out about this. I trying again, now with plain text, and hope it works.
> > > >
> > > > Best,
> > > > Faradj
> > > >
> > > >
> > > >
> > > > Dear R-users,
> > > >
> > > > I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
> > > >
> > > > What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
> > > >
> > > > For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
> > > >
> > > > country
> > > >
> > > > year
> > > >
> > > > x
> > > >
> > > > treatment
> > > >
> > > > USA
> > > >
> > > > 1982
> > > >
> > > > 0
> > > >
> > > > -18
> > > >
> > > > USA
> > > >
> > > > 1983
> > > >
> > > > 0
> > > >
> > > > -17
> > > >
> > > > USA
> > > >
> > > > 1984
> > > >
> > > > 0
> > > >
> > > > -16
> > > >
> > > > USA
> > > >
> > > > 1985
> > > >
> > > > 0
> > > >
> > > > -15
> > > >
> > > > USA
> > > >
> > > > 1986
> > > >
> > > > 0
> > > >
> > > > -14
> > > >
> > > > USA
> > > >
> > > > 1987
> > > >
> > > > 0
> > > >
> > > > -13
> > > >
> > > > USA
> > > >
> > > > 1988
> > > >
> > > > 0
> > > >
> > > > -12
> > > >
> > > > USA
> > > >
> > > > 1989
> > > >
> > > > 0
> > > >
> > > > -11
> > > >
> > > > USA
> > > >
> > > > 1990
> > > >
> > > > 0
> > > >
> > > > -10
> > > >
> > > > USA
> > > >
> > > > 1991
> > > >
> > > > 0
> > > >
> > > > -9
> > > >
> > > > USA
> > > >
> > > > 1992
> > > >
> > > > 0
> > > >
> > > > -8
> > > >
> > > > USA
> > > >
> > > > 1993
> > > >
> > > > 0
> > > >
> > > > -7
> > > >
> > > > USA
> > > >
> > > > 1994
> > > >
> > > > 0
> > > >
> > > > -6
> > > >
> > > > USA
> > > >
> > > > 1995
> > > >
> > > > 0
> > > >
> > > > -5
> > > >
> > > > USA
> > > >
> > > > 1996
> > > >
> > > > 0
> > > >
> > > > -4
> > > >
> > > > USA
> > > >
> > > > 1997
> > > >
> > > > 0
> > > >
> > > > -3
> > > >
> > > > USA
> > > >
> > > > 1998
> > > >
> > > > 0
> > > >
> > > > -2
> > > >
> > > > USA
> > > >
> > > > 1999
> > > >
> > > > 0
> > > >
> > > > -1
> > > >
> > > > USA
> > > >
> > > > 2000
> > > >
> > > > 1
> > > >
> > > > 0
> > > >
> > > > USA
> > > >
> > > > 2001
> > > >
> > > > 0
> > > >
> > > > 1
> > > >
> > > > USA
> > > >
> > > > 2002
> > > >
> > > > 0
> > > >
> > > > 2
> > > >
> > > > USA
> > > >
> > > > 2003
> > > >
> > > > 0
> > > >
> > > > 3
> > > >
> > > > USA
> > > >
> > > > 2004
> > > >
> > > > 0
> > > >
> > > > 4
> > > >
> > > > USA
> > > >
> > > > 2005
> > > >
> > > > 0
> > > >
> > > > 5
> > > >
> > > > USA
> > > >
> > > > 2006
> > > >
> > > > 0
> > > >
> > > > 6
> > > >
> > > > USA
> > > >
> > > > 2007
> > > >
> > > > 0
> > > >
> > > > 7
> > > >
> > > > USA
> > > >
> > > > 2008
> > > >
> > > > 0
> > > >
> > > > 8
> > > >
> > > > USA
> > > >
> > > > 2009
> > > >
> > > > 0
> > > >
> > > > 9
> > > >
> > > > USA
> > > >
> > > > 2010
> > > >
> > > > 0
> > > >
> > > > 10
> > > >
> > > > USA
> > > >
> > > > 2011
> > > >
> > > > 0
> > > >
> > > > 11
> > > >
> > > > USA
> > > >
> > > > 2012
> > > >
> > > > 0
> > > >
> > > > 12
> > > >
> > > > USA
> > > >
> > > > 2013
> > > >
> > > > 0
> > > >
> > > > 13
> > > >
> > > >
> > > >
> > > > Do you have any idea as how I can generate this? All suggestions are appreciated!
> > > >
> > > >
> > > > I?ve tried to create it but failed. I only could generate positive counts using this code:
> > > > require(data.table)
> > > > setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > > >
> > > > My sample below:
> > > > dput(data)
> > > > structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > > > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > > 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > > 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > > 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > > 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > > 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > > 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > > 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > > 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > > 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > > 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > > 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > > 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > > 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > > 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > > > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > > > 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > > 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > > 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > > > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > > > 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > > 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > > > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > > > 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > > 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > > > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > > > 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > > > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > > 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > > 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > > > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > > 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > > 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > > 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > > 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > > 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > > 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > > 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > > 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > > 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > > 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > > 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > > 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > > 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > > > 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > > 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > > 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > > 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > > 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > > 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > > 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > > 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > > 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > > 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > > 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > > 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > > 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > > 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > > 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > > 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > > 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > > 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > > 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > > 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > > 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > > 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > > 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > > 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > > 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > > > 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > > 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > > 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > > 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > > 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > > 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > > 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > > 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > > 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > > 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > > > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > > 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > > 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > > > 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > > > 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > > 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > > 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > > 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > > > 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > > > 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > > > 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > > > 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > > > 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > > 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > > 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > > > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > > > 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > > > 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > > > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > > 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > > 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > > > 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > > > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > > > 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > > > 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > > 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > > 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > > > 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > > > 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > > > 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > > > 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > > > 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > > > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > > > 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > > > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > > 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > > 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > > > 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > > > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > > > 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > > > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > > 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > > > 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > > > 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > > > 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > > > 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > > > 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > > > 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > > > 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > > > 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > > > 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > > > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > > 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > > 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> > > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > > 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > > 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > > 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > > > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > > > 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > > > 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > > > 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > > > 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > > > 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > > > 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> > > > 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > > > 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > > > 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > > > 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > > > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > > 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > > 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > > > 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
> > > > -722L))
> > > >
> > > >
> > > >
> > > >
> > > > > 3 okt. 2019 kl. 14:24 skrev Michael Dewey <lists at dewey.myzen.co.uk>:
> > > > >
> > > > > Dear Faradj
> > > > >
> > > > > I am afraid your post is unreadable since this is a plain text list and you sent in HTML.
> > > > >
> > > > > Michael
> > > > >
> > > > > On 03/10/2019 12:17, Faradj Koliev wrote:
> > > > >> Dear R-users,
> > > > >> I need an urgent help with the following: I have a country-year data covering the period 1982 - 2013. I want to assess how the variable X (a certain policy) affects the Y variable. The X variable is =1 when a country introduces that policy in a specific year, otherwise =0.
> > > > >> What I want to do is to create a treatment variable, that would be a negative count until the X=1, and then  positive counts  for the years after X=1.
> > > > >> For example, let?s say that the U.S. introduced the policy x in year 2000. The treatment variable would look be like this:
> > > > >>  country
> > > > >> year
> > > > >> x
> > > > >> treatment
> > > > >> USA
> > > > >> 1982
> > > > >> 0
> > > > >> -18
> > > > >> USA
> > > > >> 1983
> > > > >> 0
> > > > >> -17
> > > > >> USA
> > > > >> 1984
> > > > >> 0
> > > > >> -16
> > > > >> USA
> > > > >> 1985
> > > > >> 0
> > > > >> -15
> > > > >> USA
> > > > >> 1986
> > > > >> 0
> > > > >> -14
> > > > >> USA
> > > > >> 1987
> > > > >> 0
> > > > >> -13
> > > > >> USA
> > > > >> 1988
> > > > >> 0
> > > > >> -12
> > > > >> USA
> > > > >> 1989
> > > > >> 0
> > > > >> -11
> > > > >> USA
> > > > >> 1990
> > > > >> 0
> > > > >> -10
> > > > >> USA
> > > > >> 1991
> > > > >> 0
> > > > >> -9
> > > > >> USA
> > > > >> 1992
> > > > >> 0
> > > > >> -8
> > > > >> USA
> > > > >> 1993
> > > > >> 0
> > > > >> -7
> > > > >> USA
> > > > >> 1994
> > > > >> 0
> > > > >> -6
> > > > >> USA
> > > > >> 1995
> > > > >> 0
> > > > >> -5
> > > > >> USA
> > > > >> 1996
> > > > >> 0
> > > > >> -4
> > > > >> USA
> > > > >> 1997
> > > > >> 0
> > > > >> -3
> > > > >> USA
> > > > >> 1998
> > > > >> 0
> > > > >> -2
> > > > >> USA
> > > > >> 1999
> > > > >> 0
> > > > >> -1
> > > > >> USA
> > > > >> 2000
> > > > >> 1
> > > > >> 0
> > > > >> USA
> > > > >> 2001
> > > > >> 0
> > > > >> 1
> > > > >> USA
> > > > >> 2002
> > > > >> 0
> > > > >> 2
> > > > >> USA
> > > > >> 2003
> > > > >> 0
> > > > >> 3
> > > > >> USA
> > > > >> 2004
> > > > >> 0
> > > > >> 4
> > > > >> USA
> > > > >> 2005
> > > > >> 0
> > > > >> 5
> > > > >> USA
> > > > >> 2006
> > > > >> 0
> > > > >> 6
> > > > >> USA
> > > > >> 2007
> > > > >> 0
> > > > >> 7
> > > > >> USA
> > > > >> 2008
> > > > >> 0
> > > > >> 8
> > > > >> USA
> > > > >> 2009
> > > > >> 0
> > > > >> 9
> > > > >> USA
> > > > >> 2010
> > > > >> 0
> > > > >> 10
> > > > >> USA
> > > > >> 2011
> > > > >> 0
> > > > >> 11
> > > > >> USA
> > > > >> 2012
> > > > >> 0
> > > > >> 12
> > > > >> USA
> > > > >> 2013
> > > > >> 0
> > > > >> 13
> > > > >> Do you have any idea as how I can generate this? All suggestions are appreciated!
> > > > >> I?ve tried to create it but failed. I only could generate positive counts using this code:
> > > > >> require(data.table)
> > > > >> setDT(data)[,treatment := seq.int(0,.N-1L), by = cumsum(x)-x]
> > > > >> My sample below:
> > > > >> dput(data)
> > > > >> structure(list(country_code = c(900L, 900L, 900L, 900L, 900L,
> > > > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > > >> 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L, 900L,
> > > > >> 900L, 900L, 900L, 900L, 900L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > > >> 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L, 305L,
> > > > >> 305L, 305L, 305L, 305L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > > >> 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L, 140L,
> > > > >> 140L, 140L, 140L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > > >> 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L, 471L,
> > > > >> 471L, 471L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > > >> 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L, 352L,
> > > > >> 352L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > > >> 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L, 490L,
> > > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L,
> > > > >> 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 375L, 220L,
> > > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L,
> > > > >> 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 220L, 481L, 481L,
> > > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L,
> > > > >> 481L, 481L, 481L, 481L, 481L, 481L, 481L, 481L, 367L, 367L, 367L,
> > > > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L,
> > > > >> 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 367L, 570L, 570L,
> > > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L,
> > > > >> 570L, 570L, 570L, 570L, 570L, 570L, 570L, 570L, 212L, 212L, 212L,
> > > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L, 212L,
> > > > >> 212L, 212L, 212L, 212L, 212L, 212L, 212L, 359L, 359L, 359L, 359L,
> > > > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L,
> > > > >> 359L, 359L, 359L, 359L, 359L, 359L, 359L, 359L, 600L, 600L, 600L,
> > > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L, 600L,
> > > > >> 600L, 600L, 600L, 600L, 600L, 600L, 600L, 565L, 565L, 565L, 565L,
> > > > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L,
> > > > >> 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 565L, 235L, 235L,
> > > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L,
> > > > >> 235L, 235L, 235L, 235L, 235L, 235L, 235L, 235L, 317L, 317L, 317L,
> > > > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L, 317L,
> > > > >> 317L, 317L, 317L, 317L, 317L, 317L, 317L, 230L, 230L, 230L, 230L,
> > > > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > > >> 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L, 230L,
> > > > >> 230L, 230L, 230L, 230L, 230L, 230L, 380L, 380L, 380L, 380L, 380L,
> > > > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > > >> 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L, 380L,
> > > > >> 380L, 380L, 380L, 380L, 380L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > > >> 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L, 640L,
> > > > >> 640L, 640L, 640L, 640L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > > >> 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L, 500L,
> > > > >> 500L, 500L, 500L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > > >> 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L, 369L,
> > > > >> 369L, 369L, 369L, 369L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > > >> 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L, 101L,
> > > > >> 101L, 101L, 101L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > > >> 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L, 551L,
> > > > >> 551L, 551L), year = c(1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > > >> 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L,
> > > > >> 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > > >> 2011L, 2012L, 2013L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L,
> > > > >> 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L,
> > > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > > >> 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L,
> > > > >> 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L,
> > > > >> 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L,
> > > > >> 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L,
> > > > >> 2013L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > > >> 2011L, 2012L, 2013L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L,
> > > > >> 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L,
> > > > >> 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L,
> > > > >> 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L,
> > > > >> 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L,
> > > > >> 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L,
> > > > >> 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L,
> > > > >> 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L,
> > > > >> 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L,
> > > > >> 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1982L, 1983L,
> > > > >> 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L, 1991L, 1992L,
> > > > >> 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L, 2001L,
> > > > >> 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L, 2010L,
> > > > >> 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L, 1987L,
> > > > >> 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L, 1996L,
> > > > >> 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L, 2005L,
> > > > >> 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L, 1991L,
> > > > >> 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L, 2000L,
> > > > >> 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L, 2009L,
> > > > >> 2010L, 2011L, 2012L, 2013L, 1982L, 1983L, 1984L, 1985L, 1986L,
> > > > >> 1987L, 1988L, 1989L, 1990L, 1991L, 1992L, 1993L, 1994L, 1995L,
> > > > >> 1996L, 1997L, 1998L, 1999L, 2000L, 2001L, 2002L, 2003L, 2004L,
> > > > >> 2005L, 2006L, 2007L, 2008L, 2009L, 2010L, 2011L, 2012L, 2013L,
> > > > >> 1982L, 1983L, 1984L, 1985L, 1986L, 1987L, 1988L, 1989L, 1990L,
> > > > >> 1991L, 1992L, 1993L, 1994L, 1995L, 1996L, 1997L, 1998L, 1999L,
> > > > >> 2000L, 2001L, 2002L, 2003L, 2004L, 2005L, 2006L, 2007L, 2008L,
> > > > >> 2009L, 2010L, 2011L, 2012L, 2013L), y = c(5.079999924, 5.079999924,
> > > > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > > >> 5.829999924, 5.829999924, 5.829999924, 5.829999924, 5.829999924,
> > > > >> 9.170000076, 9.170000076, 8.159999847, 8.159999847, 8.159999847,
> > > > >> 8.159999847, 8.159999847, 8.079999924, 8.079999924, 8.079999924,
> > > > >> 8.079999924, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > > >> 7.989999771, 7.989999771, 7.989999771, 7.989999771, 7.989999771,
> > > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > >> 9.170000076, 9.170000076, 9.170000076, 9.170000076, 9.170000076,
> > > > >> 9.170000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > > >> 9.670000076, 9.670000076, 9.670000076, 9.670000076, 9.670000076,
> > > > >> 9.670000076, 9.670000076, 7.329999924, 7.329999924, 7.329999924,
> > > > >> 7.329999924, 7.329999924, 7.329999924, 4, 4, 4, 4, 4, 4, 4, 4,
> > > > >> 4, 4, 3.670000076, 3.670000076, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
> > > > >> 4, 4.090000153, 4.090000153, 4.090000153, 6.489999771, 6.489999771,
> > > > >> 6.489999771, 6.489999771, 6.489999771, 6.489999771, 6.489999771,
> > > > >> 6.489999771, 6.489999771, 6.489999771, 6.739999771, 7.610000134,
> > > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > >> 7.610000134, 7.610000134, 7.610000134, 7.610000134, 7.610000134,
> > > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > >> 8.329999924, 8.329999924, 8.329999924, 8.329999924, 8.329999924,
> > > > >> 8.329999924, 8.329999924, 7.869999886, 7.869999886, 7.869999886,
> > > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > > >> 7.869999886, 7.869999886, 7.869999886, 7.869999886, 7.869999886,
> > > > >> 7.869999886, 7.869999886, 13.42000008, 13.42000008, 13.42000008,
> > > > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 13.42000008,
> > > > >> 13.42000008, 13.42000008, 13.42000008, 13.42000008, 8, 8, 11,
> > > > >> 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
> > > > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > > >> 8.670000076, 8.670000076, 8.670000076, 8.670000076, 8.670000076,
> > > > >> 8.670000076, 8.670000076, 8.670000076, 9.770000458, 9.770000458,
> > > > >> 9.770000458, 9.770000458, 9.43999958, 9.43999958, 9.43999958,
> > > > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > > > >> 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958, 9.43999958,
> > > > >> 9.43999958, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > > >> 9.539999962, 9.539999962, 9.539999962, 9.539999962, 9.539999962,
> > > > >> 9.539999962, 9.539999962, 9.539999962, 7.159999847, 7.159999847,
> > > > >> 7.159999847, 7.159999847, 7.489999771, 7.489999771, 7.489999771,
> > > > >> 7.489999771, 7.489999771, 7.489999771, 7.489999771, 7.489999771,
> > > > >> 7.489999771, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > >> 8.699999809, 8.699999809, 8.699999809, 8.699999809, 8.699999809,
> > > > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > >> 13.92000008, 13.92000008, 13.92000008, 6.829999924, 6.829999924,
> > > > >> 6.829999924, 6.829999924, 6.829999924, 6.829999924, 6.829999924,
> > > > >> 6.829999924, 6.829999924, 6.829999924, 11.06000042, 11.06000042,
> > > > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.06000042,
> > > > >> 11.06000042, 11.06000042, 11.06000042, 11.06000042, 11.72999954,
> > > > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > > >> 11.72999954, 11.72999954, 11.72999954, 11.72999954, 11.72999954,
> > > > >> 4.989999771, 4.989999771, 4.989999771, 4.989999771, 4.989999771,
> > > > >> 4.989999771, 4.989999771, 11.17000008, 11.17000008, 11.17000008,
> > > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > >> 11.17000008, 11.17000008, 11.17000008, 11.17000008, 11.17000008,
> > > > >> 11.17000008, 11.17000008, 14.02000046, 14.02000046, 14.02000046,
> > > > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 14.02000046,
> > > > >> 14.02000046, 14.02000046, 14.02000046, 14.02000046, 6.920000076,
> > > > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > > >> 6.920000076, 6.920000076, 6.920000076, 6.920000076, 6.920000076,
> > > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > >> 8.010000229, 8.010000229, 8.010000229, 8.010000229, 8.010000229,
> > > > >> 8.010000229, 10.96000004, 11.19999981, 11.19999981, 11.19999981,
> > > > >> 11.19999981, 11.19999981, 11.19999981, 11.19999981, 11.19999981,
> > > > >> 11.19999981, 11.19999981, 2.170000076, 2.170000076, 13.57999992,
> > > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > >> 13.57999992, 13.57999992, 13.57999992, 13.57999992, 13.57999992,
> > > > >> 13.57999992, 8.619999886, 8.619999886, 8.619999886, 8.619999886,
> > > > >> 8.619999886, 8.619999886, 8.619999886, 14.60999966, 14.60999966,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 12.42000008, 12.42000008, 12.42000008,
> > > > >> 12.42000008, 12.42000008, 12.42000008, 11.92000008, 11.92000008,
> > > > >> 11.92000008, 11.59000015, 11.31999969, 14.26000023, 14.26000023,
> > > > >> 14.26000023, 14.26000023, 14.26000023, 14.26000023, 14.26000023,
> > > > >> 14.26000023, 13.93000031, 13.93000031, 13.93000031, 13.93000031,
> > > > >> 13.93000031, 13.93000031, 14.60000038, 14.60000038, 14.60000038,
> > > > >> 14.60000038, 13.5, 13.5, 14.26000023, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 14.59000015, 14.59000015, 14.59000015, 14.59000015,
> > > > >> 14.59000015, 12.43000031, 12.43000031, 12.43000031, 12.43000031,
> > > > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > > >> 13.15999985, 13.15999985, 13.15999985, 13.15999985, 13.15999985,
> > > > >> 13.15999985, 13, 13, 13.15999985, 13.15999985, 12.82999992, 12.82999992,
> > > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > > >> 12.82999992, 12.82999992, 12.82999992, 12.82999992, 12.82999992,
> > > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > > >> 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042, 8.31000042,
> > > > >> 8.31000042, 8.31000042, 8.31000042, 12.11999989, 12.11999989,
> > > > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 12.11999989,
> > > > >> 12.11999989, 12.11999989, 12.11999989, 12.11999989, 2.170000076,
> > > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > >> 2.170000076, 2.170000076, 2.170000076, 2.170000076, 2.170000076,
> > > > >> 2.170000076, 2.170000076, 2.170000076, 7.829999924, 7.829999924,
> > > > >> 7.829999924, 7.829999924, 7.829999924, 7.829999924, 7.829999924,
> > > > >> 7.829999924, 14.23999977, 13.98999977, 13.98999977, 13.98999977,
> > > > >> 13.98999977, 13.98999977, 13.98999977, 13.98999977, 13.98999977,
> > > > >> 13.98999977, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 13.92000008,
> > > > >> 13.92000008, 13.92000008, 13.92000008, 13.92000008, 6.96999979,
> > > > >> 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979, 7.46999979,
> > > > >> 7.46999979, 7.46999979, 11.59000015, 11.59000015, 11.59000015,
> > > > >> 11.59000015, 11.59000015, 11.59000015, 11.59000015, 11.59000015,
> > > > >> 11.59000015, 11.59000015, 11.59000015, 15.25, 15.25, 15.25, 15.25,
> > > > >> 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 15.25, 2.329999924,
> > > > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > > >> 2.329999924, 2.329999924, 2.329999924, 2.329999924, 2.329999924,
> > > > >> 2.329999924, 4.329999924, 4.329999924, 4.329999924, 12, 12, 12,
> > > > >> 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12), x = c(0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L,
> > > > >> 0L)), .Names = c("country_code", "year", "y", "x"), class = "data.frame", row.names = c(NA,
> > > > >> -722L))
> > > > >>      [[alternative HTML version deleted]]
> > > > >> ______________________________________________
> > > > >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > >> https://stat.ethz.ch/mailman/listinfo/r-help
> > > > >> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > > >> and provide commented, minimal, self-contained, reproducible code.
> > > > >> ---
> > > > >> This email has been checked for viruses by AVG.
> > > > >> https://www.avg.com
> > > > >> .
> > > > >
> > > > > --
> > > > > Michael
> > > > > http://www.dewey.myzen.co.uk/home.html
> > > >
> > > >
> > > >         [[alternative HTML version deleted]]
> > > >
> > > > ______________________________________________
> > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > > and provide commented, minimal, self-contained, reproducible code.
> > > >
> > >
> >
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From r@oknz @end|ng |rom gm@||@com  Fri Oct  4 07:28:14 2019
From: r@oknz @end|ng |rom gm@||@com (Richard O'Keefe)
Date: Fri, 4 Oct 2019 18:28:14 +1300
Subject: [R] can not extract rows which match a string
In-Reply-To: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
Message-ID: <CABcYAd+wpK+ZyKA-77YiAKVx3brnBf5hZS4s9SApb9oxwxnayA@mail.gmail.com>

I think the problem may lie in your understanding of what "==" does with NA
and/or what "[]" does with NA.
> x <- c(NA, "Yes")
> x == "Yes"
[1]   NA TRUE
Since you say you DON'T want the rows with "Yes", you just want
x[is.na(x)]
or in your case
t11 <- t1[is.na(t1$sex_chromosome_aneuploidy_f22019_0_0),]
or if there could be other values than "Yes" that you want to keep,
is.definitely <- function (x, y) {
   !is.na(x) & !is.na(y) & x == y
}
t11 <- t1[!is.definitely(t1$sex_chromosome_aneuploidy_f22019_0_0, "Yes"),]

On Fri, 4 Oct 2019 at 07:59, Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hello,
>
> I have a dataframe (t1) with many columns, but the one I care about it this:
> > unique(t1$sex_chromosome_aneuploidy_f22019_0_0)
> [1] NA    "Yes"
>
> it has these two values.
>
> I would like to remove from my dataframe t1 all rows which have "Yes"
> in t1$sex_chromosome_aneuploidy_f22019_0_0
>
> I tried selecting those rows with "Yes" via:
>
> t11=t1[t1$sex_chromosome_aneuploidy_f22019_0_0=="Yes",]
>
> but I got t11 which has the exact same number of rows as t1.
>
> If I do:
> > table(t1$sex_chromosome_aneuploidy_f22019_0_0)
>
> Yes
> 620
>
> So there is for sure 620 rows which have "Yes". How to remove those
> from my t1 data frame?
>
> Thanks
> Ana
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @pr||ett|ngton @end|ng |rom gm@||@com  Fri Oct  4 08:58:51 2019
From: @pr||ett|ngton @end|ng |rom gm@||@com (April Ettington)
Date: Fri, 4 Oct 2019 19:58:51 +1300
Subject: [R] Can you turn an input into a variable name?
Message-ID: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>

Let's say I am parsing a file with a list of parameters followed by an
equal sign, and their corresponding values, eg:

color=green
shape=circle

and I want to use this information to create a variable called color with
the value 'green' and a variable shape with the value 'circle'.  However, I
also want my code to be able to do this *when it doesn't know up front what
the parameter names will be.  *So, if the file also included "age=7", it
should still make a variable called age with the value '7', even though
'age' doesn't specifically appear anywhere in my code.  Is there a way to
do this?

Thank you,
April

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Fri Oct  4 09:07:53 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Fri, 04 Oct 2019 00:07:53 -0700
Subject: [R] Can you turn an input into a variable name?
In-Reply-To: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
References: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
Message-ID: <424F9D8D-CC7C-4527-A0F5-92981B085411@dcn.davis.ca.us>

Yes. But you should be careful.

"source" is the best way, especially if you put the symbols in a dedicated environment instead of the global environment to avoid your program getting stomped on by your input file.

On October 3, 2019 11:58:51 PM PDT, April Ettington <aprilettington at gmail.com> wrote:
>Let's say I am parsing a file with a list of parameters followed by an
>equal sign, and their corresponding values, eg:
>
>color=green
>shape=circle
>
>and I want to use this information to create a variable called color
>with
>the value 'green' and a variable shape with the value 'circle'. 
>However, I
>also want my code to be able to do this *when it doesn't know up front
>what
>the parameter names will be.  *So, if the file also included "age=7",
>it
>should still make a variable called age with the value '7', even though
>'age' doesn't specifically appear anywhere in my code.  Is there a way
>to
>do this?
>
>Thank you,
>April
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From j@vedbtk111 @end|ng |rom gm@||@com  Fri Oct  4 09:43:36 2019
From: j@vedbtk111 @end|ng |rom gm@||@com (javed khan)
Date: Fri, 4 Oct 2019 09:43:36 +0200
Subject: [R] Vargha and delaney effect size
Message-ID: <CAJhui+s1Tk=T1SY_GmmH8ewG8f_W38wc99DoCq82NZhObk6WLw@mail.gmail.com>

I am new to R language. I have two column data I.e X= 0.23, 0.04, 0.5, -
0.20 etc and B= 0.34, 0.01, 0.1, 0.09 etc. The number of observations are
100. How can I apply vargha and delaney effect size in R? I load the data
as, read.csv(mydata.csv) and load the library effsize. Please if someone
can help because I have no idea about the next step to follow.

Thanks

	[[alternative HTML version deleted]]


From er|cjberger @end|ng |rom gm@||@com  Fri Oct  4 12:58:36 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Fri, 4 Oct 2019 13:58:36 +0300
Subject: [R] Vargha and delaney effect size
In-Reply-To: <CAJhui+s1Tk=T1SY_GmmH8ewG8f_W38wc99DoCq82NZhObk6WLw@mail.gmail.com>
References: <CAJhui+s1Tk=T1SY_GmmH8ewG8f_W38wc99DoCq82NZhObk6WLw@mail.gmail.com>
Message-ID: <CAGgJW77NfHBZkuWwRuc8vD3XK1vxhqv6+HQ0680pqov5cNkfTQ@mail.gmail.com>

For general documentation about the effsize package you would do:
> help(package="effsize")

For information on calculations related to vargha:
>??vargha
This command displays effsize::VD.A, which you can find out about via the
command
>?effsize::VD.A
This displays the documentation for the function VD.A. At the top of the
documentation you have the Description and Usage sections. At the bottom
there are some examples of using the function.

HTH,
Eric


On Fri, Oct 4, 2019 at 10:44 AM javed khan <javedbtk111 at gmail.com> wrote:

> I am new to R language. I have two column data I.e X= 0.23, 0.04, 0.5, -
> 0.20 etc and B= 0.34, 0.01, 0.1, 0.09 etc. The number of observations are
> 100. How can I apply vargha and delaney effect size in R? I load the data
> as, read.csv(mydata.csv) and load the library effsize. Please if someone
> can help because I have no idea about the next step to follow.
>
> Thanks
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From drj|m|emon @end|ng |rom gm@||@com  Fri Oct  4 12:58:35 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Fri, 4 Oct 2019 20:58:35 +1000
Subject: [R] Can you turn an input into a variable name?
In-Reply-To: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
References: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
Message-ID: <CA+8X3fV6LW0qwCwe6qwTMkz1J8HKE-rz1BBMiyANayB5UAJZKg@mail.gmail.com>

Hi April,
Try this:

# this could be done from a file
textlines<-read.table(text="color=green
 shape=circle
 age=17
 name=Jim",
 stringsAsFactors=FALSE)
for(i in 1:length(textlines)) {
 nextline<-unlist(strsplit(textlines[i,1],"="))
 assign(nextline[1],nextline[2])
}
color
[1] "green"
shape
[1] "circle"
age
[1] "17"
name
[1] "Jim"

Jim

On Fri, Oct 4, 2019 at 4:59 PM April Ettington <aprilettington at gmail.com> wrote:
>
> Let's say I am parsing a file with a list of parameters followed by an
> equal sign, and their corresponding values, eg:
>
> color=green
> shape=circle
>
> and I want to use this information to create a variable called color with
> the value 'green' and a variable shape with the value 'circle'.  However, I
> also want my code to be able to do this *when it doesn't know up front what
> the parameter names will be.  *So, if the file also included "age=7", it
> should still make a variable called age with the value '7', even though
> 'age' doesn't specifically appear anywhere in my code.  Is there a way to
> do this?
>
> Thank you,
> April
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From wewo|@k| @end|ng |rom gm@||@com  Fri Oct  4 14:30:09 2019
From: wewo|@k| @end|ng |rom gm@||@com (Witold E Wolski)
Date: Fri, 4 Oct 2019 14:30:09 +0200
Subject: [R] stats::power.t.test error
Message-ID: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>

Hi,

power.t.test works for some range of input parameters but fails otherwise.

> power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
[1] 1.971668
> power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
[1] 1.620328
> power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol = tol,  :
  did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0
In addition: Warning message:
In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced

I guessing that sd is very small compared with delta, hence the
problem. But what are allowed values (ratios) of delta and sd?

Best
Witek






-- 
Witold Eryk Wolski


From th|erry@onke||nx @end|ng |rom |nbo@be  Fri Oct  4 14:52:44 2019
From: th|erry@onke||nx @end|ng |rom |nbo@be (Thierry Onkelinx)
Date: Fri, 4 Oct 2019 14:52:44 +0200
Subject: [R] stats::power.t.test error
In-Reply-To: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
References: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
Message-ID: <CAJuCY5yrJLB_B13zqp5hNG4zg3S0Qn24Dcfvgu8Kd-evD8+Tqg@mail.gmail.com>

Think about this. What is the null hypothesis? What is the alternative?
What are their distributions? What is the probability that you get a value
from the alternative when the null hypothesis holds and vice versa? Then
think again about the relevance of your alternative hypothesis. You'll get
a better understanding of power calculation by doing such exercise.

ir. Thierry Onkelinx
Statisticus / Statistician

Vlaamse Overheid / Government of Flanders
INSTITUUT VOOR NATUUR- EN BOSONDERZOEK / RESEARCH INSTITUTE FOR NATURE AND
FOREST
Team Biometrie & Kwaliteitszorg / Team Biometrics & Quality Assurance
thierry.onkelinx at inbo.be
Havenlaan 88 bus 73, 1000 Brussel
www.inbo.be

///////////////////////////////////////////////////////////////////////////////////////////
To call in the statistician after the experiment is done may be no more
than asking him to perform a post-mortem examination: he may be able to say
what the experiment died of. ~ Sir Ronald Aylmer Fisher
The plural of anecdote is not data. ~ Roger Brinner
The combination of some data and an aching desire for an answer does not
ensure that a reasonable answer can be extracted from a given body of data.
~ John Tukey
///////////////////////////////////////////////////////////////////////////////////////////

<https://www.inbo.be>


Op vr 4 okt. 2019 om 14:30 schreef Witold E Wolski <wewolski at gmail.com>:

> Hi,
>
> power.t.test works for some range of input parameters but fails otherwise.
>
> > power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
> [1] 1.971668
> > power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
> [1] 1.620328
> > power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
> Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol =
> tol,  :
>   did not succeed extending the interval endpoints for f(lower) * f(upper)
> <= 0
> In addition: Warning message:
> In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced
>
> I guessing that sd is very small compared with delta, hence the
> problem. But what are allowed values (ratios) of delta and sd?
>
> Best
> Witek
>
>
>
>
>
>
> --
> Witold Eryk Wolski
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Fri Oct  4 15:44:04 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Fri, 4 Oct 2019 06:44:04 -0700
Subject: [R] Can you turn an input into a variable name?
In-Reply-To: <CA+8X3fV6LW0qwCwe6qwTMkz1J8HKE-rz1BBMiyANayB5UAJZKg@mail.gmail.com>
References: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
 <CA+8X3fV6LW0qwCwe6qwTMkz1J8HKE-rz1BBMiyANayB5UAJZKg@mail.gmail.com>
Message-ID: <CAGxFJbQSjhwLuA2j9MXiHt76Eogf1pqf5qRjCPataq-Njtm3gQ@mail.gmail.com>

Well, OK, but do note that strsplit() is vectorized, so

z <- strplit(textlines)  ## provides a list of splits for each line

would be faster for large files.

However, to add to what Jeff said, it is hard for me to see how your
approach will not lead to problems. For example, what if there are several
"age = xxx" lines in the file; or variable number of spaces between the "="
and the left and right sides; etc., which would mean that your "split"
string might need to be a regex that can handle variable numbers of spaces.
In general, keeping such information in a single suitable data structure
rather than having separate symbols (variable names) for each line seems to
me -- in my vast ignorance of your situation!!, so caveat emptor -- to be a
more robust approach.

But anyway ....

Cheers,
Bert





Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Fri, Oct 4, 2019 at 4:11 AM Jim Lemon via R-help <r-help at r-project.org>
wrote:

> Hi April,
> Try this:
>
> # this could be done from a file
> textlines<-read.table(text="color=green
>  shape=circle
>  age=17
>  name=Jim",
>  stringsAsFactors=FALSE)
> for(i in 1:length(textlines)) {
>  nextline<-unlist(strsplit(textlines[i,1],"="))
>  assign(nextline[1],nextline[2])
> }
> color
> [1] "green"
> shape
> [1] "circle"
> age
> [1] "17"
> name
> [1] "Jim"
>
> Jim
>
> On Fri, Oct 4, 2019 at 4:59 PM April Ettington <aprilettington at gmail.com>
> wrote:
> >
> > Let's say I am parsing a file with a list of parameters followed by an
> > equal sign, and their corresponding values, eg:
> >
> > color=green
> > shape=circle
> >
> > and I want to use this information to create a variable called color with
> > the value 'green' and a variable shape with the value 'circle'.
> However, I
> > also want my code to be able to do this *when it doesn't know up front
> what
> > the parameter names will be.  *So, if the file also included "age=7", it
> > should still make a variable called age with the value '7', even though
> > 'age' doesn't specifically appear anywhere in my code.  Is there a way to
> > do this?
> >
> > Thank you,
> > April
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Fri Oct  4 16:28:09 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 4 Oct 2019 16:28:09 +0200
Subject: [R] stats::power.t.test error
In-Reply-To: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
References: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
Message-ID: <AA91AD49-B95C-452D-8949-8659A44B2285@gmail.com>

This is mainly a technical issue with uniroot trying to go outside of its interval: (2, 1e7)

It is fairly easy to find an approximate solution by diddling a little by hand:

> power.t.test(delta = 0.5849625, sd=0.01, n=1.04, sig.level=0.05)$power
[1] 0.8023375

Notice, however, that 1.04 observations in each group makes no sense at all. In order to actually do a t-test you need at least 2 observations per group (since we assume equal group sizes) or you have no variance estimate. Already at sd=0.1, you are crossing the n=2 border, so for any smaller sd, you will just get higher power with n=2. (Also, anything with single-digit degrees of freedom for variance is probably expecting rather much regarding to Gaussian distribution of your data.)

-pd

> On 4 Oct 2019, at 14:30 , Witold E Wolski <wewolski at gmail.com> wrote:
> 
> Hi,
> 
> power.t.test works for some range of input parameters but fails otherwise.
> 
>> power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
> [1] 1.971668
>> power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
> [1] 1.620328
>> power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
> Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol = tol,  :
>  did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0
> In addition: Warning message:
> In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced
> 
> I guessing that sd is very small compared with delta, hence the
> problem. But what are allowed values (ratios) of delta and sd?
> 
> Best
> Witek
> 
> 
> 
> 
> 
> 
> -- 
> Witold Eryk Wolski
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From jkch68 @end|ng |rom gm@||@com  Fri Oct  4 13:00:26 2019
From: jkch68 @end|ng |rom gm@||@com (Jui-Kun Chiang)
Date: Fri, 4 Oct 2019 19:00:26 +0800
Subject: [R] my question is how to read pvcm file
Message-ID: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>

Dear Sir,
   I got a pvcm file.
My question is how to read it by R.
Gratefully

    Jui-Kun Chiang

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Fri Oct  4 17:14:31 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Fri, 4 Oct 2019 08:14:31 -0700
Subject: [R] my question is how to read pvcm file
In-Reply-To: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
References: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
Message-ID: <CAGxFJbQsx4LizbuVj2M_EOOrS6pjacvfWNHzapKujuQLDEW5Bg@mail.gmail.com>

This question was rejected on stack overflow as being too vague. The same
applies here: what, **exactly** are pvcm iles?

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Fri, Oct 4, 2019 at 8:04 AM Jui-Kun Chiang via R-help <
r-help at r-project.org> wrote:

> Dear Sir,
>    I got a pvcm file.
> My question is how to read it by R.
> Gratefully
>
>     Jui-Kun Chiang
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From 538280 @end|ng |rom gm@||@com  Fri Oct  4 17:47:52 2019
From: 538280 @end|ng |rom gm@||@com (Greg Snow)
Date: Fri, 4 Oct 2019 09:47:52 -0600
Subject: [R] Can you turn an input into a variable name?
In-Reply-To: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
References: <CAE9tUWf8CS6mevRWE7qk0phA9Lg1ZQQWL62eNYRgCxDgSLq07Q@mail.gmail.com>
Message-ID: <CAFEqCdzbre4VH-fX3nn8vfFNJwfvs9SHyGCP0uZ_AOF0iRhRkw@mail.gmail.com>

This is in part answered by FAQ 7.21.

The most important part of that answer is at the bottom where it says
that it is usually better to use a list.

It may be safer to use a list for your case so that other important
variables do not become masked (hidden by the global variables you
just created).

Here is one way to do it:

txtcon <- textConnection("color=green
shape=circle")

textlines<-readLines(txtcon)
tmp <- strsplit(textlines, "=")

mylist <- list()
for(i in tmp) {
  mylist[[ i[1] ]] <- i[2]
}

or another option:

mylist[ sapply(tmp, `[`, 1)] <- sapply(tmp, `[`, 2)

If you know that you will not need a regular expression then you can
just use the `sep` argument to `read.table`:

txtcon <- textConnection("color=green
shape=circle")

tmp2 <- read.table(txtcon, sep='=', stringsAsFactors = FALSE)
mylist <- list()
mylist[ tmp2[,1] ] <- tmp2[,2]

Now you can use functions like `with`, `within`, `evalq`, etc. to work
with the elements of the list as if they were variables:

> with(mylist, ls() )
[1] "color" "shape"
> with(mylist, color)
[1] "green"
> mylist$shape
[1] "circle"
> vname <- 'color'
> mylist[[vname]]
[1] "green"
> evalq(paste('it is a', color, shape), mylist)
[1] "it is a green circle"

If you need regular expressions to find your names and values (extra
spaces, lines without '=', pairs embedded in longer sentences, etc.)
then look at the `regmatches` function or possibly the gsubfn package
(or other tools).


On Fri, Oct 4, 2019 at 12:59 AM April Ettington
<aprilettington at gmail.com> wrote:
>
> Let's say I am parsing a file with a list of parameters followed by an
> equal sign, and their corresponding values, eg:
>
> color=green
> shape=circle
>
> and I want to use this information to create a variable called color with
> the value 'green' and a variable shape with the value 'circle'.  However, I
> also want my code to be able to do this *when it doesn't know up front what
> the parameter names will be.  *So, if the file also included "age=7", it
> should still make a variable called age with the value '7', even though
> 'age' doesn't specifically appear anywhere in my code.  Is there a way to
> do this?
>
> Thank you,
> April
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.



-- 
Gregory (Greg) L. Snow Ph.D.
538280 at gmail.com


From pd@|gd @end|ng |rom gm@||@com  Fri Oct  4 18:00:42 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 4 Oct 2019 18:00:42 +0200
Subject: [R] my question is how to read pvcm file
In-Reply-To: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
References: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
Message-ID: <CA426D32-4A95-4794-977B-B5904B33BA7D@gmail.com>

What is a pvcm file???

-pd

> On 4 Oct 2019, at 13:00 , Jui-Kun Chiang via R-help <r-help at r-project.org> wrote:
> 
> Dear Sir,
>   I got a pvcm file.
> My question is how to read it by R.
> Gratefully
> 
>    Jui-Kun Chiang
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Fri Oct  4 18:41:22 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Fri, 4 Oct 2019 17:41:22 +0100
Subject: [R] my question is how to read pvcm file
In-Reply-To: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
References: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
Message-ID: <963db988-4ce0-2204-0183-bdcd3ae9c253@sapo.pt>

Hello,

I don't find the question easy to answer, if at all.

1. What is a pvcm file? Please give us more information on this format, 
I couldn't find that file extension.

2. Please read the posting guide, with a link at the bottom of this 
mail. You should know that R-help is for questions on R code, not to 
search (R related?) stuff for you.

3. At an R prompt run

install.packages('sos')
sos::findFn('pvcm file')


It yields nothing of relevance.



Hope this helps,

Rui Barradas



?s 12:00 de 04/10/19, Jui-Kun Chiang via R-help escreveu:
> Dear Sir,
>     I got a pvcm file.
> My question is how to read it by R.
> Gratefully
> 
>      Jui-Kun Chiang
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From @@r@h@go@|ee @end|ng |rom gm@||@com  Fri Oct  4 20:09:43 2019
From: @@r@h@go@|ee @end|ng |rom gm@||@com (Sarah Goslee)
Date: Fri, 4 Oct 2019 14:09:43 -0400
Subject: [R] my question is how to read pvcm file
In-Reply-To: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
References: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
Message-ID: <CAM_vju=KNU3w_2hyCD0TZkSHv51bbKMafR0GzSBakvHkjS1oHA@mail.gmail.com>

What software creates a pvcm file? Is it binary or text? Where did it
come from, and what do you expect to get out of it?

Your question is too broad for us to be able to help you.

When I google pvcm, I find some stuff about vocal cords, and also your
Stack Overflow question, which was also closed as too broad and not
clear enough.

Sarah

On Fri, Oct 4, 2019 at 11:04 AM Jui-Kun Chiang via R-help
<r-help at r-project.org> wrote:
>
> Dear Sir,
>    I got a pvcm file.
> My question is how to read it by R.
> Gratefully
>
>     Jui-Kun Chiang
>
>         [[alternative HTML version deleted]]
>


-- 
Sarah Goslee (she/her)
http://www.numberwright.com


From wjm1 @end|ng |rom c@@@co|umb|@@edu  Fri Oct  4 23:04:19 2019
From: wjm1 @end|ng |rom c@@@co|umb|@@edu (William Michels)
Date: Fri, 4 Oct 2019 14:04:19 -0700
Subject: [R] can not extract rows which match a string
In-Reply-To: <e746347c-8b7f-fded-a761-1ee1ad21d4f4@sapo.pt>
References: <CAF9-5jOMGatK30hAS8KDEST-Yk2cGbR0WBfVc3-bedvaNCGnwg@mail.gmail.com>
 <23846a80-79d5-6a00-6140-ed8342be0320@sapo.pt>
 <CAF9-5jNq1qyphFS0Xb8uZdKCjJa6q1ttMK1z+1f9VxnB8CcQrg@mail.gmail.com>
 <4f9933d4-088e-3cc3-235f-91faa1669b72@sapo.pt>
 <e746347c-8b7f-fded-a761-1ee1ad21d4f4@sapo.pt>
Message-ID: <CAA99HCy2hviz3ofR2EmGZBTs2=9i084vGTSXqeU9MqWcPjhakg@mail.gmail.com>

Apologies Ana, Of course Rui and Herve (and Richard) are correct here
in stating that NA values get 'carried through' when selecting using
the "==" operator.

To give an illustration of what (I believe) Herve means by "NAs
propagating", here's a small 11 x 8 dataframe ("zakaria") posted to
R-Help last year, which fortuitously has one column ("PO2T")
containing only the numeric value 50 as well as NAs. I compare
selecting with the "%in%" operator (as Herve suggests) and selecting
with the "==" operator. Notice the "propagating NAs" (last line of
code):

https://stat.ethz.ch/pipermail/r-help/2018-October/456798.html

> dim(zakaria)
[1] 11  8
> zakaria
   STUDENT_ID COURSE_CODE   PO1M PO1T PO2M PO2T  X X.1
1     AA15285     BAA1113 155.70  180   NA   NA NA  NA
2     AA15285     BAA1322  48.90   70   NA   NA NA  NA
3     AA15285     BAA2713  83.20  100   NA   NA NA  NA
4     AA15285     BAA2921     NA   NA   37   50 NA  NA
5     AA15285     BAA4273     NA   NA   NA   NA NA  NA
6     AA15285     BAA4513     NA   NA   NA   NA NA  NA
7     AA15286     BAA1322  48.05   70   NA   NA NA  NA
8     AA15286     BAA2113  68.40  100   NA   NA NA  NA
9     AA15286     BAA2513  41.65   60   NA   NA NA  NA
10    AA15286     BAA2713  82.35  100   NA   NA NA  NA
11    AA15286     BAA2921     NA   NA   41   50 NA  NA
> unique(zakaria$PO2T)
[1] NA 50
> table(zakaria$PO2T, exclude=NULL)

  50 <NA>
   2    9
> zakaria[!is.na(zakaria$PO2T), ]
   STUDENT_ID COURSE_CODE PO1M PO1T PO2M PO2T  X X.1
4     AA15285     BAA2921   NA   NA   37   50 NA  NA
11    AA15286     BAA2921   NA   NA   41   50 NA  NA
> zakaria[zakaria$PO2T %in% 50, ]
   STUDENT_ID COURSE_CODE PO1M PO1T PO2M PO2T  X X.1
4     AA15285     BAA2921   NA   NA   37   50 NA  NA
11    AA15286     BAA2921   NA   NA   41   50 NA  NA
> zakaria[zakaria$PO2T==50, ]
     STUDENT_ID COURSE_CODE PO1M PO1T PO2M PO2T  X X.1
NA         <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.1       <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.2       <NA>        <NA>   NA   NA   NA   NA NA  NA
4       AA15285     BAA2921   NA   NA   37   50 NA  NA
NA.3       <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.4       <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.5       <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.6       <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.7       <NA>        <NA>   NA   NA   NA   NA NA  NA
NA.8       <NA>        <NA>   NA   NA   NA   NA NA  NA
11      AA15286     BAA2921   NA   NA   41   50 NA  NA
>

I am certainly taking Herve's advice seriously, but I also believe
that when importing data into R, carefully setting parameters such as
the "na.strings" parameter of read.table() can help you avoid
surprises later on.

HTH, Bill.

W. Michels, Ph.D.

On Thu, Oct 3, 2019 at 1:34 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:


From drj|m|emon @end|ng |rom gm@||@com  Fri Oct  4 23:19:41 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Sat, 5 Oct 2019 07:19:41 +1000
Subject: [R] my question is how to read pvcm file
In-Reply-To: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
References: <CABixZvXtOU5nzZBao0p=9EFP6Msg4cfpgkGFnSq+WgPqpqY6iQ@mail.gmail.com>
Message-ID: <CA+8X3fVa9YAXxrXjRc-+5TngcpVjcTYRU2M-B-CNDwumgn1YjA@mail.gmail.com>

Hi Jui-Kun,
Are you using the plm package and talking about a pvcm object that is
returned by the function of the same name? If so, it is not a "file"
but a list of values returned by the function. Maybe this will move
your question in the direction of intelligibility.

Jim

On Sat, Oct 5, 2019 at 1:04 AM Jui-Kun Chiang via R-help
<r-help at r-project.org> wrote:
>
> Dear Sir,
>    I got a pvcm file.
> My question is how to read it by R.
> Gratefully
>
>     Jui-Kun Chiang
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From n@ncy|e||x25 @end|ng |rom gm@||@com  Fri Oct  4 16:09:58 2019
From: n@ncy|e||x25 @end|ng |rom gm@||@com (Nancy Felix)
Date: Fri, 4 Oct 2019 17:09:58 +0300
Subject: [R] Testing for normality in categorical data
Message-ID: <CAHNFy0rmMo7TTU3UGzB6aF6p5noQWA8tP75oBAt+3rHmLOzDjA@mail.gmail.com>

Hello
I have data that are categorical both independent variable and dependent as
well having levels more than 3. How can i check the normality of my data?

I have tried the example given of Shapiro-Wilk for levels of factors

data
summary(chickwts)

## linear model and ANOVA
fm <- lm(weight ~ feed, data = chickwts)
anova(fm)

## QQ plot for residuals + Shapiro-Wilk test
shapiro.test(residuals(fm))

## separate tests for all groups of observations
## (with some formatting)
do.call("rbind", with(chickwts, tapply(weight, feed,
   function(x) unlist(shapiro.test(x)[c("statistic", "p.value")]))))

But ended up with Error message that x should be numeric and more comments
see below.
Hope to get some help on this

Thanks,
Nancy

## linear model and ANOVA
> fm <- lm(retaliation ~ occupation, data = kazi)
Warning messages:
1: In model.response(mf, "numeric") :
  using type = "numeric" with a factor response will be ignored
2: In Ops.factor(y, z$residuals) : ?-? not meaningful for factors
> anova(fm)
Error in if (ssr < 1e-10 * mss) warning("ANOVA F-tests on an essentially
perfect fit are unreliable") :
  missing value where TRUE/FALSE needed
In addition: Warning message:
In Ops.factor(object$residuals, 2) : ?^? not meaningful for factors
> ## QQ plot for residuals + Shapiro-Wilk test
> shapiro.test(residuals(fm))
Error in class(y) <- oldClass(x) :
  adding class "factor" to an invalid object
> ## separate tests for all groups of observations
> ## (with some formatting)
> do.call("rbind", with(kazi, tapply(retaliation, occupation,
+                                        function(x)
unlist(shapiro.test(x)[c("statistic", "p.value")]))))

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Sat Oct  5 15:58:20 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sat, 5 Oct 2019 06:58:20 -0700
Subject: [R] Testing for normality in categorical data
In-Reply-To: <CAHNFy0rmMo7TTU3UGzB6aF6p5noQWA8tP75oBAt+3rHmLOzDjA@mail.gmail.com>
References: <CAHNFy0rmMo7TTU3UGzB6aF6p5noQWA8tP75oBAt+3rHmLOzDjA@mail.gmail.com>
Message-ID: <CAGxFJbQGnKYo9p25yDM+-VksGvWYGcPpLq4DnXBns4CHVqwG0w@mail.gmail.com>

Categorical data cannot be normal. What you are doing is statistical
nonsense, as your error messages suggest.  You need to consult a local
statistician for help.

Furthermore, statistical questions are generally OT on this list, which is
about R programming.

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sat, Oct 5, 2019 at 6:19 AM Nancy Felix <nancyfelix25 at gmail.com> wrote:

> Hello
> I have data that are categorical both independent variable and dependent as
> well having levels more than 3. How can i check the normality of my data?
>
> I have tried the example given of Shapiro-Wilk for levels of factors
>
> data
> summary(chickwts)
>
> ## linear model and ANOVA
> fm <- lm(weight ~ feed, data = chickwts)
> anova(fm)
>
> ## QQ plot for residuals + Shapiro-Wilk test
> shapiro.test(residuals(fm))
>
> ## separate tests for all groups of observations
> ## (with some formatting)
> do.call("rbind", with(chickwts, tapply(weight, feed,
>    function(x) unlist(shapiro.test(x)[c("statistic", "p.value")]))))
>
> But ended up with Error message that x should be numeric and more comments
> see below.
> Hope to get some help on this
>
> Thanks,
> Nancy
>
> ## linear model and ANOVA
> > fm <- lm(retaliation ~ occupation, data = kazi)
> Warning messages:
> 1: In model.response(mf, "numeric") :
>   using type = "numeric" with a factor response will be ignored
> 2: In Ops.factor(y, z$residuals) : ?-? not meaningful for factors
> > anova(fm)
> Error in if (ssr < 1e-10 * mss) warning("ANOVA F-tests on an essentially
> perfect fit are unreliable") :
>   missing value where TRUE/FALSE needed
> In addition: Warning message:
> In Ops.factor(object$residuals, 2) : ?^? not meaningful for factors
> > ## QQ plot for residuals + Shapiro-Wilk test
> > shapiro.test(residuals(fm))
> Error in class(y) <- oldClass(x) :
>   adding class "factor" to an invalid object
> > ## separate tests for all groups of observations
> > ## (with some formatting)
> > do.call("rbind", with(kazi, tapply(retaliation, occupation,
> +                                        function(x)
> unlist(shapiro.test(x)[c("statistic", "p.value")]))))
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Sat Oct  5 20:50:59 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Sat, 5 Oct 2019 13:50:59 -0500
Subject: [R] how to select all columns that contain in any of their rows a
 partial match for a string?
Message-ID: <CAF9-5jMVqQr0Xnoo8gzE7tbqLTb2x-0ao=gYro8MFmD+TvMU0g@mail.gmail.com>

Hello,

I have a data frame tot which has many columns and many rows.

I am trying to find all columns that have say a value in any of their
rows that STARTS WITH: "E94"

for example there are columns like this:

> unique(tot$diagnoses_icd9_f41271_0_44)
[1] NA      "E9420"

I tried:
s=select(tot,starts_with("E94"))

but this didn't return me anything. Data type in those columns is character.

Thanks
Ana


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Oct  5 21:24:12 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 5 Oct 2019 20:24:12 +0100
Subject: [R] 
 how to select all columns that contain in any of their rows a
 partial match for a string?
In-Reply-To: <CAF9-5jMVqQr0Xnoo8gzE7tbqLTb2x-0ao=gYro8MFmD+TvMU0g@mail.gmail.com>
References: <CAF9-5jMVqQr0Xnoo8gzE7tbqLTb2x-0ao=gYro8MFmD+TvMU0g@mail.gmail.com>
Message-ID: <e56856cd-e7fa-ec6d-f186-067a1c12e6f2@sapo.pt>

Hello,

Try the following

cols <- sapply(tot, function(x) any(grepl("^E94", x)))

To have the column numbers,

which(cols)


Hope this helps,

Rui Barradas

?s 19:50 de 05/10/19, Ana Marija escreveu:
> Hello,
> 
> I have a data frame tot which has many columns and many rows.
> 
> I am trying to find all columns that have say a value in any of their
> rows that STARTS WITH: "E94"
> 
> for example there are columns like this:
> 
>> unique(tot$diagnoses_icd9_f41271_0_44)
> [1] NA      "E9420"
> 
> I tried:
> s=select(tot,starts_with("E94"))
> 
> but this didn't return me anything. Data type in those columns is character.
> 
> Thanks
> Ana
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Oct  5 23:05:18 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 5 Oct 2019 22:05:18 +0100
Subject: [R] 
 how to select all columns that contain in any of their rows a
 partial match for a string?
In-Reply-To: <CAF9-5jM4if1z8HFOL5BbVUG3iAdnseG+pweSbKmgn+bwYRu6oA@mail.gmail.com>
References: <CAF9-5jMVqQr0Xnoo8gzE7tbqLTb2x-0ao=gYro8MFmD+TvMU0g@mail.gmail.com>
 <e56856cd-e7fa-ec6d-f186-067a1c12e6f2@sapo.pt>
 <CAF9-5jM4if1z8HFOL5BbVUG3iAdnseG+pweSbKmgn+bwYRu6oA@mail.gmail.com>
Message-ID: <0aa564c0-1009-71b0-2945-9634a21634c2@sapo.pt>

Hello,

Please CC the list.

The following code does what you want.

tot <- data.frame(a = c("E10123", "F123", "G4567"),
                   b = c("a123", "E112345", "b456"))

e10 <- sapply(tot, function(x) grepl("^E10", x))
e10 <- rowSums(e10) > 0
e11 <- sapply(tot, function(x) grepl("^E11", x))
e11 <- rowSums(e11) > 0

tot$newcol <- -9
tot$newcol[e10] <- 1
tot$newcol[e11] <- 2


On both cases the 2 lines sapply/rowSums can be made one with

rowSums(sapply(...)) > 0


Hope this helps,

Rui Barradas

?s 20:52 de 05/10/19, Ana Marija escreveu:
> Hi Rui,
> 
> thank you so much for getting back to me.
> 
> I did what you told me:
> cols <- sapply(tot, function(x) any(grepl("^E10", x)))
> a=which(cols)
> 
> so this gives me name of 49 columns that have that particular string
> 
> But how do I create a new column in my tot data frame (the column
> would be called "TD") which has 1 in the row where the subject
> (designated in the "eid" column) has a string which starts with "E10"
> and it has 2 if it starts with "E11" and otherwise it is -9.
> 
>> head(tot)[1:3,1:3]
>        eid          sex_f31_0_0         year_of_birth_f34_0_0
> 1 1000017      Female                  1938
> 2 1000025      Female                  1951
> 3 1000038        Male                     1961
> 
> Thanks you so much!
> 
> 
> On Sat, Oct 5, 2019 at 2:24 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>>
>> Hello,
>>
>> Try the following
>>
>> cols <- sapply(tot, function(x) any(grepl("^E94", x)))
>>
>> To have the column numbers,
>>
>> which(cols)
>>
>>
>> Hope this helps,
>>
>> Rui Barradas
>>
>> ?s 19:50 de 05/10/19, Ana Marija escreveu:
>>> Hello,
>>>
>>> I have a data frame tot which has many columns and many rows.
>>>
>>> I am trying to find all columns that have say a value in any of their
>>> rows that STARTS WITH: "E94"
>>>
>>> for example there are columns like this:
>>>
>>>> unique(tot$diagnoses_icd9_f41271_0_44)
>>> [1] NA      "E9420"
>>>
>>> I tried:
>>> s=select(tot,starts_with("E94"))
>>>
>>> but this didn't return me anything. Data type in those columns is character.
>>>
>>> Thanks
>>> Ana
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Sat Oct  5 23:41:37 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Sat, 5 Oct 2019 16:41:37 -0500
Subject: [R] 
 how to select all columns that contain in any of their rows a
 partial match for a string?
In-Reply-To: <0aa564c0-1009-71b0-2945-9634a21634c2@sapo.pt>
References: <CAF9-5jMVqQr0Xnoo8gzE7tbqLTb2x-0ao=gYro8MFmD+TvMU0g@mail.gmail.com>
 <e56856cd-e7fa-ec6d-f186-067a1c12e6f2@sapo.pt>
 <CAF9-5jM4if1z8HFOL5BbVUG3iAdnseG+pweSbKmgn+bwYRu6oA@mail.gmail.com>
 <0aa564c0-1009-71b0-2945-9634a21634c2@sapo.pt>
Message-ID: <CAF9-5jN7ZNz8wWRxZu_=qrUsTdZNXENohvJ7mwLgsdGtd1hRzg@mail.gmail.com>

Thank you so much this worked wonderfully!

On Sat, Oct 5, 2019 at 4:05 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> Hello,
>
> Please CC the list.
>
> The following code does what you want.
>
> tot <- data.frame(a = c("E10123", "F123", "G4567"),
>                    b = c("a123", "E112345", "b456"))
>
> e10 <- sapply(tot, function(x) grepl("^E10", x))
> e10 <- rowSums(e10) > 0
> e11 <- sapply(tot, function(x) grepl("^E11", x))
> e11 <- rowSums(e11) > 0
>
> tot$newcol <- -9
> tot$newcol[e10] <- 1
> tot$newcol[e11] <- 2
>
>
> On both cases the 2 lines sapply/rowSums can be made one with
>
> rowSums(sapply(...)) > 0
>
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 20:52 de 05/10/19, Ana Marija escreveu:
> > Hi Rui,
> >
> > thank you so much for getting back to me.
> >
> > I did what you told me:
> > cols <- sapply(tot, function(x) any(grepl("^E10", x)))
> > a=which(cols)
> >
> > so this gives me name of 49 columns that have that particular string
> >
> > But how do I create a new column in my tot data frame (the column
> > would be called "TD") which has 1 in the row where the subject
> > (designated in the "eid" column) has a string which starts with "E10"
> > and it has 2 if it starts with "E11" and otherwise it is -9.
> >
> >> head(tot)[1:3,1:3]
> >        eid          sex_f31_0_0         year_of_birth_f34_0_0
> > 1 1000017      Female                  1938
> > 2 1000025      Female                  1951
> > 3 1000038        Male                     1961
> >
> > Thanks you so much!
> >
> >
> > On Sat, Oct 5, 2019 at 2:24 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
> >>
> >> Hello,
> >>
> >> Try the following
> >>
> >> cols <- sapply(tot, function(x) any(grepl("^E94", x)))
> >>
> >> To have the column numbers,
> >>
> >> which(cols)
> >>
> >>
> >> Hope this helps,
> >>
> >> Rui Barradas
> >>
> >> ?s 19:50 de 05/10/19, Ana Marija escreveu:
> >>> Hello,
> >>>
> >>> I have a data frame tot which has many columns and many rows.
> >>>
> >>> I am trying to find all columns that have say a value in any of their
> >>> rows that STARTS WITH: "E94"
> >>>
> >>> for example there are columns like this:
> >>>
> >>>> unique(tot$diagnoses_icd9_f41271_0_44)
> >>> [1] NA      "E9420"
> >>>
> >>> I tried:
> >>> s=select(tot,starts_with("E94"))
> >>>
> >>> but this didn't return me anything. Data type in those columns is character.
> >>>
> >>> Thanks
> >>> Ana
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >>>


From @chw|dom @end|ng |rom gmx@net  Sat Oct  5 23:56:34 2019
From: @chw|dom @end|ng |rom gmx@net (Frank Schwidom)
Date: Sat, 5 Oct 2019 23:56:34 +0200
Subject: [R] Axiom alike formula needs to get prooved
Message-ID: <20191005215634.GA6761@debian64>

Hi,

I found the following relationship:

it is given

x is a vector, bm1 and bm2 are vectors of type logical end exactly as long as x

then the following formula returns alwasy TRUE:

all( x[ bm1 & bm2] == x[ bm2][ bm1[ bm2]] )

.

I think it is no such great deal and a lot of R programmers will know this and use it in their code intutively.

But the point is: Years ago I tried to prove this relationship and found no acceptable solution for that.

Is anyone able to prove this in a mathematical correct way?

Besides that: here is another one

it is given a dataframe 'result_df' with at least the column 'result_value'

best_results <- with( result_df, sort( result_value))[1:100] # lower is better
best_results_bmask <- with( result_df, result_value %in% best_results)

best_results_order2 <- with( result_df[ best_results_bmask, ], order( result_value))

df1 <- result_df[best_results_order, ][ best_results_bmask[best_results_order], ]
df2 <- result_df[best_results_bmask, ][best_results_order2, ]

all( df1 == df2)

# that was the easy part, now this:

df3 <- result_df[best_results_order[ best_results_bmask[ best_results_order]], ]

all( df1 == df3) # it works, but how can I understand that and how it is proven?

Regards
Frank Schwidom


From drj|m|emon @end|ng |rom gm@||@com  Sun Oct  6 02:09:41 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Sun, 6 Oct 2019 11:09:41 +1100
Subject: [R] Testing for normality in categorical data
In-Reply-To: <CAHNFy0rmMo7TTU3UGzB6aF6p5noQWA8tP75oBAt+3rHmLOzDjA@mail.gmail.com>
References: <CAHNFy0rmMo7TTU3UGzB6aF6p5noQWA8tP75oBAt+3rHmLOzDjA@mail.gmail.com>
Message-ID: <CA+8X3fWEM64ii2kupXVK6i5cfrY2R8Gz6=vOFoMckCbyPHhqGw@mail.gmail.com>

Hi Nancy,
The chickwts dataset contains one sort-of continuous variable (weight)
and a categorical variable (feed). Two things that will help you to
understand what you are trying to do is to "eyeball" the "weight"
data:

# this shows you the rough distribution of chick weights
hist(chickwts$weight)
# this shows you how well the distribution of weights fits a normal distribution
qqnorm(chickwts$weight)

For the Shapiro-Wilks statistic on the distribution of all of the weights:

shapiro.test(chickwts$weight)

and if you really want to test the normality within the feed groups:

by(chickwts$weight,chickwts$feed,shapiro.test)

Now because the p-values returned are all fairly large, you can accept
the null hypothesis of normality.
As Bert has noted, it looks like you are just throwing the data into
the functions without really knowing what you are doing. Hopefully,
the above will get you started.

Jim

On Sat, Oct 5, 2019 at 11:19 PM Nancy Felix <nancyfelix25 at gmail.com> wrote:
>
> Hello
> I have data that are categorical both independent variable and dependent as
> well having levels more than 3. How can i check the normality of my data?
>
> I have tried the example given of Shapiro-Wilk for levels of factors
>
> data
> summary(chickwts)
>
> ## linear model and ANOVA
> fm <- lm(weight ~ feed, data = chickwts)
> anova(fm)
>
> ## QQ plot for residuals + Shapiro-Wilk test
> shapiro.test(residuals(fm))
>
> ## separate tests for all groups of observations
> ## (with some formatting)
> do.call("rbind", with(chickwts, tapply(weight, feed,
>    function(x) unlist(shapiro.test(x)[c("statistic", "p.value")]))))
>
> But ended up with Error message that x should be numeric and more comments
> see below.
> Hope to get some help on this
>
> Thanks,
> Nancy
>
> ## linear model and ANOVA
> > fm <- lm(retaliation ~ occupation, data = kazi)
> Warning messages:
> 1: In model.response(mf, "numeric") :
>   using type = "numeric" with a factor response will be ignored
> 2: In Ops.factor(y, z$residuals) : ?-? not meaningful for factors
> > anova(fm)
> Error in if (ssr < 1e-10 * mss) warning("ANOVA F-tests on an essentially
> perfect fit are unreliable") :
>   missing value where TRUE/FALSE needed
> In addition: Warning message:
> In Ops.factor(object$residuals, 2) : ?^? not meaningful for factors
> > ## QQ plot for residuals + Shapiro-Wilk test
> > shapiro.test(residuals(fm))
> Error in class(y) <- oldClass(x) :
>   adding class "factor" to an invalid object
> > ## separate tests for all groups of observations
> > ## (with some formatting)
> > do.call("rbind", with(kazi, tapply(retaliation, occupation,
> +                                        function(x)
> unlist(shapiro.test(x)[c("statistic", "p.value")]))))
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From er|cjberger @end|ng |rom gm@||@com  Sun Oct  6 09:24:09 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Sun, 6 Oct 2019 10:24:09 +0300
Subject: [R] Vargha and delaney effect size
In-Reply-To: <CAJhui+tLTWVgi2aK5001inONncfVoHSP1uskaewatMCp4914rA@mail.gmail.com>
References: <CAJhui+s1Tk=T1SY_GmmH8ewG8f_W38wc99DoCq82NZhObk6WLw@mail.gmail.com>
 <CAGgJW77NfHBZkuWwRuc8vD3XK1vxhqv6+HQ0680pqov5cNkfTQ@mail.gmail.com>
 <CAJhui+tLTWVgi2aK5001inONncfVoHSP1uskaewatMCp4914rA@mail.gmail.com>
Message-ID: <CAGgJW76TzHS-MwEOsNy-OKXv0FeOtwntZosdyJSux-FA_rHZ_A@mail.gmail.com>

[Sending your follow-on question to the full R-help list]

On Fri, Oct 4, 2019 at 7:13 PM javed khan <javedbtk111 at gmail.com> wrote:

> Thanks for your reply. I checked the example of treatment and control but
> I can not understand the first four lines. How can we do it if we have the
> data (both columns) in excel and we read it in code with read.csv.
>
> Best regards
>
> On Friday, October 4, 2019, Eric Berger <ericjberger at gmail.com> wrote:
>
>> For general documentation about the effsize package you would do:
>> > help(package="effsize")
>>
>> For information on calculations related to vargha:
>> >??vargha
>> This command displays effsize::VD.A, which you can find out about via the
>> command
>> >?effsize::VD.A
>> This displays the documentation for the function VD.A. At the top of the
>> documentation you have the Description and Usage sections. At the bottom
>> there are some examples of using the function.
>>
>> HTH,
>> Eric
>>
>>
>> On Fri, Oct 4, 2019 at 10:44 AM javed khan <javedbtk111 at gmail.com> wrote:
>>
>>> I am new to R language. I have two column data I.e X= 0.23, 0.04, 0.5, -
>>> 0.20 etc and B= 0.34, 0.01, 0.1, 0.09 etc. The number of observations are
>>> 100. How can I apply vargha and delaney effect size in R? I load the data
>>> as, read.csv(mydata.csv) and load the library effsize. Please if someone
>>> can help because I have no idea about the next step to follow.
>>>
>>> Thanks
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide
>>> http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>
>>

	[[alternative HTML version deleted]]


From phdhw@ng @end|ng |rom gm@||@com  Sun Oct  6 11:12:25 2019
From: phdhw@ng @end|ng |rom gm@||@com (Kum-Hoe Hwang)
Date: Sun, 6 Oct 2019 18:12:25 +0900
Subject: [R] Vargha and delaney effect size
In-Reply-To: <CAGgJW76TzHS-MwEOsNy-OKXv0FeOtwntZosdyJSux-FA_rHZ_A@mail.gmail.com>
References: <CAJhui+s1Tk=T1SY_GmmH8ewG8f_W38wc99DoCq82NZhObk6WLw@mail.gmail.com>
 <CAGgJW77NfHBZkuWwRuc8vD3XK1vxhqv6+HQ0680pqov5cNkfTQ@mail.gmail.com>
 <CAJhui+tLTWVgi2aK5001inONncfVoHSP1uskaewatMCp4914rA@mail.gmail.com>
 <CAGgJW76TzHS-MwEOsNy-OKXv0FeOtwntZosdyJSux-FA_rHZ_A@mail.gmail.com>
Message-ID: <CAK_eZd7v0hFr2Ej1eX-KMMOrr6GfuRAS+S8ZZN+tykEPRH_5sQ@mail.gmail.com>

On Sun, Oct 6, 2019 at 4:24 PM Eric Berger <ericjberger at gmail.com> wrote:

> [Sending your follow-on question to the full R-help list]
>
> On Fri, Oct 4, 2019 at 7:13 PM javed khan <javedbtk111 at gmail.com> wrote:
>
> > Thanks for your reply. I checked the example of treatment and control but
> > I can not understand the first four lines. How can we do it if we have
> the
> > data (both columns) in excel and we read it in code with read.csv.
> >
> > Best regards
> >
> > On Friday, October 4, 2019, Eric Berger <ericjberger at gmail.com> wrote:
> >
> >> For general documentation about the effsize package you would do:
> >> > help(package="effsize")
> >>
> >> For information on calculations related to vargha:
> >> >??vargha
> >> This command displays effsize::VD.A, which you can find out about via
> the
> >> command
> >> >?effsize::VD.A
> >> This displays the documentation for the function VD.A. At the top of the
> >> documentation you have the Description and Usage sections. At the bottom
> >> there are some examples of using the function.
> >>
> >> HTH,
> >> Eric
> >>
> >>
> >> On Fri, Oct 4, 2019 at 10:44 AM javed khan <javedbtk111 at gmail.com>
> wrote:
> >>
> >>> I am new to R language. I have two column data I.e X= 0.23, 0.04, 0.5,
> -
> >>> 0.20 etc and B= 0.34, 0.01, 0.1, 0.09 etc. The number of observations
> are
> >>> 100. How can I apply vargha and delaney effect size in R? I load the
> data
> >>> as, read.csv(mydata.csv) and load the library effsize. Please if
> someone
> >>> can help because I have no idea about the next step to follow.
> >>>
> >>> Thanks
> >>>
> >>>         [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide
> >>> http://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >>>
> >>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: plot_2019-10-05.py
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20191006/046cafda/attachment.ksh>

From vodvo@ @end|ng |rom zoho@com  Sun Oct  6 13:29:33 2019
From: vodvo@ @end|ng |rom zoho@com (vod vos)
Date: Sun, 06 Oct 2019 04:29:33 -0700
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
Message-ID: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>

I got hundreds of csv files. The real formats in each csv file are as follows:

aa(cm)
1, 2 , 3,

bb(mm)
1, 2, 3,
4, 5, 6,
7, 8, 9,

cc(mm)
3, 4, 5,
7, 5, 9,
6, 5, 8,

How can I use read.table or read.csv to convert the csv files 
to a tidy data frame format as follow:

aa, bb, cc
1, 1, 3
1, 2, 4
1, 3, 5
2, 4, 7
2, 5, 5
2, 6, 9
3, 7, 6
3, 8, 5
3, 9, 8

many thanks.


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Oct  6 14:08:41 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 6 Oct 2019 08:08:41 -0400
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
In-Reply-To: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
References: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
Message-ID: <49702871-961e-d638-b2f6-421b915ef64e@gmail.com>

On 06/10/2019 7:29 a.m., vod vos via R-help wrote:
> I got hundreds of csv files. The real formats in each csv file are as follows:
> 
> aa(cm)
> 1, 2 , 3,
> 
> bb(mm)
> 1, 2, 3,
> 4, 5, 6,
> 7, 8, 9,
> 
> cc(mm)
> 3, 4, 5,
> 7, 5, 9,
> 6, 5, 8,
> 
> How can I use read.table or read.csv to convert the csv files
> to a tidy data frame format as follow:
> 
> aa, bb, cc
> 1, 1, 3
> 1, 2, 4
> 1, 3, 5
> 2, 4, 7
> 2, 5, 5
> 2, 6, 9
> 3, 7, 6
> 3, 8, 5
> 3, 9, 8
> 
> many thanks.

You'll need more than those two functions to do the transformation you 
want.  To work out what you need, write out the process in detail in 
English (or another natural language), not in code.  For example:

1.  Read aa from file 1.
2.  Read bb from file 2.
3.  Read cc from file 3.
4.  Expand all vectors to the same length.
5.  Combine them into a single dataframe.

Then work out each step separately.  I think you'll want to use 
something like scan("filename", skip = 1, sep = ",") in steps 1, 2, and 
3, but this will add NA values at the end of each line because of the 
final comma, so you could do this:

aa <- scan("file1", skip = 1, sep = ",")
aa <- aa[!is.na(aa)]

and similarly for the others.

I don't know the rules for expanding that you'll need in your real data, 
but for your example step 4 could be

   aa <- rep(aa, each = 3)

Then step 5 could be

   result <- data.frame(aa, bb, cc)

Duncan Murdoch


From vodvo@ @end|ng |rom zoho@com  Sun Oct  6 14:23:14 2019
From: vodvo@ @end|ng |rom zoho@com (vod vos)
Date: Sun, 06 Oct 2019 05:23:14 -0700
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
In-Reply-To: <49702871-961e-d638-b2f6-421b915ef64e@gmail.com>
References: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
 <49702871-961e-d638-b2f6-421b915ef64e@gmail.com>
Message-ID: <16da1061935.e14fdbe110825.3643455304028514725@zoho.com>

The problem is aa, bb and cc all in a single csv file 
contains no blank line.
The single csv file like list output.

aa(cm)
 1, 2 , 3,
 bb(mm)
  1, 2, 3,
 4, 5, 6,
 7, 8, 9,
 cc(mm)
 3, 4, 5,
 7, 5, 9,
 6, 5, 8,



 ---- ? ???, 06 ?? 2019 05:08:41 -0700 Duncan Murdoch <murdoch.duncan at gmail.com> ?? ----
 > On 06/10/2019 7:29 a.m., vod vos via R-help wrote:
 > > I got hundreds of csv files. The real formats in each csv file are as follows:
 > > 
 > > aa(cm)
 > > 1, 2 , 3,
 > > 
 > > bb(mm)
 > > 1, 2, 3,
 > > 4, 5, 6,
 > > 7, 8, 9,
 > > 
 > > cc(mm)
 > > 3, 4, 5,
 > > 7, 5, 9,
 > > 6, 5, 8,
 > > 
 > > How can I use read.table or read.csv to convert the csv files
 > > to a tidy data frame format as follow:
 > > 
 > > aa, bb, cc
 > > 1, 1, 3
 > > 1, 2, 4
 > > 1, 3, 5
 > > 2, 4, 7
 > > 2, 5, 5
 > > 2, 6, 9
 > > 3, 7, 6
 > > 3, 8, 5
 > > 3, 9, 8
 > > 
 > > many thanks.
 > 
 > You'll need more than those two functions to do the transformation you 
 > want.  To work out what you need, write out the process in detail in 
 > English (or another natural language), not in code.  For example:
 > 
 > 1.  Read aa from file 1.
 > 2.  Read bb from file 2.
 > 3.  Read cc from file 3.
 > 4.  Expand all vectors to the same length.
 > 5.  Combine them into a single dataframe.
 > 
 > Then work out each step separately.  I think you'll want to use 
 > something like scan("filename", skip = 1, sep = ",") in steps 1, 2, and 
 > 3, but this will add NA values at the end of each line because of the 
 > final comma, so you could do this:
 > 
 > aa <- scan("file1", skip = 1, sep = ",")
 > aa <- aa[!is.na(aa)]
 > 
 > and similarly for the others.
 > 
 > I don't know the rules for expanding that you'll need in your real data, 
 > but for your example step 4 could be
 > 
 >    aa <- rep(aa, each = 3)
 > 
 > Then step 5 could be
 > 
 >    result <- data.frame(aa, bb, cc)
 > 
 > Duncan Murdoch
 >


From murdoch@dunc@n @end|ng |rom gm@||@com  Sun Oct  6 14:25:26 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 6 Oct 2019 08:25:26 -0400
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
In-Reply-To: <16da1061935.e14fdbe110825.3643455304028514725@zoho.com>
References: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
 <49702871-961e-d638-b2f6-421b915ef64e@gmail.com>
 <16da1061935.e14fdbe110825.3643455304028514725@zoho.com>
Message-ID: <7e358e27-cd9b-3c7a-e736-805c2e0c9dde@gmail.com>

On 06/10/2019 8:23 a.m., vod vos wrote:
> The problem is aa, bb and cc all in a single csv file
> contains no blank line.

So what steps do you need, and which of them do you need help with?

Duncan Murdoch

> The single csv file like list output.
> 
> aa(cm)
>   1, 2 , 3,
>   bb(mm)
>    1, 2, 3,
>   4, 5, 6,
>   7, 8, 9,
>   cc(mm)
>   3, 4, 5,
>   7, 5, 9,
>   6, 5, 8,
> 
> 
> 
>   ---- ? ???, 06 ?? 2019 05:08:41 -0700 Duncan Murdoch <murdoch.duncan at gmail.com> ?? ----
>   > On 06/10/2019 7:29 a.m., vod vos via R-help wrote:
>   > > I got hundreds of csv files. The real formats in each csv file are as follows:
>   > >
>   > > aa(cm)
>   > > 1, 2 , 3,
>   > >
>   > > bb(mm)
>   > > 1, 2, 3,
>   > > 4, 5, 6,
>   > > 7, 8, 9,
>   > >
>   > > cc(mm)
>   > > 3, 4, 5,
>   > > 7, 5, 9,
>   > > 6, 5, 8,
>   > >
>   > > How can I use read.table or read.csv to convert the csv files
>   > > to a tidy data frame format as follow:
>   > >
>   > > aa, bb, cc
>   > > 1, 1, 3
>   > > 1, 2, 4
>   > > 1, 3, 5
>   > > 2, 4, 7
>   > > 2, 5, 5
>   > > 2, 6, 9
>   > > 3, 7, 6
>   > > 3, 8, 5
>   > > 3, 9, 8
>   > >
>   > > many thanks.
>   >
>   > You'll need more than those two functions to do the transformation you
>   > want.  To work out what you need, write out the process in detail in
>   > English (or another natural language), not in code.  For example:
>   >
>   > 1.  Read aa from file 1.
>   > 2.  Read bb from file 2.
>   > 3.  Read cc from file 3.
>   > 4.  Expand all vectors to the same length.
>   > 5.  Combine them into a single dataframe.
>   >
>   > Then work out each step separately.  I think you'll want to use
>   > something like scan("filename", skip = 1, sep = ",") in steps 1, 2, and
>   > 3, but this will add NA values at the end of each line because of the
>   > final comma, so you could do this:
>   >
>   > aa <- scan("file1", skip = 1, sep = ",")
>   > aa <- aa[!is.na(aa)]
>   >
>   > and similarly for the others.
>   >
>   > I don't know the rules for expanding that you'll need in your real data,
>   > but for your example step 4 could be
>   >
>   >    aa <- rep(aa, each = 3)
>   >
>   > Then step 5 could be
>   >
>   >    result <- data.frame(aa, bb, cc)
>   >
>   > Duncan Murdoch
>   >
>


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sun Oct  6 16:58:37 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 6 Oct 2019 15:58:37 +0100
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
In-Reply-To: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
References: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
Message-ID: <6e6bef58-bc45-3df5-681d-132a167380a3@sapo.pt>

Hello,

It is not clear if all files have

* a first block with just one data line
* all other blocks with as many rows as the numbers in that first data line.

If yes, maybe something like this?

lns <- readLines("strange.csv")
lns <- lns[sapply(lns, nchar) > 0]
lns <- sub(",$", "", lns)
i_title <- grep("[[:alpha:]]", lns)

tmp <- lapply(seq_along(i_title), function(i){
   tmp <- if(i < length(i_title)){
     lns[(i_title[i] + 1):(i_title[i + 1] - 1)]
   }else{
     lns[(i_title[i] + 1):length(lns)]
   }
   list(n = length(tmp), text = unlist(strsplit(tmp, ",")))
})

n <- max(sapply(tmp, '[[', 'n'))
tmp <- lapply(tmp, function(x) as.numeric(x$text))
tmp[[1]] <- rep(tmp[[1]], each = n)
res <- do.call(cbind.data.frame, tmp)
names(res) <- lns[i_title]
res


If you have hundreds of files, you should make a function out of the 
code above.

Hope this helps,

Rui Barradas

?s 12:29 de 06/10/19, vod vos via R-help escreveu:
> I got hundreds of csv files. The real formats in each csv file are as follows:
> 
> aa(cm)
> 1, 2 , 3,
> 
> bb(mm)
> 1, 2, 3,
> 4, 5, 6,
> 7, 8, 9,
> 
> cc(mm)
> 3, 4, 5,
> 7, 5, 9,
> 6, 5, 8,
> 
> How can I use read.table or read.csv to convert the csv files
> to a tidy data frame format as follow:
> 
> aa, bb, cc
> 1, 1, 3
> 1, 2, 4
> 1, 3, 5
> 2, 4, 7
> 2, 5, 5
> 2, 6, 9
> 3, 7, 6
> 3, 8, 5
> 3, 9, 8
> 
> many thanks.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From vodvos m@iii@g oii zoho@com  Mon Oct  7 10:23:37 2019
From: vodvos m@iii@g oii zoho@com (vodvos m@iii@g oii zoho@com)
Date: Mon, 07 Oct 2019 01:23:37 -0700
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
In-Reply-To: <16da54cc3ec.f578798018954.6050030969411892510@zoho.com>
References: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
 <6e6bef58-bc45-3df5-681d-132a167380a3@sapo.pt>
 <16da54cc3ec.f578798018954.6050030969411892510@zoho.com>
Message-ID: <16da55115b2.120d9d66119006.4475470860921401027@zoho.com>

The csv file is exported from Windows (dos format), so the line break is different from Unix.


 ---- ? ???, 07 ?? 2019 01:18:54 -0700  <vodvos at zoho.com> ?? ----
 > I am mad about importing this strange csv format type.
 > 
 > The real csv has been attached now. The raw data points are huge.
 > 
 > Many thanks.
 > 
 > 
 > 
 > 
 >  ---- ? ???, 06 ?? 2019 07:58:37 -0700 Rui Barradas <ruipbarradas at sapo.pt> ?? ----
 >  > Hello,
 >  > 
 >  > It is not clear if all files have
 >  > 
 >  > * a first block with just one data line
 >  > * all other blocks with as many rows as the numbers in that first data line.
 >  > 
 >  > If yes, maybe something like this?
 >  > 
 >  > lns <- readLines("strange.csv")
 >  > lns <- lns[sapply(lns, nchar) > 0]
 >  > lns <- sub(",$", "", lns)
 >  > i_title <- grep("[[:alpha:]]", lns)
 >  > 
 >  > tmp <- lapply(seq_along(i_title), function(i){
 >  >    tmp <- if(i < length(i_title)){
 >  >      lns[(i_title[i] + 1):(i_title[i + 1] - 1)]
 >  >    }else{
 >  >      lns[(i_title[i] + 1):length(lns)]
 >  >    }
 >  >    list(n = length(tmp), text = unlist(strsplit(tmp, ",")))
 >  > })
 >  > 
 >  > n <- max(sapply(tmp, '[[', 'n'))
 >  > tmp <- lapply(tmp, function(x) as.numeric(x$text))
 >  > tmp[[1]] <- rep(tmp[[1]], each = n)
 >  > res <- do.call(cbind.data.frame, tmp)
 >  > names(res) <- lns[i_title]
 >  > res
 >  > 
 >  > 
 >  > If you have hundreds of files, you should make a function out of the 
 >  > code above.
 >  > 
 >  > Hope this helps,
 >  > 
 >  > Rui Barradas
 >  > 
 >  > ?s 12:29 de 06/10/19, vod vos via R-help escreveu:
 >  > > I got hundreds of csv files. The real formats in each csv file are as follows:
 >  > > 
 >  > > aa(cm)
 >  > > 1, 2 , 3,
 >  > > 
 >  > > bb(mm)
 >  > > 1, 2, 3,
 >  > > 4, 5, 6,
 >  > > 7, 8, 9,
 >  > > 
 >  > > cc(mm)
 >  > > 3, 4, 5,
 >  > > 7, 5, 9,
 >  > > 6, 5, 8,
 >  > > 
 >  > > How can I use read.table or read.csv to convert the csv files
 >  > > to a tidy data frame format as follow:
 >  > > 
 >  > > aa, bb, cc
 >  > > 1, 1, 3
 >  > > 1, 2, 4
 >  > > 1, 3, 5
 >  > > 2, 4, 7
 >  > > 2, 5, 5
 >  > > 2, 6, 9
 >  > > 3, 7, 6
 >  > > 3, 8, 5
 >  > > 3, 9, 8
 >  > > 
 >  > > many thanks.
 >  > > 
 >  > > ______________________________________________
 >  > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
 >  > > https://stat.ethz.ch/mailman/listinfo/r-help
 >  > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
 >  > > and provide commented, minimal, self-contained, reproducible code.
 >  > > 
 >  >


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Oct  7 18:55:33 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 7 Oct 2019 17:55:33 +0100
Subject: [R] =?utf-8?q?how_to_read_this_kind_of_csv_in_R=EF=BC=9F?=
In-Reply-To: <16da54cc3ec.f578798018954.6050030969411892510@zoho.com>
References: <16da0d4f520.e9df5b0c10327.3778377628126795445@zoho.com>
 <6e6bef58-bc45-3df5-681d-132a167380a3@sapo.pt>
 <16da54cc3ec.f578798018954.6050030969411892510@zoho.com>
Message-ID: <38c84265-4116-44b7-7375-dbc6c612c0d3@sapo.pt>

Hello,

OK, I had some spare time. Try



readCSVFile <- function(filename){
   lns <- readLines(filename)
   lns <- lns[sapply(lns, nchar) > 0]
   lns <- gsub(" ", "", lns)
   lns <- sub(";$", "", lns)
   i_title <- grep("[[:alpha:]]", lns)

   blocks <- lapply(seq_along(i_title)[-1], function(i){
     if(i == length(i_title)){
       j <- i_title[i] + 1
       k <- length(lns)
     }else{
       j <- i_title[i] + 1
       k <- i_title[i + 1] - 1
     }
     lns[j:k]
   })

   n <- length(unlist(strsplit(blocks[[1]][1], ";")))
   first <- unlist(strsplit(lns[i_title[1] + 1], ";"))
   first <- as.numeric(first)
   first <- rep(first, each = n)

   blocks <- lapply(blocks, function(x){
     unlist(strsplit(x, ";"))
   })
   res <- do.call(cbind.data.frame, blocks)
   res <- cbind.data.frame(first, res)

   names(res) <- sub("\\[.*\\]$", "", lns[i_title])
   res
}

df1 <- readCSVFile("strange.csv")


If this function doesn't do it, please try to make an effort on your 
own, R-Help is not a code writing service, it's a mail list for *doubts* 
on R code.

Hope this helps,

Rui Barradas

?s 09:18 de 07/10/19, vodvos at zoho.com escreveu:
> I am mad about importing this strange csv format type.
> 
> The real csv has been attached now. The raw data points are huge.
> 
> Many thanks.
> 
> 
> 
> 
>   ---- ? ???, 06 ?? 2019 07:58:37 -0700 Rui Barradas <ruipbarradas at sapo.pt> ?? ----
>   > Hello,
>   >
>   > It is not clear if all files have
>   >
>   > * a first block with just one data line
>   > * all other blocks with as many rows as the numbers in that first data line.
>   >
>   > If yes, maybe something like this?
>   >
>   > lns <- readLines("strange.csv")
>   > lns <- lns[sapply(lns, nchar) > 0]
>   > lns <- sub(",$", "", lns)
>   > i_title <- grep("[[:alpha:]]", lns)
>   >
>   > tmp <- lapply(seq_along(i_title), function(i){
>   >    tmp <- if(i < length(i_title)){
>   >      lns[(i_title[i] + 1):(i_title[i + 1] - 1)]
>   >    }else{
>   >      lns[(i_title[i] + 1):length(lns)]
>   >    }
>   >    list(n = length(tmp), text = unlist(strsplit(tmp, ",")))
>   > })
>   >
>   > n <- max(sapply(tmp, '[[', 'n'))
>   > tmp <- lapply(tmp, function(x) as.numeric(x$text))
>   > tmp[[1]] <- rep(tmp[[1]], each = n)
>   > res <- do.call(cbind.data.frame, tmp)
>   > names(res) <- lns[i_title]
>   > res
>   >
>   >
>   > If you have hundreds of files, you should make a function out of the
>   > code above.
>   >
>   > Hope this helps,
>   >
>   > Rui Barradas
>   >
>   > ?s 12:29 de 06/10/19, vod vos via R-help escreveu:
>   > > I got hundreds of csv files. The real formats in each csv file are as follows:
>   > >
>   > > aa(cm)
>   > > 1, 2 , 3,
>   > >
>   > > bb(mm)
>   > > 1, 2, 3,
>   > > 4, 5, 6,
>   > > 7, 8, 9,
>   > >
>   > > cc(mm)
>   > > 3, 4, 5,
>   > > 7, 5, 9,
>   > > 6, 5, 8,
>   > >
>   > > How can I use read.table or read.csv to convert the csv files
>   > > to a tidy data frame format as follow:
>   > >
>   > > aa, bb, cc
>   > > 1, 1, 3
>   > > 1, 2, 4
>   > > 1, 3, 5
>   > > 2, 4, 7
>   > > 2, 5, 5
>   > > 2, 6, 9
>   > > 3, 7, 6
>   > > 3, 8, 5
>   > > 3, 9, 8
>   > >
>   > > many thanks.
>   > >
>   > > ______________________________________________
>   > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>   > > https://stat.ethz.ch/mailman/listinfo/r-help
>   > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>   > > and provide commented, minimal, self-contained, reproducible code.
>   > >
>   >
>


From jte||er|@@rproject @end|ng |rom gm@||@com  Mon Oct  7 20:36:28 2019
From: jte||er|@@rproject @end|ng |rom gm@||@com (Juan Telleria Ruiz de Aguirre)
Date: Mon, 7 Oct 2019 20:36:28 +0200
Subject: [R] How to use Conda with R + RStudio Server
In-Reply-To: <0D71DB1F-4CF2-4932-B7D3-7F6B1055EB82@dcn.davis.ca.us>
References: <CAJXDcw1efRXetQMvBLGu3r1eivw6QL=swNK2yAPJB4suDpiKsA@mail.gmail.com>
 <0D71DB1F-4CF2-4932-B7D3-7F6B1055EB82@dcn.davis.ca.us>
Message-ID: <CAJXDcw1bSbuLp5grahigBZNo0aZU1WvcFrCA=YBvNHd4BCRijA@mail.gmail.com>

Solution:

https://github.com/grst/rstudio-server-conda

It works.

	[[alternative HTML version deleted]]


From vodvo@ @end|ng |rom zoho@com  Tue Oct  8 17:33:20 2019
From: vodvo@ @end|ng |rom zoho@com (vod vos)
Date: Tue, 08 Oct 2019 08:33:20 -0700
Subject: [R] How to map points to a fixed points position,
 then draw contours to the mapped points?
Message-ID: <16dac00dc19.ebc55a652802.8999418205272658599@zoho.com>

Hello,

How to map points to a fixed points position, then draw contours to the mapped points?

A data frame like this:

r <- rep(seq(0,3.8,0.2), 256)

PI257 <- seq(0,360,360/256)
PI256 <- PI257[-257]
PI25631 <- rep(PI256, 20)

El <- rnorm(5120, mean = 42, sd = 4)

xyz <- data.frame(r, PI25631, EI)

How to map y points to the fixed position defined by x and y in a polar system,
using R base plot functions or ggplot2 (aes mapping) to achieve a similar figure like the link:

https://www.clspectrum.com/archive/2009/October/images/CLS_October_A10_Fig04.jpg

Sincerely yours,
	[[alternative HTML version deleted]]


From r@m|ro @end|ng |rom prec|@|onb|o@@@@y@com  Tue Oct  8 23:26:59 2019
From: r@m|ro @end|ng |rom prec|@|onb|o@@@@y@com (Ramiro Barrantes)
Date: Tue, 8 Oct 2019 21:26:59 +0000
Subject: [R] How to refer to my package from another package DESCRIPTION
Message-ID: <476944A9-501B-4E57-BC22-3AADA8EFFC0D@contoso.com>

Hello,

I am developing some packages. Package1 requires Package2, both of which I developed:

Right now Package2 is installed properly here:

/myHome/libraries/Package2

Package1 needs Package2.  Package1 refers to Package2 both in the Roxygen @import field for one of the  functions, and also in the Imports section in the DESCRIPTION

However, when I do ?R CMD check Package1? I get:

* checking loading without being on the library search path ... WARNING
Error: package or namespace load failed for ?Package1? in loadNamespace(i, c(lib.loc, .libPaths()), versionCheck = vI[[i]]):
 there is no package called ?Package2?

It can?t find it.  However, it does not seem like the correct thing is to have /myHome/libraries in R_LIBS_USER

How should I go about this?

Thanks in advance,
Ramiro

	[[alternative HTML version deleted]]


From n|cho|@@@wr@y @end|ng |rom nt|wor|d@com  Wed Oct  9 17:12:57 2019
From: n|cho|@@@wr@y @end|ng |rom nt|wor|d@com (Nick Wray)
Date: Wed, 9 Oct 2019 16:12:57 +0100 (BST)
Subject: [R] Creating a histogram from a frequency vector
Message-ID: <31702472.1339008.1570633977558@mail2.virginmedia.com>

I have a vector like say 73,53,42,67,41,50 where these numbers are the number of occurrences of the data values 1,2,3,4,5,6 - so in essence I have the frequency bit from the hist() function.  I can't see an elegant way (there are clearly messy workarounds like generating a vector of 73 1's, 53 2's etc) of creating a histogram from this data set.  Is there one?

Thanks Nick Wray
	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Wed Oct  9 17:21:11 2019
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Wed, 9 Oct 2019 18:21:11 +0300
Subject: [R] Creating a histogram from a frequency vector
In-Reply-To: <31702472.1339008.1570633977558@mail2.virginmedia.com>
References: <31702472.1339008.1570633977558@mail2.virginmedia.com>
Message-ID: <20191009182111.7238ef8c@trisector>

On Wed, 9 Oct 2019 16:12:57 +0100 (BST)
Nick Wray via R-help <r-help at r-project.org> wrote:

> I have a vector like say 73,53,42,67,41,50 where these numbers are
> the number of occurrences of the data values 1,2,3,4,5,6

> I can't see an elegant way <...> of creating a histogram from this
> data set.  Is there one?

A histogram is a bar plot of frequencies of data values falling into
specific bins, so you can reconstruct one yourself using the barplot()
function.

-- 
Best regards,
Ivan


From S@E|||@on @end|ng |rom LGCGroup@com  Wed Oct  9 18:29:28 2019
From: S@E|||@on @end|ng |rom LGCGroup@com (Stephen Ellison)
Date: Wed, 9 Oct 2019 16:29:28 +0000
Subject: [R] Creating a histogram from a frequency vector
In-Reply-To: <31702472.1339008.1570633977558@mail2.virginmedia.com>
References: <31702472.1339008.1570633977558@mail2.virginmedia.com>
Message-ID: <9f305aa15a7744c398d37225382bf9d3@GBDCVPEXC08.corp.lgc-group.com>

> I have a vector like say 73,53,42,67,41,50 where these numbers are the
> number of occurrences of the data values 1,2,3,4,5,6 - so in essence I have
> the frequency bit from the hist() function.  I can't see an elegant way (there
> are clearly messy workarounds like generating a vector of 73 1's, 53 2's etc) of
> creating a histogram from this data set.  Is there one?

hist() generates a histogram object that it then plots.

You can use your frequency vector to generate the same kind of object and then just plot it, though you'll have to provide breaks (possibly defaulted, if they're just 0:length(frequencies) ) and you'd have to work on the density component a bit.

I'm sure this is out there somewhere already, but here's as an example, using values pulled from a (nonequidistant) ?hist example and using a short off-the-cuff function to build the histogram object:

freqs <- c(11, 19,  5,  3,  2,  1,  0,  0,  2,  3,  2) #islands
brks <- c(4*0:5, 10*3:5, 70, 100, 140)

freqhist <- function(counts, xname=deparse(substitute(frequencies)), breaks=0:length(frequencies), 
	mids=(breaks[-1]+breaks[-length(breaks)])/2 , ...){
	
	binwidths <- diff(breaks) #This copes with unequal break intervals
	dens <- counts/(binwidths*sum(counts))

	retval <- structure(list(breaks=breaks, counts=counts,, density=dens, mids=mids, xname=xname, equidist=all(diff(breaks)==diff(breaks[1:2]) ),
		class="histogram")
}

plot(freqhist(freqs, breaks=brks))

#Also works equidistant with default 0:length(counts) breaks:

f2 <- c(30, 39, 31, 29, 10,  6,  3,  1,  0,  1)
plot(freqhist(f2))

Steve Ellison





*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From S@E|||@on @end|ng |rom LGCGroup@com  Wed Oct  9 18:31:42 2019
From: S@E|||@on @end|ng |rom LGCGroup@com (Stephen Ellison)
Date: Wed, 9 Oct 2019 16:31:42 +0000
Subject: [R] Creating a histogram from a frequency vector - correction!
Message-ID: <136b971254d74fd4b5cca8ad1c49ae8d@GBDCVPEXC08.corp.lgc-group.com>

Sorry; that was not the working version.

Should be

freqs <- c(11, 19,  5,  3,  2,  1,  0,  0,  2,  3,  2)

freqhist <- function(counts, xname=deparse(substitute(counts)), breaks=0:length(counts), 
	mids=(breaks[-1]+breaks[-length(breaks)])/2 , ...){
	
	binwidths <- diff(breaks)
	dens <- counts/(binwidths*sum(counts))

	retval <- structure(list(breaks=breaks, counts=counts, density=dens, 
	                    mids=mids, xname=xname, 
	                    equidist=all(diff(breaks)==diff(breaks[1:2]) ) ),
		class="histogram")
}

plot(freqhist(freqs, breaks=c(4*0:5, 10*3:5, 70, 100, 140)) )

#Also works equidistant with default 0:length(counts) breaks:
 
f2 <- c(30, 39, 31, 29, 10,  6,  3,  1,  0,  1)
plot(freqhist(f2))

Steve E


> -----Original Message-----
> From: Stephen Ellison
> Sent: 09 October 2019 17:29
> To: 'Nick Wray'; r-help at r-project.org
> Subject: RE: [R] Creating a histogram from a frequency vector
> 
> > I have a vector like say 73,53,42,67,41,50 where these numbers are the
> > number of occurrences of the data values 1,2,3,4,5,6 - so in essence I have
> > the frequency bit from the hist() function.  I can't see an elegant way
> (there
> > are clearly messy workarounds like generating a vector of 73 1's, 53 2's etc)
> of
> > creating a histogram from this data set.  Is there one?
> 
> hist() generates a histogram object that it then plots.
> 
> You can use your frequency vector to generate the same kind of object and
> then just plot it, though you'll have to provide breaks (possibly defaulted, if
> they're just 0:length(frequencies) ) and you'd have to work on the density
> component a bit.
> 
> I'm sure this is out there somewhere already, but here's as an example, using
> values pulled from a (nonequidistant) ?hist example and using a short off-
> the-cuff function to build the histogram object:
> 
> freqs <- c(11, 19,  5,  3,  2,  1,  0,  0,  2,  3,  2) #islands
> brks <- c(4*0:5, 10*3:5, 70, 100, 140)
> 
> freqhist <- function(counts, xname=deparse(substitute(frequencies)),
> breaks=0:length(frequencies),
> 	mids=(breaks[-1]+breaks[-length(breaks)])/2 , ...){
> 
> 	binwidths <- diff(breaks) #This copes with unequal break intervals
> 	dens <- counts/(binwidths*sum(counts))
> 
> 	retval <- structure(list(breaks=breaks, counts=counts,, density=dens,
> mids=mids, xname=xname, equidist=all(diff(breaks)==diff(breaks[1:2]) ),
> 		class="histogram")
> }
> 
> plot(freqhist(freqs, breaks=brks))
> 
> #Also works equidistant with default 0:length(counts) breaks:
> 
> f2 <- c(30, 39, 31, 29, 10,  6,  3,  1,  0,  1)
> plot(freqhist(f2))
> 
> Steve Ellison
> 
> 



*******************************************************************
This email and any attachments are confidential. Any use...{{dropped:8}}


From n|cho|@@@wr@y @end|ng |rom nt|wor|d@com  Wed Oct  9 18:39:19 2019
From: n|cho|@@@wr@y @end|ng |rom nt|wor|d@com (Nick Wray)
Date: Wed, 9 Oct 2019 17:39:19 +0100 (BST)
Subject: [R] Creating a histogram from a frequency vector
In-Reply-To: <20191009182111.7238ef8c@trisector>
References: <31702472.1339008.1570633977558@mail2.virginmedia.com>
 <20191009182111.7238ef8c@trisector>
Message-ID: <404375540.1342480.1570639160106@mail2.virginmedia.com>

Aargh of course - so obvious I'd completely overlooked that.>.  Thanks Nick
> On 09 October 2019 at 16:21 Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
> 
> On Wed, 9 Oct 2019 16:12:57 +0100 (BST)
> Nick Wray via R-help <r-help at r-project.org> wrote:
> 
> > I have a vector like say 73,53,42,67,41,50 where these numbers are
> > the number of occurrences of the data values 1,2,3,4,5,6
> 
> > I can't see an elegant way <...> of creating a histogram from this
> > data set.  Is there one?
> 
> A histogram is a bar plot of frequencies of data values falling into
> specific bins, so you can reconstruct one yourself using the barplot()
> function.
> 
> -- 
> Best regards,
> Ivan


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Oct  9 18:58:40 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 9 Oct 2019 17:58:40 +0100
Subject: [R] Creating a histogram from a frequency vector
In-Reply-To: <31702472.1339008.1570633977558@mail2.virginmedia.com>
References: <31702472.1339008.1570633977558@mail2.virginmedia.com>
Message-ID: <c158f5cb-07ba-d761-da8e-35b3330bb16e@sapo.pt>

Hello,

Here are 3 ways.

The first are almost the same, they use base graphics.

x <- 1:6
y <- c(73,53,42,67,41,50)

barplot(setNames(y, x))

Or

names(y) <- x
barplot(y)


And 3:

library(ggplot2)
ggplot(data.frame(x, y), aes(x, y)) +
   geom_col()


Hope this helps,

Rui Barradas


?s 16:12 de 09/10/19, Nick Wray via R-help escreveu:
> I have a vector like say 73,53,42,67,41,50 where these numbers are the number of occurrences of the data values 1,2,3,4,5,6 - so in essence I have the frequency bit from the hist() function.  I can't see an elegant way (there are clearly messy workarounds like generating a vector of 73 1's, 53 2's etc) of creating a histogram from this data set.  Is there one?
> 
> Thanks Nick Wray
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From out|ook_E9F8D39A604A1EA7 @end|ng |rom out|ook@com  Wed Oct  9 19:04:14 2019
From: out|ook_E9F8D39A604A1EA7 @end|ng |rom out|ook@com (Vincenzo Iannuzzi)
Date: Wed, 9 Oct 2019 17:04:14 +0000
Subject: [R] Interpretation of davies.test() in segmented package
Message-ID: <AM0PR02MB52200336CFDB26C2ECF7770CB6950@AM0PR02MB5220.eurprd02.prod.outlook.com>



Dear Vito,
if we don?t know the number of break points ?a priori?, and the davies.test function returns a significant result, how can I obtain the exact number of break points for a ?lm?? I would to know this in order to specify in a properly way the ?npsi? option in the segmented function.
Thanks in advance
Kind Regards
Vincenzo


	[[alternative HTML version deleted]]


From v|ncenzo@|@nnuzz| @end|ng |rom @tud|o@un|bo@|t  Wed Oct  9 19:09:04 2019
From: v|ncenzo@|@nnuzz| @end|ng |rom @tud|o@un|bo@|t (Vincenzo Iannuzzi - vincenzo.iannuzzi@studio.unibo.it)
Date: Wed, 9 Oct 2019 17:09:04 +0000
Subject: [R] Interpretation of davies.test() in segmented package
Message-ID: <VI1PR0102MB31499FD92DAC38913EF3F104BE950@VI1PR0102MB3149.eurprd01.prod.exchangelabs.com>

Dear Vito,

if we don?t know the number of break points ?a priori?, and the davies.test function returns a significant result, how can I obtain the exact number of break points for a ?lm?? I would to know this in order to specify in a properly way the ?npsi? option in the segmented function.

Thanks in advance

Kind Regards

Vincenzo


	[[alternative HTML version deleted]]


From dc@r|@on @end|ng |rom t@mu@edu  Wed Oct  9 22:49:42 2019
From: dc@r|@on @end|ng |rom t@mu@edu (David Carlson)
Date: Wed, 9 Oct 2019 15:49:42 -0500
Subject: [R] Creating a histogram from a frequency vector - correction!
In-Reply-To: <136b971254d74fd4b5cca8ad1c49ae8d@GBDCVPEXC08.corp.lgc-group.com>
References: <136b971254d74fd4b5cca8ad1c49ae8d@GBDCVPEXC08.corp.lgc-group.com>
Message-ID: <CAE-dL2qb1kC1u22aw6acQhW-7shr+nLPLybGRm3d9TsApgwsjQ@mail.gmail.com>

Does it have to be a histogram or does it just have to look like one?

counts <- c(73,53,42,67,41,50)
vals <- c(1,2,3,4,5,6)
barplot(counts~vals, space=0)

If you want a more histogram-like axis:

barplot(counts~vals, space=0, names.arg="")
axis(1, 1:6 - .5, 1:6)

David L Carlson
Anthropology Department
Texas A&M University
College Station, TX 77843


On Wed, Oct 9, 2019 at 11:32 AM Stephen Ellison <S.Ellison at lgcgroup.com> wrote:
>
> Sorry; that was not the working version.
>
> Should be
>
> freqs <- c(11, 19,  5,  3,  2,  1,  0,  0,  2,  3,  2)
>
> freqhist <- function(counts, xname=deparse(substitute(counts)), breaks=0:length(counts),
>         mids=(breaks[-1]+breaks[-length(breaks)])/2 , ...){
>
>         binwidths <- diff(breaks)
>         dens <- counts/(binwidths*sum(counts))
>
>         retval <- structure(list(breaks=breaks, counts=counts, density=dens,
>                             mids=mids, xname=xname,
>                             equidist=all(diff(breaks)==diff(breaks[1:2]) ) ),
>                 class="histogram")
> }
>
> plot(freqhist(freqs, breaks=c(4*0:5, 10*3:5, 70, 100, 140)) )
>
> #Also works equidistant with default 0:length(counts) breaks:
>
> f2 <- c(30, 39, 31, 29, 10,  6,  3,  1,  0,  1)
> plot(freqhist(f2))
>
> Steve E
>
>
> > -----Original Message-----
> > From: Stephen Ellison
> > Sent: 09 October 2019 17:29
> > To: 'Nick Wray'; r-help at r-project.org
> > Subject: RE: [R] Creating a histogram from a frequency vector
> >
> > > I have a vector like say 73,53,42,67,41,50 where these numbers are the
> > > number of occurrences of the data values 1,2,3,4,5,6 - so in essence I have
> > > the frequency bit from the hist() function.  I can't see an elegant way
> > (there
> > > are clearly messy workarounds like generating a vector of 73 1's, 53 2's etc)
> > of
> > > creating a histogram from this data set.  Is there one?
> >
> > hist() generates a histogram object that it then plots.
> >
> > You can use your frequency vector to generate the same kind of object and
> > then just plot it, though you'll have to provide breaks (possibly defaulted, if
> > they're just 0:length(frequencies) ) and you'd have to work on the density
> > component a bit.
> >
> > I'm sure this is out there somewhere already, but here's as an example, using
> > values pulled from a (nonequidistant) ?hist example and using a short off-
> > the-cuff function to build the histogram object:
> >
> > freqs <- c(11, 19,  5,  3,  2,  1,  0,  0,  2,  3,  2) #islands
> > brks <- c(4*0:5, 10*3:5, 70, 100, 140)
> >
> > freqhist <- function(counts, xname=deparse(substitute(frequencies)),
> > breaks=0:length(frequencies),
> >       mids=(breaks[-1]+breaks[-length(breaks)])/2 , ...){
> >
> >       binwidths <- diff(breaks) #This copes with unequal break intervals
> >       dens <- counts/(binwidths*sum(counts))
> >
> >       retval <- structure(list(breaks=breaks, counts=counts,, density=dens,
> > mids=mids, xname=xname, equidist=all(diff(breaks)==diff(breaks[1:2]) ),
> >               class="histogram")
> > }
> >
> > plot(freqhist(freqs, breaks=brks))
> >
> > #Also works equidistant with default 0:length(counts) breaks:
> >
> > f2 <- c(30, 39, 31, 29, 10,  6,  3,  1,  0,  1)
> > plot(freqhist(f2))
> >
> > Steve Ellison
> >
> >
>
>
>
> *******************************************************************
> This email and any attachments are confidential. Any use...{{dropped:8}}
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://urldefense.proofpoint.com/v2/url?u=https-3A__stat.ethz.ch_mailman_listinfo_r-2Dhelp&d=DwIFAg&c=u6LDEWzohnDQ01ySGnxMzg&r=VAaHUElasUXjP9TzIcfIrXdkDpHnJBBZ9Q1u5LcXz9s&m=ZVbXKJ26_NjMEwyoLt414s947aHWk1Eui0kMAJ7TEC4&s=Kl_9bErQCYPBSlnEusw5vugVXiykEewhBBHPZ99OIAk&e=
> PLEASE do read the posting guide https://urldefense.proofpoint.com/v2/url?u=http-3A__www.R-2Dproject.org_posting-2Dguide.html&d=DwIFAg&c=u6LDEWzohnDQ01ySGnxMzg&r=VAaHUElasUXjP9TzIcfIrXdkDpHnJBBZ9Q1u5LcXz9s&m=ZVbXKJ26_NjMEwyoLt414s947aHWk1Eui0kMAJ7TEC4&s=6HhBux7d56HS1UuFrtWbphPMjrwGQYdPxuSal_Mcvhw&e=
> and provide commented, minimal, self-contained, reproducible code.


From ne||@redu @end|ng |rom hotm@||@|r  Wed Oct  9 23:30:15 2019
From: ne||@redu @end|ng |rom hotm@||@|r (Nelly Reduan)
Date: Wed, 9 Oct 2019 21:30:15 +0000
Subject: [R] =?windows-1252?q?Include_a_formula_using_the_function_=93mak?=
 =?windows-1252?q?eParamSet=94?=
Message-ID: <DM5PR05MB2793B51105CD68FEDBC9C9EF99950@DM5PR05MB2793.namprd05.prod.outlook.com>

Hello,


I am performing Latin Hypercube sampling from functions "makeParamSet" and "generateDesign" (package "ParamHelpers") in R. Using the function "makeParamSet", how can I specify a formula to define a given parameter ? Here is an example where "g? is the product of ?a? and ?c?:

ps <- makeParamSet(makeIntegerParam("a", lower=800, upper=7200),

                   makeIntegerParam("c", lower=632, upper=5688),

                   makeIntegerParam("e", lower=5, upper=45),

                   makeIntegerParam("b", lower=0, upper=7200),

                   makeIntegerParam("d", lower=0, upper=5688),

                   makeIntegerParam("f", lower=0, upper=45),

                   makeIntegerParam("g", trafo = function(a,c) a*c),

                   forbidden = quote(d > g))

Y <- generateDesign(100, ps, trafo = T)

Problem:
With the code, I have the following error:

Error in doBasicGenDesignChecks(par.set) :

  Finite box constraints required!

Thank you very much for your help.
Nelly

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Thu Oct 10 05:35:33 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Wed, 09 Oct 2019 20:35:33 -0700
Subject: [R] 
 =?utf-8?q?Include_a_formula_using_the_function_=E2=80=9Cmake?=
 =?utf-8?b?UGFyYW1TZXTigJ0=?=
In-Reply-To: <DM5PR05MB2793B51105CD68FEDBC9C9EF99950@DM5PR05MB2793.namprd05.prod.outlook.com>
References: <DM5PR05MB2793B51105CD68FEDBC9C9EF99950@DM5PR05MB2793.namprd05.prod.outlook.com>
Message-ID: <634C184A-1118-4E5F-BBD9-64A9177EE13D@dcn.davis.ca.us>

Technically this question is off-topic on this mailing list (read the Posting Guide!), but I might hazard a guess that the package doesn't like using variable that is a lowercase "c" since that is an extremely common R function name. You can sometimes get away with this, but it takes very careful programming and this package might not have been designed with that in mind.

On October 9, 2019 2:30:15 PM PDT, Nelly Reduan <nell.redu at hotmail.fr> wrote:
>Hello,
>
>
>I am performing Latin Hypercube sampling from functions "makeParamSet"
>and "generateDesign" (package "ParamHelpers") in R. Using the function
>"makeParamSet", how can I specify a formula to define a given parameter
>? Here is an example where "g? is the product of ?a? and ?c?:
>
>ps <- makeParamSet(makeIntegerParam("a", lower=800, upper=7200),
>
>                   makeIntegerParam("c", lower=632, upper=5688),
>
>                   makeIntegerParam("e", lower=5, upper=45),
>
>                   makeIntegerParam("b", lower=0, upper=7200),
>
>                   makeIntegerParam("d", lower=0, upper=5688),
>
>                   makeIntegerParam("f", lower=0, upper=45),
>
>                   makeIntegerParam("g", trafo = function(a,c) a*c),
>
>                   forbidden = quote(d > g))
>
>Y <- generateDesign(100, ps, trafo = T)
>
>Problem:
>With the code, I have the following error:
>
>Error in doBasicGenDesignChecks(par.set) :
>
>  Finite box constraints required!
>
>Thank you very much for your help.
>Nelly
>
>	[[alternative HTML version deleted]]

-- 
Sent from my phone. Please excuse my brevity.


From @||@@|@vo@h @end|ng |rom gm@||@com  Wed Oct  9 18:37:57 2019
From: @||@@|@vo@h @end|ng |rom gm@||@com (Ali Siavosh)
Date: Wed, 9 Oct 2019 12:37:57 -0400
Subject: [R] BiocManager problem.
Message-ID: <373BDD2A-ACA8-45FD-8760-04E254BD3733@gmail.com>

Hi,
I have installation of R in a server running on redhat 7. I have upgraded R and now to upgrade BiocManager I get error messages as below:

> install.packages("BiocManager")
Installing package into ?/usr/lib64/R/library?
(as ?lib? is unspecified)
trying URL 'https://cran.revolutionanalytics.com/src/contrib/BiocManager_1.30.7.tar.gz'
Content type 'application/octet-stream' length 38020 bytes (37 KB)
==================================================
downloaded 37 KB

* installing *source* package ?BiocManager? ...
** package ?BiocManager? successfully unpacked and MD5 sums checked
** using staged installation
** R
** inst
** byte-compile and prepare package for lazy loading
** help
*** installing help indices
  converting help for package ?BiocManager?
    finding HTML links ... done
    BiocManager-pkg                         html  
    available                               html  
    install                                 html  
    repositories                            html  
    valid                                   html  
    version                                 html  
** building package indices
** installing vignettes
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (BiocManager)
Making 'packages.html' ... done

The downloaded source packages are in
	?/tmp/RtmpgHhwMp/downloaded_packages?
Updating HTML index of packages in '.Library'
Making 'packages.html' ... done
> BiocManager::version()
Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
  call: NULL
  error: Bioconductor version '3.8' requires R version '3.5'; see
  https://bioconductor.org/install
> BiocManager::valid()
Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
  call: NULL
  error: Bioconductor version '3.8' requires R version '3.5'; see
  https://bioconductor.org/install
> BiocManager::install(version="3.5")
Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
  call: NULL
  error: Bioconductor version '3.8' requires R version '3.5'; see
  https://bioconductor.org/install
> BiocManager::install(version="3.7")
Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
  call: NULL
  error: Bioconductor version '3.8' requires R version '3.5'; see
  https://bioconductor.org/install <https://bioconductor.org/install>


I appreciate any help with regard to this.
Thank you


	[[alternative HTML version deleted]]


From ccberry @end|ng |rom uc@d@edu  Thu Oct 10 18:34:58 2019
From: ccberry @end|ng |rom uc@d@edu (Berry, Charles)
Date: Thu, 10 Oct 2019 16:34:58 +0000
Subject: [R] Creating a histogram from a frequency vector
In-Reply-To: <c158f5cb-07ba-d761-da8e-35b3330bb16e@sapo.pt>
References: <31702472.1339008.1570633977558@mail2.virginmedia.com>
 <c158f5cb-07ba-d761-da8e-35b3330bb16e@sapo.pt>
Message-ID: <6D53EEBF-DE5E-4479-A2B8-0CBC29C47603@ucsd.edu>



> On Oct 9, 2019, at 9:58 AM, Rui Barradas <ruipbarradas at sapo.pt> wrote:
> 
> Hello,
> 
> Here are 3 ways.
> 

For a large number of bars, sometimes this:

 plot( y, type='h') # maybe use lwd=5

Chuck


> The first are almost the same, they use base graphics.
> 
> x <- 1:6
> y <- c(73,53,42,67,41,50)
> 
> barplot(setNames(y, x))
> 
> Or
> 
> names(y) <- x
> barplot(y)
> 
> 
> And 3:
> 
> library(ggplot2)
> ggplot(data.frame(x, y), aes(x, y)) +
>  geom_col()
> 
> 
> Hope this helps,
> 
> Rui Barradas
> 
> 
> ?s 16:12 de 09/10/19, Nick Wray via R-help escreveu:
>> I have a vector like say 73,53,42,67,41,50 where these numbers are the number of occurrences of the data values 1,2,3,4,5,6 - so in essence I have the frequency bit from the hist() function.  I can't see an elegant way (there are clearly messy workarounds like generating a vector of 73 1's, 53 2's etc) of creating a histogram from this data set.  Is there one?
>> Thanks Nick Wray
>> 	[[alternative HTML version deleted]]
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>> 
> 


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Thu Oct 10 19:08:50 2019
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Thu, 10 Oct 2019 17:08:50 +0000
Subject: [R] BiocManager problem.
In-Reply-To: <373BDD2A-ACA8-45FD-8760-04E254BD3733@gmail.com>
References: <373BDD2A-ACA8-45FD-8760-04E254BD3733@gmail.com>
Message-ID: <DM6PR04MB42352A10B6E5448D1C634D66F9940@DM6PR04MB4235.namprd04.prod.outlook.com>

Please follow the response to your question on the Bioconductor support site

https://support.bioconductor.org/p/125493/

Martin Morgan

?On 10/10/19, 12:23 PM, "R-help on behalf of Ali Siavosh" <r-help-bounces at r-project.org on behalf of ali.siavosh at gmail.com> wrote:

    Hi,
    I have installation of R in a server running on redhat 7. I have upgraded R and now to upgrade BiocManager I get error messages as below:
    
    > install.packages("BiocManager")
    Installing package into ?/usr/lib64/R/library?
    (as ?lib? is unspecified)
    trying URL 'https://cran.revolutionanalytics.com/src/contrib/BiocManager_1.30.7.tar.gz'
    Content type 'application/octet-stream' length 38020 bytes (37 KB)
    ==================================================
    downloaded 37 KB
    
    * installing *source* package ?BiocManager? ...
    ** package ?BiocManager? successfully unpacked and MD5 sums checked
    ** using staged installation
    ** R
    ** inst
    ** byte-compile and prepare package for lazy loading
    ** help
    *** installing help indices
      converting help for package ?BiocManager?
        finding HTML links ... done
        BiocManager-pkg                         html  
        available                               html  
        install                                 html  
        repositories                            html  
        valid                                   html  
        version                                 html  
    ** building package indices
    ** installing vignettes
    ** testing if installed package can be loaded from temporary location
    ** testing if installed package can be loaded from final location
    ** testing if installed package keeps a record of temporary installation path
    * DONE (BiocManager)
    Making 'packages.html' ... done
    
    The downloaded source packages are in
    	?/tmp/RtmpgHhwMp/downloaded_packages?
    Updating HTML index of packages in '.Library'
    Making 'packages.html' ... done
    > BiocManager::version()
    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
      call: NULL
      error: Bioconductor version '3.8' requires R version '3.5'; see
      https://bioconductor.org/install
    > BiocManager::valid()
    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
      call: NULL
      error: Bioconductor version '3.8' requires R version '3.5'; see
      https://bioconductor.org/install
    > BiocManager::install(version="3.5")
    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
      call: NULL
      error: Bioconductor version '3.8' requires R version '3.5'; see
      https://bioconductor.org/install
    > BiocManager::install(version="3.7")
    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
      call: NULL
      error: Bioconductor version '3.8' requires R version '3.5'; see
      https://bioconductor.org/install <https://bioconductor.org/install>
    
    
    I appreciate any help with regard to this.
    Thank you
    
    
    	[[alternative HTML version deleted]]
    
    ______________________________________________
    R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    https://stat.ethz.ch/mailman/listinfo/r-help
    PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
    and provide commented, minimal, self-contained, reproducible code.
    

From @||@@|@vo@h @end|ng |rom gm@||@com  Thu Oct 10 20:26:20 2019
From: @||@@|@vo@h @end|ng |rom gm@||@com (Ali Siavosh)
Date: Thu, 10 Oct 2019 14:26:20 -0400
Subject: [R] BiocManager problem.
In-Reply-To: <DM6PR04MB42352A10B6E5448D1C634D66F9940@DM6PR04MB4235.namprd04.prod.outlook.com>
References: <373BDD2A-ACA8-45FD-8760-04E254BD3733@gmail.com>
 <DM6PR04MB42352A10B6E5448D1C634D66F9940@DM6PR04MB4235.namprd04.prod.outlook.com>
Message-ID: <4EB331F2-FE9A-464A-9417-C4CA0C6E1858@gmail.com>

All good.
Thanks 

> On Oct 10, 2019, at 1:08 PM, Martin Morgan <mtmorgan.bioc at gmail.com> wrote:
> 
> Please follow the response to your question on the Bioconductor support site
> 
> https://support.bioconductor.org/p/125493/
> 
> Martin Morgan
> 
> ?On 10/10/19, 12:23 PM, "R-help on behalf of Ali Siavosh" <r-help-bounces at r-project.org on behalf of ali.siavosh at gmail.com> wrote:
> 
>    Hi,
>    I have installation of R in a server running on redhat 7. I have upgraded R and now to upgrade BiocManager I get error messages as below:
> 
>> install.packages("BiocManager")
>    Installing package into ?/usr/lib64/R/library?
>    (as ?lib? is unspecified)
>    trying URL 'https://cran.revolutionanalytics.com/src/contrib/BiocManager_1.30.7.tar.gz'
>    Content type 'application/octet-stream' length 38020 bytes (37 KB)
>    ==================================================
>    downloaded 37 KB
> 
>    * installing *source* package ?BiocManager? ...
>    ** package ?BiocManager? successfully unpacked and MD5 sums checked
>    ** using staged installation
>    ** R
>    ** inst
>    ** byte-compile and prepare package for lazy loading
>    ** help
>    *** installing help indices
>      converting help for package ?BiocManager?
>        finding HTML links ... done
>        BiocManager-pkg                         html  
>        available                               html  
>        install                                 html  
>        repositories                            html  
>        valid                                   html  
>        version                                 html  
>    ** building package indices
>    ** installing vignettes
>    ** testing if installed package can be loaded from temporary location
>    ** testing if installed package can be loaded from final location
>    ** testing if installed package keeps a record of temporary installation path
>    * DONE (BiocManager)
>    Making 'packages.html' ... done
> 
>    The downloaded source packages are in
>    	?/tmp/RtmpgHhwMp/downloaded_packages?
>    Updating HTML index of packages in '.Library'
>    Making 'packages.html' ... done
>> BiocManager::version()
>    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
>      call: NULL
>      error: Bioconductor version '3.8' requires R version '3.5'; see
>      https://bioconductor.org/install
>> BiocManager::valid()
>    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
>      call: NULL
>      error: Bioconductor version '3.8' requires R version '3.5'; see
>      https://bioconductor.org/install
>> BiocManager::install(version="3.5")
>    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
>      call: NULL
>      error: Bioconductor version '3.8' requires R version '3.5'; see
>      https://bioconductor.org/install
>> BiocManager::install(version="3.7")
>    Error: .onLoad failed in loadNamespace() for 'BiocManager', details:
>      call: NULL
>      error: Bioconductor version '3.8' requires R version '3.5'; see
>      https://bioconductor.org/install <https://bioconductor.org/install>
> 
> 
>    I appreciate any help with regard to this.
>    Thank you
> 
> 
>    	[[alternative HTML version deleted]]
> 
>    ______________________________________________
>    R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>    https://stat.ethz.ch/mailman/listinfo/r-help
>    PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>    and provide commented, minimal, self-contained, reproducible code.
> 


From j@zh@o @end|ng |rom ye@h@net  Fri Oct 11 11:43:35 2019
From: j@zh@o @end|ng |rom ye@h@net (Jinsong Zhao)
Date: Fri, 11 Oct 2019 17:43:35 +0800
Subject: [R] how to use a matrix as an index to another matrix?
Message-ID: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>

Hi there,

I have two matrices, A and B. The columns of B is the index of the 
corresponding columns of A. I hope to rearrange of A by B. A minimal 
example is following:

 > set.seed(123)
 > A <- matrix(sample(1:10), nrow = 5)
 > B <- matrix(c(sample(1:5), sample(1:5)), nrow =5, byrow = FALSE)
 > A
      [,1] [,2]
[1,]    3    9
[2,]   10    1
[3,]    2    7
[4,]    8    5
[5,]    6    4
 > B
      [,1] [,2]
[1,]    2    1
[2,]    3    4
[3,]    1    5
[4,]    4    3
[5,]    5    2
 > A[,1] <- A[,1][B[,1]]
 > A[,2] <- A[,2][B[,2]]
 > A
      [,1] [,2]
[1,]   10    9
[2,]    2    5
[3,]    3    4
[4,]    8    7
[5,]    6    1

My question is whether there is any elegant or generalized way to replace:

 > A[,1] <- A[,1][B[,1]]
 > A[,2] <- A[,2][B[,2]]

Thanks in advance.

PS., I know how to do the above thing by loop.

Best,
Jinsong


From er|cjberger @end|ng |rom gm@||@com  Fri Oct 11 12:30:30 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Fri, 11 Oct 2019 13:30:30 +0300
Subject: [R] how to use a matrix as an index to another matrix?
In-Reply-To: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>
References: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>
Message-ID: <CAGgJW77zAiun_Wb8KkWjnKTY+b3SwFv88OJWVKj-arC8aYdXtQ@mail.gmail.com>

Here is one way
A <- sapply(1:ncol(A), function(i) {A[,i][B[,i]]})


On Fri, Oct 11, 2019 at 12:44 PM Jinsong Zhao <jszhao at yeah.net> wrote:

> Hi there,
>
> I have two matrices, A and B. The columns of B is the index of the
> corresponding columns of A. I hope to rearrange of A by B. A minimal
> example is following:
>
>  > set.seed(123)
>  > A <- matrix(sample(1:10), nrow = 5)
>  > B <- matrix(c(sample(1:5), sample(1:5)), nrow =5, byrow = FALSE)
>  > A
>       [,1] [,2]
> [1,]    3    9
> [2,]   10    1
> [3,]    2    7
> [4,]    8    5
> [5,]    6    4
>  > B
>       [,1] [,2]
> [1,]    2    1
> [2,]    3    4
> [3,]    1    5
> [4,]    4    3
> [5,]    5    2
>  > A[,1] <- A[,1][B[,1]]
>  > A[,2] <- A[,2][B[,2]]
>  > A
>       [,1] [,2]
> [1,]   10    9
> [2,]    2    5
> [3,]    3    4
> [4,]    8    7
> [5,]    6    1
>
> My question is whether there is any elegant or generalized way to replace:
>
>  > A[,1] <- A[,1][B[,1]]
>  > A[,2] <- A[,2][B[,2]]
>
> Thanks in advance.
>
> PS., I know how to do the above thing by loop.
>
> Best,
> Jinsong
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From mtmorg@n@b|oc @end|ng |rom gm@||@com  Fri Oct 11 14:26:43 2019
From: mtmorg@n@b|oc @end|ng |rom gm@||@com (Martin Morgan)
Date: Fri, 11 Oct 2019 12:26:43 +0000
Subject: [R] how to use a matrix as an index to another matrix?
In-Reply-To: <CAGgJW77zAiun_Wb8KkWjnKTY+b3SwFv88OJWVKj-arC8aYdXtQ@mail.gmail.com>
References: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>
 <CAGgJW77zAiun_Wb8KkWjnKTY+b3SwFv88OJWVKj-arC8aYdXtQ@mail.gmail.com>
Message-ID: <DM6PR04MB4235528F00BC4AD72E5EB807F9970@DM6PR04MB4235.namprd04.prod.outlook.com>

A matrix can be subset by another 2-column matrix, where the first column is the row index and the second column the column index. So

idx = matrix(c(B, col(B)), ncol = 2)
A[] <- A[idx]

Martin Morgan

?On 10/11/19, 6:31 AM, "R-help on behalf of Eric Berger" <r-help-bounces at r-project.org on behalf of ericjberger at gmail.com> wrote:

    Here is one way
    A <- sapply(1:ncol(A), function(i) {A[,i][B[,i]]})
    
    
    On Fri, Oct 11, 2019 at 12:44 PM Jinsong Zhao <jszhao at yeah.net> wrote:
    
    > Hi there,
    >
    > I have two matrices, A and B. The columns of B is the index of the
    > corresponding columns of A. I hope to rearrange of A by B. A minimal
    > example is following:
    >
    >  > set.seed(123)
    >  > A <- matrix(sample(1:10), nrow = 5)
    >  > B <- matrix(c(sample(1:5), sample(1:5)), nrow =5, byrow = FALSE)
    >  > A
    >       [,1] [,2]
    > [1,]    3    9
    > [2,]   10    1
    > [3,]    2    7
    > [4,]    8    5
    > [5,]    6    4
    >  > B
    >       [,1] [,2]
    > [1,]    2    1
    > [2,]    3    4
    > [3,]    1    5
    > [4,]    4    3
    > [5,]    5    2
    >  > A[,1] <- A[,1][B[,1]]
    >  > A[,2] <- A[,2][B[,2]]
    >  > A
    >       [,1] [,2]
    > [1,]   10    9
    > [2,]    2    5
    > [3,]    3    4
    > [4,]    8    7
    > [5,]    6    1
    >
    > My question is whether there is any elegant or generalized way to replace:
    >
    >  > A[,1] <- A[,1][B[,1]]
    >  > A[,2] <- A[,2][B[,2]]
    >
    > Thanks in advance.
    >
    > PS., I know how to do the above thing by loop.
    >
    > Best,
    > Jinsong
    >
    > ______________________________________________
    > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    > https://stat.ethz.ch/mailman/listinfo/r-help
    > PLEASE do read the posting guide
    > http://www.R-project.org/posting-guide.html
    > and provide commented, minimal, self-contained, reproducible code.
    >
    
    	[[alternative HTML version deleted]]
    
    ______________________________________________
    R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
    https://stat.ethz.ch/mailman/listinfo/r-help
    PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
    and provide commented, minimal, self-contained, reproducible code.
    

From dr@em|@t@n@k@ @end|ng |rom gm@||@com  Fri Oct 11 04:06:47 2019
From: dr@em|@t@n@k@ @end|ng |rom gm@||@com (Emi Tanaka)
Date: Fri, 11 Oct 2019 13:06:47 +1100
Subject: [R] Surprising Symbolic Model Formula Evaluations
Message-ID: <CALYXhvUosW4Xth1BHT9kmon8yu1MCHaBxOb63WbHiJNZR466OQ@mail.gmail.com>

Hi,

I'm wondering about some logics behind the following simplifications:

y ~ 1:x simplifies to y ~ 1
y ~ x:1 simplifies to y ~ 1
y ~ x*1 simplifies to y ~ x
y ~ 1*x simplifies to y ~ 1

Mainly I would have expected y ~ 1:x to simplify to y ~ x and the cross
operator to be invariant to order.

I have some further surprising cases below that I'd also like to know more
about but just above will also be great.

https://rpubs.com/emitanaka/unexpected-formula-eval

Best,

Emi

*Dr. Emi Tanaka* | Lecturer in Statistics

Faculty of Science, School of Mathematics and Statistics


Secretary, NSW Branch, Statistical Society of Australia
<https://www.meetup.com/NSW-Branch-of-the-Statistics-Society-of-Australia/>

Social Media Coordinator, Central, International Biometrics Society
<https://twitter.com/IBSstats>


*THE UNIVERSITY OF SYDNEY*
827, Carslaw F07 | The University of Sydney | NSW | 2006
*Phone:* +61 2 9351 3039
*Website:* * <http://sydney.edu.au/>*https://emitanaka.github.io/
*Twitter: *@statsgen

CRICOS 00026A
This email plus any attachments to it are confidential.
Any unauthorised use is strictly prohibited. If you receive this email in
error, please delete it and any attachments. Please think of our
environment and only print this e-mail if necessary.

	[[alternative HTML version deleted]]


From rmh @end|ng |rom temp|e@edu  Fri Oct 11 19:58:58 2019
From: rmh @end|ng |rom temp|e@edu (Richard M. Heiberger)
Date: Fri, 11 Oct 2019 13:58:58 -0400
Subject: [R] Surprising Symbolic Model Formula Evaluations
In-Reply-To: <CALYXhvUosW4Xth1BHT9kmon8yu1MCHaBxOb63WbHiJNZR466OQ@mail.gmail.com>
References: <CALYXhvUosW4Xth1BHT9kmon8yu1MCHaBxOb63WbHiJNZR466OQ@mail.gmail.com>
Message-ID: <CAGx1TMDe1zn5Er9O+Rqb_1ROhWrMeyMLSz-yp_f2L4EhsG_-cg@mail.gmail.com>

I can't duplicate your examples
This is what I see
> y ~ 1:x
y ~ 1:x

Please try again in a vanilla R session, and send a reproducible example.
vanilla means start R from the operating system command line with
R --vanilla

this prevents any of your initialization files from being loaded.  See
?Startup
for details.

On Fri, Oct 11, 2019 at 1:05 PM Emi Tanaka <dr.emi.tanaka at gmail.com> wrote:
>
> Hi,
>
> I'm wondering about some logics behind the following simplifications:
>
> y ~ 1:x simplifies to y ~ 1
> y ~ x:1 simplifies to y ~ 1
> y ~ x*1 simplifies to y ~ x
> y ~ 1*x simplifies to y ~ 1
>
> Mainly I would have expected y ~ 1:x to simplify to y ~ x and the cross
> operator to be invariant to order.
>
> I have some further surprising cases below that I'd also like to know more
> about but just above will also be great.
>
> https://rpubs.com/emitanaka/unexpected-formula-eval
>
> Best,
>
> Emi
>
> *Dr. Emi Tanaka* | Lecturer in Statistics
>
> Faculty of Science, School of Mathematics and Statistics
>
>
> Secretary, NSW Branch, Statistical Society of Australia
> <https://www.meetup.com/NSW-Branch-of-the-Statistics-Society-of-Australia/>
>
> Social Media Coordinator, Central, International Biometrics Society
> <https://twitter.com/IBSstats>
>
>
> *THE UNIVERSITY OF SYDNEY*
> 827, Carslaw F07 | The University of Sydney | NSW | 2006
> *Phone:* +61 2 9351 3039
> *Website:* * <http://sydney.edu.au/>*https://emitanaka.github.io/
> *Twitter: *@statsgen
>
> CRICOS 00026A
> This email plus any attachments to it are confidential.
> Any unauthorised use is strictly prohibited. If you receive this email in
> error, please delete it and any attachments. Please think of our
> environment and only print this e-mail if necessary.
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bgunter@4567 @end|ng |rom gm@||@com  Fri Oct 11 20:15:37 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Fri, 11 Oct 2019 11:15:37 -0700
Subject: [R] Surprising Symbolic Model Formula Evaluations
In-Reply-To: <CAGx1TMDe1zn5Er9O+Rqb_1ROhWrMeyMLSz-yp_f2L4EhsG_-cg@mail.gmail.com>
References: <CALYXhvUosW4Xth1BHT9kmon8yu1MCHaBxOb63WbHiJNZR466OQ@mail.gmail.com>
 <CAGx1TMDe1zn5Er9O+Rqb_1ROhWrMeyMLSz-yp_f2L4EhsG_-cg@mail.gmail.com>
Message-ID: <CAGxFJbSO6NYtrbhUmWswgSGSfd0dkNbxAWJZwa=Zb4iKPBB_ew@mail.gmail.com>

Rich:

> x <- 1:10
> y <- runif(10)
> lm(y ~ 1:x)

Call:
lm(formula = y ~ 1:x)

Coefficients:
(Intercept)
      0.477

> lm(y ~ x:1)

Call:
lm(formula = y ~ x:1)

Coefficients:
(Intercept)
      0.477

> lm(y ~ 1*x)

Call:
lm(formula = y ~ 1 * x)

Coefficients:
(Intercept)
      0.477

> lm(y ~ x*1)

Call:
lm(formula = y ~ x * 1)

Coefficients:
(Intercept)            x
   0.493927    -0.003079

Cheers,
Bert


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Fri, Oct 11, 2019 at 10:59 AM Richard M. Heiberger <rmh at temple.edu>
wrote:

> I can't duplicate your examples
> This is what I see
> > y ~ 1:x
> y ~ 1:x
>
> Please try again in a vanilla R session, and send a reproducible example.
> vanilla means start R from the operating system command line with
> R --vanilla
>
> this prevents any of your initialization files from being loaded.  See
> ?Startup
> for details.
>
> On Fri, Oct 11, 2019 at 1:05 PM Emi Tanaka <dr.emi.tanaka at gmail.com>
> wrote:
> >
> > Hi,
> >
> > I'm wondering about some logics behind the following simplifications:
> >
> > y ~ 1:x simplifies to y ~ 1
> > y ~ x:1 simplifies to y ~ 1
> > y ~ x*1 simplifies to y ~ x
> > y ~ 1*x simplifies to y ~ 1
> >
> > Mainly I would have expected y ~ 1:x to simplify to y ~ x and the cross
> > operator to be invariant to order.
> >
> > I have some further surprising cases below that I'd also like to know
> more
> > about but just above will also be great.
> >
> > https://rpubs.com/emitanaka/unexpected-formula-eval
> >
> > Best,
> >
> > Emi
> >
> > *Dr. Emi Tanaka* | Lecturer in Statistics
> >
> > Faculty of Science, School of Mathematics and Statistics
> >
> >
> > Secretary, NSW Branch, Statistical Society of Australia
> > <
> https://www.meetup.com/NSW-Branch-of-the-Statistics-Society-of-Australia/>
> >
> > Social Media Coordinator, Central, International Biometrics Society
> > <https://twitter.com/IBSstats>
> >
> >
> > *THE UNIVERSITY OF SYDNEY*
> > 827, Carslaw F07 | The University of Sydney | NSW | 2006
> > *Phone:* +61 2 9351 3039
> > *Website:* * <http://sydney.edu.au/>*https://emitanaka.github.io/
> > *Twitter: *@statsgen
> >
> > CRICOS 00026A
> > This email plus any attachments to it are confidential.
> > Any unauthorised use is strictly prohibited. If you receive this email in
> > error, please delete it and any attachments. Please think of our
> > environment and only print this e-mail if necessary.
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From wdun|@p @end|ng |rom t|bco@com  Fri Oct 11 20:17:15 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Fri, 11 Oct 2019 11:17:15 -0700
Subject: [R] Surprising Symbolic Model Formula Evaluations
In-Reply-To: <CAGx1TMDe1zn5Er9O+Rqb_1ROhWrMeyMLSz-yp_f2L4EhsG_-cg@mail.gmail.com>
References: <CALYXhvUosW4Xth1BHT9kmon8yu1MCHaBxOb63WbHiJNZR466OQ@mail.gmail.com>
 <CAGx1TMDe1zn5Er9O+Rqb_1ROhWrMeyMLSz-yp_f2L4EhsG_-cg@mail.gmail.com>
Message-ID: <CAF8bMcaER6J+b7jQ_PtoNky5+nYuuGbwKS6cjix+PUEsMajY5g@mail.gmail.com>

Look at what terms() (hence lm()) does with such formulae:
> str(terms(y~1*x))
Classes 'terms', 'formula'  language y ~ 1 * x
  ..- attr(*, "variables")= language list(y, x)
  ..- attr(*, "factors")= int(0)
  ..- attr(*, "term.labels")= chr(0)
  ..- attr(*, "order")= int(0)
  ..- attr(*, "intercept")= int 1
  ..- attr(*, "response")= int 1
  ..- attr(*, ".Environment")=<environment: R_GlobalEnv>
> coef(lm(y~1*x, data=data.frame(y=1:10,x=log2(1:10))))
(Intercept)
        5.5


Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Fri, Oct 11, 2019 at 10:59 AM Richard M. Heiberger <rmh at temple.edu>
wrote:

> I can't duplicate your examples
> This is what I see
> > y ~ 1:x
> y ~ 1:x
>
> Please try again in a vanilla R session, and send a reproducible example.
> vanilla means start R from the operating system command line with
> R --vanilla
>
> this prevents any of your initialization files from being loaded.  See
> ?Startup
> for details.
>
> On Fri, Oct 11, 2019 at 1:05 PM Emi Tanaka <dr.emi.tanaka at gmail.com>
> wrote:
> >
> > Hi,
> >
> > I'm wondering about some logics behind the following simplifications:
> >
> > y ~ 1:x simplifies to y ~ 1
> > y ~ x:1 simplifies to y ~ 1
> > y ~ x*1 simplifies to y ~ x
> > y ~ 1*x simplifies to y ~ 1
> >
> > Mainly I would have expected y ~ 1:x to simplify to y ~ x and the cross
> > operator to be invariant to order.
> >
> > I have some further surprising cases below that I'd also like to know
> more
> > about but just above will also be great.
> >
> > https://rpubs.com/emitanaka/unexpected-formula-eval
> >
> > Best,
> >
> > Emi
> >
> > *Dr. Emi Tanaka* | Lecturer in Statistics
> >
> > Faculty of Science, School of Mathematics and Statistics
> >
> >
> > Secretary, NSW Branch, Statistical Society of Australia
> > <
> https://www.meetup.com/NSW-Branch-of-the-Statistics-Society-of-Australia/>
> >
> > Social Media Coordinator, Central, International Biometrics Society
> > <https://twitter.com/IBSstats>
> >
> >
> > *THE UNIVERSITY OF SYDNEY*
> > 827, Carslaw F07 | The University of Sydney | NSW | 2006
> > *Phone:* +61 2 9351 3039
> > *Website:* * <http://sydney.edu.au/>*https://emitanaka.github.io/
> > *Twitter: *@statsgen
> >
> > CRICOS 00026A
> > This email plus any attachments to it are confidential.
> > Any unauthorised use is strictly prohibited. If you receive this email in
> > error, please delete it and any attachments. Please think of our
> > environment and only print this e-mail if necessary.
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From j@vedbtk111 @end|ng |rom gm@||@com  Sat Oct 12 01:21:17 2019
From: j@vedbtk111 @end|ng |rom gm@||@com (javed khan)
Date: Sat, 12 Oct 2019 01:21:17 +0200
Subject: [R] Parameters optimization in r
Message-ID: <CAJhui+v2R8NqHqLwyr1JVfW54DPtLyidSK2GuMqtwXyFWWfmzw@mail.gmail.com>

Hi

I will appreciate if someone provide the link to some tutorials/videos
where parameters running are performed in R. For instance, if we have to
perform predictions/classification using random forest or other algorithm,
how different optimization algorithms tune the parameters of random forest
such as numbers of trees etc.

Best regards

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Sat Oct 12 01:49:42 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Fri, 11 Oct 2019 16:49:42 -0700
Subject: [R] Parameters optimization in r
In-Reply-To: <CAJhui+v2R8NqHqLwyr1JVfW54DPtLyidSK2GuMqtwXyFWWfmzw@mail.gmail.com>
References: <CAJhui+v2R8NqHqLwyr1JVfW54DPtLyidSK2GuMqtwXyFWWfmzw@mail.gmail.com>
Message-ID: <CAGxFJbQBwaHOn8c6pCk=fJDpN0hxW+Zsey-DFz=2A=fHSFHxjw@mail.gmail.com>

Google is your friend.



On Fri, Oct 11, 2019, 4:21 PM javed khan <javedbtk111 at gmail.com> wrote:

> Hi
>
> I will appreciate if someone provide the link to some tutorials/videos
> where parameters running are performed in R. For instance, if we have to
> perform predictions/classification using random forest or other algorithm,
> how different optimization algorithms tune the parameters of random forest
> such as numbers of trees etc.
>
> Best regards
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From j@me@ @end|ng |rom j@@@oc@com  Sat Oct 12 02:31:00 2019
From: j@me@ @end|ng |rom j@@@oc@com (James Spottiswoode)
Date: Fri, 11 Oct 2019 17:31:00 -0700
Subject: [R] Parameters optimization in r
In-Reply-To: <CAJhui+v2R8NqHqLwyr1JVfW54DPtLyidSK2GuMqtwXyFWWfmzw@mail.gmail.com>
References: <CAJhui+v2R8NqHqLwyr1JVfW54DPtLyidSK2GuMqtwXyFWWfmzw@mail.gmail.com>
Message-ID: <BCDC530E-9A21-44FB-9701-2332ABBA6E83@jsasoc.com>

Hi,

I?ve often come across this problem and have found genetic algorithms (GA) to be extremely useful. I wrote my first GA code in the 80?s and have extensive experience with the method. The package rgenoud is a very full featured  GA implementation.  Just code up your parameters as arguments to the function giving your method, random forests or whatever, then define a target variable for performance or fitness such as AUC or R^2, whatever is appropriate, and let the GA climb to the top of the fitness landscape.  If you have a large problem you may want to speed things up by using parallel processes across cores or machines.  Rgenoud handles that well.

Good luck!

James


> On Oct 11, 2019, at 4:21 PM, javed khan <javedbtk111 at gmail.com> wrote:
> 
> Hi
> 
> I will appreciate if someone provide the link to some tutorials/videos
> where parameters running are performed in R. For instance, if we have to
> perform predictions/classification using random forest or other algorithm,
> how different optimization algorithms tune the parameters of random forest
> such as numbers of trees etc.
> 
> Best regards
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 


From vodvo@ @end|ng |rom zoho@com  Sun Oct 13 19:03:36 2019
From: vodvo@ @end|ng |rom zoho@com (vod vos)
Date: Sun, 13 Oct 2019 10:03:36 -0700
Subject: [R] Can nested data frame be used in machine learning?
Message-ID: <16dc6134c8e.c87c29c581401.2493681089749825846@zoho.com>

Hello,

If we got a data frame like below, how to use "data" to predict type, 
 if "data" is another data frame (called nested data frame):


by_subject
#> # A tibble: 1000 x 3
#>   subject            type       data             
#>   <fct>                <fct>      <list>           
#> 1 subject1      aa            <tibble [100 ? 10]>
#> 2 subject2      bb           <tibble [100 ? 10]>
#> 3 subject3      cc            <tibble [100 ? 10]>
#> # ? with 997 more rows


by_subject$data[[1]]
#> # A tibble: 100 x 10
#>    parts      weight    length    height
#>   <int>     <dbl>       <int>      <dbl>
#> 1    1         28.8           100          170
#> 2    2        30.3           105           169
#> 2    3       10.5            109           189
#> # ? with 97 more rows

Sincerely yours,


From bgunter@4567 @end|ng |rom gm@||@com  Sun Oct 13 19:39:36 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sun, 13 Oct 2019 10:39:36 -0700
Subject: [R] Can nested data frame be used in machine learning?
In-Reply-To: <16dc6134c8e.c87c29c581401.2493681089749825846@zoho.com>
References: <16dc6134c8e.c87c29c581401.2493681089749825846@zoho.com>
Message-ID: <CAGxFJbQYQeU2WHgzDa6CXhSRMcwW5resJwmbJovFUGO=U0X_Sg@mail.gmail.com>

Your question is too vague to answer.

Many R functions have "predict" methods that can be used to make
predictions using a new object (e.g. a data frame) from a fitted object fit
on another data frame/object. See e.g. ?predict.lm for an exemplar. But
that's the closest I can come to guessing what you want.

I think you need to spend time with a tutorial or two on whatever
functions/methods you are using for "machine learning." You should not
expect us to do such homework for you.


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sun, Oct 13, 2019 at 10:04 AM vod vos via R-help <r-help at r-project.org>
wrote:

> Hello,
>
> If we got a data frame like below, how to use "data" to predict type,
>  if "data" is another data frame (called nested data frame):
>
>
> by_subject
> #> # A tibble: 1000 x 3
> #>   subject            type       data
> #>   <fct>                <fct>      <list>
> #> 1 subject1      aa            <tibble [100 ? 10]>
> #> 2 subject2      bb           <tibble [100 ? 10]>
> #> 3 subject3      cc            <tibble [100 ? 10]>
> #> # ? with 997 more rows
>
>
> by_subject$data[[1]]
> #> # A tibble: 100 x 10
> #>    parts      weight    length    height
> #>   <int>     <dbl>       <int>      <dbl>
> #> 1    1         28.8           100          170
> #> 2    2        30.3           105           169
> #> 2    3       10.5            109           189
> #> # ? with 97 more rows
>
> Sincerely yours,
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sun Oct 13 23:08:02 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sun, 13 Oct 2019 14:08:02 -0700
Subject: [R] Can nested data frame be used in machine learning?
In-Reply-To: <16dc6134c8e.c87c29c581401.2493681089749825846@zoho.com>
References: <16dc6134c8e.c87c29c581401.2493681089749825846@zoho.com>
Message-ID: <392B26F9-0641-4F07-93E2-5C0891DE5DA0@dcn.davis.ca.us>

predict doesn't know about nesting. You can either unnest or use lapply or purrr:map to create new nested data frames with predicted results, but it is up to you to decide where you want to put the results.

On October 13, 2019 10:03:36 AM PDT, vod vos via R-help <r-help at r-project.org> wrote:
>Hello,
>
>If we got a data frame like below, how to use "data" to predict type, 
> if "data" is another data frame (called nested data frame):
>
>
>by_subject
>#> # A tibble: 1000 x 3
>#>   subject            type       data             
>#>   <fct>                <fct>      <list>           
>#> 1 subject1      aa            <tibble [100 ? 10]>
>#> 2 subject2      bb           <tibble [100 ? 10]>
>#> 3 subject3      cc            <tibble [100 ? 10]>
>#> # ? with 997 more rows
>
>
>by_subject$data[[1]]
>#> # A tibble: 100 x 10
>#>    parts      weight    length    height
>#>   <int>     <dbl>       <int>      <dbl>
>#> 1    1         28.8           100          170
>#> 2    2        30.3           105           169
>#> 2    3       10.5            109           189
>#> # ? with 97 more rows
>
>Sincerely yours,
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From ph||@m@th@|og|c @end|ng |rom gm@||@com  Sat Oct 12 22:46:29 2019
From: ph||@m@th@|og|c @end|ng |rom gm@||@com (Adam Frank)
Date: Sat, 12 Oct 2019 16:46:29 -0400
Subject: [R] Installing dyplr on Linux requires a ton of chasing down
 dependencies
Message-ID: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>

I just got a new Linux computer running Pop!_OS.  If I download R from the
repository, which is basically he same as on Ubuntu, I get an outdated
version that can't run ggplot2.  So I went to the R download page and
downloaded the newest version.  It has make and config files but they
require an intense number of dependencies and I couldn't figure out how to
ever get the X11 dependency resolved.  Some places suggested installing
packages related to xorg, but I didn't find `xorg-x11*` in my package
manager at all.  I tried installing `xorg-*` but this didn't resolve the
problem.

I tried installing Anaconda and doing everything within there.  It delivers
the latest version of R but still to run `install.packages("dplyr",
dependencies=T)` throws a ton of errors about unmet dependencies, one of
which is again X11.  So at this point I'm feeling kind of stuck on this ...

And it just seems wild to me that it's this hard to get R working with
dplyr.  Is there an easier way?

I also tried guessing that maybe `conda install r-dplyr` might do something
but no luck, package not found.  Might have something to do with
environments, I'm not really clear on how those work.

Anyway, for details: My OS is Pop!_OS 19.04, my R version is 3.6.1, RStudio
1.1.456 running by way of Anaconda.  Recently ran an update on every R
package.

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon Oct 14 10:25:34 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 14 Oct 2019 01:25:34 -0700
Subject: [R] Installing dyplr on Linux requires a ton of chasing down
 dependencies
In-Reply-To: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
References: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
Message-ID: <7F36F769-924D-4F6C-B2F7-6ECF6F41AC62@dcn.davis.ca.us>

https://cran.r-project.org/bin/linux/ubuntu/

On October 12, 2019 1:46:29 PM PDT, Adam Frank <phil.math.logic at gmail.com> wrote:
>I just got a new Linux computer running Pop!_OS.  If I download R from
>the
>repository, which is basically he same as on Ubuntu, I get an outdated
>version that can't run ggplot2.  So I went to the R download page and
>downloaded the newest version.  It has make and config files but they
>require an intense number of dependencies and I couldn't figure out how
>to
>ever get the X11 dependency resolved.  Some places suggested installing
>packages related to xorg, but I didn't find `xorg-x11*` in my package
>manager at all.  I tried installing `xorg-*` but this didn't resolve
>the
>problem.
>
>I tried installing Anaconda and doing everything within there.  It
>delivers
>the latest version of R but still to run `install.packages("dplyr",
>dependencies=T)` throws a ton of errors about unmet dependencies, one
>of
>which is again X11.  So at this point I'm feeling kind of stuck on this
>...
>
>And it just seems wild to me that it's this hard to get R working with
>dplyr.  Is there an easier way?
>
>I also tried guessing that maybe `conda install r-dplyr` might do
>something
>but no luck, package not found.  Might have something to do with
>environments, I'm not really clear on how those work.
>
>Anyway, for details: My OS is Pop!_OS 19.04, my R version is 3.6.1,
>RStudio
>1.1.456 running by way of Anaconda.  Recently ran an update on every R
>package.
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From dwu@b @end|ng |rom @|umn|@u@t@hk  Mon Oct 14 10:36:14 2019
From: dwu@b @end|ng |rom @|umn|@u@t@hk (WU Degang)
Date: Mon, 14 Oct 2019 08:36:14 +0000
Subject: [R] Installing dyplr on Linux requires a ton of chasing down
 dependencies
In-Reply-To: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
References: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
Message-ID: <SG2PR01MB314259D7BC15211D2CFF8AC0FC900@SG2PR01MB3142.apcprd01.prod.exchangelabs.com>

Sorry to digress here. Having used CRAN and conda to manage R packages, I find that using conda to install R packages will cause more troubles than CRAN. I would stick with CRAN.



Sent from Mail<https://go.microsoft.com/fwlink/?LinkId=550986> for Windows 10



________________________________
From: R-help <r-help-bounces at r-project.org> on behalf of Adam Frank <phil.math.logic at gmail.com>
Sent: Sunday, October 13, 2019 4:46:29 AM
To: r-help at r-project.org <r-help at r-project.org>
Subject: [R] Installing dyplr on Linux requires a ton of chasing down dependencies

I just got a new Linux computer running Pop!_OS.  If I download R from the
repository, which is basically he same as on Ubuntu, I get an outdated
version that can't run ggplot2.  So I went to the R download page and
downloaded the newest version.  It has make and config files but they
require an intense number of dependencies and I couldn't figure out how to
ever get the X11 dependency resolved.  Some places suggested installing
packages related to xorg, but I didn't find `xorg-x11*` in my package
manager at all.  I tried installing `xorg-*` but this didn't resolve the
problem.

I tried installing Anaconda and doing everything within there.  It delivers
the latest version of R but still to run `install.packages("dplyr",
dependencies=T)` throws a ton of errors about unmet dependencies, one of
which is again X11.  So at this point I'm feeling kind of stuck on this ...

And it just seems wild to me that it's this hard to get R working with
dplyr.  Is there an easier way?

I also tried guessing that maybe `conda install r-dplyr` might do something
but no luck, package not found.  Might have something to do with
environments, I'm not really clear on how those work.

Anyway, for details: My OS is Pop!_OS 19.04, my R version is 3.6.1, RStudio
1.1.456 running by way of Anaconda.  Recently ran an update on every R
package.

        [[alternative HTML version deleted]]

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

	[[alternative HTML version deleted]]


From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Oct 14 13:25:35 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Mon, 14 Oct 2019 18:25:35 +0700
Subject: [R] Installing dyplr on Linux requires a ton of chasing down
 dependencies
In-Reply-To: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
References: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
Message-ID: <A3C7FD5A-85FC-4A63-96A8-8FFADE969280@comcast.net>

Generally problems involving Ubuntu are sent to r-sig-Debian but maybe your new OS is not in that heritage. If not, you may get a more informed audience at r-devel. (Technically this is more on-topic there than on rhelp.) But you should read the Posting Guide, subscribe, post in plain text, and include more of the text from the errors. 

David

Sent from my iPhone

> On Oct 13, 2019, at 3:46 AM, Adam Frank <phil.math.logic at gmail.com> wrote:
> 
> I just got a new Linux computer running Pop!_OS.  If I download R from the
> repository, which is basically he same as on Ubuntu, I get an outdated
> version that can't run ggplot2.  So I went to the R download page and
> downloaded the newest version.  It has make and config files but they
> require an intense number of dependencies and I couldn't figure out how to
> ever get the X11 dependency resolved.  Some places suggested installing
> packages related to xorg, but I didn't find `xorg-x11*` in my package
> manager at all.  I tried installing `xorg-*` but this didn't resolve the
> problem.
> 
> I tried installing Anaconda and doing everything within there.  It delivers
> the latest version of R but still to run `install.packages("dplyr",
> dependencies=T)` throws a ton of errors about unmet dependencies, one of
> which is again X11.  So at this point I'm feeling kind of stuck on this ...
> 
> And it just seems wild to me that it's this hard to get R working with
> dplyr.  Is there an easier way?
> 
> I also tried guessing that maybe `conda install r-dplyr` might do something
> but no luck, package not found.  Might have something to do with
> environments, I'm not really clear on how those work.
> 
> Anyway, for details: My OS is Pop!_OS 19.04, my R version is 3.6.1, RStudio
> 1.1.456 running by way of Anaconda.  Recently ran an update on every R
> package.
> 
>    [[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From edd @end|ng |rom deb|@n@org  Mon Oct 14 13:29:39 2019
From: edd @end|ng |rom deb|@n@org (Dirk Eddelbuettel)
Date: Mon, 14 Oct 2019 06:29:39 -0500
Subject: [R] Installing dyplr on Linux requires a ton of chasing down
 dependencies
In-Reply-To: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
References: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
Message-ID: <23972.23587.498205.138359@rob.eddelbuettel.com>


Adam,

You may find this blog post and the video instructive:

  http://dirk.eddelbuettel.com/blog/2019/06/09#022_rocker_and_ppas

It illustrates how 'installing tidyverse' (or rstan) can be a single and done
in under two minutes == on Linux, with the appropriate distribution and
settings.  In short:  some have binaries prebuilt, some don't.

My blog has a few post in the 'r4' section on that as well as on other
approaches to this.

  http://dirk.eddelbuettel.com/blog/code/r4/

Now, you choose a somewhat non-standard distro. The price of that choice may
indeed be that you have to install everything (R/CRAN-related) from source. 

Hope this helps, Dirk

-- 
http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org


From @@h|mk@poor @end|ng |rom gm@||@com  Mon Oct 14 13:35:26 2019
From: @@h|mk@poor @end|ng |rom gm@||@com (Ashim Kapoor)
Date: Mon, 14 Oct 2019 17:05:26 +0530
Subject: [R] Double / single backticks for inline R code in an Rmarkdown file
Message-ID: <CAC8=1eovHsLzRev_YGVciPaB922wz7Zt97DtoeCz=PLqiK0-8g@mail.gmail.com>

Dear All,

I am reading this file :-

https://rmarkdown.rstudio.com/lesson-6.html

My query is : In line 14 of the above file, ie.

The [marmap](https://cran.r-project.org/web/packages/marmap/index.html)
package provides tools and data for visualizing the ocean floor. Here is an
example contour plot of marmap's ``r params$data`` dataset.

Should not the phrase rparams$data be within SINGLE backticks ?

Do I misunderstand?

Thank you,
Ashim

	[[alternative HTML version deleted]]


From c||ynch @end|ng |rom nc@u@edu  Mon Oct 14 15:30:34 2019
From: c||ynch @end|ng |rom nc@u@edu (Collin Lynch)
Date: Mon, 14 Oct 2019 09:30:34 -0400
Subject: [R] Installing dyplr on Linux requires a ton of chasing down
 dependencies
In-Reply-To: <23972.23587.498205.138359@rob.eddelbuettel.com>
References: <CAL1ABghtavZ+6k9Z84KdKtwbVb09JwGQusvkLbmoC0_wQn6F6g@mail.gmail.com>
 <23972.23587.498205.138359@rob.eddelbuettel.com>
Message-ID: <CAE=6FXavxOfAtcHdjB9OKD1Dz+me8Fu03Y3mTetr5hSrT_wTMA@mail.gmail.com>

Adam, while I am not familiar with that particular variant of linux,
it sounds like a package manager mismatch in that the ubuntu package
looks for specific libraries which are named differently on your
system.  If you can run a GUI then you have some form of X but the
libraries may be named differently.  It looks like Pop uses apt so you
might try apt-get for R and see if that works or consider compiling
from source.

Collin Lynch.

On Mon, Oct 14, 2019 at 7:36 AM Dirk Eddelbuettel <edd at debian.org> wrote:
>
>
> Adam,
>
> You may find this blog post and the video instructive:
>
>   http://dirk.eddelbuettel.com/blog/2019/06/09#022_rocker_and_ppas
>
> It illustrates how 'installing tidyverse' (or rstan) can be a single and done
> in under two minutes == on Linux, with the appropriate distribution and
> settings.  In short:  some have binaries prebuilt, some don't.
>
> My blog has a few post in the 'r4' section on that as well as on other
> approaches to this.
>
>   http://dirk.eddelbuettel.com/blog/code/r4/
>
> Now, you choose a somewhat non-standard distro. The price of that choice may
> indeed be that you have to install everything (R/CRAN-related) from source.
>
> Hope this helps, Dirk
>
> --
> http://dirk.eddelbuettel.com | @eddelbuettel | edd at debian.org
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.



-- 
ArgLab & Center for Educational Informatics
Department of Computer Science
North Carolina State University

https://research.csc.ncsu.edu/arglab/people/cflynch.html


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon Oct 14 15:37:00 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 14 Oct 2019 06:37:00 -0700
Subject: [R] Double / single backticks for inline R code in an Rmarkdown
 file
In-Reply-To: <CAC8=1eovHsLzRev_YGVciPaB922wz7Zt97DtoeCz=PLqiK0-8g@mail.gmail.com>
References: <CAC8=1eovHsLzRev_YGVciPaB922wz7Zt97DtoeCz=PLqiK0-8g@mail.gmail.com>
Message-ID: <805282B6-8EAA-437F-AC22-7757E5805E70@dcn.davis.ca.us>

No, you don't misunderstand. But you might want to be aware that targeting PDF output uses LaTeX which regards double backticks as a method of encoding a left curly double quote mark, so this error could derive from an incomplete adaptation of the Rmd file for HTML output even though such a symbol doesn't make sense there in PDF either.

On October 14, 2019 4:35:26 AM PDT, Ashim Kapoor <ashimkapoor at gmail.com> wrote:
>Dear All,
>
>I am reading this file :-
>
>https://rmarkdown.rstudio.com/lesson-6.html
>
>My query is : In line 14 of the above file, ie.
>
>The [marmap](https://cran.r-project.org/web/packages/marmap/index.html)
>package provides tools and data for visualizing the ocean floor. Here
>is an
>example contour plot of marmap's ``r params$data`` dataset.
>
>Should not the phrase rparams$data be within SINGLE backticks ?
>
>Do I misunderstand?
>
>Thank you,
>Ashim
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From @@h|mk@poor @end|ng |rom gm@||@com  Mon Oct 14 15:47:27 2019
From: @@h|mk@poor @end|ng |rom gm@||@com (Ashim Kapoor)
Date: Mon, 14 Oct 2019 19:17:27 +0530
Subject: [R] Double / single backticks for inline R code in an Rmarkdown
 file
In-Reply-To: <805282B6-8EAA-437F-AC22-7757E5805E70@dcn.davis.ca.us>
References: <CAC8=1eovHsLzRev_YGVciPaB922wz7Zt97DtoeCz=PLqiK0-8g@mail.gmail.com>
 <805282B6-8EAA-437F-AC22-7757E5805E70@dcn.davis.ca.us>
Message-ID: <CAC8=1eqBQp96use9ogWkVL3YEQwYBGjGENPgxtVcPkFRFe=-qg@mail.gmail.com>

Dear Jeff,

Many thanks for your reply.

Best,
Ashim

On Mon, Oct 14, 2019 at 7:07 PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us>
wrote:

> No, you don't misunderstand. But you might want to be aware that targeting
> PDF output uses LaTeX which regards double backticks as a method of
> encoding a left curly double quote mark, so this error could derive from an
> incomplete adaptation of the Rmd file for HTML output even though such a
> symbol doesn't make sense there in PDF either.
>
> On October 14, 2019 4:35:26 AM PDT, Ashim Kapoor <ashimkapoor at gmail.com>
> wrote:
> >Dear All,
> >
> >I am reading this file :-
> >
> >https://rmarkdown.rstudio.com/lesson-6.html
> >
> >My query is : In line 14 of the above file, ie.
> >
> >The [marmap](https://cran.r-project.org/web/packages/marmap/index.html)
> >package provides tools and data for visualizing the ocean floor. Here
> >is an
> >example contour plot of marmap's ``r params$data`` dataset.
> >
> >Should not the phrase rparams$data be within SINGLE backticks ?
> >
> >Do I misunderstand?
> >
> >Thank you,
> >Ashim
> >
> >       [[alternative HTML version deleted]]
> >
> >______________________________________________
> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >https://stat.ethz.ch/mailman/listinfo/r-help
> >PLEASE do read the posting guide
> >http://www.R-project.org/posting-guide.html
> >and provide commented, minimal, self-contained, reproducible code.
>
> --
> Sent from my phone. Please excuse my brevity.
>

	[[alternative HTML version deleted]]


From x|e @end|ng |rom y|hu|@n@me  Mon Oct 14 16:00:20 2019
From: x|e @end|ng |rom y|hu|@n@me (Yihui Xie)
Date: Mon, 14 Oct 2019 09:00:20 -0500
Subject: [R] Double / single backticks for inline R code in an Rmarkdown
 file
In-Reply-To: <805282B6-8EAA-437F-AC22-7757E5805E70@dcn.davis.ca.us>
References: <CAC8=1eovHsLzRev_YGVciPaB922wz7Zt97DtoeCz=PLqiK0-8g@mail.gmail.com>
 <805282B6-8EAA-437F-AC22-7757E5805E70@dcn.davis.ca.us>
Message-ID: <CANROs4e7SKK6tgrv=RMYrk+Woj18-aTHD=Nifq6T35EXWPaeVw@mail.gmail.com>

params$data is "hawaii" in this case, so the output of

  ``r params$data``

is

  `hawaii`

The double backticks don't have any special meaning here. Only the
inside pair of backticks (i.e. `r `) makes sense to R Markdown (or
precisely speaking, knitr). The outside pair will be left untouched
after knitr evaluates the inline R expression `r params$data`. After
evaluation, there won't be double backticks. This has nothing to do
with the left curly double quote LaTeX. The result `hawaii` will be
converted to <code>hawaii</code> if the output format is HTML (or
\texttt{hawaii} if the output format is LaTeX), but the extra
backticks in the original Rmd document is completely optional. It all
depends on whether you want to place the result in a code tag or
command.

Regards,
Yihui
--
https://yihui.name

On Mon, Oct 14, 2019 at 8:42 AM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
>
> No, you don't misunderstand. But you might want to be aware that targeting PDF output uses LaTeX which regards double backticks as a method of encoding a left curly double quote mark, so this error could derive from an incomplete adaptation of the Rmd file for HTML output even though such a symbol doesn't make sense there in PDF either.
>
> On October 14, 2019 4:35:26 AM PDT, Ashim Kapoor <ashimkapoor at gmail.com> wrote:
> >Dear All,
> >
> >I am reading this file :-
> >
> >https://rmarkdown.rstudio.com/lesson-6.html
> >
> >My query is : In line 14 of the above file, ie.
> >
> >The [marmap](https://cran.r-project.org/web/packages/marmap/index.html)
> >package provides tools and data for visualizing the ocean floor. Here
> >is an
> >example contour plot of marmap's ``r params$data`` dataset.
> >
> >Should not the phrase rparams$data be within SINGLE backticks ?
> >
> >Do I misunderstand?
> >
> >Thank you,
> >Ashim
> >
> >       [[alternative HTML version deleted]]
> >
> >______________________________________________
> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >https://stat.ethz.ch/mailman/listinfo/r-help
> >PLEASE do read the posting guide
> >http://www.R-project.org/posting-guide.html
> >and provide commented, minimal, self-contained, reproducible code.
>
> --
> Sent from my phone. Please excuse my brevity.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @@h|mk@poor @end|ng |rom gm@||@com  Mon Oct 14 16:19:27 2019
From: @@h|mk@poor @end|ng |rom gm@||@com (Ashim Kapoor)
Date: Mon, 14 Oct 2019 19:49:27 +0530
Subject: [R] Double / single backticks for inline R code in an Rmarkdown
 file
In-Reply-To: <CANROs4e7SKK6tgrv=RMYrk+Woj18-aTHD=Nifq6T35EXWPaeVw@mail.gmail.com>
References: <CAC8=1eovHsLzRev_YGVciPaB922wz7Zt97DtoeCz=PLqiK0-8g@mail.gmail.com>
 <805282B6-8EAA-437F-AC22-7757E5805E70@dcn.davis.ca.us>
 <CANROs4e7SKK6tgrv=RMYrk+Woj18-aTHD=Nifq6T35EXWPaeVw@mail.gmail.com>
Message-ID: <CAC8=1eoagCzYCijFBMQ5jhmkmau2A6Rp9zqm3RP1U=mGzyrm5Q@mail.gmail.com>

Dear Yihui,

Thank you and Best Regards,
Ashim

On Mon, Oct 14, 2019 at 7:30 PM Yihui Xie <xie at yihui.name> wrote:

> params$data is "hawaii" in this case, so the output of
>
>   ``r params$data``
>
> is
>
>   `hawaii`
>
> The double backticks don't have any special meaning here. Only the
> inside pair of backticks (i.e. `r `) makes sense to R Markdown (or
> precisely speaking, knitr). The outside pair will be left untouched
> after knitr evaluates the inline R expression `r params$data`. After
> evaluation, there won't be double backticks. This has nothing to do
> with the left curly double quote LaTeX. The result `hawaii` will be
> converted to <code>hawaii</code> if the output format is HTML (or
> \texttt{hawaii} if the output format is LaTeX), but the extra
> backticks in the original Rmd document is completely optional. It all
> depends on whether you want to place the result in a code tag or
> command.
>
> Regards,
> Yihui
> --
> https://yihui.name
>
> On Mon, Oct 14, 2019 at 8:42 AM Jeff Newmiller <jdnewmil at dcn.davis.ca.us>
> wrote:
> >
> > No, you don't misunderstand. But you might want to be aware that
> targeting PDF output uses LaTeX which regards double backticks as a method
> of encoding a left curly double quote mark, so this error could derive from
> an incomplete adaptation of the Rmd file for HTML output even though such a
> symbol doesn't make sense there in PDF either.
> >
> > On October 14, 2019 4:35:26 AM PDT, Ashim Kapoor <ashimkapoor at gmail.com>
> wrote:
> > >Dear All,
> > >
> > >I am reading this file :-
> > >
> > >https://rmarkdown.rstudio.com/lesson-6.html
> > >
> > >My query is : In line 14 of the above file, ie.
> > >
> > >The [marmap](https://cran.r-project.org/web/packages/marmap/index.html)
> > >package provides tools and data for visualizing the ocean floor. Here
> > >is an
> > >example contour plot of marmap's ``r params$data`` dataset.
> > >
> > >Should not the phrase rparams$data be within SINGLE backticks ?
> > >
> > >Do I misunderstand?
> > >
> > >Thank you,
> > >Ashim
> > >
> > >       [[alternative HTML version deleted]]
> > >
> > >______________________________________________
> > >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >https://stat.ethz.ch/mailman/listinfo/r-help
> > >PLEASE do read the posting guide
> > >http://www.R-project.org/posting-guide.html
> > >and provide commented, minimal, self-contained, reproducible code.
> >
> > --
> > Sent from my phone. Please excuse my brevity.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From wewo|@k| @end|ng |rom gm@||@com  Tue Oct 15 12:07:38 2019
From: wewo|@k| @end|ng |rom gm@||@com (Witold E Wolski)
Date: Tue, 15 Oct 2019 12:07:38 +0200
Subject: [R] stats::power.t.test error
In-Reply-To: <AA91AD49-B95C-452D-8949-8659A44B2285@gmail.com>
References: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
 <AA91AD49-B95C-452D-8949-8659A44B2285@gmail.com>
Message-ID: <CAAjnpdi1_TDsceVn7MH-oKj98qJisru8d+SZS1Wp9tLhioh9pQ@mail.gmail.com>

Dear Peter,

Yes, It is a technical issue and a matter of diddling around. And I
agree with your comment regarding the 2 observations.
I have several thousands variance estimates for which I need to
compute the sample sizes automatically. Using try statements is
typically the last thing I would like to resort too.
Is there an alternative implementation of power.t.test on CRAN which
could the diddling for me and return plausible sample sizes i.e.
integers.

best regards
Witek

On Fri, 4 Oct 2019 at 16:28, peter dalgaard <pdalgd at gmail.com> wrote:
>
> This is mainly a technical issue with uniroot trying to go outside of its interval: (2, 1e7)
>
> It is fairly easy to find an approximate solution by diddling a little by hand:
>
> > power.t.test(delta = 0.5849625, sd=0.01, n=1.04, sig.level=0.05)$power
> [1] 0.8023375
>
> Notice, however, that 1.04 observations in each group makes no sense at all. In order to actually do a t-test you need at least 2 observations per group (since we assume equal group sizes) or you have no variance estimate. Already at sd=0.1, you are crossing the n=2 border, so for any smaller sd, you will just get higher power with n=2. (Also, anything with single-digit degrees of freedom for variance is probably expecting rather much regarding to Gaussian distribution of your data.)
>
> -pd
>
> > On 4 Oct 2019, at 14:30 , Witold E Wolski <wewolski at gmail.com> wrote:
> >
> > Hi,
> >
> > power.t.test works for some range of input parameters but fails otherwise.
> >
> >> power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
> > [1] 1.971668
> >> power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
> > [1] 1.620328
> >> power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
> > Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol = tol,  :
> >  did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0
> > In addition: Warning message:
> > In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced
> >
> > I guessing that sd is very small compared with delta, hence the
> > problem. But what are allowed values (ratios) of delta and sd?
> >
> > Best
> > Witek
> >
> >
> >
> >
> >
> >
> > --
> > Witold Eryk Wolski
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
>
>
>
>
>
>
>
>


-- 
Witold Eryk Wolski


From @ubh@moy@ch@kr@borty @end|ng |rom n|p|p@org@|n  Tue Oct 15 11:19:14 2019
From: @ubh@moy@ch@kr@borty @end|ng |rom n|p|p@org@|n (Subhamoy Chakraborty)
Date: Tue, 15 Oct 2019 14:49:14 +0530
Subject: [R] Unable to load .rda file
Message-ID: <CAEJD7PO0-3LG0evPW2jF6EFCNBsjkhJukvtRRO7y5MwYUZSc7A@mail.gmail.com>

Dear All,

Here is the error that I am encountering :-

> sessionInfo()
R version 3.3.3 (2017-03-06)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

locale:
 [1] LC_CTYPE=en_IN       LC_NUMERIC=C         LC_TIME=en_IN
 [4] LC_COLLATE=en_IN     LC_MONETARY=en_IN    LC_MESSAGES=en_IN
 [7] LC_PAPER=en_IN       LC_NAME=C            LC_ADDRESS=C
[10] LC_TELEPHONE=C       LC_MEASUREMENT=en_IN LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

> load("onlyTN.rda")
Error: bad restore file magic number (file may be corrupted) -- no data
loaded
In addition: Warning message:
file ?onlyTN.rda? has magic number 'RDX3'
  Use of save versions prior to 2 is deprecated
>

Can someone please help me  ?

Thank you,
Subhamoy

	[[alternative HTML version deleted]]


From gordo2b @end|ng |rom hotm@||@co@uk  Tue Oct 15 15:09:17 2019
From: gordo2b @end|ng |rom hotm@||@co@uk (gordon beattie)
Date: Tue, 15 Oct 2019 13:09:17 +0000
Subject: [R] R unable to locate base unix commands (tar, sh etc)
In-Reply-To: <1571140488874-0.post@n4.nabble.com>
References: <1571140488874-0.post@n4.nabble.com>
Message-ID: <AM0PR08MB4129337FCC515ADD864866ABB3930@AM0PR08MB4129.eurprd08.prod.outlook.com>

Started having a problem installing packages where R can't find base unix commands. I've put an example below (other packages have identical "command not found" errors, sometimes with different commands e.g. sh) and my PATH/.Renviron(where the problem likely is). I'm on MacOS. Thanks in advance for any assistance!

    > install.packages("hdf5r", configure.args="--with-hdf5=/usr/local/Cellar/hdf5/1.10.5_1/bin/h5cc")
trying URL 'https://www.stats.bris.ac.uk/R/bin/macosx/el-capitan/contrib/3.6/hdf5r_1.3.0.tgz'
Content type 'application/x-gzip' length 4332333 bytes (4.1 MB)
==================================================
downloaded 4.1 MB

sh: tar: command not found
Error: file ?/var/folders/ll/jmydhb6n7jqg5rv_c58jxkkh0000gn/T//RtmpnssBh2/downloaded_packages/hdf5r_1.3.0.tgz? is not a macOS binary package
In addition: Warning messages:
1: In system(paste0("tar zxf \"", path.expand(what), "\" -C \"", path.expand(where),  :
  error in running command
2: 'tar' returned non-zero exit code 127

PATH:

> Sys.getenv("PATH")
[1] "/bin;/usr/bin;/usr/local/bin"

.Renviron (could anyone explain why "Sys.getenv" doesn't output the contents of Renviron, trying to understand how they link)

.RenvironR_LIBS=~/R/library
PAGER=/usr/local/bin/less
PATH=/Users/gordon.beattie/Downloads/R_packages/gliph-master/gliph/bin
PATH=/usr/local/bin
PATH=/usr/local/bin
PATH=/usr/bin
PATH=/bin
PATH=/usr/sbin
PATH=/sbin
PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
PATH=/usr/bin:/bin:/usr/sbin
PATH=/sbin
PATH=/usr/local/bin


	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Tue Oct 15 16:41:35 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Tue, 15 Oct 2019 07:41:35 -0700
Subject: [R] stats::power.t.test error
In-Reply-To: <CAAjnpdi1_TDsceVn7MH-oKj98qJisru8d+SZS1Wp9tLhioh9pQ@mail.gmail.com>
References: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
 <AA91AD49-B95C-452D-8949-8659A44B2285@gmail.com>
 <CAAjnpdi1_TDsceVn7MH-oKj98qJisru8d+SZS1Wp9tLhioh9pQ@mail.gmail.com>
Message-ID: <CAGxFJbRRtLfcFN2xvRrQSbHrs5z5bffQ9Vezanjbvj9G1jWk8A@mail.gmail.com>

"...plausible sample sizes i.e. integers."
??
f(...) = function that returns a real.

ceiling(f(...)) = function that returns an integer.

The problem is the "plausible" part.

Cheers,
Bert


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Tue, Oct 15, 2019 at 3:11 AM Witold E Wolski <wewolski at gmail.com> wrote:

> Dear Peter,
>
> Yes, It is a technical issue and a matter of diddling around. And I
> agree with your comment regarding the 2 observations.
> I have several thousands variance estimates for which I need to
> compute the sample sizes automatically. Using try statements is
> typically the last thing I would like to resort too.
> Is there an alternative implementation of power.t.test on CRAN which
> could the diddling for me and return plausible sample sizes i.e.
> integers.
>
> best regards
> Witek
>
> On Fri, 4 Oct 2019 at 16:28, peter dalgaard <pdalgd at gmail.com> wrote:
> >
> > This is mainly a technical issue with uniroot trying to go outside of
> its interval: (2, 1e7)
> >
> > It is fairly easy to find an approximate solution by diddling a little
> by hand:
> >
> > > power.t.test(delta = 0.5849625, sd=0.01, n=1.04, sig.level=0.05)$power
> > [1] 0.8023375
> >
> > Notice, however, that 1.04 observations in each group makes no sense at
> all. In order to actually do a t-test you need at least 2 observations per
> group (since we assume equal group sizes) or you have no variance estimate.
> Already at sd=0.1, you are crossing the n=2 border, so for any smaller sd,
> you will just get higher power with n=2. (Also, anything with single-digit
> degrees of freedom for variance is probably expecting rather much regarding
> to Gaussian distribution of your data.)
> >
> > -pd
> >
> > > On 4 Oct 2019, at 14:30 , Witold E Wolski <wewolski at gmail.com> wrote:
> > >
> > > Hi,
> > >
> > > power.t.test works for some range of input parameters but fails
> otherwise.
> > >
> > >> power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
> > > [1] 1.971668
> > >> power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
> > > [1] 1.620328
> > >> power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
> > > Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol =
> tol,  :
> > >  did not succeed extending the interval endpoints for f(lower) *
> f(upper) <= 0
> > > In addition: Warning message:
> > > In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced
> > >
> > > I guessing that sd is very small compared with delta, hence the
> > > problem. But what are allowed values (ratios) of delta and sd?
> > >
> > > Best
> > > Witek
> > >
> > >
> > >
> > >
> > >
> > >
> > > --
> > > Witold Eryk Wolski
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> >
> > --
> > Peter Dalgaard, Professor,
> > Center for Statistics, Copenhagen Business School
> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> > Phone: (+45)38153501
> > Office: A 4.23
> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
> >
> >
> >
> >
> >
> >
> >
> >
> >
>
>
> --
> Witold Eryk Wolski
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Tue Oct 15 16:44:56 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Tue, 15 Oct 2019 07:44:56 -0700
Subject: [R] Unable to load .rda file
In-Reply-To: <CAEJD7PO0-3LG0evPW2jF6EFCNBsjkhJukvtRRO7y5MwYUZSc7A@mail.gmail.com>
References: <CAEJD7PO0-3LG0evPW2jF6EFCNBsjkhJukvtRRO7y5MwYUZSc7A@mail.gmail.com>
Message-ID: <C97012DC-8F23-47C8-B924-1BCE18146175@dcn.davis.ca.us>

You desperately need to upgrade both your operating system and your version of R. If the rda file was transmitted to you from someone else then that will most likely fix your problem.

On October 15, 2019 2:19:14 AM PDT, Subhamoy Chakraborty <subhamoy.chakraborty at nipfp.org.in> wrote:
>Dear All,
>
>Here is the error that I am encountering :-
>
>> sessionInfo()
>R version 3.3.3 (2017-03-06)
>Platform: x86_64-pc-linux-gnu (64-bit)
>Running under: Ubuntu 14.04.5 LTS
>
>locale:
> [1] LC_CTYPE=en_IN       LC_NUMERIC=C         LC_TIME=en_IN
> [4] LC_COLLATE=en_IN     LC_MONETARY=en_IN    LC_MESSAGES=en_IN
> [7] LC_PAPER=en_IN       LC_NAME=C            LC_ADDRESS=C
>[10] LC_TELEPHONE=C       LC_MEASUREMENT=en_IN LC_IDENTIFICATION=C
>
>attached base packages:
>[1] stats     graphics  grDevices utils     datasets  methods   base
>
>> load("onlyTN.rda")
>Error: bad restore file magic number (file may be corrupted) -- no data
>loaded
>In addition: Warning message:
>file ?onlyTN.rda? has magic number 'RDX3'
>  Use of save versions prior to 2 is deprecated
>>
>
>Can someone please help me  ?
>
>Thank you,
>Subhamoy
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From m@rc_@chw@rtz @end|ng |rom me@com  Tue Oct 15 17:07:43 2019
From: m@rc_@chw@rtz @end|ng |rom me@com (Marc Schwartz)
Date: Tue, 15 Oct 2019 11:07:43 -0400
Subject: [R] Unable to load .rda file
In-Reply-To: <CAEJD7PO0-3LG0evPW2jF6EFCNBsjkhJukvtRRO7y5MwYUZSc7A@mail.gmail.com>
References: <CAEJD7PO0-3LG0evPW2jF6EFCNBsjkhJukvtRRO7y5MwYUZSc7A@mail.gmail.com>
Message-ID: <5D6DBCE4-A318-424E-9D9E-B84F11E24AEE@me.com>


> On Oct 15, 2019, at 5:19 AM, Subhamoy Chakraborty <subhamoy.chakraborty at nipfp.org.in> wrote:
> 
> Dear All,
> 
> Here is the error that I am encountering :-
> 
>> sessionInfo()
> R version 3.3.3 (2017-03-06)
> Platform: x86_64-pc-linux-gnu (64-bit)
> Running under: Ubuntu 14.04.5 LTS
> 
> locale:
> [1] LC_CTYPE=en_IN       LC_NUMERIC=C         LC_TIME=en_IN
> [4] LC_COLLATE=en_IN     LC_MONETARY=en_IN    LC_MESSAGES=en_IN
> [7] LC_PAPER=en_IN       LC_NAME=C            LC_ADDRESS=C
> [10] LC_TELEPHONE=C       LC_MEASUREMENT=en_IN LC_IDENTIFICATION=C
> 
> attached base packages:
> [1] stats     graphics  grDevices utils     datasets  methods   base
> 
>> load("onlyTN.rda")
> Error: bad restore file magic number (file may be corrupted) -- no data
> loaded
> In addition: Warning message:
> file ?onlyTN.rda? has magic number 'RDX3'
>  Use of save versions prior to 2 is deprecated
>> 
> 
> Can someone please help me  ?
> 
> Thank you,
> Subhamoy


Hi,

You need to upgrade your version of R to at least 3.5.0, preferably newer, which is presumably the version under which the data file was saved.

Note from news(), under 3.6.1, in the section regarding SIGNIFICANT USER-VISIBLE CHANGES for 3.6.0:

Serialization format version 3 becomes the default for serialization and saving of the workspace (save(), serialize(), saveRDS(), compiler::cmpfile()). Serialized data in format 3 cannot be read by versions of R prior to version 3.5.0. Serialization format version 2 is still supported and can be selected by version = 2 in the save/serialization functions. The default can be changed back for the whole R session by setting environment variables R_DEFAULT_SAVE_VERSION and R_DEFAULT_SERIALIZE_VERSION to 2. For maximal back-compatibility, files ?vignette.rds? and ?partial.rdb? generated by R CMD build are in serialization format version 2, and resave by default produces files in serialization format version 2 (unless the original is already in format version 3).


Regards,

Marc Schwartz


From pd@|gd @end|ng |rom gm@||@com  Tue Oct 15 17:49:34 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Tue, 15 Oct 2019 17:49:34 +0200
Subject: [R] stats::power.t.test error
In-Reply-To: <CAAjnpdi1_TDsceVn7MH-oKj98qJisru8d+SZS1Wp9tLhioh9pQ@mail.gmail.com>
References: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
 <AA91AD49-B95C-452D-8949-8659A44B2285@gmail.com>
 <CAAjnpdi1_TDsceVn7MH-oKj98qJisru8d+SZS1Wp9tLhioh9pQ@mail.gmail.com>
Message-ID: <2AA3D41A-6DDB-4064-BB2A-AB64A72B10F7@gmail.com>

You don't really want the diddling, since it gives meaningless values anyway...

For a pragmatic strategy, how about this?:

(a) calculate the power at n=2, if bigger than target power, done, else
(b) calculate n to reach target power, now guaranteed to have n > 2. Round upwards.

Peter D.

> On 15 Oct 2019, at 12:07 , Witold E Wolski <wewolski at gmail.com> wrote:
> 
> Dear Peter,
> 
> Yes, It is a technical issue and a matter of diddling around. And I
> agree with your comment regarding the 2 observations.
> I have several thousands variance estimates for which I need to
> compute the sample sizes automatically. Using try statements is
> typically the last thing I would like to resort too.
> Is there an alternative implementation of power.t.test on CRAN which
> could the diddling for me and return plausible sample sizes i.e.
> integers.
> 
> best regards
> Witek
> 
> On Fri, 4 Oct 2019 at 16:28, peter dalgaard <pdalgd at gmail.com> wrote:
>> 
>> This is mainly a technical issue with uniroot trying to go outside of its interval: (2, 1e7)
>> 
>> It is fairly easy to find an approximate solution by diddling a little by hand:
>> 
>>> power.t.test(delta = 0.5849625, sd=0.01, n=1.04, sig.level=0.05)$power
>> [1] 0.8023375
>> 
>> Notice, however, that 1.04 observations in each group makes no sense at all. In order to actually do a t-test you need at least 2 observations per group (since we assume equal group sizes) or you have no variance estimate. Already at sd=0.1, you are crossing the n=2 border, so for any smaller sd, you will just get higher power with n=2. (Also, anything with single-digit degrees of freedom for variance is probably expecting rather much regarding to Gaussian distribution of your data.)
>> 
>> -pd
>> 
>>> On 4 Oct 2019, at 14:30 , Witold E Wolski <wewolski at gmail.com> wrote:
>>> 
>>> Hi,
>>> 
>>> power.t.test works for some range of input parameters but fails otherwise.
>>> 
>>>> power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
>>> [1] 1.971668
>>>> power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
>>> [1] 1.620328
>>>> power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
>>> Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol = tol,  :
>>> did not succeed extending the interval endpoints for f(lower) * f(upper) <= 0
>>> In addition: Warning message:
>>> In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced
>>> 
>>> I guessing that sd is very small compared with delta, hence the
>>> problem. But what are allowed values (ratios) of delta and sd?
>>> 
>>> Best
>>> Witek
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> --
>>> Witold Eryk Wolski
>>> 
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>> 
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
>> 
> 
> 
> -- 
> Witold Eryk Wolski

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Tue Oct 15 17:59:15 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Tue, 15 Oct 2019 17:59:15 +0200
Subject: [R] stats::power.t.test error
In-Reply-To: <CAGxFJbRRtLfcFN2xvRrQSbHrs5z5bffQ9Vezanjbvj9G1jWk8A@mail.gmail.com>
References: <CAAjnpdh_pdg4ZSNRbOdZM1YZeA=R4=ushBEFYLMKF+2PurpvKg@mail.gmail.com>
 <AA91AD49-B95C-452D-8949-8659A44B2285@gmail.com>
 <CAAjnpdi1_TDsceVn7MH-oKj98qJisru8d+SZS1Wp9tLhioh9pQ@mail.gmail.com>
 <CAGxFJbRRtLfcFN2xvRrQSbHrs5z5bffQ9Vezanjbvj9G1jWk8A@mail.gmail.com>
Message-ID: <23973.60627.525850.102929@stat.math.ethz.ch>

>>>>> Bert Gunter 
>>>>>     on Tue, 15 Oct 2019 07:41:35 -0700 writes:

    > "...plausible sample sizes i.e. integers."
    > ??
    > f(...) = function that returns a real.

    > ceiling(f(...)) = function that returns an integer.

    > The problem is the "plausible" part.

Actually,  power.t.test() does not return an integer for 'n'
typically in any case.

I found that it's actually quite easy to power.t.test() do the
diddling for us and return a number between 1 and 2.

What you do with that number is your decision, but formally it
solves the root finding problem :

> (ptt1 <- power.t.test(delta = 0.6, sd=0.00001, power=0.9 , sig.level=0.05))

     Two-sample t test power calculation 

              n = 1.004283
          delta = 0.6
             sd = 1e-05
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n is number in *each* group

--------------------

As the change is small, and I see that Witold has good reasons
to prefer this to wrapping everything in try(.) or (better) tryCatch(.),
I propose to commit the change after a bit more testing.

Martin


    > Cheers,
    > Bert


    > Bert Gunter

    > "The trouble with having an open mind is that people keep coming along and
    > sticking things into it."
    > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


    > On Tue, Oct 15, 2019 at 3:11 AM Witold E Wolski <wewolski at gmail.com> wrote:

    >> Dear Peter,
    >> 
    >> Yes, It is a technical issue and a matter of diddling around. And I
    >> agree with your comment regarding the 2 observations.
    >> I have several thousands variance estimates for which I need to
    >> compute the sample sizes automatically. Using try statements is
    >> typically the last thing I would like to resort too.
    >> Is there an alternative implementation of power.t.test on CRAN which
    >> could the diddling for me and return plausible sample sizes i.e.
    >> integers.
    >> 
    >> best regards
    >> Witek
    >> 
    >> On Fri, 4 Oct 2019 at 16:28, peter dalgaard <pdalgd at gmail.com> wrote:
    >> >
    >> > This is mainly a technical issue with uniroot trying to go outside of
    >> its interval: (2, 1e7)
    >> >
    >> > It is fairly easy to find an approximate solution by diddling a little
    >> by hand:
    >> >
    >> > > power.t.test(delta = 0.5849625, sd=0.01, n=1.04, sig.level=0.05)$power
    >> > [1] 0.8023375
    >> >
    >> > Notice, however, that 1.04 observations in each group makes no sense at
    >> all. In order to actually do a t-test you need at least 2 observations per
    >> group (since we assume equal group sizes) or you have no variance estimate.
    >> Already at sd=0.1, you are crossing the n=2 border, so for any smaller sd,
    >> you will just get higher power with n=2. (Also, anything with single-digit
    >> degrees of freedom for variance is probably expecting rather much regarding
    >> to Gaussian distribution of your data.)
    >> >
    >> > -pd
    >> >
    >> > > On 4 Oct 2019, at 14:30 , Witold E Wolski <wewolski at gmail.com> wrote:
    >> > >
    >> > > Hi,
    >> > >
    >> > > power.t.test works for some range of input parameters but fails
    >> otherwise.
    >> > >
    >> > >> power.t.test(delta = 0.5849625, sd=0.1, power=0.8, sig.level=0.05)$n
    >> > > [1] 1.971668
    >> > >> power.t.test(delta = 0.5849625, sd=0.05, power=0.8, sig.level=0.05)$n
    >> > > [1] 1.620328
    >> > >> power.t.test(delta = 0.5849625, sd=0.01, power=0.8, sig.level=0.05)$n
    >> > > Error in uniroot(function(n) eval(p.body) - power, c(2, 1e+07), tol =
    >> tol,  :
    >> > >  did not succeed extending the interval endpoints for f(lower) *
    >> f(upper) <= 0
    >> > > In addition: Warning message:
    >> > > In qt(sig.level/tside, nu, lower.tail = FALSE) : NaNs produced
    >> > >
    >> > > I guessing that sd is very small compared with delta, hence the
    >> > > problem. But what are allowed values (ratios) of delta and sd?
    >> > >
    >> > > Best
    >> > > Witek
    >> > >
    >> > > --
    >> > > Witold Eryk Wolski
    >> > >

    >> >
    >> > --
    >> > Peter Dalgaard, Professor,
    >> > Center for Statistics, Copenhagen Business School
    >> > Solbjerg Plads 3, 2000 Frederiksberg, Denmark
    >> > Phone: (+45)38153501
    >> > Office: A 4.23
    >> > Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
    >> 
    >> --
    >> Witold Eryk Wolski


From reichm@@j m@iii@g oii sbcgiob@i@@et  Wed Oct 16 02:20:35 2019
From: reichm@@j m@iii@g oii sbcgiob@i@@et (reichm@@j m@iii@g oii sbcgiob@i@@et)
Date: Tue, 15 Oct 2019 19:20:35 -0500
Subject: [R] Bar Charts
Message-ID: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>

r-help forum

 

I have a database that I have performed a "group_by" of a variable called
CONTBR_OCCUPATION. I then simply want to plot out just the top 15 results as
a bar plot. How do I plot only the top 15 groups on the x -axis. Should I
just extract the top 15 records and plot them or is the a better way?

 

occup <- myDat %>%

  group_by(CONTBR_OCCUPATION) %>%

  summarize(count = n()) %>%

  arrange(desc(count))

 

Jeff 

 


	[[alternative HTML version deleted]]


From drj|m|emon @end|ng |rom gm@||@com  Wed Oct 16 03:51:25 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Wed, 16 Oct 2019 12:51:25 +1100
Subject: [R] Bar Charts
In-Reply-To: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>
References: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>
Message-ID: <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>

Hi Jeff,
Let's say you have the following data:

set.seed(12345)
CONTBR_RESULT<-sample(20:200,30)

If you don't mind ordering the results, you can do this:

barplot(rev(sort(CONTBR_RESULT))[1:15],...)

If you want the values in the original order:

barplot(CONTBR_RESULT[order(CONTBR_RESULT) > 15],...)

Jim

On Wed, Oct 16, 2019 at 11:21 AM <reichmanj at sbcglobal.net> wrote:
>
> r-help forum
>
>
>
> I have a database that I have performed a "group_by" of a variable called
> CONTBR_OCCUPATION. I then simply want to plot out just the top 15 results as
> a bar plot. How do I plot only the top 15 groups on the x -axis. Should I
> just extract the top 15 records and plot them or is the a better way?
>
>
>
> occup <- myDat %>%
>
>   group_by(CONTBR_OCCUPATION) %>%
>
>   summarize(count = n()) %>%
>
>   arrange(desc(count))
>
>
>
> Jeff
>
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Oct 16 09:53:03 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 16 Oct 2019 08:53:03 +0100
Subject: [R] Bar Charts
In-Reply-To: <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
References: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>
 <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
Message-ID: <fe8bbea0-a879-db84-9e2c-7eb3dec52767@sapo.pt>

Hello,

Inline.

?s 02:51 de 16/10/19, Jim Lemon escreveu:
> Hi Jeff,
> Let's say you have the following data:
> 
> set.seed(12345)
> CONTBR_RESULT<-sample(20:200,30)
> 
> If you don't mind ordering the results, you can do this:
> 
> barplot(rev(sort(CONTBR_RESULT))[1:15],...)
> 
> If you want the values in the original order:
> 
> barplot(CONTBR_RESULT[order(CONTBR_RESULT) > 15],...)

This is not right, it keeps the 15 largest *indices*, not values.

Here is a way.


TopN <- function(x, n, keep.order = FALSE){
   nvec <- seq_len(n)
   if(keep.order){
     i <- order(x, decreasing = TRUE)[nvec]
     x[i[order(i)]]
   }else{
     sort(x, decreasing = TRUE)[nvec]
   }
}

barplot(TopN(CONTBR_RESULT, 15))
barplot(TopN(CONTBR_RESULT, 15, TRUE))


Hope this helps,

Rui Barradas

> 
> Jim
> 
> On Wed, Oct 16, 2019 at 11:21 AM <reichmanj at sbcglobal.net> wrote:
>>
>> r-help forum
>>
>>
>>
>> I have a database that I have performed a "group_by" of a variable called
>> CONTBR_OCCUPATION. I then simply want to plot out just the top 15 results as
>> a bar plot. How do I plot only the top 15 groups on the x -axis. Should I
>> just extract the top 15 records and plot them or is the a better way?
>>
>>
>>
>> occup <- myDat %>%
>>
>>    group_by(CONTBR_OCCUPATION) %>%
>>
>>    summarize(count = n()) %>%
>>
>>    arrange(desc(count))
>>
>>
>>
>> Jeff
>>
>>
>>
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From drj|m|emon @end|ng |rom gm@||@com  Wed Oct 16 11:47:21 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Wed, 16 Oct 2019 20:47:21 +1100
Subject: [R] Bar Charts
In-Reply-To: <CAL537s_UEMj=jD74XSeaNAAC0PSgDNQuKUq=MONBqtADcG6xwA@mail.gmail.com>
References: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>
 <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
 <CAL537s_UEMj=jD74XSeaNAAC0PSgDNQuKUq=MONBqtADcG6xwA@mail.gmail.com>
Message-ID: <CA+8X3fXpceCk11GhFHUCb4RHvKOgoVNfjkacEh4tNF+4GPGZyg@mail.gmail.com>

Hi Rui & Jorge,
You're both right, thanks for the correction. I should have done:

CONTBR_RESULT[CONTBR_RESULT > quantile(CONTBR_RESULT,probs=0.5)]
[1] 161 171 112 115 105 195 122 113 179 190 156 160 167 125 138

Jim

On Wed, Oct 16, 2019 at 6:55 PM Jorge Mendon?a <jpm at isep.ipp.pt> wrote:
>
> It`s like this?
>
> barplot(CONTBR_RESULT[order(CONTBR_RESULT)][16:30])
>
> Regards
> Jorge
>
> On Wed, 16 Oct 2019 at 02:51, Jim Lemon <drjimlemon at gmail.com> wrote:
>>
>> Hi Jeff,
>> Let's say you have the following data:
>>
>> set.seed(12345)
>> CONTBR_RESULT<-sample(20:200,30)
>>
>> If you don't mind ordering the results, you can do this:
>>
>> barplot(rev(sort(CONTBR_RESULT))[1:15],...)
>>
>> If you want the values in the original order:
>>
>> barplot(CONTBR_RESULT[order(CONTBR_RESULT) > 15],...)
>>
>> Jim
>>
>> On Wed, Oct 16, 2019 at 11:21 AM <reichmanj at sbcglobal.net> wrote:
>> >
>> > r-help forum
>> >
>> >
>> >
>> > I have a database that I have performed a "group_by" of a variable called
>> > CONTBR_OCCUPATION. I then simply want to plot out just the top 15 results as
>> > a bar plot. How do I plot only the top 15 groups on the x -axis. Should I
>> > just extract the top 15 records and plot them or is the a better way?
>> >
>> >
>> >
>> > occup <- myDat %>%
>> >
>> >   group_by(CONTBR_OCCUPATION) %>%
>> >
>> >   summarize(count = n()) %>%
>> >
>> >   arrange(desc(count))
>> >
>> >
>> >
>> > Jeff
>> >
>> >
>> >
>> >
>> >         [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> > https://stat.ethz.ch/mailman/listinfo/r-help
>> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> > and provide commented, minimal, self-contained, reproducible code.
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>
>
>
> --
> Jorge Mendon?a
> Departamento de Matem?tica
> Instituto Superior de Engenharia do Porto
> Portugal


From jpm @end|ng |rom |@ep@|pp@pt  Wed Oct 16 09:55:16 2019
From: jpm @end|ng |rom |@ep@|pp@pt (=?UTF-8?Q?Jorge_Mendon=C3=A7a?=)
Date: Wed, 16 Oct 2019 08:55:16 +0100
Subject: [R] Bar Charts
In-Reply-To: <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
References: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>
 <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
Message-ID: <CAL537s_UEMj=jD74XSeaNAAC0PSgDNQuKUq=MONBqtADcG6xwA@mail.gmail.com>

It`s like this?

barplot(CONTBR_RESULT[order(CONTBR_RESULT)][16:30])

Regards
Jorge

On Wed, 16 Oct 2019 at 02:51, Jim Lemon <drjimlemon at gmail.com> wrote:

> Hi Jeff,
> Let's say you have the following data:
>
> set.seed(12345)
> CONTBR_RESULT<-sample(20:200,30)
>
> If you don't mind ordering the results, you can do this:
>
> barplot(rev(sort(CONTBR_RESULT))[1:15],...)
>
> If you want the values in the original order:
>
> barplot(CONTBR_RESULT[order(CONTBR_RESULT) > 15],...)
>
> Jim
>
> On Wed, Oct 16, 2019 at 11:21 AM <reichmanj at sbcglobal.net> wrote:
> >
> > r-help forum
> >
> >
> >
> > I have a database that I have performed a "group_by" of a variable called
> > CONTBR_OCCUPATION. I then simply want to plot out just the top 15
> results as
> > a bar plot. How do I plot only the top 15 groups on the x -axis. Should I
> > just extract the top 15 records and plot them or is the a better way?
> >
> >
> >
> > occup <- myDat %>%
> >
> >   group_by(CONTBR_OCCUPATION) %>%
> >
> >   summarize(count = n()) %>%
> >
> >   arrange(desc(count))
> >
> >
> >
> > Jeff
> >
> >
> >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


-- 
Jorge Mendon?a
Departamento de Matem?tica
Instituto Superior de Engenharia do Porto
Portugal

	[[alternative HTML version deleted]]


From reichm@@j m@iii@g oii sbcgiob@i@@et  Thu Oct 17 00:29:39 2019
From: reichm@@j m@iii@g oii sbcgiob@i@@et (reichm@@j m@iii@g oii sbcgiob@i@@et)
Date: Wed, 16 Oct 2019 17:29:39 -0500
Subject: [R] Bar Charts
In-Reply-To: <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
References: <000401d583b7$8811cf20$98356d60$@sbcglobal.net>
 <CA+8X3fXi9HJMXftezrzKuFusvUu5XL2wgSQLC0wuo=CiXCT3Eg@mail.gmail.com>
Message-ID: <000801d58471$333219f0$99964dd0$@sbcglobal.net>

Jim

That?s certainly much more straight forward.

Jeff

-----Original Message-----
From: Jim Lemon <drjimlemon at gmail.com> 
Sent: Tuesday, October 15, 2019 8:51 PM
To: Jeff Reichman <reichmanj at sbcglobal.net>
Cc: r-help mailing list <r-help at r-project.org>
Subject: Re: [R] Bar Charts

Hi Jeff,
Let's say you have the following data:

set.seed(12345)
CONTBR_RESULT<-sample(20:200,30)

If you don't mind ordering the results, you can do this:

barplot(rev(sort(CONTBR_RESULT))[1:15],...)

If you want the values in the original order:

barplot(CONTBR_RESULT[order(CONTBR_RESULT) > 15],...)

Jim

On Wed, Oct 16, 2019 at 11:21 AM <reichmanj at sbcglobal.net> wrote:
>
> r-help forum
>
>
>
> I have a database that I have performed a "group_by" of a variable 
> called CONTBR_OCCUPATION. I then simply want to plot out just the top 
> 15 results as a bar plot. How do I plot only the top 15 groups on the 
> x -axis. Should I just extract the top 15 records and plot them or is the a better way?
>
>
>
> occup <- myDat %>%
>
>   group_by(CONTBR_OCCUPATION) %>%
>
>   summarize(count = n()) %>%
>
>   arrange(desc(count))
>
>
>
> Jeff
>
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see 
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide 
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From herd_dog @end|ng |rom cox@net  Thu Oct 17 05:10:25 2019
From: herd_dog @end|ng |rom cox@net (Phillip Heinrich)
Date: Wed, 16 Oct 2019 20:10:25 -0700
Subject: [R] Another Real Basic Question
Message-ID: <ED891BAC0E9446778B265ADED0785132@OWNERPC>

In the Source window of RStudio (upper left) I save my code (File/Save) but can not reload it.  There is a file labeled (RECode.R) but neither File/Open file or File/Recent Files gets me anywhere.

Any ideas what I?m doing wrong.
	[[alternative HTML version deleted]]


From r@turner @end|ng |rom @uck|@nd@@c@nz  Thu Oct 17 05:50:18 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Thu, 17 Oct 2019 16:50:18 +1300
Subject: [R] Another Real Basic Question
In-Reply-To: <ED891BAC0E9446778B265ADED0785132@OWNERPC>
References: <ED891BAC0E9446778B265ADED0785132@OWNERPC>
Message-ID: <01b67a35-52a8-79c6-b08f-28a462120c37@auckland.ac.nz>


On 17/10/19 4:10 PM, Phillip Heinrich wrote:

> In the Source window of RStudio (upper left) I save my code (File/Save) but can not reload it.  There is a file labeled (RECode.R) but neither File/Open file or File/Recent Files gets me anywhere.
> 
> Any ideas what I?m doing wrong.

Using Rstudio? :-)

This appears to be an Rstudio question and not an R question.  It should 
be directed at the proper resource.

cheers,

Rolf Turner

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From jocp@|ne @end|ng |rom goog|em@||@com  Thu Oct 17 11:28:45 2019
From: jocp@|ne @end|ng |rom goog|em@||@com (Jocelyn Ireson-Paine)
Date: Thu, 17 Oct 2019 10:28:45 +0100
Subject: [R] Surprisingly large amount of memory used by tibble with lots of
 nested tibbles within
Message-ID: <CAOdhVrFhJpuzoXcqCYyjEMWGtU=hcW84N2xA43dgqTkX5vFxxQ@mail.gmail.com>

I'm using the Tidyverse group_nest() function to nest data about families
and people within households, and have found that this seems to use
astonishing quantities of memory. It's more than I'd expect from the number
of nested tibbles created. I'll outline what was happening with my actual
data, then show a reproducible example.

My data comes from the British Labour Force Survey. It's a flat file,
storable as CSV, representing households. Each record represents a person,
with variables such as age, sex, income, health, employment. Records have a
household ID, which groups them into households; and a family ID, grouping
into families within a household. A fair number of households have more
than one family; and many families have more than one person.

So the data has a hierarchical structure of people within families within
households. I need to process it at all three levels. Some benefit
calculations, for example, need doing per person; but I also need to
aggregate over families and households. It seemed obvious that using
group_nest() would make this easy. Indeed it does, but at the expense of
memory. Whereas one file of 4000 households and about 40 variables occupies
1.44 MB unnested, it blows up to 19.8 MB once double-nested so people are
within families are within households.

Also surprising is that the nesting makes saveRDS() much much slower.
Saving the unnested data is almost instantaneous; saving the nested takes
over 10 minutes. Reading it is also slow.

I'll now show my reproducible example. For this, I created a 10,000-row
tibble with 15 data columns, all generated by runif() . I then added a
grouping column to indicate which rows could be regarded as in the same
group. This can be varied, so I can have every row in its own group, or all
rows in the same group, or somewhere in between. I then called group_nest()
on this and looked at the memory used by the result. Actually, I did this
inside a function, and called it with different numbers of groups, to see
how memory usage varied with number of nested tibbles. Each row's group ID
was created by remaindering (via %%) on its row number.

First, my source:

library( tidyverse )
library( pryr )
library( lobstr )
library( glue )
library( microbenchmark )
library( assertthat )

investigate_nesting_effect <- function( len, ngroups )
{
  t <- tibble( id=1:len
             , a=runif(len), b=runif(len), c=runif(len), d=runif(len),
e=runif(len)
             , f=runif(len), g=runif(len), h=runif(len), i=runif(len),
j=runif(len)
             , k=runif(len), l=runif(len), m=runif(len), n=runif(len),
o=runif(len)
             )

  t $ group_id <- 1:len %% ngroups

  tg <- t %>% group_by( group_id )

  tgn <- tg %>% group_nest( keep=FALSE )

  tgnun <- tgn %>% unnest()

  assert_that( are_equal( t, tgnun, tol=0.001 ) )

  print( glue( "Length={len}, ngroups={ngroups}, nrow={nrow(tgn)},
mem={object_size( tgn )}" ) )

#  res <- microbenchmark( saveRDS( tgn, str_c( "data/tgn_", ngroups ) )
#                       , times=5
#                       )
#
#  print( res )

  tgn
}

for ( ngroups in c( 1, 3, 10, 30, 100, 300, 1000, 3000, 10000 ) ) {
  investigate_nesting_effect( 10000, ngroups )
}

In this, ngroups is the number of groups to create. The first time round
the loop, all rows end up nested within one tibble; the final time, each
row is nested within its own tibble. In the function, t is the original
unnested tibble; tg is it grouped; tgn is it nested. tgnun is it unnested
again. tgnun sanity-checks my code by asserting that nesting and then
unnesting gives the original.

Now my results:
Length=10000, ngroups=1, nrow=1, mem=1,244,528
Length=10000, ngroups=3, nrow=3, mem=1,246,920
Length=10000, ngroups=10, nrow=10, mem=1,255,280
Length=10000, ngroups=30, nrow=30, mem=1,278,944
Length=10000, ngroups=100, nrow=100, mem=1,361,744
Length=10000, ngroups=300, nrow=300, mem=1,599,344
Length=10000, ngroups=1000, nrow=1000, mem=3,155,344
Length=10000, ngroups=3000, nrow=3000, mem=5,043,344
Length=10000, ngroups=10000, nrow=10000, mem=13,123,344

I've manually inserted commas into the memory figures to make them easier
to understand. Note that nesting every one of those 10,000 rows into a
tibble adds about 12 MB to the original. So that's very roughly about 1K
added per nested tibble, which seems a lot.

The code also contains some commented-out timings on saveRDS() . These
didn't show the same time blow-up that I experienced with my household
data, so I still need to replicate that reproducibly. It's equally
annoying, as it means users have to wait so long for data to be loaded.

Any thoughts would be welcome, including faults in my code above. For what
it's worth, here's my sessionInfo() :

R version 3.6.1 (2019-07-05)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 16299)

Matrix products: default

locale:
[1] LC_COLLATE=English_United Kingdom.1252
[2] LC_CTYPE=English_United Kingdom.1252
[3] LC_MONETARY=English_United Kingdom.1252
[4] LC_NUMERIC=C
[5] LC_TIME=English_United Kingdom.1252

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods
[8] base

other attached packages:
 [1] scales_1.0.0        htmlTable_1.13.1    ggrepel_0.8.1
 [4] glue_1.3.1          magrittr_1.5        igraph_1.2.4.1
 [7] yaml_2.2.0          haven_2.1.1         pryr_0.1.4
[10] readxl_1.3.1        fs_1.3.1            memo_1.0.1
[13] Biobase_2.44.0      BiocGenerics_0.30.0 lubridate_1.7.4
[16] DT_0.7              shinyjs_1.0         shinyWidgets_0.4.8
[19] shiny_1.3.2         assertthat_0.2.1    forcats_0.4.0
[22] stringr_1.4.0       dplyr_0.8.3         purrr_0.3.2
[25] readr_1.3.1         tidyr_0.8.3         tibble_2.1.3
[28] ggplot2_3.2.0       tidyverse_1.2.1     conflicted_1.0.4
[31] BiocManager_1.30.4

loaded via a namespace (and not attached):
 [1] nlme_3.1-140      usethis_1.5.1     devtools_2.1.0    httr_1.4.0
 [5] rprojroot_1.3-2   tools_3.6.1       backports_1.1.4   R6_2.4.0
 [9] lazyeval_0.2.2    colorspace_1.4-1  withr_2.1.2       tidyselect_0.2.5
[13] prettyunits_1.0.2 processx_3.4.0    curl_3.3          compiler_3.6.1
[17] cli_1.1.0         rvest_0.3.4       xml2_1.2.0        desc_1.2.0
[21] checkmate_1.9.4   callr_3.3.0       digest_0.6.20     pkgconfig_2.0.2
[25] htmltools_0.3.6   sessioninfo_1.1.1 htmlwidgets_1.3   rlang_0.4.0
[29] rstudioapi_0.10   generics_0.0.2    jsonlite_1.6      crosstalk_1.0.0
[33] Rcpp_1.0.1        munsell_0.5.0     stringi_1.4.3     pkgbuild_1.0.3
[37] grid_3.6.1        promises_1.0.1    crayon_1.3.4      lattice_0.20-38
[41] hms_0.5.0         zeallot_0.1.0     knitr_1.23        ps_1.3.0
[45] pillar_1.4.2      codetools_0.2-16  pkgload_1.0.2     remotes_2.1.0
[49] modelr_0.1.4      vctrs_0.2.0       httpuv_1.5.1      testthat_2.1.1
[53] cellranger_1.1.0  gtable_0.3.0      xfun_0.8          mime_0.7
[57] xtable_1.8-4      broom_0.5.2       later_0.8.0       memoise_1.1.0

-Joc-

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Fri Oct 18 02:13:14 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Fri, 18 Oct 2019 02:13:14 +0200
Subject: [R] R unable to locate base unix commands (tar, sh etc)
In-Reply-To: <AM0PR08MB4129337FCC515ADD864866ABB3930@AM0PR08MB4129.eurprd08.prod.outlook.com>
References: <1571140488874-0.post@n4.nabble.com>
 <AM0PR08MB4129337FCC515ADD864866ABB3930@AM0PR08MB4129.eurprd08.prod.outlook.com>
Message-ID: <6925D352-8171-4B73-AAD0-CE613B8DE1A9@gmail.com>

Semicolons in PATH on a Unix derivative like MacOS could well do that to you. It is not clear how they got there, but apparently not from your ~/.Environ file. However, multiple settings of the same PATH variable in .Environment is not something I'd think would work. Persumably the last setting wins, but I'm not sure of that. 

-pd

> On 15 Oct 2019, at 15:09 , gordon beattie <gordo2b at hotmail.co.uk> wrote:
> 
> Started having a problem installing packages where R can't find base unix commands. I've put an example below (other packages have identical "command not found" errors, sometimes with different commands e.g. sh) and my PATH/.Renviron(where the problem likely is). I'm on MacOS. Thanks in advance for any assistance!
> 
>> install.packages("hdf5r", configure.args="--with-hdf5=/usr/local/Cellar/hdf5/1.10.5_1/bin/h5cc")
> trying URL 'https://www.stats.bris.ac.uk/R/bin/macosx/el-capitan/contrib/3.6/hdf5r_1.3.0.tgz'
> Content type 'application/x-gzip' length 4332333 bytes (4.1 MB)
> ==================================================
> downloaded 4.1 MB
> 
> sh: tar: command not found
> Error: file ?/var/folders/ll/jmydhb6n7jqg5rv_c58jxkkh0000gn/T//RtmpnssBh2/downloaded_packages/hdf5r_1.3.0.tgz? is not a macOS binary package
> In addition: Warning messages:
> 1: In system(paste0("tar zxf \"", path.expand(what), "\" -C \"", path.expand(where),  :
>  error in running command
> 2: 'tar' returned non-zero exit code 127
> 
> PATH:
> 
>> Sys.getenv("PATH")
> [1] "/bin;/usr/bin;/usr/local/bin"
> 
> .Renviron (could anyone explain why "Sys.getenv" doesn't output the contents of Renviron, trying to understand how they link)
> 
> .RenvironR_LIBS=~/R/library
> PAGER=/usr/local/bin/less
> PATH=/Users/gordon.beattie/Downloads/R_packages/gliph-master/gliph/bin
> PATH=/usr/local/bin
> PATH=/usr/local/bin
> PATH=/usr/bin
> PATH=/bin
> PATH=/usr/sbin
> PATH=/sbin
> PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
> PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
> PATH=/usr/bin:/bin:/usr/sbin
> PATH=/sbin
> PATH=/usr/local/bin
> 
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From @@e||ck @end|ng |rom gm@||@com  Fri Oct 18 03:14:11 2019
From: @@e||ck @end|ng |rom gm@||@com (stephen sefick)
Date: Thu, 17 Oct 2019 21:14:11 -0400
Subject: [R] R unable to locate base unix commands (tar, sh etc)
In-Reply-To: <6925D352-8171-4B73-AAD0-CE613B8DE1A9@gmail.com>
References: <1571140488874-0.post@n4.nabble.com>
 <AM0PR08MB4129337FCC515ADD864866ABB3930@AM0PR08MB4129.eurprd08.prod.outlook.com>
 <6925D352-8171-4B73-AAD0-CE613B8DE1A9@gmail.com>
Message-ID: <CADKEMqj_wEC95Pnaar=jsaGXgs63JyKGtoPaP9hn78YZZ4U2yA@mail.gmail.com>

I work on a Mac now. I believe .profile gets sourced first and then
.bashrc. I set PATH in my .bashrc. I set a git token in .Renviron and a
blank .Rprofile because I use packrat quite often. I have no problem with
my environment at a shell or in Rstudio.

I would start by commenting where you set the PATH in the multiple files
until you find the order they are sourced. Or look in .profile and .bashrc
to find and replace the semi colons with colons?

I do not understand how a PATH variable would be set in .Rprofile.

I agree with pd about the semicolons.

What happens when you type tar at a command prompt?
FWIW,

Stephen

On Thu, Oct 17, 2019, 20:13 peter dalgaard <pdalgd at gmail.com> wrote:

> Semicolons in PATH on a Unix derivative like MacOS could well do that to
> you. It is not clear how they got there, but apparently not from your
> ~/.Environ file. However, multiple settings of the same PATH variable in
> .Environment is not something I'd think would work. Persumably the last
> setting wins, but I'm not sure of that.
>
> -pd
>
> > On 15 Oct 2019, at 15:09 , gordon beattie <gordo2b at hotmail.co.uk> wrote:
> >
> > Started having a problem installing packages where R can't find base
> unix commands. I've put an example below (other packages have identical
> "command not found" errors, sometimes with different commands e.g. sh) and
> my PATH/.Renviron(where the problem likely is). I'm on MacOS. Thanks in
> advance for any assistance!
> >
> >> install.packages("hdf5r",
> configure.args="--with-hdf5=/usr/local/Cellar/hdf5/1.10.5_1/bin/h5cc")
> > trying URL '
> https://www.stats.bris.ac.uk/R/bin/macosx/el-capitan/contrib/3.6/hdf5r_1.3.0.tgz
> '
> > Content type 'application/x-gzip' length 4332333 bytes (4.1 MB)
> > ==================================================
> > downloaded 4.1 MB
> >
> > sh: tar: command not found
> > Error: file
> ?/var/folders/ll/jmydhb6n7jqg5rv_c58jxkkh0000gn/T//RtmpnssBh2/downloaded_packages/hdf5r_1.3.0.tgz?
> is not a macOS binary package
> > In addition: Warning messages:
> > 1: In system(paste0("tar zxf \"", path.expand(what), "\" -C \"",
> path.expand(where),  :
> >  error in running command
> > 2: 'tar' returned non-zero exit code 127
> >
> > PATH:
> >
> >> Sys.getenv("PATH")
> > [1] "/bin;/usr/bin;/usr/local/bin"
> >
> > .Renviron (could anyone explain why "Sys.getenv" doesn't output the
> contents of Renviron, trying to understand how they link)
> >
> > .RenvironR_LIBS=~/R/library
> > PAGER=/usr/local/bin/less
> > PATH=/Users/gordon.beattie/Downloads/R_packages/gliph-master/gliph/bin
> > PATH=/usr/local/bin
> > PATH=/usr/local/bin
> > PATH=/usr/bin
> > PATH=/bin
> > PATH=/usr/sbin
> > PATH=/sbin
> > PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
> > PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
> > PATH=/usr/bin:/bin:/usr/sbin
> > PATH=/sbin
> > PATH=/usr/local/bin
> >
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> --
> Peter Dalgaard, Professor,
> Center for Statistics, Copenhagen Business School
> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
> Phone: (+45)38153501
> Office: A 4.23
> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From g@@@uu| @end|ng |rom gm@||@com  Fri Oct 18 03:38:05 2019
From: g@@@uu| @end|ng |rom gm@||@com (ani jaya)
Date: Fri, 18 Oct 2019 10:38:05 +0900
Subject: [R] List of data frame
Message-ID: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>

Dear R-Help,

I have a list of data frame that I import from excel file using read.xlsx
command.

sheets <- openxlsx::getSheetNames("rainfall.xlsx")
test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
startRow=8, cols=1:2))
names(test) <- sprintf("%i", 1986:2015)

And I got a data.frame with 365 rows and two columns contains date and
rainfall data.
There is a value in rainfall data that i want to change as NA (8888)

test[1]$`1986`
       Date   RR
1   01-01-1986    0
2   02-01-1986    7
3   03-01-1986   72
4   04-01-1986    4
5   05-01-1986   19
6   06-01-1986    4
7   07-01-1986   16
8   08-01-1986   21
9   09-01-1986   34
10  10-01-1986   72
11  11-01-1986   93
12  12-01-1986  178
13  13-01-1986   86
14  14-01-1986   11
15  15-01-1986    0
16  16-01-1986   31
17  17-01-1986   22
18  18-01-1986   18
19  19-01-1986    3
20  20-01-1986    0
21  21-01-1986   31
22  22-01-1986   46
23  23-01-1986    4
24  24-01-1986   40
25  25-01-1986   63
26  26-01-1986  125
27  27-01-1986   33
28  28-01-1986   44
29  29-01-1986    6
30  30-01-1986    0
31  31-01-1986    0
32  01-02-1986    2
33  02-02-1986   71
34  03-02-1986 8888
35  04-02-1986    0
36  05-02-1986    0
37  06-02-1986   56
38  07-02-1986   19
39  08-02-1986    3
40  09-02-1986    7
41  10-02-1986   24
42  11-02-1986   55
43  12-02-1986    0
44  13-02-1986    0

	[[alternative HTML version deleted]]


From g@@@uu| @end|ng |rom gm@||@com  Fri Oct 18 03:43:03 2019
From: g@@@uu| @end|ng |rom gm@||@com (ani jaya)
Date: Fri, 18 Oct 2019 10:43:03 +0900
Subject: [R] NA value in list of data frame
Message-ID: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>

 Dear R-Help,

I have a list of data frame that I import from excel file using read.xlsx
command.

sheets <- openxlsx::getSheetNames("rainfall.xlsx")
test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
startRow=8, cols=1:2))
names(test) <- sprintf("%i", 1986:2015)

And I got a data.frame with 365 rows and two columns contains date and
rainfall data.
There is a value in rainfall data that i want to change as NA (8888). So my
question is how to change those value in all the data frame?

test[1]$`1986`
       Date   RR
1   01-01-1986    0
2   02-01-1986    7
3   03-01-1986   72
4   04-01-1986    4
5   05-01-1986   19
6   06-01-1986    4
7   07-01-1986   16
8   08-01-1986   21
9   09-01-1986   34
10  10-01-1986   72
11  11-01-1986   93
12  12-01-1986  178
13  13-01-1986   86
14  14-01-1986   11
15  15-01-1986    0
16  16-01-1986   31
17  17-01-1986   22
18  18-01-1986   18
19  19-01-1986    3
20  20-01-1986    0
21  21-01-1986   31
22  22-01-1986   46
23  23-01-1986    4
24  24-01-1986   40
25  25-01-1986   63
26  26-01-1986  125
27  27-01-1986   33
28  28-01-1986   44
29  29-01-1986    6
30  30-01-1986    0
31  31-01-1986    0
32  01-02-1986    2
33  02-02-1986   71
34  03-02-1986 8888
35  04-02-1986    0
36  05-02-1986    0
37  06-02-1986   56
38  07-02-1986   19
39  08-02-1986    3
40  09-02-1986    7
41  10-02-1986   24
42  11-02-1986   55
43  12-02-1986    0
44  13-02-1986    0
.
.
.

Should I extract the data frame from the list one by one?

Thank you for your help!

Best,
Saat M.


(Sorry for the uncompleted email before).

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Fri Oct 18 03:47:25 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Thu, 17 Oct 2019 18:47:25 -0700
Subject: [R] List of data frame
In-Reply-To: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
References: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
Message-ID: <CAGxFJbSzABfLidRQsakE4Z4XP4EC0kOFALkBu7bKcBjohZNiBA@mail.gmail.com>

I'm a little unclear, but maybe ?is.na .

As in:

> x <- c(1:3,8888)
> x
[1]    1    2    3 8888
> is.na(x) <- x==8888 ## rhs is an "index vector" of logicals
> x
[1]  1  2  3 NA


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Thu, Oct 17, 2019 at 6:38 PM ani jaya <gaaauul at gmail.com> wrote:

> Dear R-Help,
>
> I have a list of data frame that I import from excel file using read.xlsx
> command.
>
> sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> startRow=8, cols=1:2))
> names(test) <- sprintf("%i", 1986:2015)
>
> And I got a data.frame with 365 rows and two columns contains date and
> rainfall data.
> There is a value in rainfall data that i want to change as NA (8888)
>
> test[1]$`1986`
>        Date   RR
> 1   01-01-1986    0
> 2   02-01-1986    7
> 3   03-01-1986   72
> 4   04-01-1986    4
> 5   05-01-1986   19
> 6   06-01-1986    4
> 7   07-01-1986   16
> 8   08-01-1986   21
> 9   09-01-1986   34
> 10  10-01-1986   72
> 11  11-01-1986   93
> 12  12-01-1986  178
> 13  13-01-1986   86
> 14  14-01-1986   11
> 15  15-01-1986    0
> 16  16-01-1986   31
> 17  17-01-1986   22
> 18  18-01-1986   18
> 19  19-01-1986    3
> 20  20-01-1986    0
> 21  21-01-1986   31
> 22  22-01-1986   46
> 23  23-01-1986    4
> 24  24-01-1986   40
> 25  25-01-1986   63
> 26  26-01-1986  125
> 27  27-01-1986   33
> 28  28-01-1986   44
> 29  29-01-1986    6
> 30  30-01-1986    0
> 31  31-01-1986    0
> 32  01-02-1986    2
> 33  02-02-1986   71
> 34  03-02-1986 8888
> 35  04-02-1986    0
> 36  05-02-1986    0
> 37  06-02-1986   56
> 38  07-02-1986   19
> 39  08-02-1986    3
> 40  09-02-1986    7
> 41  10-02-1986   24
> 42  11-02-1986   55
> 43  12-02-1986    0
> 44  13-02-1986    0
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From M@Thev@r@j@ @end|ng |rom m@@@ey@@c@nz  Fri Oct 18 03:58:05 2019
From: M@Thev@r@j@ @end|ng |rom m@@@ey@@c@nz (Thevaraja, Mayooran)
Date: Fri, 18 Oct 2019 01:58:05 +0000
Subject: [R] NA value in list of data frame
In-Reply-To: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>
References: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>
Message-ID: <SY3PR01MB09068658E2AEF9965ACB50D3C96C0@SY3PR01MB0906.ausprd01.prod.outlook.com>

Hello
      You can use the following function,
######################################################
replace_missings <- function(x, replacement) {
  is_missings <- is.na(x)
  x[is_missings] <- replacement
  message(sum(is_missings), " missings replaced by the given value ", replacement)
  x
}

A <- c(0,1,2,3,4,5,6,7,8,9,10)
B <- c(12,15,3,65,NA,12,NA,4,6,25,4)
  
df <- data.frame(A,B)

replace_missings(df, replacement = 0)
#################################################

Regards
Mayooran




-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of ani jaya
Sent: Friday, 18 October 2019 2:43 PM
To: r-help <r-help at r-project.org>
Subject: [R] NA value in list of data frame

 Dear R-Help,

I have a list of data frame that I import from excel file using read.xlsx command.

sheets <- openxlsx::getSheetNames("rainfall.xlsx")
test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i, startRow=8, cols=1:2))
names(test) <- sprintf("%i", 1986:2015)

And I got a data.frame with 365 rows and two columns contains date and rainfall data.
There is a value in rainfall data that i want to change as NA (8888). So my question is how to change those value in all the data frame?

test[1]$`1986`
       Date   RR
1   01-01-1986    0
2   02-01-1986    7
3   03-01-1986   72
4   04-01-1986    4
5   05-01-1986   19
6   06-01-1986    4
7   07-01-1986   16
8   08-01-1986   21
9   09-01-1986   34
10  10-01-1986   72
11  11-01-1986   93
12  12-01-1986  178
13  13-01-1986   86
14  14-01-1986   11
15  15-01-1986    0
16  16-01-1986   31
17  17-01-1986   22
18  18-01-1986   18
19  19-01-1986    3
20  20-01-1986    0
21  21-01-1986   31
22  22-01-1986   46
23  23-01-1986    4
24  24-01-1986   40
25  25-01-1986   63
26  26-01-1986  125
27  27-01-1986   33
28  28-01-1986   44
29  29-01-1986    6
30  30-01-1986    0
31  31-01-1986    0
32  01-02-1986    2
33  02-02-1986   71
34  03-02-1986 8888
35  04-02-1986    0
36  05-02-1986    0
37  06-02-1986   56
38  07-02-1986   19
39  08-02-1986    3
40  09-02-1986    7
41  10-02-1986   24
42  11-02-1986   55
43  12-02-1986    0
44  13-02-1986    0
.
.
.

Should I extract the data frame from the list one by one?

Thank you for your help!

Best,
Saat M.


(Sorry for the uncompleted email before).

	[[alternative HTML version deleted]]

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From M@Thev@r@j@ @end|ng |rom m@@@ey@@c@nz  Fri Oct 18 04:01:07 2019
From: M@Thev@r@j@ @end|ng |rom m@@@ey@@c@nz (Thevaraja, Mayooran)
Date: Fri, 18 Oct 2019 02:01:07 +0000
Subject: [R] replace_missings
Message-ID: <SY3PR01MB090671697B48C3152905E1B0C96C0@SY3PR01MB0906.ausprd01.prod.outlook.com>

Hello

      You can use the following function,



######################################################

replace_missings <- function(x, replacement) {

  is_missings <- is.na(x)

  x[is_missings] <- replacement

  message(sum(is_missings), " missings replaced by the given value ", replacement)

  x

}



A <- c(0,1,2,3,4,5,6,7,8,9,10)

B <- c(12,15,3,65,NA,12,NA,4,6,25,4)



df <- data.frame(A,B)



replace_missings(df, replacement = 0)

#################################################



Regards

Mayooran









-----Original Message-----

From: R-help <r-help-bounces at r-project.org<mailto:r-help-bounces at r-project.org>> On Behalf Of ani jaya

Sent: Friday, 18 October 2019 2:43 PM

To: r-help <r-help at r-project.org<mailto:r-help at r-project.org>>

Subject: [R] NA value in list of data frame



Dear R-Help,



I have a list of data frame that I import from excel file using read.xlsx command.



sheets <- openxlsx::getSheetNames("rainfall.xlsx")

test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i, startRow=8, cols=1:2))

names(test) <- sprintf("%i", 1986:2015)



And I got a data.frame with 365 rows and two columns contains date and rainfall data.

There is a value in rainfall data that i want to change as NA (8888). So my question is how to change those value in all the data frame?



test[1]$`1986`

       Date   RR

1   01-01-1986    0

2   02-01-1986    7

3   03-01-1986   72

4   04-01-1986    4

5   05-01-1986   19

6   06-01-1986    4

7   07-01-1986   16

8   08-01-1986   21

9   09-01-1986   34

10  10-01-1986   72

11  11-01-1986   93

12  12-01-1986  178

13  13-01-1986   86

14  14-01-1986   11

15  15-01-1986    0

16  16-01-1986   31

17  17-01-1986   22

18  18-01-1986   18

19  19-01-1986    3

20  20-01-1986    0

21  21-01-1986   31

22  22-01-1986   46

23  23-01-1986    4

24  24-01-1986   40

25  25-01-1986   63

26  26-01-1986  125

27  27-01-1986   33

28  28-01-1986   44

29  29-01-1986    6

30  30-01-1986    0

31  31-01-1986    0

32  01-02-1986    2

33  02-02-1986   71

34  03-02-1986 8888

35  04-02-1986    0

36  05-02-1986    0

37  06-02-1986   56

38  07-02-1986   19

39  08-02-1986    3

40  09-02-1986    7

41  10-02-1986   24

42  11-02-1986   55

43  12-02-1986    0

44  13-02-1986    0

.

.

.



Should I extract the data frame from the list one by one?



Thank you for your help!



Best,

Saat M.





(Sorry for the uncompleted email before).



                [[alternative HTML version deleted]]



______________________________________________

R-help at r-project.org<mailto:R-help at r-project.org> mailing list -- To UNSUBSCRIBE and more, see https://stat.ethz.ch/mailman/listinfo/r-help

PLEASE do read the posting guide http://www.R-project.org/posting-guide.html

and provide commented, minimal, self-contained, reproducible code.


	[[alternative HTML version deleted]]


From g@@@uu| @end|ng |rom gm@||@com  Fri Oct 18 04:35:43 2019
From: g@@@uu| @end|ng |rom gm@||@com (ani jaya)
Date: Fri, 18 Oct 2019 11:35:43 +0900
Subject: [R] List of data frame
In-Reply-To: <CAGxFJbSzABfLidRQsakE4Z4XP4EC0kOFALkBu7bKcBjohZNiBA@mail.gmail.com>
References: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
 <CAGxFJbSzABfLidRQsakE4Z4XP4EC0kOFALkBu7bKcBjohZNiBA@mail.gmail.com>
Message-ID: <CAHXS41whLLFw9JpWdyz7HE9OwvsuygJqSzj8g9XW7NPqdF6hRA@mail.gmail.com>

Thank you Mr. Bert, but my data frame is in the list,
here 'test' list of data frame have 30 data frames (elements), names '1986'
~ '2015', and each data frame contain two variables, date and R.

>a2<-rbind(test$`1987`)
>is.na(a2$RR)<- a2$RR==8888

Above is good enough but only for '1987'. Is it possible to do that in
looping for the rest of dataframe?

Best,
Saat M.

On Fri, Oct 18, 2019 at 10:47 AM Bert Gunter <bgunter.4567 at gmail.com> wrote:

> I'm a little unclear, but maybe ?is.na .
>
> As in:
>
> > x <- c(1:3,8888)
> > x
> [1]    1    2    3 8888
> > is.na(x) <- x==8888 ## rhs is an "index vector" of logicals
> > x
> [1]  1  2  3 NA
>
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Thu, Oct 17, 2019 at 6:38 PM ani jaya <gaaauul at gmail.com> wrote:
>
>> Dear R-Help,
>>
>> I have a list of data frame that I import from excel file using read.xlsx
>> command.
>>
>> sheets <- openxlsx::getSheetNames("rainfall.xlsx")
>> test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
>> startRow=8, cols=1:2))
>> names(test) <- sprintf("%i", 1986:2015)
>>
>> And I got a data.frame with 365 rows and two columns contains date and
>> rainfall data.
>> There is a value in rainfall data that i want to change as NA (8888)
>>
>> test[1]$`1986`
>>        Date   RR
>> 1   01-01-1986    0
>> 2   02-01-1986    7
>> 3   03-01-1986   72
>> 4   04-01-1986    4
>> 5   05-01-1986   19
>> 6   06-01-1986    4
>> 7   07-01-1986   16
>> 8   08-01-1986   21
>> 9   09-01-1986   34
>> 10  10-01-1986   72
>> 11  11-01-1986   93
>> 12  12-01-1986  178
>> 13  13-01-1986   86
>> 14  14-01-1986   11
>> 15  15-01-1986    0
>> 16  16-01-1986   31
>> 17  17-01-1986   22
>> 18  18-01-1986   18
>> 19  19-01-1986    3
>> 20  20-01-1986    0
>> 21  21-01-1986   31
>> 22  22-01-1986   46
>> 23  23-01-1986    4
>> 24  24-01-1986   40
>> 25  25-01-1986   63
>> 26  26-01-1986  125
>> 27  27-01-1986   33
>> 28  28-01-1986   44
>> 29  29-01-1986    6
>> 30  30-01-1986    0
>> 31  31-01-1986    0
>> 32  01-02-1986    2
>> 33  02-02-1986   71
>> 34  03-02-1986 8888
>> 35  04-02-1986    0
>> 36  05-02-1986    0
>> 37  06-02-1986   56
>> 38  07-02-1986   19
>> 39  08-02-1986    3
>> 40  09-02-1986    7
>> 41  10-02-1986   24
>> 42  11-02-1986   55
>> 43  12-02-1986    0
>> 44  13-02-1986    0
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

	[[alternative HTML version deleted]]


From r@turner @end|ng |rom @uck|@nd@@c@nz  Fri Oct 18 04:38:51 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Fri, 18 Oct 2019 15:38:51 +1300
Subject: [R] [FORGED] Re:  NA value in list of data frame
In-Reply-To: <SY3PR01MB09068658E2AEF9965ACB50D3C96C0@SY3PR01MB0906.ausprd01.prod.outlook.com>
References: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>
 <SY3PR01MB09068658E2AEF9965ACB50D3C96C0@SY3PR01MB0906.ausprd01.prod.outlook.com>
Message-ID: <04830641-e6cc-e3b0-d13e-e1239f1e6e70@auckland.ac.nz>


On 18/10/19 2:58 PM, Thevaraja, Mayooran wrote:

> Hello
>        You can use the following function,
> ######################################################
> replace_missings <- function(x, replacement) {
>    is_missings <- is.na(x)
>    x[is_missings] <- replacement
>    message(sum(is_missings), " missings replaced by the given value ", replacement)
>    x
> }
> 
> A <- c(0,1,2,3,4,5,6,7,8,9,10)
> B <- c(12,15,3,65,NA,12,NA,4,6,25,4)
>    
> df <- data.frame(A,B)
> 
> replace_missings(df, replacement = 0)
> #################################################

The OP wanted to solve the reverse problem.  He wanted to replace 8888 
by NA, not NA by (e.g.) 8888.

cheers,

Rolf


-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From r@turner @end|ng |rom @uck|@nd@@c@nz  Fri Oct 18 04:41:58 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Fri, 18 Oct 2019 15:41:58 +1300
Subject: [R] [FORGED]  NA value in list of data frame
In-Reply-To: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>
References: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>
Message-ID: <cb7c1913-5d4c-f8dd-18de-f9cb6827aa39@auckland.ac.nz>


On 18/10/19 2:43 PM, ani jaya wrote:

>   Dear R-Help,
> 
> I have a list of data frame that I import from excel file using read.xlsx
> command.
> 
> sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> startRow=8, cols=1:2))
> names(test) <- sprintf("%i", 1986:2015)
> 
> And I got a data.frame with 365 rows and two columns contains date and
> rainfall data.
> There is a value in rainfall data that i want to change as NA (8888). So my
> question is how to change those value in all the data frame?
> 
> test[1]$`1986`
>         Date   RR
> 1   01-01-1986    0
> 2   02-01-1986    7
> 3   03-01-1986   72
> 4   04-01-1986    4
> 5   05-01-1986   19
> 6   06-01-1986    4
> 7   07-01-1986   16
> 8   08-01-1986   21
> 9   09-01-1986   34
> 10  10-01-1986   72
> 11  11-01-1986   93
> 12  12-01-1986  178
> 13  13-01-1986   86
> 14  14-01-1986   11
> 15  15-01-1986    0
> 16  16-01-1986   31
> 17  17-01-1986   22
> 18  18-01-1986   18
> 19  19-01-1986    3
> 20  20-01-1986    0
> 21  21-01-1986   31
> 22  22-01-1986   46
> 23  23-01-1986    4
> 24  24-01-1986   40
> 25  25-01-1986   63
> 26  26-01-1986  125
> 27  27-01-1986   33
> 28  28-01-1986   44
> 29  29-01-1986    6
> 30  30-01-1986    0
> 31  31-01-1986    0
> 32  01-02-1986    2
> 33  02-02-1986   71
> 34  03-02-1986 8888
> 35  04-02-1986    0
> 36  05-02-1986    0
> 37  06-02-1986   56
> 38  07-02-1986   19
> 39  08-02-1986    3
> 40  09-02-1986    7
> 41  10-02-1986   24
> 42  11-02-1986   55
> 43  12-02-1986    0
> 44  13-02-1986    0
> .
> .
> .
> 
> Should I extract the data frame from the list one by one?

Try (something like):

revisedTest <- lapply(test,function(x){x$RR[x$RR==8888] <- NA; x})

Or, using Bert Gunter's slick is.na() trick:

revisedTest <- lapply(test,function(x){is.na(x$RR) <- x$RR==8888; x})

(Note:  not tested.)

cheers,

Rolf Turner

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From drj|m|emon @end|ng |rom gm@||@com  Fri Oct 18 05:01:44 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Fri, 18 Oct 2019 14:01:44 +1100
Subject: [R] List of data frame
In-Reply-To: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
References: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
Message-ID: <CA+8X3fVvHWkopGbBCuAHLqSJJ7DPrq+9PUMxU8HfVpEMzjEy2w@mail.gmail.com>

Hi ani,
You say you want to replace 8888 with NA, so:

# it will be easier if you don't use numbers for the names of the data frames
names(test) <- paste0("Y",1986:2015)
makeNA(x)<-function(x,varname,value) {
 x[,varname][x[,varname]<-value]<-NA
 return(x)
}
lapply(test,makeNA,list("RR",8888))

Warning - untested

Jim

On Fri, Oct 18, 2019 at 12:38 PM ani jaya <gaaauul at gmail.com> wrote:
>
> Dear R-Help,
>
> I have a list of data frame that I import from excel file using read.xlsx
> command.
>
> sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> startRow=8, cols=1:2))
> names(test) <- sprintf("%i", 1986:2015)
>
> And I got a data.frame with 365 rows and two columns contains date and
> rainfall data.
> There is a value in rainfall data that i want to change as NA (8888)
>
> test[1]$`1986`
>        Date   RR
> 1   01-01-1986    0
> 2   02-01-1986    7
> 3   03-01-1986   72
> 4   04-01-1986    4
> 5   05-01-1986   19
> 6   06-01-1986    4
> 7   07-01-1986   16
> 8   08-01-1986   21
> 9   09-01-1986   34
> 10  10-01-1986   72
> 11  11-01-1986   93
> 12  12-01-1986  178
> 13  13-01-1986   86
> 14  14-01-1986   11
> 15  15-01-1986    0
> 16  16-01-1986   31
> 17  17-01-1986   22
> 18  18-01-1986   18
> 19  19-01-1986    3
> 20  20-01-1986    0
> 21  21-01-1986   31
> 22  22-01-1986   46
> 23  23-01-1986    4
> 24  24-01-1986   40
> 25  25-01-1986   63
> 26  26-01-1986  125
> 27  27-01-1986   33
> 28  28-01-1986   44
> 29  29-01-1986    6
> 30  30-01-1986    0
> 31  31-01-1986    0
> 32  01-02-1986    2
> 33  02-02-1986   71
> 34  03-02-1986 8888
> 35  04-02-1986    0
> 36  05-02-1986    0
> 37  06-02-1986   56
> 38  07-02-1986   19
> 39  08-02-1986    3
> 40  09-02-1986    7
> 41  10-02-1986   24
> 42  11-02-1986   55
> 43  12-02-1986    0
> 44  13-02-1986    0
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From drj|m|emon @end|ng |rom gm@||@com  Fri Oct 18 05:04:49 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Fri, 18 Oct 2019 14:04:49 +1100
Subject: [R] List of data frame
In-Reply-To: <CA+8X3fVvHWkopGbBCuAHLqSJJ7DPrq+9PUMxU8HfVpEMzjEy2w@mail.gmail.com>
References: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
 <CA+8X3fVvHWkopGbBCuAHLqSJJ7DPrq+9PUMxU8HfVpEMzjEy2w@mail.gmail.com>
Message-ID: <CA+8X3fWMPoFHwOYGk9d4Ko3ANfQDYJHSUv=ap7Q3znnUmkiMkA@mail.gmail.com>

Hi ani,
Sorry, a typo in the function - should be:

makeNA(x)<-function(x,varname,value) {
 x[,varname][x[,varname]==value]<-NA
 return(x)
}

Jim

On Fri, Oct 18, 2019 at 2:01 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>
> Hi ani,
> You say you want to replace 8888 with NA, so:
>
> # it will be easier if you don't use numbers for the names of the data frames
> names(test) <- paste0("Y",1986:2015)
> makeNA(x)<-function(x,varname,value) {
>  x[,varname][x[,varname]<-value]<-NA
>  return(x)
> }
> lapply(test,makeNA,list("RR",8888))
>
> Warning - untested
>
> Jim
>
> On Fri, Oct 18, 2019 at 12:38 PM ani jaya <gaaauul at gmail.com> wrote:
> >
> > Dear R-Help,
> >
> > I have a list of data frame that I import from excel file using read.xlsx
> > command.
> >
> > sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> > test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> > startRow=8, cols=1:2))
> > names(test) <- sprintf("%i", 1986:2015)
> >
> > And I got a data.frame with 365 rows and two columns contains date and
> > rainfall data.
> > There is a value in rainfall data that i want to change as NA (8888)
> >
> > test[1]$`1986`
> >        Date   RR
> > 1   01-01-1986    0
> > 2   02-01-1986    7
> > 3   03-01-1986   72
> > 4   04-01-1986    4
> > 5   05-01-1986   19
> > 6   06-01-1986    4
> > 7   07-01-1986   16
> > 8   08-01-1986   21
> > 9   09-01-1986   34
> > 10  10-01-1986   72
> > 11  11-01-1986   93
> > 12  12-01-1986  178
> > 13  13-01-1986   86
> > 14  14-01-1986   11
> > 15  15-01-1986    0
> > 16  16-01-1986   31
> > 17  17-01-1986   22
> > 18  18-01-1986   18
> > 19  19-01-1986    3
> > 20  20-01-1986    0
> > 21  21-01-1986   31
> > 22  22-01-1986   46
> > 23  23-01-1986    4
> > 24  24-01-1986   40
> > 25  25-01-1986   63
> > 26  26-01-1986  125
> > 27  27-01-1986   33
> > 28  28-01-1986   44
> > 29  29-01-1986    6
> > 30  30-01-1986    0
> > 31  31-01-1986    0
> > 32  01-02-1986    2
> > 33  02-02-1986   71
> > 34  03-02-1986 8888
> > 35  04-02-1986    0
> > 36  05-02-1986    0
> > 37  06-02-1986   56
> > 38  07-02-1986   19
> > 39  08-02-1986    3
> > 40  09-02-1986    7
> > 41  10-02-1986   24
> > 42  11-02-1986   55
> > 43  12-02-1986    0
> > 44  13-02-1986    0
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Fri Oct 18 05:05:11 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Thu, 17 Oct 2019 20:05:11 -0700
Subject: [R] R unable to locate base unix commands (tar, sh etc)
In-Reply-To: <CADKEMqj_wEC95Pnaar=jsaGXgs63JyKGtoPaP9hn78YZZ4U2yA@mail.gmail.com>
References: <1571140488874-0.post@n4.nabble.com>
 <AM0PR08MB4129337FCC515ADD864866ABB3930@AM0PR08MB4129.eurprd08.prod.outlook.com>
 <6925D352-8171-4B73-AAD0-CE613B8DE1A9@gmail.com>
 <CADKEMqj_wEC95Pnaar=jsaGXgs63JyKGtoPaP9hn78YZZ4U2yA@mail.gmail.com>
Message-ID: <22C155DC-71BD-41AC-9D6C-0D6E16C05251@dcn.davis.ca.us>

To be clear for the OP... PATH variables on a POSIX platform are separated using the ':' character... on Windows a ';' character is used. This is a user error... your environment variables are messed up... possibly independent of R.

On October 17, 2019 6:14:11 PM PDT, stephen sefick <ssefick at gmail.com> wrote:
>I work on a Mac now. I believe .profile gets sourced first and then
>.bashrc. I set PATH in my .bashrc. I set a git token in .Renviron and a
>blank .Rprofile because I use packrat quite often. I have no problem
>with
>my environment at a shell or in Rstudio.
>
>I would start by commenting where you set the PATH in the multiple
>files
>until you find the order they are sourced. Or look in .profile and
>.bashrc
>to find and replace the semi colons with colons?
>
>I do not understand how a PATH variable would be set in .Rprofile.
>
>I agree with pd about the semicolons.
>
>What happens when you type tar at a command prompt?
>FWIW,
>
>Stephen
>
>On Thu, Oct 17, 2019, 20:13 peter dalgaard <pdalgd at gmail.com> wrote:
>
>> Semicolons in PATH on a Unix derivative like MacOS could well do that
>to
>> you. It is not clear how they got there, but apparently not from your
>> ~/.Environ file. However, multiple settings of the same PATH variable
>in
>> .Environment is not something I'd think would work. Persumably the
>last
>> setting wins, but I'm not sure of that.
>>
>> -pd
>>
>> > On 15 Oct 2019, at 15:09 , gordon beattie <gordo2b at hotmail.co.uk>
>wrote:
>> >
>> > Started having a problem installing packages where R can't find
>base
>> unix commands. I've put an example below (other packages have
>identical
>> "command not found" errors, sometimes with different commands e.g.
>sh) and
>> my PATH/.Renviron(where the problem likely is). I'm on MacOS. Thanks
>in
>> advance for any assistance!
>> >
>> >> install.packages("hdf5r",
>>
>configure.args="--with-hdf5=/usr/local/Cellar/hdf5/1.10.5_1/bin/h5cc")
>> > trying URL '
>>
>https://www.stats.bris.ac.uk/R/bin/macosx/el-capitan/contrib/3.6/hdf5r_1.3.0.tgz
>> '
>> > Content type 'application/x-gzip' length 4332333 bytes (4.1 MB)
>> > ==================================================
>> > downloaded 4.1 MB
>> >
>> > sh: tar: command not found
>> > Error: file
>>
>?/var/folders/ll/jmydhb6n7jqg5rv_c58jxkkh0000gn/T//RtmpnssBh2/downloaded_packages/hdf5r_1.3.0.tgz?
>> is not a macOS binary package
>> > In addition: Warning messages:
>> > 1: In system(paste0("tar zxf \"", path.expand(what), "\" -C \"",
>> path.expand(where),  :
>> >  error in running command
>> > 2: 'tar' returned non-zero exit code 127
>> >
>> > PATH:
>> >
>> >> Sys.getenv("PATH")
>> > [1] "/bin;/usr/bin;/usr/local/bin"
>> >
>> > .Renviron (could anyone explain why "Sys.getenv" doesn't output the
>> contents of Renviron, trying to understand how they link)
>> >
>> > .RenvironR_LIBS=~/R/library
>> > PAGER=/usr/local/bin/less
>> >
>PATH=/Users/gordon.beattie/Downloads/R_packages/gliph-master/gliph/bin
>> > PATH=/usr/local/bin
>> > PATH=/usr/local/bin
>> > PATH=/usr/bin
>> > PATH=/bin
>> > PATH=/usr/sbin
>> > PATH=/sbin
>> > PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
>> > PATH=/Users/gordon.beattie/.virtualenvs/r-reticulate/bin
>> > PATH=/usr/bin:/bin:/usr/sbin
>> > PATH=/sbin
>> > PATH=/usr/local/bin
>> >
>> >
>> >       [[alternative HTML version deleted]]
>> >
>> > ______________________________________________
>> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> > https://stat.ethz.ch/mailman/listinfo/r-help
>> > PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> > and provide commented, minimal, self-contained, reproducible code.
>>
>> --
>> Peter Dalgaard, Professor,
>> Center for Statistics, Copenhagen Business School
>> Solbjerg Plads 3, 2000 Frederiksberg, Denmark
>> Phone: (+45)38153501
>> Office: A 4.23
>> Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From g@@@uu| @end|ng |rom gm@||@com  Fri Oct 18 09:22:17 2019
From: g@@@uu| @end|ng |rom gm@||@com (ani jaya)
Date: Fri, 18 Oct 2019 16:22:17 +0900
Subject: [R] [FORGED]  NA value in list of data frame
In-Reply-To: <cb7c1913-5d4c-f8dd-18de-f9cb6827aa39@auckland.ac.nz>
References: <CAHXS41yDFU2J9vvQ5w5QQ0Dy4SRfsMLuuiFun_ndKEiLPUnXvA@mail.gmail.com>
 <cb7c1913-5d4c-f8dd-18de-f9cb6827aa39@auckland.ac.nz>
Message-ID: <CAHXS41z0cWSPn1w6yXwDU5vC48i=LLpDJKvg0znn8ZbWpwcELw@mail.gmail.com>

Thank you very much everyone. All fine now!!

On Fri, Oct 18, 2019 at 11:42 AM Rolf Turner <r.turner at auckland.ac.nz>
wrote:

>
> On 18/10/19 2:43 PM, ani jaya wrote:
>
> >   Dear R-Help,
> >
> > I have a list of data frame that I import from excel file using read.xlsx
> > command.
> >
> > sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> > test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> > startRow=8, cols=1:2))
> > names(test) <- sprintf("%i", 1986:2015)
> >
> > And I got a data.frame with 365 rows and two columns contains date and
> > rainfall data.
> > There is a value in rainfall data that i want to change as NA (8888). So
> my
> > question is how to change those value in all the data frame?
> >
> > test[1]$`1986`
> >         Date   RR
> > 1   01-01-1986    0
> > 2   02-01-1986    7
> > 3   03-01-1986   72
> > 4   04-01-1986    4
> > 5   05-01-1986   19
> > 6   06-01-1986    4
> > 7   07-01-1986   16
> > 8   08-01-1986   21
> > 9   09-01-1986   34
> > 10  10-01-1986   72
> > 11  11-01-1986   93
> > 12  12-01-1986  178
> > 13  13-01-1986   86
> > 14  14-01-1986   11
> > 15  15-01-1986    0
> > 16  16-01-1986   31
> > 17  17-01-1986   22
> > 18  18-01-1986   18
> > 19  19-01-1986    3
> > 20  20-01-1986    0
> > 21  21-01-1986   31
> > 22  22-01-1986   46
> > 23  23-01-1986    4
> > 24  24-01-1986   40
> > 25  25-01-1986   63
> > 26  26-01-1986  125
> > 27  27-01-1986   33
> > 28  28-01-1986   44
> > 29  29-01-1986    6
> > 30  30-01-1986    0
> > 31  31-01-1986    0
> > 32  01-02-1986    2
> > 33  02-02-1986   71
> > 34  03-02-1986 8888
> > 35  04-02-1986    0
> > 36  05-02-1986    0
> > 37  06-02-1986   56
> > 38  07-02-1986   19
> > 39  08-02-1986    3
> > 40  09-02-1986    7
> > 41  10-02-1986   24
> > 42  11-02-1986   55
> > 43  12-02-1986    0
> > 44  13-02-1986    0
> > .
> > .
> > .
> >
> > Should I extract the data frame from the list one by one?
>
> Try (something like):
>
> revisedTest <- lapply(test,function(x){x$RR[x$RR==8888] <- NA; x})
>
> Or, using Bert Gunter's slick is.na() trick:
>
> revisedTest <- lapply(test,function(x){is.na(x$RR) <- x$RR==8888; x})
>
> (Note:  not tested.)
>
> cheers,
>
> Rolf Turner
>
> --
> Honorary Research Fellow
> Department of Statistics
> University of Auckland
> Phone: +64-9-373-7599 ext. 88276
>

	[[alternative HTML version deleted]]


From mehd|d@dkh@h91 @end|ng |rom gm@||@com  Fri Oct 18 10:42:55 2019
From: mehd|d@dkh@h91 @end|ng |rom gm@||@com (Mehdi Dadkhah)
Date: Fri, 18 Oct 2019 12:12:55 +0330
Subject: [R] Question about geometric mean
Message-ID: <CAGN=ytO_WNwpKw=HasFGvOmzF1sL4syCTznefTWV5dxnMykkzQ@mail.gmail.com>

Hi,

I hope you are doing well.

I am using Interpretive structural modeling (ISM) and need to build a
?reachability matrix? to use it as the input for ?ISM? package. In ISM
method, the opinion of some experts should be collected. For example,
attached image includes matrices which show opinions of four experts about
relationship of A1, A2, and A3 together. To integrate these matrices
together, I should use The geometric mean of experts? opinions. In the
Yeh?s paper wrote that:

*?The geometric mean of experts? opinions on the relationship between a
pair of criteria (sub-criteria) was **calculated. Set the threshold value
0.50 which represents that more than 50% of the experts determine the
interrelationship. If the value of the element is less than 0.50, the value
is counted as 0?.*

Ref: http://dx.doi.org/10.3846/20294913.2015.1071293



My question is: How should I calculate geometric mean of experts? opinions
in example attached matrices? In other words, I do not know how should I
calculate geometric mean. I read some papers, but could not clearly
understand.

Many thanks!

With best regards,



-- 
*Mehdi Dadkhah*
PhD candidate & Research assistant
Department of Management, Faculty of Economics and Administrative Sciences,
Ferdowsi University of Mashhad, Mashhad, Iran
*Email Addresses:*
mehdidadkhah91 at gmail.com
Mehdidadkhah at mail.um.ac.ir

-------------- next part --------------
A non-text attachment was scrubbed...
Name: Annotation 2019-10-18 121042.png
Type: image/png
Size: 5018 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20191018/34c773e1/attachment.png>

From m@ech|er @end|ng |rom @t@t@m@th@ethz@ch  Fri Oct 18 14:51:03 2019
From: m@ech|er @end|ng |rom @t@t@m@th@ethz@ch (Martin Maechler)
Date: Fri, 18 Oct 2019 14:51:03 +0200
Subject: [R] "chi-square" | "chi-squared" | "chi squared" | "chi square" ?
Message-ID: <23977.46391.123399.411843@stat.math.ethz.ch>

As it's Friday ..

and I also really want to clean up help files and similar R documents,
both in R's own sources and in my new 'DPQ' CRAN package :

As a trained mathematician, I'm uneasy if a thing has
several easily confusable names, .. but as somewhat
humanistically educated person, I know that natural languages,
English in this case, are much more flexible than computer
languages or math... 

Anyway, back to the question(s) .. which I had asked myself a
couple of months ago, and already remained slightly undecided:

The 0-th (meta-)question of course is

  0. Is it worth using only one written form for the
     ?? - distribution, e.g. "everywhere" in R?

The answer is not obvious, as already the first few words of the
(English) Wikipedia clearly convey:

The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
and the main title therefore also
    "Chi-squared distribution"

Then it reads 

> This article is about the mathematics of the chi-squared
> distribution. For its uses in statistics, see chi-squared
> test. For the music [...]

> In probability theory and statistics, the chi-square
> distribution (also chi-squared or ?2-distribution) with k
> degrees of freedom is the distribution of a sum of the squares
> of k independent standard normal random variables.

> The chi-square distribution is a special case of the gamma
> distribution and is one of the most widely used probability
> distributions in inferential statistics, notably in hypothesis
> testing [........]
> [........]

So, in title and 1st paragraph its "chi-squared", but then
everywhere(?) the text used "chi-square".

Undoubtedly, Wilson & Hilferty (1931) has been an important
paper and they use "Chi-square" in the title;
also  Johnson, Kotz & Balakrishnan (1995)
see R's help page ?pchisq use  "Chi-square" in the title of
chapter 18 and then, diplomatically for chapter 29,
 "Noncentral ??-Distributions" as title.

So it seems, that historically and using prestigious sources,
"chi-square" to dominate (notably if we do not count "??" as an
alternative).

Things look a bit different when I study R's sources; on one
hand, I find all 4 forms (s.Subject); then in the "R source
history", I see

  $ svn log -c11342
  ------------------------------------------------------------------------
  r11342 | <....> | 2000-11-14 ...

  Use `chi-squared'.
  ------------------------------------------------------------------------

which changed 16 (if I counted correctly) cases of 'chi-square' to 'chi-squared'.

I have not found any R-core internal (or public) reasoning about
that change, but had kept it in mind and often worked along that "goal".

As a consequence, "statistically" speaking, much of R's own use has been
standardized to use "chi-squared"; but as I mentioned, I still
find all  4  variants even in "R base" package help files
(which of course I now could quite quickly change  (using Emacs M-x grep, plus a script);
but

... "as it is Friday" ... I'm interested to hear what others
think, notably if you are native English (or "American" ;-)
speaking and/or have some extra good knowledge on such
matters...

Martin Maechler
ETH Zurich


From toth@dene@ @end|ng |rom kogentum@hu  Fri Oct 18 15:19:15 2019
From: toth@dene@ @end|ng |rom kogentum@hu (=?UTF-8?B?RMOpbmVzIFTDs3Ro?=)
Date: Fri, 18 Oct 2019 15:19:15 +0200
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi square" ?
In-Reply-To: <23977.46391.123399.411843@stat.math.ethz.ch>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
Message-ID: <2dc9a216-2ede-ef00-86e1-ebde26d8bd7c@kogentum.hu>

Dear Martin,

Others struggle with this inconsistency as well; I found this discussion 
useful: 
https://math.stackexchange.com/questions/1098138/chi-square-or-chi-squared

Denes


On 10/18/19 2:51 PM, Martin Maechler wrote:
> As it's Friday ..
> 
> and I also really want to clean up help files and similar R documents,
> both in R's own sources and in my new 'DPQ' CRAN package :
> 
> As a trained mathematician, I'm uneasy if a thing has
> several easily confusable names, .. but as somewhat
> humanistically educated person, I know that natural languages,
> English in this case, are much more flexible than computer
> languages or math...
> 
> Anyway, back to the question(s) .. which I had asked myself a
> couple of months ago, and already remained slightly undecided:
> 
> The 0-th (meta-)question of course is
> 
>    0. Is it worth using only one written form for the
>       ?? - distribution, e.g. "everywhere" in R?
> 
> The answer is not obvious, as already the first few words of the
> (English) Wikipedia clearly convey:
> 
> The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
> and the main title therefore also
>      "Chi-squared distribution"
> 
> Then it reads
> 
>> This article is about the mathematics of the chi-squared
>> distribution. For its uses in statistics, see chi-squared
>> test. For the music [...]
> 
>> In probability theory and statistics, the chi-square
>> distribution (also chi-squared or ?2-distribution) with k
>> degrees of freedom is the distribution of a sum of the squares
>> of k independent standard normal random variables.
> 
>> The chi-square distribution is a special case of the gamma
>> distribution and is one of the most widely used probability
>> distributions in inferential statistics, notably in hypothesis
>> testing [........]
>> [........]
> 
> So, in title and 1st paragraph its "chi-squared", but then
> everywhere(?) the text used "chi-square".
> 
> Undoubtedly, Wilson & Hilferty (1931) has been an important
> paper and they use "Chi-square" in the title;
> also  Johnson, Kotz & Balakrishnan (1995)
> see R's help page ?pchisq use  "Chi-square" in the title of
> chapter 18 and then, diplomatically for chapter 29,
>   "Noncentral ??-Distributions" as title.
> 
> So it seems, that historically and using prestigious sources,
> "chi-square" to dominate (notably if we do not count "??" as an
> alternative).
> 
> Things look a bit different when I study R's sources; on one
> hand, I find all 4 forms (s.Subject); then in the "R source
> history", I see
> 
>    $ svn log -c11342
>    ------------------------------------------------------------------------
>    r11342 | <....> | 2000-11-14 ...
> 
>    Use `chi-squared'.
>    ------------------------------------------------------------------------
> 
> which changed 16 (if I counted correctly) cases of 'chi-square' to 'chi-squared'.
> 
> I have not found any R-core internal (or public) reasoning about
> that change, but had kept it in mind and often worked along that "goal".
> 
> As a consequence, "statistically" speaking, much of R's own use has been
> standardized to use "chi-squared"; but as I mentioned, I still
> find all  4  variants even in "R base" package help files
> (which of course I now could quite quickly change  (using Emacs M-x grep, plus a script);
> but
> 
> ... "as it is Friday" ... I'm interested to hear what others
> think, notably if you are native English (or "American" ;-)
> speaking and/or have some extra good knowledge on such
> matters...
> 
> Martin Maechler
> ETH Zurich
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From r@hep@rd @end|ng |rom @pp|-eco@y@@com  Fri Oct 18 15:29:39 2019
From: r@hep@rd @end|ng |rom @pp|-eco@y@@com (Rich Shepard)
Date: Fri, 18 Oct 2019 06:29:39 -0700 (PDT)
Subject: [R] Question about geometric mean
In-Reply-To: <CAGN=ytO_WNwpKw=HasFGvOmzF1sL4syCTznefTWV5dxnMykkzQ@mail.gmail.com>
References: <CAGN=ytO_WNwpKw=HasFGvOmzF1sL4syCTznefTWV5dxnMykkzQ@mail.gmail.com>
Message-ID: <alpine.LNX.2.20.1910180619590.15610@salmo.appl-ecosys.com>

On Fri, 18 Oct 2019, Mehdi Dadkhah wrote:

> I am using Interpretive structural modeling (ISM) ...

> My question is: How should I calculate geometric mean of experts? opinions
> ...

I'm not a statistician, nor do I know anything about ISM. With that
disclosure I offer a couple of thoughts.

First, the calculation of a geometric mean involves multiplying the 'n' data
points and taking the 'nth' root of the product.

Second, expert (and others') opinions are along a continuum of a set,
perhaps ranging from 'Completely False' to 'Completely True'. I addressed
the need to quantify this subjectivity in environmental impact assessments
by using fuzzy sets and fuzzy logic in applying Thomas Saaty's 'Analytical
Hierarchy Process.'

Perhaps these thoughts are usfull for you.

Regards,

Rich


From jrkr|de@u @end|ng |rom gm@||@com  Fri Oct 18 17:45:04 2019
From: jrkr|de@u @end|ng |rom gm@||@com (John Kane)
Date: Fri, 18 Oct 2019 11:45:04 -0400
Subject: [R] Another Real Basic Question
In-Reply-To: <ED891BAC0E9446778B265ADED0785132@OWNERPC>
References: <ED891BAC0E9446778B265ADED0785132@OWNERPC>
Message-ID: <CAKZQJMDSQMfJzPFEFxq-FE5f3dgE4Fn_vRXRyOGCbB=Vj478aQ@mail.gmail.com>

Can you open in a text editor?

On Wed, 16 Oct 2019 at 23:11, Phillip Heinrich <herd_dog at cox.net> wrote:
>
> In the Source window of RStudio (upper left) I save my code (File/Save) but can not reload it.  There is a file labeled (RECode.R) but neither File/Open file or File/Recent Files gets me anywhere.
>
> Any ideas what I?m doing wrong.
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.



-- 
John Kane
Kingston ON Canada


From r@turner @end|ng |rom @uck|@nd@@c@nz  Fri Oct 18 22:19:17 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Sat, 19 Oct 2019 09:19:17 +1300
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi square" ?
In-Reply-To: <23977.46391.123399.411843@stat.math.ethz.ch>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
Message-ID: <8f43bf8f-2234-0428-3f81-bced8f06a37d@auckland.ac.nz>


I have the vague impression that "chi-squared" is more common in British 
usage and "chi-square" more common in American usage.  I'm pretty sure 
that either is acceptable, although "chi-squared" sounds much better to 
my ear.

Of course within a given document (or collection of related documents) 
consistency is mandatory.

cheers,

Rolf

On 19/10/19 1:51 AM, Martin Maechler wrote:

> As it's Friday ..
> 
> and I also really want to clean up help files and similar R documents,
> both in R's own sources and in my new 'DPQ' CRAN package :
> 
> As a trained mathematician, I'm uneasy if a thing has
> several easily confusable names, .. but as somewhat
> humanistically educated person, I know that natural languages,
> English in this case, are much more flexible than computer
> languages or math...
> 
> Anyway, back to the question(s) .. which I had asked myself a
> couple of months ago, and already remained slightly undecided:
> 
> The 0-th (meta-)question of course is
> 
>    0. Is it worth using only one written form for the
>       ?? - distribution, e.g. "everywhere" in R?
> 
> The answer is not obvious, as already the first few words of the
> (English) Wikipedia clearly convey:
> 
> The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
> and the main title therefore also
>      "Chi-squared distribution"
> 
> Then it reads
> 
>> This article is about the mathematics of the chi-squared
>> distribution. For its uses in statistics, see chi-squared
>> test. For the music [...]
> 
>> In probability theory and statistics, the chi-square
>> distribution (also chi-squared or ?2-distribution) with k
>> degrees of freedom is the distribution of a sum of the squares
>> of k independent standard normal random variables.
> 
>> The chi-square distribution is a special case of the gamma
>> distribution and is one of the most widely used probability
>> distributions in inferential statistics, notably in hypothesis
>> testing [........]
>> [........]
> 
> So, in title and 1st paragraph its "chi-squared", but then
> everywhere(?) the text used "chi-square".
> 
> Undoubtedly, Wilson & Hilferty (1931) has been an important
> paper and they use "Chi-square" in the title;
> also  Johnson, Kotz & Balakrishnan (1995)
> see R's help page ?pchisq use  "Chi-square" in the title of
> chapter 18 and then, diplomatically for chapter 29,
>   "Noncentral ??-Distributions" as title.
> 
> So it seems, that historically and using prestigious sources,
> "chi-square" to dominate (notably if we do not count "??" as an
> alternative).
> 
> Things look a bit different when I study R's sources; on one
> hand, I find all 4 forms (s.Subject); then in the "R source
> history", I see
> 
>    $ svn log -c11342
>    ------------------------------------------------------------------------
>    r11342 | <....> | 2000-11-14 ...
> 
>    Use `chi-squared'.
>    ------------------------------------------------------------------------
> 
> which changed 16 (if I counted correctly) cases of 'chi-square' to 'chi-squared'.
> 
> I have not found any R-core internal (or public) reasoning about
> that change, but had kept it in mind and often worked along that "goal".
> 
> As a consequence, "statistically" speaking, much of R's own use has been
> standardized to use "chi-squared"; but as I mentioned, I still
> find all  4  variants even in "R base" package help files
> (which of course I now could quite quickly change  (using Emacs M-x grep, plus a script);
> but
> 
> ... "as it is Friday" ... I'm interested to hear what others
> think, notably if you are native English (or "American" ;-)
> speaking and/or have some extra good knowledge on such
> matters...


From drj|m|emon @end|ng |rom gm@||@com  Fri Oct 18 22:20:42 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Sat, 19 Oct 2019 07:20:42 +1100
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi square" ?
In-Reply-To: <2dc9a216-2ede-ef00-86e1-ebde26d8bd7c@kogentum.hu>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
 <2dc9a216-2ede-ef00-86e1-ebde26d8bd7c@kogentum.hu>
Message-ID: <CA+8X3fXeT8pLbDbCdWZZhf=T4bXFxbjZLV+KBA5X=hL33+UTVg@mail.gmail.com>

I have thought about this one myself, and just reading the posts and
links has afforded me a more informed viewpoint. My guess is that it
boils down to a contest between mathematics and prosody. To speakers
of English, "square"  in the mathematical sense implies the active
form such as "I square this number". When our focus is on the number
itself, it is usually expressed as "This number has been squared". My
suggestion is that while "chi-square" may be more correct in the
derivation of the statistic, "chi-squared" is more consistent with
colloquial usage in using the passive form. It may also avoid
confusion with the use of "square" as a noun, in which the preceding
word is often an adjective (e.g. "a red square").

Jim

On Sat, Oct 19, 2019 at 12:19 AM D?nes T?th <toth.denes at kogentum.hu> wrote:
>
> Dear Martin,
>
> Others struggle with this inconsistency as well; I found this discussion
> useful:
> https://math.stackexchange.com/questions/1098138/chi-square-or-chi-squared
>
> Denes
>
>
> On 10/18/19 2:51 PM, Martin Maechler wrote:
> > As it's Friday ..
> >
> > and I also really want to clean up help files and similar R documents,
> > both in R's own sources and in my new 'DPQ' CRAN package :
> >
> > As a trained mathematician, I'm uneasy if a thing has
> > several easily confusable names, .. but as somewhat
> > humanistically educated person, I know that natural languages,
> > English in this case, are much more flexible than computer
> > languages or math...
> >
> > Anyway, back to the question(s) .. which I had asked myself a
> > couple of months ago, and already remained slightly undecided:
> >
> > The 0-th (meta-)question of course is
> >
> >    0. Is it worth using only one written form for the
> >       ?? - distribution, e.g. "everywhere" in R?
> >
> > The answer is not obvious, as already the first few words of the
> > (English) Wikipedia clearly convey:
> >
> > The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
> > and the main title therefore also
> >      "Chi-squared distribution"
> >
> > Then it reads
> >
> >> This article is about the mathematics of the chi-squared
> >> distribution. For its uses in statistics, see chi-squared
> >> test. For the music [...]
> >
> >> In probability theory and statistics, the chi-square
> >> distribution (also chi-squared or ?2-distribution) with k
> >> degrees of freedom is the distribution of a sum of the squares
> >> of k independent standard normal random variables.
> >
> >> The chi-square distribution is a special case of the gamma
> >> distribution and is one of the most widely used probability
> >> distributions in inferential statistics, notably in hypothesis
> >> testing [........]
> >> [........]
> >
> > So, in title and 1st paragraph its "chi-squared", but then
> > everywhere(?) the text used "chi-square".
> >
> > Undoubtedly, Wilson & Hilferty (1931) has been an important
> > paper and they use "Chi-square" in the title;
> > also  Johnson, Kotz & Balakrishnan (1995)
> > see R's help page ?pchisq use  "Chi-square" in the title of
> > chapter 18 and then, diplomatically for chapter 29,
> >   "Noncentral ??-Distributions" as title.
> >
> > So it seems, that historically and using prestigious sources,
> > "chi-square" to dominate (notably if we do not count "??" as an
> > alternative).
> >
> > Things look a bit different when I study R's sources; on one
> > hand, I find all 4 forms (s.Subject); then in the "R source
> > history", I see
> >
> >    $ svn log -c11342
> >    ------------------------------------------------------------------------
> >    r11342 | <....> | 2000-11-14 ...
> >
> >    Use `chi-squared'.
> >    ------------------------------------------------------------------------
> >
> > which changed 16 (if I counted correctly) cases of 'chi-square' to 'chi-squared'.
> >
> > I have not found any R-core internal (or public) reasoning about
> > that change, but had kept it in mind and often worked along that "goal".
> >
> > As a consequence, "statistically" speaking, much of R's own use has been
> > standardized to use "chi-squared"; but as I mentioned, I still
> > find all  4  variants even in "R base" package help files
> > (which of course I now could quite quickly change  (using Emacs M-x grep, plus a script);
> > but
> >
> > ... "as it is Friday" ... I'm interested to hear what others
> > think, notably if you are native English (or "American" ;-)
> > speaking and/or have some extra good knowledge on such
> > matters...
> >
> > Martin Maechler
> > ETH Zurich
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From r@hep@rd @end|ng |rom @pp|-eco@y@@com  Fri Oct 18 22:58:44 2019
From: r@hep@rd @end|ng |rom @pp|-eco@y@@com (Rich Shepard)
Date: Fri, 18 Oct 2019 13:58:44 -0700 (PDT)
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi square" ?
In-Reply-To: <CA+8X3fXeT8pLbDbCdWZZhf=T4bXFxbjZLV+KBA5X=hL33+UTVg@mail.gmail.com>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
 <2dc9a216-2ede-ef00-86e1-ebde26d8bd7c@kogentum.hu>
 <CA+8X3fXeT8pLbDbCdWZZhf=T4bXFxbjZLV+KBA5X=hL33+UTVg@mail.gmail.com>
Message-ID: <alpine.LNX.2.20.1910181356100.15610@salmo.appl-ecosys.com>

On Sat, 19 Oct 2019, Jim Lemon wrote:

> My suggestion is that while "chi-square" may be more correct in the
> derivation of the statistic, "chi-squared" is more consistent with
> colloquial usage in using the passive form.

Jim,

This is a cogent suggestion that's pragmatic and defensible.

Thank you,

Rich


From rmh @end|ng |rom temp|e@edu  Fri Oct 18 23:26:49 2019
From: rmh @end|ng |rom temp|e@edu (Richard M. Heiberger)
Date: Fri, 18 Oct 2019 17:26:49 -0400
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi square" ?
In-Reply-To: <23977.46391.123399.411843@stat.math.ethz.ch>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
Message-ID: <CAGx1TMAB_2wkT1v6up3KaB9NBxCaD6BT1b3PoMipCqZDM0HnnA@mail.gmail.com>

What a delightful question.  Bill Cochran discussed this in class
one day about 50 years ago.  He said the British usage (which I think
he said was chi-squared,
as is consistent with the other memories in this thread)
is what he learned and previously used.  But he had been in the US for
so long that he was now using
the American preference (chi-square).

Rich

On Fri, Oct 18, 2019 at 8:51 AM Martin Maechler
<maechler at stat.math.ethz.ch> wrote:
>
> As it's Friday ..
>
> and I also really want to clean up help files and similar R documents,
> both in R's own sources and in my new 'DPQ' CRAN package :
>
> As a trained mathematician, I'm uneasy if a thing has
> several easily confusable names, .. but as somewhat
> humanistically educated person, I know that natural languages,
> English in this case, are much more flexible than computer
> languages or math...
>
> Anyway, back to the question(s) .. which I had asked myself a
> couple of months ago, and already remained slightly undecided:
>
> The 0-th (meta-)question of course is
>
>   0. Is it worth using only one written form for the
>      ?? - distribution, e.g. "everywhere" in R?
>
> The answer is not obvious, as already the first few words of the
> (English) Wikipedia clearly convey:
>
> The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
> and the main title therefore also
>     "Chi-squared distribution"
>
> Then it reads
>
> > This article is about the mathematics of the chi-squared
> > distribution. For its uses in statistics, see chi-squared
> > test. For the music [...]
>
> > In probability theory and statistics, the chi-square
> > distribution (also chi-squared or ?2-distribution) with k
> > degrees of freedom is the distribution of a sum of the squares
> > of k independent standard normal random variables.
>
> > The chi-square distribution is a special case of the gamma
> > distribution and is one of the most widely used probability
> > distributions in inferential statistics, notably in hypothesis
> > testing [........]
> > [........]
>
> So, in title and 1st paragraph its "chi-squared", but then
> everywhere(?) the text used "chi-square".
>
> Undoubtedly, Wilson & Hilferty (1931) has been an important
> paper and they use "Chi-square" in the title;
> also  Johnson, Kotz & Balakrishnan (1995)
> see R's help page ?pchisq use  "Chi-square" in the title of
> chapter 18 and then, diplomatically for chapter 29,
>  "Noncentral ??-Distributions" as title.
>
> So it seems, that historically and using prestigious sources,
> "chi-square" to dominate (notably if we do not count "??" as an
> alternative).
>
> Things look a bit different when I study R's sources; on one
> hand, I find all 4 forms (s.Subject); then in the "R source
> history", I see
>
>   $ svn log -c11342
>   ------------------------------------------------------------------------
>   r11342 | <....> | 2000-11-14 ...
>
>   Use `chi-squared'.
>   ------------------------------------------------------------------------
>
> which changed 16 (if I counted correctly) cases of 'chi-square' to 'chi-squared'.
>
> I have not found any R-core internal (or public) reasoning about
> that change, but had kept it in mind and often worked along that "goal".
>
> As a consequence, "statistically" speaking, much of R's own use has been
> standardized to use "chi-squared"; but as I mentioned, I still
> find all  4  variants even in "R base" package help files
> (which of course I now could quite quickly change  (using Emacs M-x grep, plus a script);
> but
>
> ... "as it is Friday" ... I'm interested to hear what others
> think, notably if you are native English (or "American" ;-)
> speaking and/or have some extra good knowledge on such
> matters...
>
> Martin Maechler
> ETH Zurich
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From dd@|thorp @end|ng |rom u@g@@gov  Sat Oct 19 00:25:59 2019
From: dd@|thorp @end|ng |rom u@g@@gov (Dalthorp, Daniel)
Date: Fri, 18 Oct 2019 15:25:59 -0700
Subject: [R] 
 [EXTERNAL] Re: "chi-square" | "chi-squared" | "chi squared" |
 "chi square" ?
In-Reply-To: <CAGx1TMAB_2wkT1v6up3KaB9NBxCaD6BT1b3PoMipCqZDM0HnnA@mail.gmail.com>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
 <CAGx1TMAB_2wkT1v6up3KaB9NBxCaD6BT1b3PoMipCqZDM0HnnA@mail.gmail.com>
Message-ID: <CAJeYpE9ut6z0+Kn9+uxQQTR-GthA4vN0cmN940G7BmYqxV6jaA@mail.gmail.com>

oh my...

I'd like to see the statistics on it before jumping to a conclusion that
the American preference is "chi-square" and the British preference is
"chi-squared". I don't see that at all.

------
In keeping with the pronunciation of x^2 and 3^2, maybe "chi-squared" makes
the most sense,.

The "chi-square"? Because the iterated dentals in "chi-squared
distribution" and "chi-squared test" are a little cumbersome to pronounce,
an even slightly lazy pronunciation would sound like "chi-square
distribution" and "chi-square test". There's no need to write it that way
though.

-Dan



On Fri, Oct 18, 2019 at 2:28 PM Richard M. Heiberger <rmh at temple.edu> wrote:

> What a delightful question.  Bill Cochran discussed this in class
> one day about 50 years ago.  He said the British usage (which I think
> he said was chi-squared,
> as is consistent with the other memories in this thread)
> is what he learned and previously used.  But he had been in the US for
> so long that he was now using
> the American preference (chi-square).
>
> Rich
>
> On Fri, Oct 18, 2019 at 8:51 AM Martin Maechler
> <maechler at stat.math.ethz.ch> wrote:
> >
> > As it's Friday ..
> >
> > and I also really want to clean up help files and similar R documents,
> > both in R's own sources and in my new 'DPQ' CRAN package :
> >
> > As a trained mathematician, I'm uneasy if a thing has
> > several easily confusable names, .. but as somewhat
> > humanistically educated person, I know that natural languages,
> > English in this case, are much more flexible than computer
> > languages or math...
> >
> > Anyway, back to the question(s) .. which I had asked myself a
> > couple of months ago, and already remained slightly undecided:
> >
> > The 0-th (meta-)question of course is
> >
> >   0. Is it worth using only one written form for the
> >      ?? - distribution, e.g. "everywhere" in R?
> >
> > The answer is not obvious, as already the first few words of the
> > (English) Wikipedia clearly convey:
> >
> > The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
> > and the main title therefore also
> >     "Chi-squared distribution"
> >
> > Then it reads
> >
> > > This article is about the mathematics of the chi-squared
> > > distribution. For its uses in statistics, see chi-squared
> > > test. For the music [...]
> >
> > > In probability theory and statistics, the chi-square
> > > distribution (also chi-squared or ?2-distribution) with k
> > > degrees of freedom is the distribution of a sum of the squares
> > > of k independent standard normal random variables.
> >
> > > The chi-square distribution is a special case of the gamma
> > > distribution and is one of the most widely used probability
> > > distributions in inferential statistics, notably in hypothesis
> > > testing [........]
> > > [........]
> >
> > So, in title and 1st paragraph its "chi-squared", but then
> > everywhere(?) the text used "chi-square".
> >
> > Undoubtedly, Wilson & Hilferty (1931) has been an important
> > paper and they use "Chi-square" in the title;
> > also  Johnson, Kotz & Balakrishnan (1995)
> > see R's help page ?pchisq use  "Chi-square" in the title of
> > chapter 18 and then, diplomatically for chapter 29,
> >  "Noncentral ??-Distributions" as title.
> >
> > So it seems, that historically and using prestigious sources,
> > "chi-square" to dominate (notably if we do not count "??" as an
> > alternative).
> >
> > Things look a bit different when I study R's sources; on one
> > hand, I find all 4 forms (s.Subject); then in the "R source
> > history", I see
> >
> >   $ svn log -c11342
> >
>  ------------------------------------------------------------------------
> >   r11342 | <....> | 2000-11-14 ...
> >
> >   Use `chi-squared'.
> >
>  ------------------------------------------------------------------------
> >
> > which changed 16 (if I counted correctly) cases of 'chi-square' to
> 'chi-squared'.
> >
> > I have not found any R-core internal (or public) reasoning about
> > that change, but had kept it in mind and often worked along that "goal".
> >
> > As a consequence, "statistically" speaking, much of R's own use has been
> > standardized to use "chi-squared"; but as I mentioned, I still
> > find all  4  variants even in "R base" package help files
> > (which of course I now could quite quickly change  (using Emacs M-x
> grep, plus a script);
> > but
> >
> > ... "as it is Friday" ... I'm interested to hear what others
> > think, notably if you are native English (or "American" ;-)
> > speaking and/or have some extra good knowledge on such
> > matters...
> >
> > Martin Maechler
> > ETH Zurich
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


-- 
Dan Dalthorp, PhD
USGS Forest and Rangeland Ecosystem Science Center
Forest Sciences Lab, Rm 311
3200 SW Jefferson Way
Corvallis, OR 97331
ph: 541-750-0953
ddalthorp at usgs.gov

	[[alternative HTML version deleted]]


From m@z@t|@nmex|co @end|ng |rom y@hoo@com  Sat Oct 19 09:44:26 2019
From: m@z@t|@nmex|co @end|ng |rom y@hoo@com (Felipe Carrillo)
Date: Sat, 19 Oct 2019 07:44:26 +0000 (UTC)
Subject: [R] Preserving numeric columns
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
Message-ID: <1231334454.3865499.1571471066172@mail.yahoo.com>

Consider the following dataset:? I need to replace NAs with "-" but I lose my numeric formatting??fall.estimate <- structure(list(`Salmon` = c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912, 402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992` = c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA, 5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA), `1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` = c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA, 27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA, NA), `1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names = c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
fall.estimatestr(fall.estimate)#convert to class dataframefall.estimate <- as.data.frame(fall.estimate)
#Remove all decimalsfall.estimate[,-1] <-round(fall.estimate[,-1],0)#Replace NA's' with dash '-'fall.estimate[is.na(fall.estimate)] <- "-"
#Here all my columns get converted to character#Try to convert back to numericfall.estimate <- mutate_all(fall.estimate, function(x) as.numeric(as.character(x)))?fall.estimate#But I get these warnings aand my dashes dissapearQuestion: How can I replace my NAs with dashes and keep all my dataframecolumns as numeric??Warning messages:1: In FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i], ...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i], ...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by coercion
Thanks beforehand


	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sat Oct 19 10:04:50 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sat, 19 Oct 2019 01:04:50 -0700
Subject: [R] Preserving numeric columns
In-Reply-To: <1231334454.3865499.1571471066172@mail.yahoo.com>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
Message-ID: <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>

Data frames are NOT spreadsheets. Don't treat them like spreadsheets. All elements in a column are parts of a vector which means they all have the same data type.

On the other hand, if you want to generate formatted output in HTML, LaTeX, or Word, there are many tools for generating formatted tables in the data output phase of data analysis, and it is common to convert everything to character format intentionally then.

On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help <r-help at r-project.org> wrote:
>Consider the following dataset:? I need to replace NAs with "-" but I
>lose my numeric formatting??fall.estimate <- structure(list(`Salmon` =
>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992` =
>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA),
>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA, NA),
>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>fall.estimatestr(fall.estimate)#convert to class dataframefall.estimate
><- as.data.frame(fall.estimate)
>#Remove all decimalsfall.estimate[,-1]
><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>#Here all my columns get converted to character#Try to convert back to
>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>aand my dashes dissapearQuestion: How can I replace my NAs with dashes
>and keep all my dataframecolumns as numeric??Warning messages:1: In
>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>coercion
>Thanks beforehand
>
>
>	[[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From @r|@chocho @end|ng |rom gm@||@com  Sat Oct 19 10:18:44 2019
From: @r|@chocho @end|ng |rom gm@||@com (Sri Priya)
Date: Sat, 19 Oct 2019 13:48:44 +0530
Subject: [R] Calculating returns of bid using R
Message-ID: <CANt2G=Rtk=LqbX_4UiU2MHc1nvP-i7MDALdTu1onST9xdSU4YA@mail.gmail.com>

Dear R Users,

I am practicing problems in the field of finance and economics. While
searching, I got problem like this. And I want to solve the following
problem using R. I dont have any clue how to incorporate this in R. Please
help me!!

Question:

A chit fund has 25 members. Each month they contribute Rs 2000 each. End of
the month, the person who bids the lowest for the corpus, gets his bid. The
group organizer gets paid a fixed commission of Rs 2500 each month (5% of
25*2000).It is deducted from the bid winner's corpus. The remaining amount
is distributed among all the 25 customers equally.
Based on the above details calculate using R

1. What is the Annualized  Return of the person who bids in the last month
?
2. What is the Annualized Return of the person who bids in the first month ?
3. Write an R script which calculates the annualized return of chit fund
participant ?- Show the Return % for each month's bid winner.

Herewith attached the excel file for calculation.

Thanks
Sripriya

From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Oct 19 11:55:28 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 19 Oct 2019 10:55:28 +0100
Subject: [R] List of data frame
In-Reply-To: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
References: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
Message-ID: <41329aa2-4eff-2c69-b049-a15a243e915e@sapo.pt>

Hello,

Why not use read.xlsx argument 'na.strings', an argument that exists in 
many file reading functions? (read.table, and derivatives.)


test <- lapply(sheets,function(i) {
   read.xlsx("rainfall.xlsx", sheet = i,
             startRow = 8, cols = 1:2,
             na.strings = "8888")
})


Hope this helps,

Rui Barradas

?s 02:38 de 18/10/19, ani jaya escreveu:
> Dear R-Help,
> 
> I have a list of data frame that I import from excel file using read.xlsx
> command.
> 
> sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> startRow=8, cols=1:2))
> names(test) <- sprintf("%i", 1986:2015)
> 
> And I got a data.frame with 365 rows and two columns contains date and
> rainfall data.
> There is a value in rainfall data that i want to change as NA (8888)
> 
> test[1]$`1986`
>         Date   RR
> 1   01-01-1986    0
> 2   02-01-1986    7
> 3   03-01-1986   72
> 4   04-01-1986    4
> 5   05-01-1986   19
> 6   06-01-1986    4
> 7   07-01-1986   16
> 8   08-01-1986   21
> 9   09-01-1986   34
> 10  10-01-1986   72
> 11  11-01-1986   93
> 12  12-01-1986  178
> 13  13-01-1986   86
> 14  14-01-1986   11
> 15  15-01-1986    0
> 16  16-01-1986   31
> 17  17-01-1986   22
> 18  18-01-1986   18
> 19  19-01-1986    3
> 20  20-01-1986    0
> 21  21-01-1986   31
> 22  22-01-1986   46
> 23  23-01-1986    4
> 24  24-01-1986   40
> 25  25-01-1986   63
> 26  26-01-1986  125
> 27  27-01-1986   33
> 28  28-01-1986   44
> 29  29-01-1986    6
> 30  30-01-1986    0
> 31  31-01-1986    0
> 32  01-02-1986    2
> 33  02-02-1986   71
> 34  03-02-1986 8888
> 35  04-02-1986    0
> 36  05-02-1986    0
> 37  06-02-1986   56
> 38  07-02-1986   19
> 39  08-02-1986    3
> 40  09-02-1986    7
> 41  10-02-1986   24
> 42  11-02-1986   55
> 43  12-02-1986    0
> 44  13-02-1986    0
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From beno|t@v@|||@nt @end|ng |rom no-|og@org  Sat Oct 19 13:22:00 2019
From: beno|t@v@|||@nt @end|ng |rom no-|og@org (Benoit Vaillant)
Date: Sat, 19 Oct 2019 13:22:00 +0200
Subject: [R] Calculating returns of bid using R
In-Reply-To: <CANt2G=Rtk=LqbX_4UiU2MHc1nvP-i7MDALdTu1onST9xdSU4YA@mail.gmail.com>
References: <CANt2G=Rtk=LqbX_4UiU2MHc1nvP-i7MDALdTu1onST9xdSU4YA@mail.gmail.com>
Message-ID: <20191019112200.vedb4lyiwni6quyt@auroras.fr>

Hello,

See inline.

On Sat, Oct 19, 2019 at 01:48:44PM +0530, Sri Priya wrote:
> Dear R Users,
> Question:
> 
> A chit fund has 25 members. Each month they contribute Rs 2000 each. End of
> the month, the person who bids the lowest for the corpus, gets his bid. The
> group organizer gets paid a fixed commission of Rs 2500 each month (5% of
> 25*2000).It is deducted from the bid winner's corpus. The remaining amount
> is distributed among all the 25 customers equally.
> Based on the above details calculate using R
> 
> 1. What is the Annualized  Return of the person who bids in the last month
> ?
> 2. What is the Annualized Return of the person who bids in the first month ?
> 3. Write an R script which calculates the annualized return of chit fund
> participant ?- Show the Return % for each month's bid winner.

This list has a no homework policy.

Please provide at least some preliminary works.

> Herewith attached the excel file for calculation.

File got stripped by the list.

See more on the posting guide which is included in the footer of every
mail.

-- 
Beno?t

-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 866 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20191019/32d19c41/attachment.sig>

From therne@u @end|ng |rom m@yo@edu  Sat Oct 19 15:04:16 2019
From: therne@u @end|ng |rom m@yo@edu (Therneau, Terry M., Ph.D.)
Date: Sat, 19 Oct 2019 08:04:16 -0500
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi, square"
Message-ID: <771925$cjtjs2@ironport10.mayo.edu>

Martin,
 ? A fun question.

Looking back at my oldest books, Feller (1950) used chi-square.
Then I walked down the hall to our little statistics library and looked at Johnson and 
Kotz, "Continous Univariate Distributions", since each chapter therein has comments about 
the history of the distribution.

 ?a.? They use 'chi-square' throughout their history section, tracing the distribution 
back to work in the 1800s.? But, those earliest papers apparently didn't name their 
results as chi- whatever, so an "origin" story didn't pan out.

 ?b. They have 13 pages of references, and for fun I counted the occurence of variants.? 
The majority of papers don't have the word in the title at all and the next most common is 
the Greek symbol. Here are the years of the others:

chi-square: ? 73 43 65 80 86 73 82 73 69 69 78 64 64 86 65 86 82 82 76 82 88 81 74 77 87 
86 93 69 60 88 88 80 77 41 59 79 31
chi-squared: 72 76 82 83 89 79 69 67 77 78 69 77 83 88 87 89 78
chi:? 92 73 89 87
chi-squares: 77 83
chi-bar-square: 91

There doesn't look to be a trend over time.? The 1922 Fisher reference uses the Greek 
symbol, by the way.

Terry T


	[[alternative HTML version deleted]]


From d@vorj @end|ng |rom ||ve@com  Fri Oct 18 19:28:12 2019
From: d@vorj @end|ng |rom ||ve@com (Davor Josipovic)
Date: Fri, 18 Oct 2019 17:28:12 +0000
Subject: [R] L1 (lasso) regularized log-linear model selection procedure
Message-ID: <DM6PR02MB6042EE2B9F97EFC7FE350991A76C0@DM6PR02MB6042.namprd02.prod.outlook.com>

Daphne Koller (2009) describes L1 regularization (Chapter 20) as an
efficient way for Markov network (i.e. undirected graphical model)
structure learning and feature parameter estimation.

Her focus, and mine, are log-linear models for high-dimensional
contingency tables (i.e. categorical data).

I wonder whether there are any good implementations of this?

I have looked here (https://cran.r-project.org/web/views/gR.html) and
found only implementations for continuous data:
* parcor: Regularized estimation of partial correlation matrices
* glasso: Graphical Lasso: Estimation of Gaussian Graphical Models

Both are for continuous (Gaussian) data, not categorical.

Any suggestions?

From wdun|@p @end|ng |rom t|bco@com  Sat Oct 19 17:59:48 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Sat, 19 Oct 2019 08:59:48 -0700
Subject: [R] 
 "chi-square" | "chi-squared" | "chi squared" | "chi, square"
In-Reply-To: <771925$cjtjs2@ironport10.mayo.edu>
References: <771925$cjtjs2@ironport10.mayo.edu>
Message-ID: <CAF8bMcb84UWd5xx6M9_-K6z1_aPgJdS5PmYVSv_U=Br6RUQo5g@mail.gmail.com>

Sigma squared or sigma square?  Hotelling's T-squared or T-square?

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Sat, Oct 19, 2019 at 7:38 AM Therneau, Terry M., Ph.D. via R-help <
r-help at r-project.org> wrote:

> Martin,
>    A fun question.
>
> Looking back at my oldest books, Feller (1950) used chi-square.
> Then I walked down the hall to our little statistics library and looked at
> Johnson and
> Kotz, "Continous Univariate Distributions", since each chapter therein has
> comments about
> the history of the distribution.
>
>   a.  They use 'chi-square' throughout their history section, tracing the
> distribution
> back to work in the 1800s.  But, those earliest papers apparently didn't
> name their
> results as chi- whatever, so an "origin" story didn't pan out.
>
>   b. They have 13 pages of references, and for fun I counted the occurence
> of variants.
> The majority of papers don't have the word in the title at all and the
> next most common is
> the Greek symbol. Here are the years of the others:
>
> chi-square:   73 43 65 80 86 73 82 73 69 69 78 64 64 86 65 86 82 82 76 82
> 88 81 74 77 87
> 86 93 69 60 88 88 80 77 41 59 79 31
> chi-squared: 72 76 82 83 89 79 69 67 77 78 69 77 83 88 87 89 78
> chi:  92 73 89 87
> chi-squares: 77 83
> chi-bar-square: 91
>
> There doesn't look to be a trend over time.  The 1922 Fisher reference
> uses the Greek
> symbol, by the way.
>
> Terry T
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From m@z@t|@nmex|co @end|ng |rom y@hoo@com  Sat Oct 19 21:50:20 2019
From: m@z@t|@nmex|co @end|ng |rom y@hoo@com (Felipe Carrillo)
Date: Sat, 19 Oct 2019 19:50:20 +0000 (UTC)
Subject: [R] Preserving numeric columns
In-Reply-To: <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
 <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
Message-ID: <870093070.4013813.1571514620069@mail.yahoo.com>

You are correct. I didnt explain well and failed to mention that this is for knitr::kable. I already figured it out.?

Sent from Yahoo Mail on Android 
 
  On Sat, Oct 19, 2019 at 1:04 AM, Jeff Newmiller<jdnewmil at dcn.davis.ca.us> wrote:   Data frames are NOT spreadsheets. Don't treat them like spreadsheets. All elements in a column are parts of a vector which means they all have the same data type.

On the other hand, if you want to generate formatted output in HTML, LaTeX, or Word, there are many tools for generating formatted tables in the data output phase of data analysis, and it is common to convert everything to character format intentionally then.

On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help <r-help at r-project.org> wrote:
>Consider the following dataset:? I need to replace NAs with "-" but I
>lose my numeric formatting??fall.estimate <- structure(list(`Salmon` =
>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992` =
>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA),
>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA, NA),
>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>fall.estimatestr(fall.estimate)#convert to class dataframefall.estimate
><- as.data.frame(fall.estimate)
>#Remove all decimalsfall.estimate[,-1]
><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>#Here all my columns get converted to character#Try to convert back to
>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>aand my dashes dissapearQuestion: How can I replace my NAs with dashes
>and keep all my dataframecolumns as numeric??Warning messages:1: In
>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>coercion
>Thanks beforehand
>
>
>??? [[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.  

	[[alternative HTML version deleted]]


From m@z@t|@nmex|co @end|ng |rom y@hoo@com  Sat Oct 19 21:50:20 2019
From: m@z@t|@nmex|co @end|ng |rom y@hoo@com (Felipe Carrillo)
Date: Sat, 19 Oct 2019 19:50:20 +0000 (UTC)
Subject: [R] Preserving numeric columns
In-Reply-To: <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
 <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
Message-ID: <870093070.4013813.1571514620069@mail.yahoo.com>

You are correct. I didnt explain well and failed to mention that this is for knitr::kable. I already figured it out.?

Sent from Yahoo Mail on Android 
 
  On Sat, Oct 19, 2019 at 1:04 AM, Jeff Newmiller<jdnewmil at dcn.davis.ca.us> wrote:   Data frames are NOT spreadsheets. Don't treat them like spreadsheets. All elements in a column are parts of a vector which means they all have the same data type.

On the other hand, if you want to generate formatted output in HTML, LaTeX, or Word, there are many tools for generating formatted tables in the data output phase of data analysis, and it is common to convert everything to character format intentionally then.

On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help <r-help at r-project.org> wrote:
>Consider the following dataset:? I need to replace NAs with "-" but I
>lose my numeric formatting??fall.estimate <- structure(list(`Salmon` =
>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992` =
>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA),
>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA, NA),
>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>fall.estimatestr(fall.estimate)#convert to class dataframefall.estimate
><- as.data.frame(fall.estimate)
>#Remove all decimalsfall.estimate[,-1]
><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>#Here all my columns get converted to character#Try to convert back to
>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>aand my dashes dissapearQuestion: How can I replace my NAs with dashes
>and keep all my dataframecolumns as numeric??Warning messages:1: In
>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>coercion
>Thanks beforehand
>
>
>??? [[alternative HTML version deleted]]
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.  

	[[alternative HTML version deleted]]


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Sat Oct 19 22:01:53 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sat, 19 Oct 2019 13:01:53 -0700
Subject: [R] Preserving numeric columns
In-Reply-To: <870093070.4013813.1571514620069@mail.yahoo.com>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
 <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
 <870093070.4013813.1571514620069@mail.yahoo.com>
Message-ID: <EA676A84-1FB8-4388-80A3-81AB52829ACF@dcn.davis.ca.us>

Then the polite next step is for you to indicate what that solution was so people searching the archives can learn from your question. Was it to set the kable option?

options(knitr.kable.NA = '-')?

On October 19, 2019 12:50:20 PM PDT, Felipe Carrillo <mazatlanmexico at yahoo.com> wrote:
>You are correct. I didnt explain well and failed to mention that this
>is for knitr::kable. I already figured it out.?
>
>Sent from Yahoo Mail on Android 
> 
>On Sat, Oct 19, 2019 at 1:04 AM, Jeff
>Newmiller<jdnewmil at dcn.davis.ca.us> wrote:   Data frames are NOT
>spreadsheets. Don't treat them like spreadsheets. All elements in a
>column are parts of a vector which means they all have the same data
>type.
>
>On the other hand, if you want to generate formatted output in HTML,
>LaTeX, or Word, there are many tools for generating formatted tables in
>the data output phase of data analysis, and it is common to convert
>everything to character format intentionally then.
>
>On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help
><r-help at r-project.org> wrote:
>>Consider the following dataset:? I need to replace NAs with "-" but I
>>lose my numeric formatting??fall.estimate <- structure(list(`Salmon` =
>>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992`
>=
>>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA),
>>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA,
>NA),
>>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>>fall.estimatestr(fall.estimate)#convert to class
>dataframefall.estimate
>><- as.data.frame(fall.estimate)
>>#Remove all decimalsfall.estimate[,-1]
>><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>>#Here all my columns get converted to character#Try to convert back to
>>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>>aand my dashes dissapearQuestion: How can I replace my NAs with dashes
>>and keep all my dataframecolumns as numeric??Warning messages:1: In
>>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>>coercion
>>Thanks beforehand
>>
>>
>>??? [[alternative HTML version deleted]]
>>
>>______________________________________________
>>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>https://stat.ethz.ch/mailman/listinfo/r-help
>>PLEASE do read the posting guide
>>http://www.R-project.org/posting-guide.html
>>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From bgunter@4567 @end|ng |rom gm@||@com  Sat Oct 19 23:14:38 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sat, 19 Oct 2019 14:14:38 -0700
Subject: [R] L1 (lasso) regularized log-linear model selection procedure
In-Reply-To: <DM6PR02MB6042EE2B9F97EFC7FE350991A76C0@DM6PR02MB6042.namprd02.prod.outlook.com>
References: <DM6PR02MB6042EE2B9F97EFC7FE350991A76C0@DM6PR02MB6042.namprd02.prod.outlook.com>
Message-ID: <CAGxFJbQiNRU1MupmMrFejmKS74wqZZ1q7B25yuyhdzmZcZPdZA@mail.gmail.com>

Searching on "lasso penalty with deviance" on rseek.org  brought up many
packages.

-- Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sat, Oct 19, 2019 at 7:54 AM Davor Josipovic <davorj at live.com> wrote:

> Daphne Koller (2009) describes L1 regularization (Chapter 20) as an
> efficient way for Markov network (i.e. undirected graphical model)
> structure learning and feature parameter estimation.
>
> Her focus, and mine, are log-linear models for high-dimensional
> contingency tables (i.e. categorical data).
>
> I wonder whether there are any good implementations of this?
>
> I have looked here (https://cran.r-project.org/web/views/gR.html) and
> found only implementations for continuous data:
> * parcor: Regularized estimation of partial correlation matrices
> * glasso: Graphical Lasso: Estimation of Gaussian Graphical Models
>
> Both are for continuous (Gaussian) data, not categorical.
>
> Any suggestions?
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From m@z@t|@nmex|co @end|ng |rom y@hoo@com  Sun Oct 20 01:41:06 2019
From: m@z@t|@nmex|co @end|ng |rom y@hoo@com (Felipe Carrillo)
Date: Sat, 19 Oct 2019 23:41:06 +0000 (UTC)
Subject: [R] Preserving numeric columns
In-Reply-To: <EA676A84-1FB8-4388-80A3-81AB52829ACF@dcn.davis.ca.us>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
 <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
 <870093070.4013813.1571514620069@mail.yahoo.com>
 <EA676A84-1FB8-4388-80A3-81AB52829ACF@dcn.davis.ca.us>
Message-ID: <1452072544.4060003.1571528466814@mail.yahoo.com>

Yes,?options(knitr.kable.NA = '-')? is?The answer for kable.
Do you happen to know what are the arguments used for gridExtra grid.draw to acomplish the same thing?

Sent from Yahoo Mail on Android 
 
  On Sat, Oct 19, 2019 at 1:01 PM, Jeff Newmiller<jdnewmil at dcn.davis.ca.us> wrote:   Then the polite next step is for you to indicate what that solution was so people searching the archives can learn from your question. Was it to set the kable option?

options(knitr.kable.NA = '-')?

On October 19, 2019 12:50:20 PM PDT, Felipe Carrillo <mazatlanmexico at yahoo.com> wrote:
>You are correct. I didnt explain well and failed to mention that this
>is for knitr::kable. I already figured it out.?
>
>Sent from Yahoo Mail on Android 
> 
>On Sat, Oct 19, 2019 at 1:04 AM, Jeff
>Newmiller<jdnewmil at dcn.davis.ca.us> wrote:? Data frames are NOT
>spreadsheets. Don't treat them like spreadsheets. All elements in a
>column are parts of a vector which means they all have the same data
>type.
>
>On the other hand, if you want to generate formatted output in HTML,
>LaTeX, or Word, there are many tools for generating formatted tables in
>the data output phase of data analysis, and it is common to convert
>everything to character format intentionally then.
>
>On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help
><r-help at r-project.org> wrote:
>>Consider the following dataset:? I need to replace NAs with "-" but I
>>lose my numeric formatting??fall.estimate <- structure(list(`Salmon` =
>>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992`
>=
>>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA),
>>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA,
>NA),
>>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>>fall.estimatestr(fall.estimate)#convert to class
>dataframefall.estimate
>><- as.data.frame(fall.estimate)
>>#Remove all decimalsfall.estimate[,-1]
>><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>>#Here all my columns get converted to character#Try to convert back to
>>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>>aand my dashes dissapearQuestion: How can I replace my NAs with dashes
>>and keep all my dataframecolumns as numeric??Warning messages:1: In
>>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>>coercion
>>Thanks beforehand
>>
>>
>>??? [[alternative HTML version deleted]]
>>
>>______________________________________________
>>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>https://stat.ethz.ch/mailman/listinfo/r-help
>>PLEASE do read the posting guide
>>http://www.R-project.org/posting-guide.html
>>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.  

	[[alternative HTML version deleted]]


From m@z@t|@nmex|co @end|ng |rom y@hoo@com  Sun Oct 20 01:41:06 2019
From: m@z@t|@nmex|co @end|ng |rom y@hoo@com (Felipe Carrillo)
Date: Sat, 19 Oct 2019 23:41:06 +0000 (UTC)
Subject: [R] Preserving numeric columns
In-Reply-To: <EA676A84-1FB8-4388-80A3-81AB52829ACF@dcn.davis.ca.us>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
 <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
 <870093070.4013813.1571514620069@mail.yahoo.com>
 <EA676A84-1FB8-4388-80A3-81AB52829ACF@dcn.davis.ca.us>
Message-ID: <1452072544.4060003.1571528466814@mail.yahoo.com>

Yes,?options(knitr.kable.NA = '-')? is?The answer for kable.
Do you happen to know what are the arguments used for gridExtra grid.draw to acomplish the same thing?

Sent from Yahoo Mail on Android 
 
  On Sat, Oct 19, 2019 at 1:01 PM, Jeff Newmiller<jdnewmil at dcn.davis.ca.us> wrote:   Then the polite next step is for you to indicate what that solution was so people searching the archives can learn from your question. Was it to set the kable option?

options(knitr.kable.NA = '-')?

On October 19, 2019 12:50:20 PM PDT, Felipe Carrillo <mazatlanmexico at yahoo.com> wrote:
>You are correct. I didnt explain well and failed to mention that this
>is for knitr::kable. I already figured it out.?
>
>Sent from Yahoo Mail on Android 
> 
>On Sat, Oct 19, 2019 at 1:04 AM, Jeff
>Newmiller<jdnewmil at dcn.davis.ca.us> wrote:? Data frames are NOT
>spreadsheets. Don't treat them like spreadsheets. All elements in a
>column are parts of a vector which means they all have the same data
>type.
>
>On the other hand, if you want to generate formatted output in HTML,
>LaTeX, or Word, there are many tools for generating formatted tables in
>the data output phase of data analysis, and it is common to convert
>everything to character format intentionally then.
>
>On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help
><r-help at r-project.org> wrote:
>>Consider the following dataset:? I need to replace NAs with "-" but I
>>lose my numeric formatting??fall.estimate <- structure(list(`Salmon` =
>>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992`
>=
>>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA, NA),
>>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA,
>NA),
>>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>>fall.estimatestr(fall.estimate)#convert to class
>dataframefall.estimate
>><- as.data.frame(fall.estimate)
>>#Remove all decimalsfall.estimate[,-1]
>><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>>#Here all my columns get converted to character#Try to convert back to
>>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>>aand my dashes dissapearQuestion: How can I replace my NAs with dashes
>>and keep all my dataframecolumns as numeric??Warning messages:1: In
>>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>>coercion
>>Thanks beforehand
>>
>>
>>??? [[alternative HTML version deleted]]
>>
>>______________________________________________
>>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>https://stat.ethz.ch/mailman/listinfo/r-help
>>PLEASE do read the posting guide
>>http://www.R-project.org/posting-guide.html
>>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.  

	[[alternative HTML version deleted]]


From r@turner @end|ng |rom @uck|@nd@@c@nz  Sun Oct 20 02:19:43 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Sun, 20 Oct 2019 13:19:43 +1300
Subject: [R] Retaining attributes of columns of a data frame when subsetting.
Message-ID: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>


I am writing a function that involves a data frame "X" some columns of 
which have attributes.  I replace X by a data frame with a subset of the 
rows of X:

     X <- X[ok,]

where "ok" is a logical vector.  When I do this the attributes of the 
columns (which I need to retain) are lost (except for the "class" and 
"levels" attributes of columns which are factors).

Is there any sexy way to retain the attributes of the columns?

So far the only approach that I can work out is to extract the 
attributes prior to subsetting and put them back after subsetting.

Like unto:

     SaveAt <- lapply(X,attributes)
     X <- X[ok,]
     lX <- lapply(names(X),function(nm,x,Sat){
                                attributes(x[[nm]]) <- Sat[[nm]]
                                x[[nm]]},x=X,Sat=SaveAt)
     names(lX) <- names(X)
     X <- as.data.frame(lX)

This seems to work, but is rather kludgy.  Is there a better way?

Thanks for any pointers.

cheers,

Rolf Turner

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From rmh @end|ng |rom temp|e@edu  Sun Oct 20 04:00:51 2019
From: rmh @end|ng |rom temp|e@edu (Richard M. Heiberger)
Date: Sat, 19 Oct 2019 22:00:51 -0400
Subject: [R] Retaining attributes of columns of a data frame when
 subsetting.
In-Reply-To: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
References: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
Message-ID: <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>

Look at
methods(as.data.frame)
Define your specialized columns to have a newly defined class, say "myclass".
Then write as.data.frame.myclass
It will be similar to the function you already have in the lapply statement.
Now your statement
X <- X[ok,]
should work.

Rich

On Sat, Oct 19, 2019 at 8:20 PM Rolf Turner <r.turner at auckland.ac.nz> wrote:
>
>
> I am writing a function that involves a data frame "X" some columns of
> which have attributes.  I replace X by a data frame with a subset of the
> rows of X:
>
>      X <- X[ok,]
>
> where "ok" is a logical vector.  When I do this the attributes of the
> columns (which I need to retain) are lost (except for the "class" and
> "levels" attributes of columns which are factors).
>
> Is there any sexy way to retain the attributes of the columns?
>
> So far the only approach that I can work out is to extract the
> attributes prior to subsetting and put them back after subsetting.
>
> Like unto:
>
>      SaveAt <- lapply(X,attributes)
>      X <- X[ok,]
>      lX <- lapply(names(X),function(nm,x,Sat){
>                                 attributes(x[[nm]]) <- Sat[[nm]]
>                                 x[[nm]]},x=X,Sat=SaveAt)
>      names(lX) <- names(X)
>      X <- as.data.frame(lX)
>
> This seems to work, but is rather kludgy.  Is there a better way?
>
> Thanks for any pointers.
>
> cheers,
>
> Rolf Turner
>
> --
> Honorary Research Fellow
> Department of Statistics
> University of Auckland
> Phone: +64-9-373-7599 ext. 88276
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From r@turner @end|ng |rom @uck|@nd@@c@nz  Sun Oct 20 04:13:32 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Sun, 20 Oct 2019 15:13:32 +1300
Subject: [R] Retaining attributes of columns of a data frame when
 subsetting.
In-Reply-To: <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>
References: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
 <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>
Message-ID: <82a2ea0c-cd58-cdd5-8c93-623bb57a385e@auckland.ac.nz>

On 20/10/19 3:00 PM, Richard M. Heiberger wrote:
> Look at
> methods(as.data.frame)
> Define your specialized columns to have a newly defined class, say "myclass".
> Then write as.data.frame.myclass
> It will be similar to the function you already have in the lapply statement.
> Now your statement
> X <- X[ok,]
> should work.

Yes.  That idea does indeed look promising.  I'll check it out.
Thanks.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From @ubh@m|tr@@p@tr@ @end|ng |rom gm@||@com  Sun Oct 20 14:09:00 2019
From: @ubh@m|tr@@p@tr@ @end|ng |rom gm@||@com (Subhamitra Patra)
Date: Sun, 20 Oct 2019 17:39:00 +0530
Subject: [R] Query about calculating the monthly average of daily data
 columns
In-Reply-To: <af92b2007e8a4050af6abe296276e70d@SRVEXCHCM1302.precheza.cz>
References: <CAOFE=kNgBOAT-S1ESiC160EE7F7vtvrMD4AAoCpMZn72z4zuBA@mail.gmail.com>
 <CA+8X3fWHvBqYxRMyAN-vp9WhjX=b7CYZ2BaNHyifKgJh3P2k6g@mail.gmail.com>
 <CAOFE=kOsSR1eKFUeXMvU4A6JvBdt1ZCt66teuD5qfRkCfiwOVw@mail.gmail.com>
 <CA+8X3fVnYXzuS3EHyLpBm1Of3m6aZNkmP+bW46w0HztgAduZ-w@mail.gmail.com>
 <CAOFE=kMAyQs6fH8UAdTvC-H0WnOSTtJe7OF0jj_CLnyZA4bDqQ@mail.gmail.com>
 <fcfb3138fcd74deb8ea541687523fe42@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kMEZa8GaxRiSGrvYV6hsBSBqQA9TjGvE-3uWb=jGYCEKg@mail.gmail.com>
 <539f802bb81040b89408ef874be28244@SRVEXCHCM1302.precheza.cz>
 <af92b2007e8a4050af6abe296276e70d@SRVEXCHCM1302.precheza.cz>
Message-ID: <CAOFE=kPZPcmpPnVxyTqyizV49RiDBm9mYbQgqch9vb4R1h+Dvg@mail.gmail.com>

Dear Sir,

Thank you very much for your suggestions.

Due to certain inconveniences, I was unable to work on your suggestions.

Today I worked on both suggestions and got the result that I really wanted
that monthly averages for each country.

Here, I am asking one more query (just for learning purpose) that if my
country name and its respective variable is in the panel format, and I want
to take the monthly average for each country, how the code will be
arranged. For your convenience, I am providing a small data sample below.

PERMNO DATE Spread
111 19940103 0.025464308
111 19940104 0.064424296
111 19940105 0.018579337
111 19940106 0.018872211
111 19940107 0.065279782
111 19940110 0.063485905
111 19940111 0.018355453
111 19940112 0.064135683
111 19940113 0.063519987
111 19940114 0.018277351
111 19940117 0.018628417
111 19940118 0.065630229
111 19940119 0.018713152
111 19940120 0.019119037
111 19940121 0.068342043
111 19940124 0.020843244
111 19940125 0.019954211
111 19940126 0.018980321
111 19940127 0.066827165
111 19940128 0.067459235
111 19940131 0.068682559
111 19940201 0.02081465
111 19940202 0.068236091
111 19940203 0.068821406
111 19940204 0.020075648
111 19940207 0.066070584
111 19940208 0.066068837
111 19940209 0.019077072
111 19940210 0.065894875
111 19940211 0.018847478
111 19940214 0.065040844
111 19940215 0.01880332
111 19940216 0.018836199
111 19940217 0.066888865
111 19940218 0.067116793
111 19940221 0.068809742
111 19940222 0.068230213
111 19940223 0.069502855
111 19940224 0.070383523
111 19940225 0.020430811
111 19940228 0.067087257
111 19940301 0.066776479
111 19940302 0.019959031
111 19940303 0.066596469
111 19940304 0.019131334
111 19940307 0.019312528
111 19940308 0.067349909
111 19940309 0.068916431
111 19940310 0.068620043
111 19940311 0.070494844
111 19940314 0.071056842
111 19940315 0.071042517
111 19940316 0.072401771
111 19940317 0.071940001
111 19940318 0.07352884
111 19940321 0.072671688
111 19940322 0.072652595
111 19940323 0.021352138
111 19940324 0.069933727
111 19940325 0.068717467
111 19940328 0.020470748
111 19940329 0.020003748
111 19940330 0.065833717
111 19940331 0.065268388
111 19940401 0.018762356
111 19940404 0.064914179
111 19940405 0.064706743
111 19940406 0.018764175
111 19940407 0.06524806
111 19940408 0.018593449
111 19940411 0.064913949
111 19940412 0.01872089
111 19940413 0.018729328
111 19940414 0.018978773
111 19940415 0.065477137
111 19940418 0.064614365
111 19940419 0.064184148
111 19940420 0.018553192
111 19940421 0.066872771
111 19940422 0.06680782
111 19940425 0.067467961
111 19940426 0.02014297
111 19940427 0.062464016
111 19940428 0.062357052
112 19940429 0.000233993
112 19940103 0.000815264
112 19940104 0.000238165
112 19940105 0.000813632
112 19940106 0.000236915
112 19940107 0.000809102
112 19940110 0.000801642
112 19940111 0.000797932
112 19940112 0.000795251
112 19940113 0.000795186
112 19940114 0.000231359
112 19940117 0.000232134
112 19940118 0.000233718
112 19940119 0.000233993
112 19940120 0.000234694
112 19940121 0.000235753
112 19940124 0.000808653
112 19940125 0.000235604
112 19940126 0.000805068
112 19940127 0.000802337
112 19940128 0.000801768
112 19940131 0.000233517
112 19940201 0.000797431
112 19940202 0.000233338
112 19940203 0.000233826
112 19940204 0.000799519
112 19940207 0.000798105
112 19940208 0.000792245
112 19940209 0.000231113
112 19940210 0.000233413
112 19940211 0.000798168
112 19940214 0.000233282
112 19940215 0.000797848
112 19940216 0.000785165
112 19940217 0.000228426
112 19940218 0.000786783
112 19940221 0.00078343
112 19940222 0.000781459
112 19940223 0.000776264
112 19940224 0.000226399
112 19940225 0.000779066
112 19940228 0.000773603
112 19940301 0.000226487
112 19940302 0.000775233
112 19940303 0.000227017
112 19940304 0.000227854
112 19940307 0.000782814
112 19940308 0.000229164
112 19940309 0.000787033
112 19940310 0.000784049
112 19940311 0.000228984
112 19940314 0.00078697
112 19940315 0.000782567
112 19940316 0.000228516
112 19940317 0.000786347
112 19940318 0.000229236
112 19940321 0.000230107
112 19940322 0.000792689
112 19940323 0.000787284
112 19940324 0.000787221
112 19940325 0.000227978
112 19940328 0.000228713
112 19940329 0.000228894
112 19940330 0.000229255
112 19940331 0.000231003
112 19940401 0.000796567
112 19940404 0.000790668
112 19940405 0.00078195
112 19940406 0.000780475
112 19940407 0.000228355
112 19940408 0.000781723
112 19940411 0.000775741
112 19940412 0.000226647
112 19940413 0.000778876
112 19940414 0.000777336
112 19940415 0.000775253
112 19940418 0.000226362
112 19940419 0.000779554
112 19940420 0.000774824
112 19940421 0.000225582
112 19940422 0.000225724
112 19940425 0.000773361
112 19940426 0.0002256
112 19940427 0.000776416
113 19940428 0.000280542
113 19940429 0.000964148
113 19940103 0.000962654
113 19940104 0.000281768
113 19940105 0.000962219
113 19940106 0.000961965
113 19940107 0.000958602
113 19940110 0.000280056
113 19940111 0.000956348
113 19940112 0.000952171
113 19940113 0.000948176
113 19940114 0.000275607
113 19940117 0.000275773
113 19940118 0.000276738
113 19940119 0.000947068
113 19940120 0.000940959
113 19940121 0.000275224
113 19940124 0.000948489
113 19940125 0.000940076
113 19940126 0.0009309
113 19940127 0.000269955
113 19940128 0.000270328
113 19940131 0.000924234
113 19940201 0.000924038
113 19940202 0.000269088
113 19940203 0.000270247
113 19940204 0.000270562
113 19940207 0.00092656
113 19940208 0.000921819
113 19940209 0.000920361
113 19940210 0.000268958
113 19940211 0.000924758
113 19940214 0.000266768
113 19940215 0.000911325
113 19940216 0.000909294
113 19940217 0.000905887
113 19940218 0.000262919
113 19940221 0.000262978
113 19940222 0.000263189
113 19940223 0.000904439
113 19940224 0.000263512
113 19940225 0.000906184
113 19940228 0.000265198
113 19940301 0.000906126
113 19940302 0.000264357
113 19940303 0.000265392
113 19940304 0.000912495
113 19940307 0.000910641
113 19940308 0.000266143
113 19940309 0.000910113
113 19940310 0.000909277
113 19940311 0.000905056
113 19940314 0.00090285
113 19940315 0.000898831
113 19940316 0.000896118
113 19940317 0.000261294
113 19940318 0.000892563
113 19940321 0.000890852
113 19940322 0.00088639
113 19940323 0.000258509
113 19940324 0.000260286
113 19940325 0.000889354
113 19940328 0.000888373
113 19940329 0.000885049
113 19940330 0.000259116
113 19940331 0.000259474
113 19940401 0.000260316
113 19940404 0.000897493
113 19940405 0.000894592
113 19940406 0.000260435
113 19940407 0.000260989
113 19940408 0.000262061
113 19940411 0.000262262
113 19940412 0.000263604
113 19940413 0.000908682
113 19940414 0.000265348
113 19940415 0.000265637
113 19940418 0.00026862
113 19940419 0.000918882
113 19940420 0.000909904
113 19940421 0.000901725
113 19940422 0.000900062
113 19940425 0.000893547
113 19940426 0.000260899
Here, the 1st column is the name of the countries panel which I identified
in number, 2nd is the date column arranged in yyyy-mm-dd format, and 3rd is
the daily variable for each country for 4 months of 1994. I need to take
the monthly average of spread variable for each country (i.e. noted as 111,
112, and 113) in the above example. In short, my monthly spread variable
should be sorted on the basis of both PERMNO (i.e. country identifier), and
months of the particular year.

Please educate me that in this data format, how the average code can be
written?

Thank you very much.



[image: Mailtrack]
<https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&>
Sender
notified by
Mailtrack
<https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&>
10/20/19,
05:31:23 PM

On Mon, Sep 16, 2019 at 4:31 PM PIKAL Petr <petr.pikal at precheza.cz> wrote:

> Original email did not come through (some problems with formating).
>
> Hi
>
> No, on contrary. I **am** suggesting to change date column to real date
> asi it is easy to handle with appropriate functions.
>
> Here are some fake data
>
> > str(spdat)
> 'data.frame':   260 obs. of  3 variables:
> $ dates   : Date, format: "1995-01-01" "1995-01-02" "1995-01-03"
> "1995-01-04" ...
> $ coutryA : num  0.188 0.405 -0.107 -0.596 -0.529 ...
> $ countryB: num  9.4 10.76 11.24 8.26 10.71 ..
>
> > head(spdat)
>        dates    coutryA  countryB
> 1 1995-01-01  0.1875060  9.402851
> 2 1995-01-02  0.4045193 10.755112
> 3 1995-01-03 -0.1073904 11.243663
> 4 1995-01-04 -0.5959683  8.256424
> 5 1995-01-05 -0.5293772 10.705431
> 6 1995-01-06 -0.2228029 10.171461
>
> First I melt it
> spdat.m <- melt(spdat, id.var="dates")
>
> > head(spdat.m)
>        dates variable      value
> 1 1995-01-01  coutryA  0.1875060
> 2 1995-01-02  coutryA  0.4045193
> 3 1995-01-03  coutryA -0.1073904
> 4 1995-01-04  coutryA -0.5959683
> 5 1995-01-05  coutryA -0.5293772
> 6 1995-01-06  coutryA -0.2228029
>
> I do aggregation
>
> > spdat.ag <- aggregate(spdat.m$value, list(format(spdat.m$dates,
> "%m.%Y"), spdat.m$variable), mean)
>
> And now I use dcast  to get required result.
>
> > dcast(spdat.ag, Group.1~Group.2)
> Using x as value column: use value.var to override.
>    Group.1      coutryA  countryB
> 1  01.1995  0.098688137 10.177696
> 2  02.1995  0.352264682  9.609261
> 3  03.1995  0.155521876 10.043503
> 4  04.1995 -0.166092393 10.129844
> 5  05.1995  0.164665188 10.308275
> 6  06.1995  0.260633585 10.210129
> 7  07.1995  0.003671979 10.549016
> 8  08.1995  0.045295990 10.087435
> 9  09.1995 -0.145488206  9.689876
> 10 10.1995 -0.225645950  9.743744
> 11 11.1995  0.030273383 10.025435
> 12 12.1995  0.043557468 10.105626
>
> Cheers
> Petr
>
> Here are the data.
>
> > dput(spdat)
> spdat  <- structure(list(dates = structure(c(9131, 9132, 9133, 9134, 9135,
> 9136, 9137, 9138, 9139, 9140, 9141, 9142, 9143, 9144, 9145, 9146,
> 9147, 9148, 9149, 9150, 9151, 9152, 9162, 9163, 9164, 9165, 9166,
> 9167, 9168, 9169, 9170, 9171, 9172, 9173, 9174, 9175, 9176, 9177,
> 9178, 9179, 9180, 9181, 9190, 9191, 9192, 9193, 9194, 9195, 9196,
> 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205, 9206, 9207,
> 9208, 9209, 9210, 9211, 9212, 9221, 9222, 9223, 9224, 9225, 9226,
> 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237,
> 9238, 9239, 9240, 9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258,
> 9259, 9260, 9261, 9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269,
> 9270, 9271, 9272, 9273, 9282, 9283, 9284, 9285, 9286, 9287, 9288,
> 9289, 9290, 9291, 9292, 9293, 9294, 9295, 9296, 9297, 9298, 9299,
> 9300, 9301, 9302, 9303, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
> 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327, 9328, 9329,
> 9330, 9331, 9332, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350,
> 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360, 9361,
> 9362, 9363, 9364, 9365, 9374, 9375, 9376, 9377, 9378, 9379, 9380,
> 9381, 9382, 9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391,
> 9392, 9393, 9394, 9404, 9405, 9406, 9407, 9408, 9409, 9410, 9411,
> 9412, 9413, 9414, 9415, 9416, 9417, 9418, 9419, 9420, 9421, 9422,
> 9423, 9424, 9456, 9435, 9436, 9437, 9438, 9439, 9440, 9441, 9442,
> 9443, 9444, 9445, 9446, 9447, 9448, 9449, 9450, 9451, 9452, 9453,
> 9454, 9455, 9486, 9465, 9466, 9467, 9468, 9469, 9470, 9471, 9472,
> 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483,
> 9484, 9151), class = "Date"), coutryA = c(0.187506004416315,
> 0.404519257417805, -0.107390371811605, -0.595968278805544,
> -0.529377240936012,
> -0.222802921207767, 0.413182392872818, 0.689673026532298,
> -1.2768723266992,
> -0.506308625809406, 0.113859233745174, -0.0963423819877653,
> 0.323987304768398,
> 1.63846917270538, 0.893233423250338, 0.297732439150487, 0.949323101836486,
> -0.599518074708052, 0.366372319197032, -2.25734971953878,
> -0.190971733204918,
> -0.0874143568874351, 1.46699645184047, 0.00702170238687361,
> 0.11221346278474,
> -0.8060359607624, 0.340842350476532, 0.798838328074708, 0.449214745851041,
> -0.664972890558734, 0.521830282184173, -1.35020467264521,
> -0.95240631225826,
> 1.25607320999849, 1.57018988549379, 0.99477900888445, -0.936218787378207,
> 1.48489932847779, 0.529222943794807, 0.0995675049147771,
> 0.477770516727839,
> 1.64567253670186, -0.0212651530684566, 0.558952796713992,
> 0.0409979382929057,
> 0.428675380654606, 0.0919422583362682, -0.819694497340459,
> 1.23998830450888,
> 0.607498144489643, -1.27724580163097, 1.41634774644371,
> -0.579094515769707,
> 2.02039606694223, 0.0740478208705996, -1.69826944583929,
> -0.321482399813063,
> -0.489198601400924, 2.0066750686302, -1.90624857752322, 0.46762405849973,
> 1.31264724137396, -0.0473627194710677, 0.141362267796145,
> 0.329709761206515,
> 0.518454586458572, -1.39489985851779, -0.388303591187678,
> -0.668922704543522,
> 0.0735115674875065, 1.30737242978235, 0.198503397980751,
> 0.257831448122427,
> -1.31173539205588, -1.45147941969116, 0.359725782295977,
> 0.612882118056585,
> -0.0733768753346202, -0.508349204402508, 1.35776663767231,
> 0.997807735669086,
> -1.41717534266382, -0.894170593324238, -0.68578120845151,
> -0.211509378018794,
> 0.436738904337909, -1.46932152770435, 0.0817388759874159,
> -0.0389350881653141,
> 0.709198476466861, -0.963669144724435, -0.548607422521798,
> -0.896886885575286,
> 0.322231150840934, 1.37327611339939, 0.0310213133870952,
> 0.796577750757324,
> -0.2010067423637, -0.241723752424226, 1.37547329580654, -1.15382202538982,
> 0.101454200596915, 0.273663839664217, 1.8315140887841, 1.86096518756473,
> -0.536393730924719, -0.45845011727266, 1.10226256157127,
> -0.385596991265563,
> 3.20218061566932, -1.25865250042183, -0.13613128784276, 0.483329357746514,
> -0.597187329618306, 0.710977603908319, -1.07945708269043,
> -0.477626236401394,
> 1.51034914684104, 2.35886426985999, -0.0250526828683629,
> -0.29439443478131,
> 0.665774016744828, 0.464027472251246, 0.226658374792016,
> -0.802597030454373,
> 0.825517059805602, -1.11293193130819, -1.27677400513873, 1.60776237113347,
> 1.12490009531342, 0.95767047134623, 0.0475745549797055,
> -0.0591587460876868,
> -0.690617365240342, -1.62111622938126, -1.3545210707469, 1.8607927043106,
> 0.764367674339969, 1.49261525602638, 0.549570728337346, -1.29658399741794,
> -1.6289903797869, 0.00573336252135834, 0.0300702149640632,
> 0.440810830115721,
> 0.663568666361326, -0.126685900835146, -0.00221628368438927,
> 0.815321995886579, -0.499280888368945, -0.271814047751667,
> -0.071025546459042,
> 1.73165491816826, -0.0294770299043331, 0.833605607221529,
> -0.670108794857159,
> -0.303323318026829, 1.29039844459134, -0.818806702120603,
> -0.445515595649677,
> -0.0128796557666887, 0.320923705586147, 0.230597275812536,
> -1.54009153212366,
> -0.294702981688559, 0.581209734391958, 0.121384768986639,
> 0.502914098451111,
> -1.59018268505718, -0.635101104166451, 1.48005776676403,
> -0.25631761189957,
> 0.171947814411552, 0.444646195980014, 0.172655758440111,
> -0.00432159794094836,
> -0.549321974240026, 0.585055026451421, -1.22813371480849,
> 0.846807540195381,
> 0.319629441352597, 0.393525732059709, -1.40275675444594, 1.11062585584811,
> 0.214809571213853, -0.636432711800391, -0.283087127251573,
> -1.46385553207618,
> 0.436928676930225, -1.34231945433777, 0.451281957595763,
> -0.523155001924496,
> -2.69416779107545, 1.5513477373689, 0.989632029400036, 1.34636075948993,
> 0.346147428691405, -0.464527560160041, 0.337233933370495,
> 1.11331396366389,
> -1.00060600083316, -0.734784444487169, 1.40476315358621, 1.01671092179193,
> -0.0144306250829694, -0.923555930346906, -1.02275966525015,
> 0.619422010219383,
> 0.603484309754755, -0.774553813657576, 0.0932792545556387,
> -0.651884521428279,
> -0.61965612647073, -1.22104834441579, -1.31439612639271,
> -2.87707752518163,
> -0.0343801084491906, -0.640678302378492, -1.38653452986558,
> 0.884963139028743,
> -0.657454283462004, 0.462842665244993, -0.20881674837534, 0.6345884135548,
> 0.707165108434729, -0.162090928425892, -0.998662309785188,
> 1.3130254639318,
> 0.191890764940071, -0.0493619237876962, -0.55183232511689,
> 0.470263932874487,
> -0.217088645692971, 0.231550037620628, -0.530406537266415,
> -0.616522469083808,
> 0.329347084038265, 1.49420692610475, 1.91750823142859, 0.753536143872474,
> 0.766584887163714, -0.259803384094296, -0.402463714097741,
> -0.0229799209735185,
> -0.259677990559218, -1.41529707261105, 0.191362852138627,
> 1.54483266684747,
> -1.17947655378489, -0.426265411073274, 0.723010460481118,
> 1.37405142869537,
> -0.374771207936141, 0.0513905365832423, -0.369432731236118,
> -0.945441984794364,
> 0.179506648255554, 0.31971255725438, -1.25117960937319, 2.46228549580083
> ), countryB = c(9.4028512714591, 10.7551115504652, 11.2436629228434,
> 8.25642360904389, 10.7054313972395, 10.1714609666091, 10.3726975056206,
> 10.6594299429162, 8.56250595443296, 10.5612153841067, 8.07612112826519,
> 9.94704207511951, 11.392407273156, 10.4257690445268, 10.6339442533038,
> 10.5314883825356, 10.3506665399033, 10.2426403362978, 10.8437715647564,
> 10.8247200587034, 11.2449815064171, 9.2898697883112, 9.05418978124619,
> 10.6080277672463, 9.19882175737148, 11.3589722806948, 10.4139334238189,
> 9.44305216810892, 9.58426470056472, 8.84208362003176, 10.8125431356391,
> 7.71357872650814, 8.73526671289828, 10.714693958224, 9.49976972594189,
> 9.41896864941478, 7.33073349261249, 10.5268398982262, 9.92255671125184,
> 10.5665378092202, 10.5035704895405, 7.93682068228084, 10.882421050424,
> 9.3237610577468, 8.42128120513304, 9.46103753451174, 10.3472215515392,
> 11.0483414005193, 10.3421689244599, 7.85120280889754, 11.6327644046254,
> 9.57620745972098, 10.6553844719749, 10.8490250129346, 10.2742492933876,
> 9.55428072119304, 9.0976351049804, 10.0731951766966, 10.6956488509516,
> 11.1530744146062, 10.3496303024767, 9.52734980693306, 9.64478424894734,
> 9.28301632295047, 10.9568790570688, 11.6052870914912, 9.58530202776537,
> 11.1338134902295, 8.66685735149472, 11.0230863576875, 10.8000609212302,
> 10.6510296259782, 11.831292326569, 9.53836122448974, 9.55805411377422,
> 9.90336204189518, 9.36377040999133, 11.7041009433341, 9.95628297574831,
> 10.718111342931, 10.4562688422472, 8.85976383099186, 8.94085496683824,
> 8.19538394018434, 10.1058448260449, 9.70821289789561, 9.08757962570738,
> 10.6599997541876, 10.0521137258219, 9.9924295699559, 11.8730269098299,
> 11.2634470795907, 11.3854762443416, 9.56742053529845, 10.4101561978503,
> 9.53376547865009, 9.75410966995361, 9.92804558924886, 8.36231430067066,
> 10.7486459346681, 12.0143881312685, 11.0083060332839, 9.32820954213586,
> 10.8420346742049, 9.73064414798223, 10.7593902723319, 10.976622155215,
> 10.1039774975157, 8.36317871802524, 9.21809894958653, 10.1015362220683,
> 11.4655736295123, 9.65528297274543, 9.67844310028008, 10.1516820910267,
> 8.38764450852642, 10.163558398201, 11.1432463477237, 12.0509818193223,
> 10.9896913965091, 11.1772406550953, 9.14396687337779, 9.93338627749979,
> 10.9548864433126, 8.64911301751956, 11.706463972364, 11.1012846649741,
> 8.7805267197408, 11.5802098773954, 10.2268513542863, 10.3509617168731,
> 9.09646558899397, 11.2706666647314, 11.3984335011704, 11.4808985388742,
> 10.5608771133999, 10.3684356806175, 10.4815588822618, 10.5818867877558,
> 12.2561035284691, 8.6464271477849, 10.3412351841865, 10.7577574534162,
> 11.1124067479261, 9.91627943243343, 10.6356898895291, 10.2107566441478,
> 10.0672734202575, 10.2385787014999, 11.7112606160069, 10.0453801263575,
> 8.84654136100724, 10.2173421609193, 9.27919801705716, 10.4755578829547,
> 7.69340209082122, 9.24705253848083, 10.8415406794597, 8.69603117680965,
> 11.2589214416702, 10.5425642239737, 10.1389355042458, 9.17267675180435,
> 12.3052338002213, 10.0181674985326, 12.2715476751051, 9.64516268052739,
> 10.6305299379912, 10.1829347684655, 9.97983942366781, 10.2559847744715,
> 10.3092266661814, 9.75215330673072, 10.250464278709, 9.31118800061454,
> 10.3310666767171, 9.09703848990093, 10.241195105962, 8.57290406448477,
> 8.98090855172704, 8.64653101832229, 12.6791587435376, 9.56000538681993,
> 10.4062255533723, 11.067091476284, 10.5255014737268, 10.2240941949978,
> 9.13081571869084, 9.5942352120783, 9.2753466212409, 10.2789293993548,
> 8.10255065585342, 9.48751297655077, 8.51198576785003, 9.46310532206947,
> 9.86727270762806, 11.5149248124739, 9.31557156735022, 9.34351230206303,
> 10.022139448869, 11.4111350893792, 8.57891783464065, 10.3761090924661,
> 9.38300408584683, 9.33694577526158, 9.25815555686085, 9.29856853889735,
> 8.4250073823245, 8.83022950824832, 9.1510846172981, 10.2553042376765,
> 10.0739540955956, 9.04955917463259, 10.8927827168631, 9.44611041690694,
> 10.7883395708593, 10.6010088332078, 7.72560864006592, 10.1760839916637,
> 11.5576569894392, 11.384809257294, 8.73504353987083, 9.00585942714512,
> 9.62327893504013, 10.3527072699866, 10.5220100705827, 8.74921668696853,
> 8.56415116683662, 12.1348451793815, 10.9496674323819, 9.64443817181322,
> 9.52977454697087, 10.4281877186725, 8.52701721410292, 11.6911584965782,
> 10.2300108250139, 8.65368821276485, 11.7733431942379, 10.2060233777681,
> 9.57291673029552, 9.82687667895106, 10.5939736188493, 11.2510605726337,
> 10.3383384488323, 9.92301237292945, 10.0164623230529, 10.4939857044034,
> 10.5631769648289, 10.935731043532, 11.0659359187168, 8.51697010486427,
> 9.79512310587405, 9.35132038807071, 11.3286703149903, 10.4621597293933,
> 10.4099459919071, 8.86246315190942, 9.30054044639769, 9.40346575227191,
> 9.59278722974697)), row.names = c(NA, -260L), class = "data.frame")
>
>
>
>
>
> From: Subhamitra Patra <mailto:subhamitra.patra at gmail.com>
> Sent: Friday, September 13, 2019 3:59 PM
> To: PIKAL Petr <mailto:petr.pikal at precheza.cz>; r-help mailing list
> <mailto:r-help at r-project.org>
> Subject: Re: [R] Query about calculating the monthly average of daily data
> columns
>
> Dear PIKAL,
>
> Thank you very much for your suggestion.
>
> I tried your previous suggested code and getting the average value for
> each month for both country A, and B. But in your recent email, you are
> suggesting not to change the date column to real date. If I am going
> through your recently suggested code, i.e.
>
>  "aggregate(value column, list(format(date column, "%m.%Y"), country
> column), mean)"
>
> I am getting an Error that "aggregate(value, list(format(date, "%m.%Y"),
> country), mean) : object 'value' not found".
>
> Here, my query "may I need to define the date column, country column, and
> value column separately?"
>
> Further, I need something the average value result like below in the data
> frame
>
> Month       Country A   Country B
> Jan 1994    26.66         35.78
> Feb 1994    26.13         29.14
>
> so that it will be easy for me to export to excel, and to use for the
> further calculations.
>
> Please suggest me in this regard.
>
> Thank you.
>
>
>
>
>
>
> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
> Sender notified by
>
> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
> 09/13/19, 07:22:53 PM
>
>
>
> On Fri, Sep 13, 2019 at 7:03 PM PIKAL Petr <mailto:petr.pikal at precheza.cz>
> wrote:
> Hi
>
> I am almost 100% sure that you would spare yourself much trouble if you
> changed your date column to real date
>
> ?as.Date
>
> reshape your wide format to long one
> library(reshape2)
> ?melt
>
> to get 3 column data.frame with one date column, one country column and
> one value column
>
> use ?aggregate and ?format to get summary value
>
> something like
> aggregate(value column, list(format(date column, "%m.%Y"), country
> column), mean)
>
> But if you insist to scratch your left ear with right hand accross your
> head, you could continue your way.
>
> Cheers
> Petr
>
> > -----Original Message-----
> > From: R-help <mailto:r-help-bounces at r-project.org> On Behalf Of
> Subhamitra
> > Patra
> > Sent: Friday, September 13, 2019 3:20 PM
> > To: Jim Lemon <mailto:drjimlemon at gmail.com>; r-help mailing list
> <r-help at r-
> > http://project.org>
> > Subject: Re: [R] Query about calculating the monthly average of daily
> data
> > columns
> >
> > Dear Sir,
> >
> > Yes, I understood the logic. But, still, I have a few queries that I
> mentioned
> > below your answers.
> >
> > "# if you only have to get the monthly averages, it can be done this way
> > > spdat$month<-sapply(strsplit(spdat$dates,"-"),"["*,2*)
> > > spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",*3*)"
> > >
> > > B. Here, I need to define the no. of months, and years separately,
> right?
> > > or else what 2, and 3 (in bold) indicates?
> > >
> >
> > To get the grouping variable of sequential months that you want, you only
> > need the month and year values of the dates in the first column. First I
> used
> > the "strsplit" function to split the date field at the hyphens, then used
> > "sapply" to extract ("[") the second (month) and *third (year)* parts as
> two
> > new columns. Because you have more than one year of data, you need the
> > year values or you will group all Januarys, all Februarys and so on.
> > Notice how I pass both of the new columns as a list (a data frame is a
> type of
> > list) in the call to get the mean of each month.
> >
> > 1. Here, as per my understanding, the "3" indicates the 3rd year, right?
> > But, you showed an average for 2 months of the same year. Then, what "3"
> > in the  spdat$year object indicate?
> >
> >
> > C. From this part, I got the exact average values of both January and
> > > February of 1994 for country A, and B. But, in code, I have a query
> > > that I need to define  spdat$returnA, and  spdat$returnB separately
> > > before writing this code, right? Like this, I need to define for each
> > > 84 countries separately with their respective number of months, and
> > > years before writing this code, right?
> > >
> >
> > I don't think so. Because I don't know what your data looks like, I am
> > guessing that for each row, it has columns for each of the 84 countries.
> I
> > don't know what these columns are named, either. Maybe:
> >
> > date             Australia   Belarus   ...    Zambia
> > 01/01/1994   20             21                 22
> > ...
> >
> > Here, due to my misunderstanding about the code, I was wrong. But, what
> > data structure you guessed, it is absolutely right that for each row, I
> have
> > columns for each of the 84 countries. So, I think, I need to define the
> date
> > column with no. of months, and years once for all the countries.
> > Therefore, I got my answer to the first and third question in the
> previous
> > email (what you suggested) that I no need to define the column of each
> > country, as the date, and no. of observations are same for all countries.
> > But, the no. of days are different for each month, and similarly, for
> each
> > year. So, I think I need to define date for each year separately.
> Hence, I have
> > given an example of 12 months, for 2 years (i.e. 1994, and 1995), and
> have
> > written the following code. Please correct me in case I am wrong.
> >
> >  spdat<-data.frame(
> >
> >
> dates=paste(c(1:21,1:20,1:23,1:21,1:22,1:22,1:21,1:23,1:22,1:21,1:22,1:22),c(r
> > ep(1,21),rep(2,20),
> > rep(3,23), rep(4,21),
> >
> rep(5,22),rep(6,22),rep(7,21),rep(8,23),rep(9,22),rep(10,21),rep(11,22),rep(12
> > ,22)
> > ),rep(1994,260)
> >  dates1=
> >
> paste(c(1:22,1:20,1:23,1:20,1:23,1:22,1:21,1:23,1:21,1:22,1:22,1:21),c(rep(1,2
> > 2),rep(2,20),
> > rep(3,23), rep(4,20),
> >
> rep(5,23),rep(6,22),rep(7,21),rep(8,23),rep(9,21),rep(10,21),rep(11,22),rep(12
> > ,21)
> > ),rep(1995,259) ,sep="-")
> >
> > Concerning the exporting of structure of the dataset to excel, I will
> have
> > 12*84 matrix. But, please suggest me the way to proceed for the large
> > sample. I have mentioned below what I understood from your code. Please
> > correct me if I am wrong.
> > 1. I need to define the date for each year as the no. of days in each
> month
> > are different for each year (as mentioned in my above code). For
> instance, in
> > my data file, Jan 1994 has 21 days while Jan 1995 has 22 days.
> > 2. Need to define the date column as character.
> > 3. Need to define the monthly average for each month, and year. So, now
> > code will be as follows.
> >
> spdat$month<-sapply(strsplit(spdat$dates,"-"),"[",2,3,4,5,6,7,8,9,10,11,12)
> >   %%%%As I need all months average sequentially.
> > spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",3)
> >
> > Here, this meaning of "3", I am really unable to get.
> >
> > 4. Need to define each country with each month and year as mentioned in
> > the last part of your code.
> >
> > Please suggest me in this regard.
> >
> > Thank you.
> >
> >
> >
> >
> >
> >
> >
> > [image: Mailtrack]
> > <https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_ca
> > mpaign=signaturevirality5&>
> > Sender
> > notified by
> > Mailtrack
> > <https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_ca
> > mpaign=signaturevirality5&>
> > 09/13/19,
> > 06:41:41 PM
> >
> > On Fri, Sep 13, 2019 at 4:24 PM Jim Lemon <mailto:drjimlemon at gmail.com>
> wrote:
> >
> > > Hi Subhamitra,
> > > I'll try to write my answers adjacent to your questions below.
> > >
> > > On Fri, Sep 13, 2019 at 6:08 PM Subhamitra Patra <
> > > mailto:subhamitra.patra at gmail.com> wrote:
> > >
> > >> Dear Sir,
> > >>
> > >> Thank you very much for your suggestion.
> > >>
> > >> Yes, your suggested code worked. But, actually, I have data from 3rd
> > >> January 1994 to 3rd August 2017 for very large (i.e. for 84
> > >> countries) sample. From this, I have given the example of the years
> > >> up to 2000. Before applying the same code for the long 24 years, I
> > >> want to learn the logic behind the code. Actually, some part of the
> > >> code is not understandable to me which I mentioned in the bold letter
> as
> > follows.
> > >>
> > >> "spdat<-data.frame(
> > >>
>  dates=paste(c(1:30,1:28),c(rep(1,30),rep(2,28)),rep(1994,58),sep="-"),
> > >>   returnA=sample(*15:50*,58,TRUE),returnB=sample(*10:45*,58,TRUE))"
> > >>
> > >> A. Here, I need to define the no. of days in a month, and the no. of
> > >> countries name separately, right? But, what is meant by 15:50, and
> > >> 10:45 in return A, and B respectively?
> > >>
> > >
> > > To paraphrase Donald Trump, this is FAKE DATA! I have no idea what the
> > > real values of return are, so I made them up using the "sample"
> function.
> > > However, this is not meant to mislead anyone, just to show how
> > > whatever numbers are in your data can be used in calculations. The
> > > colon (":") operator creates a sequence of numbers starting with the
> > > one to the left and ending with the one to the right.
> > >
> > >>
> > >> "# if you only have to get the monthly averages, it can be done this
> > >> way
> > >> spdat$month<-sapply(strsplit(spdat$dates,"-"),"["*,2*)
> > >> spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",*3*)"
> > >>
> > >> B. Here, I need to define the no. of months, and years separately,
> right?
> > >> or else what 2, and 3 (in bold) indicates?
> > >>
> > >
> > > To get the grouping variable of sequential months that you want, you
> > > only need the month and year values of the dates in the first column.
> > > First I used the "strsplit" function to split the date field at the
> > > hyphens, then used "sapply" to extract ("[") the second (month) and
> > > third (year) parts as two new columns. Because you have more than one
> > > year of data, you need the year values or you will group all Januarys,
> > > all Februarys and so on. Notice how I pass both of the new columns as
> > > a list (a data frame is a type of
> > > list) in the call to get the mean of each month.
> > >
> > >>
> > >> "# get the averages by month and year - is this correct?
> > >> monthlyA<-by(*spdat$returnA*,spdat[,c("month","year")],mean)
> > >> monthlyB<-by(*spdat$returnB*,spdat[,c("month","year")],mean)"
> > >>
> > >> C. From this part, I got the exact average values of both January and
> > >> February of 1994 for country A, and B. But, in code, I have a query
> > >> that I need to define  spdat$returnA, and  spdat$returnB separately
> > >> before writing this code, right? Like this, I need to define for each
> > >> 84 countries separately with their respective number of months, and
> > >> years before writing this code, right?
> > >>
> > >
> > > I don't think so. Because I don't know what your data looks like, I am
> > > guessing that for each row, it has columns for each of the 84
> > > countries. I don't know what these columns are named, either. Maybe:
> > >
> > > date             Australia   Belarus   ...    Zambia
> > > 01/01/1994   20             21                 22
> > > ...
> > >
> > >
> > >> Yes, after obtaining the monthly average for each country's data, I
> > >> need to use them for further calculations. So, I want to export the
> > >> result to excel. But, until understanding the code, I think I willn't
> > >> able to apply for the entire sample, and cannot be able to discuss
> > >> the format of the resulted column to export to excel.
> > >>
> > >
> > > Say that we perform the grouped mean calculation for the first two
> > > country columns like this:
> > > monmeans<-sapply(spdat[,2:3],by,spdat[,c("month","year")],mean)
> > > monmeans
> > >     Australia  Belarus
> > > [1,]  29.70000 30.43333
> > > [2,]  34.17857 27.39286
> > >
> > > We are presented with a 2x2 matrix of monthly means in just the format
> > > someone might use for importing into Excel. The first row is January
> > > 1994, the second February 1994 and so on. By expanding the columns to
> > > include all the countries in your data, You should have the result you
> want.
> > >
> > > Jim
> > >
> >
> >
> > --
> > *Best Regards,*
> > *Subhamitra Patra*
> > *Phd. Research Scholar*
> > *Department of Humanities and Social Sciences* *Indian Institute of
> > Technology, Kharagpur*
> > *INDIA*
> >
> > [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > mailto:R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-
> > guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> Osobn? ?daje: Informace o zpracov?n? a ochran? osobn?ch ?daj? obchodn?ch
> partner? PRECHEZA a.s. jsou zve?ejn?ny na:
> https://www.precheza.cz/zasady-ochrany-osobnich-udaju/ | Information
> about processing and protection of business partner?s personal data are
> available on website:
> https://www.precheza.cz/en/personal-data-protection-principles/
> D?v?rnost: Tento e-mail a jak?koliv k n?mu p?ipojen? dokumenty jsou
> d?v?rn? a podl?haj? tomuto pr?vn? z?vazn?mu prohl??en? o vylou?en?
> odpov?dnosti: https://www.precheza.cz/01-dovetek/ | This email and any
> documents attached to it may be confidential and are subject to the legally
> binding disclaimer: https://www.precheza.cz/en/01-disclaimer/
>
>
>
> --
> Best Regards,
> Subhamitra Patra
> Phd. Research Scholar
> Department of Humanities and Social Sciences
> Indian Institute of Technology, Kharagpur
> INDIA
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


-- 
*Best Regards,*
*Subhamitra Patra*
*Phd. Research Scholar*
*Department of Humanities and Social Sciences*
*Indian Institute of Technology, Kharagpur*
*INDIA*

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sun Oct 20 14:15:57 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 20 Oct 2019 13:15:57 +0100
Subject: [R] Retaining attributes of columns of a data frame when
 subsetting.
In-Reply-To: <82a2ea0c-cd58-cdd5-8c93-623bb57a385e@auckland.ac.nz>
References: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
 <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>
 <82a2ea0c-cd58-cdd5-8c93-623bb57a385e@auckland.ac.nz>
Message-ID: <22624fa3-d3b7-c9de-744b-e3e2f7358cea@sapo.pt>

Hello,

Richard's idea is good but shouldn't it be `[.myclass` instead?


`[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else 
length(cols) == 1){
   SaveAt <- lapply(X, attributes)
   X <- NextMethod()
   lX <- lapply(names(X),function(nm, x, Sat){
     attributes(x[[nm]]) <- Sat[[nm]]
     x[[nm]]}, x = X, Sat = SaveAt)
   names(lX) <- names(X)
   X <- as.data.frame(lX)
   X
}

X <- data.frame(a = letters[1:5], x = 1:5)
class(X) <- c("myclass", class(X))
attr(X$a, "attr_a1") <- "first_a"
attr(X$a, "attr_a2") <- "second_a"
str(X)

ok <- c(1, 3, 4)
X <- X[ok, ]
str(X)


Hope this helps,

Rui Barradas

?s 03:13 de 20/10/19, Rolf Turner escreveu:
> On 20/10/19 3:00 PM, Richard M. Heiberger wrote:
>> Look at
>> methods(as.data.frame)
>> Define your specialized columns to have a newly defined class, say 
>> "myclass".
>> Then write as.data.frame.myclass
>> It will be similar to the function you already have in the lapply 
>> statement.
>> Now your statement
>> X <- X[ok,]
>> should work.
> 
> Yes.? That idea does indeed look promising.? I'll check it out.
> Thanks.
> 
> cheers,
> 
> Rolf
>


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Sun Oct 20 14:28:27 2019
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Sun, 20 Oct 2019 14:28:27 +0200
Subject: [R] using a variable and a superscript in a legend
Message-ID: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>

Dear listers,

I am trying to pass an expression inlcuding a variable and a 
superpscript to a legend. What I want to obtain is e.g. with densren = 1.25

1.25 ind./km^2

I have tried many variants of the following:

legend=bquote(.(densren) (ind./km)^2)

but if not errors, do obtain

1.25 (ind./km^2)

hence not what I want (no parenthesis, 2 in superscript...)

Any idea about a correct syntax to get what I need ?

Best,

Patrick


	[[alternative HTML version deleted]]


From er|cjberger @end|ng |rom gm@||@com  Sun Oct 20 14:56:17 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Sun, 20 Oct 2019 15:56:17 +0300
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
Message-ID: <CAGgJW77WMnjbvNtcMzqvTA+DMd4AitnLXnSVXYa5wRuU_84S8g@mail.gmail.com>

I did a Google search on

R plot superscript in legend

and the first search result was
https://stackoverflow.com/questions/20453408/superscript-r-squared-for-legend

 which looks like it might address your question.

On Sun, Oct 20, 2019 at 3:30 PM Patrick Giraudoux <
patrick.giraudoux at univ-fcomte.fr> wrote:

> Dear listers,
>
> I am trying to pass an expression inlcuding a variable and a
> superpscript to a legend. What I want to obtain is e.g. with densren = 1.25
>
> 1.25 ind./km^2
>
> I have tried many variants of the following:
>
> legend=bquote(.(densren) (ind./km)^2)
>
> but if not errors, do obtain
>
> 1.25 (ind./km^2)
>
> hence not what I want (no parenthesis, 2 in superscript...)
>
> Any idea about a correct syntax to get what I need ?
>
> Best,
>
> Patrick
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Sun Oct 20 15:05:08 2019
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Sun, 20 Oct 2019 15:05:08 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <CAGgJW77WMnjbvNtcMzqvTA+DMd4AitnLXnSVXYa5wRuU_84S8g@mail.gmail.com>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGgJW77WMnjbvNtcMzqvTA+DMd4AitnLXnSVXYa5wRuU_84S8g@mail.gmail.com>
Message-ID: <64015b3f-d1d4-4f6a-fe34-09c6f633aef3@univ-fcomte.fr>

Thanks Eric. I got it too already (and already tried some variations 
based on it), but to my understanding it does not include a variable 
whose contents is used in the expression as in the case submitted...


Le 20/10/2019 ? 14:56, Eric Berger a ?crit?:
> I did a Google search on
>
> R plot superscript in legend
>
> and the first search result was
> https://stackoverflow.com/questions/20453408/superscript-r-squared-for-legend 
>
> ?which looks like it might address your question.
>
> On Sun, Oct 20, 2019 at 3:30 PM Patrick Giraudoux 
> <patrick.giraudoux at univ-fcomte.fr 
> <mailto:patrick.giraudoux at univ-fcomte.fr>> wrote:
>
>     Dear listers,
>
>     I am trying to pass an expression inlcuding a variable and a
>     superpscript to a legend. What I want to obtain is e.g. with
>     densren = 1.25
>
>     1.25 ind./km^2
>
>     I have tried many variants of the following:
>
>     legend=bquote(.(densren) (ind./km)^2)
>
>     but if not errors, do obtain
>
>     1.25 (ind./km^2)
>
>     hence not what I want (no parenthesis, 2 in superscript...)
>
>     Any idea about a correct syntax to get what I need ?
>
>     Best,
>
>     Patrick
>
>
>     ? ? ? ? [[alternative HTML version deleted]]
>
>     ______________________________________________
>     R-help at r-project.org <mailto:R-help at r-project.org> mailing list --
>     To UNSUBSCRIBE and more, see
>     https://stat.ethz.ch/mailman/listinfo/r-help
>     PLEASE do read the posting guide
>     http://www.R-project.org/posting-guide.html
>     and provide commented, minimal, self-contained, reproducible code.
>


	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Sun Oct 20 16:42:28 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sun, 20 Oct 2019 07:42:28 -0700
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
Message-ID: <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>

Assuming you are using base graphics, your syntax for adding the legend
appears to be wrong.
legend() is a separate function, not a parameter of plot.default afaics.

The following works for me:

> densren <- 1.25
> plot(1:10)
> legend (x="center", legend =bquote(.(densren) (ind./km)^2))

See ?legend

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux <
patrick.giraudoux at univ-fcomte.fr> wrote:

> Dear listers,
>
> I am trying to pass an expression inlcuding a variable and a
> superpscript to a legend. What I want to obtain is e.g. with densren = 1.25
>
> 1.25 ind./km^2
>
> I have tried many variants of the following:
>
> legend=bquote(.(densren) (ind./km)^2)
>
> but if not errors, do obtain
>
> 1.25 (ind./km^2)
>
> hence not what I want (no parenthesis, 2 in superscript...)
>
> Any idea about a correct syntax to get what I need ?
>
> Best,
>
> Patrick
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Sun Oct 20 18:02:30 2019
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Sun, 20 Oct 2019 18:02:30 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
Message-ID: <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>

Thanks Bert and Peter,

Yes Bert, I was aware of the legend() function syntax, and just quoting 
the legend argument within the function.

However, Bert and Peter, I do not understand why it works with your 
absolutely reproducible examples and not in the slightly (not so 
slightly apparently) different context where I used it...

densren=1.25
plot(1:100,1:100,type="n")
legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) 
(ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")

densren=1.25
plot(1:100,1:100,type="n")
legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) * " 
ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"

Probably because the result of bquote() is concatenated in a character 
vector, but how to deal with this ?

Best,

Patrick



Le 20/10/2019 ? 16:42, Bert Gunter a ?crit?:
> Assuming you are using base graphics, your syntax for adding the 
> legend appears to be wrong.
> legend() is a separate function, not a parameter of plot.default afaics.
>
> The following works for me:
>
> > densren <- 1.25
> > plot(1:10)
> > legend (x="center", legend =bquote(.(densren) (ind./km)^2))
>
> See ?legend
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along 
> and sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux 
> <patrick.giraudoux at univ-fcomte.fr 
> <mailto:patrick.giraudoux at univ-fcomte.fr>> wrote:
>
>     Dear listers,
>
>     I am trying to pass an expression inlcuding a variable and a
>     superpscript to a legend. What I want to obtain is e.g. with
>     densren = 1.25
>
>     1.25 ind./km^2
>
>     I have tried many variants of the following:
>
>     legend=bquote(.(densren) (ind./km)^2)
>
>     but if not errors, do obtain
>
>     1.25 (ind./km^2)
>
>     hence not what I want (no parenthesis, 2 in superscript...)
>
>     Any idea about a correct syntax to get what I need ?
>
>     Best,
>
>     Patrick
>
>
>     ? ? ? ? [[alternative HTML version deleted]]
>
>     ______________________________________________
>     R-help at r-project.org <mailto:R-help at r-project.org> mailing list --
>     To UNSUBSCRIBE and more, see
>     https://stat.ethz.ch/mailman/listinfo/r-help
>     PLEASE do read the posting guide
>     http://www.R-project.org/posting-guide.html
>     and provide commented, minimal, self-contained, reproducible code.
>


	[[alternative HTML version deleted]]


From jho|tm@n @end|ng |rom gm@||@com  Sun Oct 20 18:17:43 2019
From: jho|tm@n @end|ng |rom gm@||@com (jim holtman)
Date: Sun, 20 Oct 2019 09:17:43 -0700
Subject: [R] Query about calculating the monthly average of daily data
 columns
In-Reply-To: <CAOFE=kPZPcmpPnVxyTqyizV49RiDBm9mYbQgqch9vb4R1h+Dvg@mail.gmail.com>
References: <CAOFE=kNgBOAT-S1ESiC160EE7F7vtvrMD4AAoCpMZn72z4zuBA@mail.gmail.com>
 <CA+8X3fWHvBqYxRMyAN-vp9WhjX=b7CYZ2BaNHyifKgJh3P2k6g@mail.gmail.com>
 <CAOFE=kOsSR1eKFUeXMvU4A6JvBdt1ZCt66teuD5qfRkCfiwOVw@mail.gmail.com>
 <CA+8X3fVnYXzuS3EHyLpBm1Of3m6aZNkmP+bW46w0HztgAduZ-w@mail.gmail.com>
 <CAOFE=kMAyQs6fH8UAdTvC-H0WnOSTtJe7OF0jj_CLnyZA4bDqQ@mail.gmail.com>
 <fcfb3138fcd74deb8ea541687523fe42@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kMEZa8GaxRiSGrvYV6hsBSBqQA9TjGvE-3uWb=jGYCEKg@mail.gmail.com>
 <539f802bb81040b89408ef874be28244@SRVEXCHCM1302.precheza.cz>
 <af92b2007e8a4050af6abe296276e70d@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kPZPcmpPnVxyTqyizV49RiDBm9mYbQgqch9vb4R1h+Dvg@mail.gmail.com>
Message-ID: <CAAxdm-7SMS=VysFG+Y8-UVr6bZBj5ZkfgkENmORr1hcakPL++A@mail.gmail.com>

Does this do what you want:

> library(tidyverse)

> input <- read_delim("PERMNO DATE Spread
+ 111 19940103 0.025464308
+ 111 19940104 0.064424296
+ 111 19940105 0.018579337
+ 111 19940106 0.018872211
 ..." ... [TRUNCATED]

> # drop last two digits to get the month
> monthly <- input %>%
+   group_by(PERMNO, month = DATE %/% 100) %>%
+   summarise(avg = mean(Spread))
> monthly
# A tibble: 12 x 3
# Groups:   PERMNO [3]
   PERMNO  month      avg
    <dbl>  <dbl>    <dbl>
 1    111 199401 0.0416
 2    111 199402 0.0508
 3    111 199403 0.0567
 4    111 199404 0.0466
 5    112 199401 0.000533
 6    112 199402 0.000593
 7    112 199403 0.000471
 8    112 199404 0.000587
 9    113 199401 0.000692
10    113 199402 0.000591
11    113 199403 0.000677
12    113 199404 0.000555
>


Jim Holtman
*Data Munger Guru*


*What is the problem that you are trying to solve?Tell me what you want to
do, not how you want to do it.*


On Sun, Oct 20, 2019 at 5:10 AM Subhamitra Patra <subhamitra.patra at gmail.com>
wrote:

> Dear Sir,
>
> Thank you very much for your suggestions.
>
> Due to certain inconveniences, I was unable to work on your suggestions.
>
> Today I worked on both suggestions and got the result that I really wanted
> that monthly averages for each country.
>
> Here, I am asking one more query (just for learning purpose) that if my
> country name and its respective variable is in the panel format, and I want
> to take the monthly average for each country, how the code will be
> arranged. For your convenience, I am providing a small data sample below.
>
> PERMNO DATE Spread
> 111 19940103 0.025464308
> 111 19940104 0.064424296
> 111 19940105 0.018579337
> 111 19940106 0.018872211
> 111 19940107 0.065279782
> 111 19940110 0.063485905
> 111 19940111 0.018355453
> 111 19940112 0.064135683
> 111 19940113 0.063519987
> 111 19940114 0.018277351
> 111 19940117 0.018628417
> 111 19940118 0.065630229
> 111 19940119 0.018713152
> 111 19940120 0.019119037
> 111 19940121 0.068342043
> 111 19940124 0.020843244
> 111 19940125 0.019954211
> 111 19940126 0.018980321
> 111 19940127 0.066827165
> 111 19940128 0.067459235
> 111 19940131 0.068682559
> 111 19940201 0.02081465
> 111 19940202 0.068236091
> 111 19940203 0.068821406
> 111 19940204 0.020075648
> 111 19940207 0.066070584
> 111 19940208 0.066068837
> 111 19940209 0.019077072
> 111 19940210 0.065894875
> 111 19940211 0.018847478
> 111 19940214 0.065040844
> 111 19940215 0.01880332
> 111 19940216 0.018836199
> 111 19940217 0.066888865
> 111 19940218 0.067116793
> 111 19940221 0.068809742
> 111 19940222 0.068230213
> 111 19940223 0.069502855
> 111 19940224 0.070383523
> 111 19940225 0.020430811
> 111 19940228 0.067087257
> 111 19940301 0.066776479
> 111 19940302 0.019959031
> 111 19940303 0.066596469
> 111 19940304 0.019131334
> 111 19940307 0.019312528
> 111 19940308 0.067349909
> 111 19940309 0.068916431
> 111 19940310 0.068620043
> 111 19940311 0.070494844
> 111 19940314 0.071056842
> 111 19940315 0.071042517
> 111 19940316 0.072401771
> 111 19940317 0.071940001
> 111 19940318 0.07352884
> 111 19940321 0.072671688
> 111 19940322 0.072652595
> 111 19940323 0.021352138
> 111 19940324 0.069933727
> 111 19940325 0.068717467
> 111 19940328 0.020470748
> 111 19940329 0.020003748
> 111 19940330 0.065833717
> 111 19940331 0.065268388
> 111 19940401 0.018762356
> 111 19940404 0.064914179
> 111 19940405 0.064706743
> 111 19940406 0.018764175
> 111 19940407 0.06524806
> 111 19940408 0.018593449
> 111 19940411 0.064913949
> 111 19940412 0.01872089
> 111 19940413 0.018729328
> 111 19940414 0.018978773
> 111 19940415 0.065477137
> 111 19940418 0.064614365
> 111 19940419 0.064184148
> 111 19940420 0.018553192
> 111 19940421 0.066872771
> 111 19940422 0.06680782
> 111 19940425 0.067467961
> 111 19940426 0.02014297
> 111 19940427 0.062464016
> 111 19940428 0.062357052
> 112 19940429 0.000233993
> 112 19940103 0.000815264
> 112 19940104 0.000238165
> 112 19940105 0.000813632
> 112 19940106 0.000236915
> 112 19940107 0.000809102
> 112 19940110 0.000801642
> 112 19940111 0.000797932
> 112 19940112 0.000795251
> 112 19940113 0.000795186
> 112 19940114 0.000231359
> 112 19940117 0.000232134
> 112 19940118 0.000233718
> 112 19940119 0.000233993
> 112 19940120 0.000234694
> 112 19940121 0.000235753
> 112 19940124 0.000808653
> 112 19940125 0.000235604
> 112 19940126 0.000805068
> 112 19940127 0.000802337
> 112 19940128 0.000801768
> 112 19940131 0.000233517
> 112 19940201 0.000797431
> 112 19940202 0.000233338
> 112 19940203 0.000233826
> 112 19940204 0.000799519
> 112 19940207 0.000798105
> 112 19940208 0.000792245
> 112 19940209 0.000231113
> 112 19940210 0.000233413
> 112 19940211 0.000798168
> 112 19940214 0.000233282
> 112 19940215 0.000797848
> 112 19940216 0.000785165
> 112 19940217 0.000228426
> 112 19940218 0.000786783
> 112 19940221 0.00078343
> 112 19940222 0.000781459
> 112 19940223 0.000776264
> 112 19940224 0.000226399
> 112 19940225 0.000779066
> 112 19940228 0.000773603
> 112 19940301 0.000226487
> 112 19940302 0.000775233
> 112 19940303 0.000227017
> 112 19940304 0.000227854
> 112 19940307 0.000782814
> 112 19940308 0.000229164
> 112 19940309 0.000787033
> 112 19940310 0.000784049
> 112 19940311 0.000228984
> 112 19940314 0.00078697
> 112 19940315 0.000782567
> 112 19940316 0.000228516
> 112 19940317 0.000786347
> 112 19940318 0.000229236
> 112 19940321 0.000230107
> 112 19940322 0.000792689
> 112 19940323 0.000787284
> 112 19940324 0.000787221
> 112 19940325 0.000227978
> 112 19940328 0.000228713
> 112 19940329 0.000228894
> 112 19940330 0.000229255
> 112 19940331 0.000231003
> 112 19940401 0.000796567
> 112 19940404 0.000790668
> 112 19940405 0.00078195
> 112 19940406 0.000780475
> 112 19940407 0.000228355
> 112 19940408 0.000781723
> 112 19940411 0.000775741
> 112 19940412 0.000226647
> 112 19940413 0.000778876
> 112 19940414 0.000777336
> 112 19940415 0.000775253
> 112 19940418 0.000226362
> 112 19940419 0.000779554
> 112 19940420 0.000774824
> 112 19940421 0.000225582
> 112 19940422 0.000225724
> 112 19940425 0.000773361
> 112 19940426 0.0002256
> 112 19940427 0.000776416
> 113 19940428 0.000280542
> 113 19940429 0.000964148
> 113 19940103 0.000962654
> 113 19940104 0.000281768
> 113 19940105 0.000962219
> 113 19940106 0.000961965
> 113 19940107 0.000958602
> 113 19940110 0.000280056
> 113 19940111 0.000956348
> 113 19940112 0.000952171
> 113 19940113 0.000948176
> 113 19940114 0.000275607
> 113 19940117 0.000275773
> 113 19940118 0.000276738
> 113 19940119 0.000947068
> 113 19940120 0.000940959
> 113 19940121 0.000275224
> 113 19940124 0.000948489
> 113 19940125 0.000940076
> 113 19940126 0.0009309
> 113 19940127 0.000269955
> 113 19940128 0.000270328
> 113 19940131 0.000924234
> 113 19940201 0.000924038
> 113 19940202 0.000269088
> 113 19940203 0.000270247
> 113 19940204 0.000270562
> 113 19940207 0.00092656
> 113 19940208 0.000921819
> 113 19940209 0.000920361
> 113 19940210 0.000268958
> 113 19940211 0.000924758
> 113 19940214 0.000266768
> 113 19940215 0.000911325
> 113 19940216 0.000909294
> 113 19940217 0.000905887
> 113 19940218 0.000262919
> 113 19940221 0.000262978
> 113 19940222 0.000263189
> 113 19940223 0.000904439
> 113 19940224 0.000263512
> 113 19940225 0.000906184
> 113 19940228 0.000265198
> 113 19940301 0.000906126
> 113 19940302 0.000264357
> 113 19940303 0.000265392
> 113 19940304 0.000912495
> 113 19940307 0.000910641
> 113 19940308 0.000266143
> 113 19940309 0.000910113
> 113 19940310 0.000909277
> 113 19940311 0.000905056
> 113 19940314 0.00090285
> 113 19940315 0.000898831
> 113 19940316 0.000896118
> 113 19940317 0.000261294
> 113 19940318 0.000892563
> 113 19940321 0.000890852
> 113 19940322 0.00088639
> 113 19940323 0.000258509
> 113 19940324 0.000260286
> 113 19940325 0.000889354
> 113 19940328 0.000888373
> 113 19940329 0.000885049
> 113 19940330 0.000259116
> 113 19940331 0.000259474
> 113 19940401 0.000260316
> 113 19940404 0.000897493
> 113 19940405 0.000894592
> 113 19940406 0.000260435
> 113 19940407 0.000260989
> 113 19940408 0.000262061
> 113 19940411 0.000262262
> 113 19940412 0.000263604
> 113 19940413 0.000908682
> 113 19940414 0.000265348
> 113 19940415 0.000265637
> 113 19940418 0.00026862
> 113 19940419 0.000918882
> 113 19940420 0.000909904
> 113 19940421 0.000901725
> 113 19940422 0.000900062
> 113 19940425 0.000893547
> 113 19940426 0.000260899
> Here, the 1st column is the name of the countries panel which I identified
> in number, 2nd is the date column arranged in yyyy-mm-dd format, and 3rd is
> the daily variable for each country for 4 months of 1994. I need to take
> the monthly average of spread variable for each country (i.e. noted as 111,
> 112, and 113) in the above example. In short, my monthly spread variable
> should be sorted on the basis of both PERMNO (i.e. country identifier), and
> months of the particular year.
>
> Please educate me that in this data format, how the average code can be
> written?
>
> Thank you very much.
>
>
>
> [image: Mailtrack]
> <
> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
> >
> Sender
> notified by
> Mailtrack
> <
> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
> >
> 10/20/19,
> 05:31:23 PM
>
> On Mon, Sep 16, 2019 at 4:31 PM PIKAL Petr <petr.pikal at precheza.cz> wrote:
>
> > Original email did not come through (some problems with formating).
> >
> > Hi
> >
> > No, on contrary. I **am** suggesting to change date column to real date
> > asi it is easy to handle with appropriate functions.
> >
> > Here are some fake data
> >
> > > str(spdat)
> > 'data.frame':   260 obs. of  3 variables:
> > $ dates   : Date, format: "1995-01-01" "1995-01-02" "1995-01-03"
> > "1995-01-04" ...
> > $ coutryA : num  0.188 0.405 -0.107 -0.596 -0.529 ...
> > $ countryB: num  9.4 10.76 11.24 8.26 10.71 ..
> >
> > > head(spdat)
> >        dates    coutryA  countryB
> > 1 1995-01-01  0.1875060  9.402851
> > 2 1995-01-02  0.4045193 10.755112
> > 3 1995-01-03 -0.1073904 11.243663
> > 4 1995-01-04 -0.5959683  8.256424
> > 5 1995-01-05 -0.5293772 10.705431
> > 6 1995-01-06 -0.2228029 10.171461
> >
> > First I melt it
> > spdat.m <- melt(spdat, id.var="dates")
> >
> > > head(spdat.m)
> >        dates variable      value
> > 1 1995-01-01  coutryA  0.1875060
> > 2 1995-01-02  coutryA  0.4045193
> > 3 1995-01-03  coutryA -0.1073904
> > 4 1995-01-04  coutryA -0.5959683
> > 5 1995-01-05  coutryA -0.5293772
> > 6 1995-01-06  coutryA -0.2228029
> >
> > I do aggregation
> >
> > > spdat.ag <- aggregate(spdat.m$value, list(format(spdat.m$dates,
> > "%m.%Y"), spdat.m$variable), mean)
> >
> > And now I use dcast  to get required result.
> >
> > > dcast(spdat.ag, Group.1~Group.2)
> > Using x as value column: use value.var to override.
> >    Group.1      coutryA  countryB
> > 1  01.1995  0.098688137 10.177696
> > 2  02.1995  0.352264682  9.609261
> > 3  03.1995  0.155521876 10.043503
> > 4  04.1995 -0.166092393 10.129844
> > 5  05.1995  0.164665188 10.308275
> > 6  06.1995  0.260633585 10.210129
> > 7  07.1995  0.003671979 10.549016
> > 8  08.1995  0.045295990 10.087435
> > 9  09.1995 -0.145488206  9.689876
> > 10 10.1995 -0.225645950  9.743744
> > 11 11.1995  0.030273383 10.025435
> > 12 12.1995  0.043557468 10.105626
> >
> > Cheers
> > Petr
> >
> > Here are the data.
> >
> > > dput(spdat)
> > spdat  <- structure(list(dates = structure(c(9131, 9132, 9133, 9134,
> 9135,
> > 9136, 9137, 9138, 9139, 9140, 9141, 9142, 9143, 9144, 9145, 9146,
> > 9147, 9148, 9149, 9150, 9151, 9152, 9162, 9163, 9164, 9165, 9166,
> > 9167, 9168, 9169, 9170, 9171, 9172, 9173, 9174, 9175, 9176, 9177,
> > 9178, 9179, 9180, 9181, 9190, 9191, 9192, 9193, 9194, 9195, 9196,
> > 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205, 9206, 9207,
> > 9208, 9209, 9210, 9211, 9212, 9221, 9222, 9223, 9224, 9225, 9226,
> > 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237,
> > 9238, 9239, 9240, 9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258,
> > 9259, 9260, 9261, 9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269,
> > 9270, 9271, 9272, 9273, 9282, 9283, 9284, 9285, 9286, 9287, 9288,
> > 9289, 9290, 9291, 9292, 9293, 9294, 9295, 9296, 9297, 9298, 9299,
> > 9300, 9301, 9302, 9303, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
> > 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327, 9328, 9329,
> > 9330, 9331, 9332, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350,
> > 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360, 9361,
> > 9362, 9363, 9364, 9365, 9374, 9375, 9376, 9377, 9378, 9379, 9380,
> > 9381, 9382, 9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391,
> > 9392, 9393, 9394, 9404, 9405, 9406, 9407, 9408, 9409, 9410, 9411,
> > 9412, 9413, 9414, 9415, 9416, 9417, 9418, 9419, 9420, 9421, 9422,
> > 9423, 9424, 9456, 9435, 9436, 9437, 9438, 9439, 9440, 9441, 9442,
> > 9443, 9444, 9445, 9446, 9447, 9448, 9449, 9450, 9451, 9452, 9453,
> > 9454, 9455, 9486, 9465, 9466, 9467, 9468, 9469, 9470, 9471, 9472,
> > 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483,
> > 9484, 9151), class = "Date"), coutryA = c(0.187506004416315,
> > 0.404519257417805, -0.107390371811605, -0.595968278805544,
> > -0.529377240936012,
> > -0.222802921207767, 0.413182392872818, 0.689673026532298,
> > -1.2768723266992,
> > -0.506308625809406, 0.113859233745174, -0.0963423819877653,
> > 0.323987304768398,
> > 1.63846917270538, 0.893233423250338, 0.297732439150487,
> 0.949323101836486,
> > -0.599518074708052, 0.366372319197032, -2.25734971953878,
> > -0.190971733204918,
> > -0.0874143568874351, 1.46699645184047, 0.00702170238687361,
> > 0.11221346278474,
> > -0.8060359607624, 0.340842350476532, 0.798838328074708,
> 0.449214745851041,
> > -0.664972890558734, 0.521830282184173, -1.35020467264521,
> > -0.95240631225826,
> > 1.25607320999849, 1.57018988549379, 0.99477900888445, -0.936218787378207,
> > 1.48489932847779, 0.529222943794807, 0.0995675049147771,
> > 0.477770516727839,
> > 1.64567253670186, -0.0212651530684566, 0.558952796713992,
> > 0.0409979382929057,
> > 0.428675380654606, 0.0919422583362682, -0.819694497340459,
> > 1.23998830450888,
> > 0.607498144489643, -1.27724580163097, 1.41634774644371,
> > -0.579094515769707,
> > 2.02039606694223, 0.0740478208705996, -1.69826944583929,
> > -0.321482399813063,
> > -0.489198601400924, 2.0066750686302, -1.90624857752322, 0.46762405849973,
> > 1.31264724137396, -0.0473627194710677, 0.141362267796145,
> > 0.329709761206515,
> > 0.518454586458572, -1.39489985851779, -0.388303591187678,
> > -0.668922704543522,
> > 0.0735115674875065, 1.30737242978235, 0.198503397980751,
> > 0.257831448122427,
> > -1.31173539205588, -1.45147941969116, 0.359725782295977,
> > 0.612882118056585,
> > -0.0733768753346202, -0.508349204402508, 1.35776663767231,
> > 0.997807735669086,
> > -1.41717534266382, -0.894170593324238, -0.68578120845151,
> > -0.211509378018794,
> > 0.436738904337909, -1.46932152770435, 0.0817388759874159,
> > -0.0389350881653141,
> > 0.709198476466861, -0.963669144724435, -0.548607422521798,
> > -0.896886885575286,
> > 0.322231150840934, 1.37327611339939, 0.0310213133870952,
> > 0.796577750757324,
> > -0.2010067423637, -0.241723752424226, 1.37547329580654,
> -1.15382202538982,
> > 0.101454200596915, 0.273663839664217, 1.8315140887841, 1.86096518756473,
> > -0.536393730924719, -0.45845011727266, 1.10226256157127,
> > -0.385596991265563,
> > 3.20218061566932, -1.25865250042183, -0.13613128784276,
> 0.483329357746514,
> > -0.597187329618306, 0.710977603908319, -1.07945708269043,
> > -0.477626236401394,
> > 1.51034914684104, 2.35886426985999, -0.0250526828683629,
> > -0.29439443478131,
> > 0.665774016744828, 0.464027472251246, 0.226658374792016,
> > -0.802597030454373,
> > 0.825517059805602, -1.11293193130819, -1.27677400513873,
> 1.60776237113347,
> > 1.12490009531342, 0.95767047134623, 0.0475745549797055,
> > -0.0591587460876868,
> > -0.690617365240342, -1.62111622938126, -1.3545210707469, 1.8607927043106,
> > 0.764367674339969, 1.49261525602638, 0.549570728337346,
> -1.29658399741794,
> > -1.6289903797869, 0.00573336252135834, 0.0300702149640632,
> > 0.440810830115721,
> > 0.663568666361326, -0.126685900835146, -0.00221628368438927,
> > 0.815321995886579, -0.499280888368945, -0.271814047751667,
> > -0.071025546459042,
> > 1.73165491816826, -0.0294770299043331, 0.833605607221529,
> > -0.670108794857159,
> > -0.303323318026829, 1.29039844459134, -0.818806702120603,
> > -0.445515595649677,
> > -0.0128796557666887, 0.320923705586147, 0.230597275812536,
> > -1.54009153212366,
> > -0.294702981688559, 0.581209734391958, 0.121384768986639,
> > 0.502914098451111,
> > -1.59018268505718, -0.635101104166451, 1.48005776676403,
> > -0.25631761189957,
> > 0.171947814411552, 0.444646195980014, 0.172655758440111,
> > -0.00432159794094836,
> > -0.549321974240026, 0.585055026451421, -1.22813371480849,
> > 0.846807540195381,
> > 0.319629441352597, 0.393525732059709, -1.40275675444594,
> 1.11062585584811,
> > 0.214809571213853, -0.636432711800391, -0.283087127251573,
> > -1.46385553207618,
> > 0.436928676930225, -1.34231945433777, 0.451281957595763,
> > -0.523155001924496,
> > -2.69416779107545, 1.5513477373689, 0.989632029400036, 1.34636075948993,
> > 0.346147428691405, -0.464527560160041, 0.337233933370495,
> > 1.11331396366389,
> > -1.00060600083316, -0.734784444487169, 1.40476315358621,
> 1.01671092179193,
> > -0.0144306250829694, -0.923555930346906, -1.02275966525015,
> > 0.619422010219383,
> > 0.603484309754755, -0.774553813657576, 0.0932792545556387,
> > -0.651884521428279,
> > -0.61965612647073, -1.22104834441579, -1.31439612639271,
> > -2.87707752518163,
> > -0.0343801084491906, -0.640678302378492, -1.38653452986558,
> > 0.884963139028743,
> > -0.657454283462004, 0.462842665244993, -0.20881674837534,
> 0.6345884135548,
> > 0.707165108434729, -0.162090928425892, -0.998662309785188,
> > 1.3130254639318,
> > 0.191890764940071, -0.0493619237876962, -0.55183232511689,
> > 0.470263932874487,
> > -0.217088645692971, 0.231550037620628, -0.530406537266415,
> > -0.616522469083808,
> > 0.329347084038265, 1.49420692610475, 1.91750823142859, 0.753536143872474,
> > 0.766584887163714, -0.259803384094296, -0.402463714097741,
> > -0.0229799209735185,
> > -0.259677990559218, -1.41529707261105, 0.191362852138627,
> > 1.54483266684747,
> > -1.17947655378489, -0.426265411073274, 0.723010460481118,
> > 1.37405142869537,
> > -0.374771207936141, 0.0513905365832423, -0.369432731236118,
> > -0.945441984794364,
> > 0.179506648255554, 0.31971255725438, -1.25117960937319, 2.46228549580083
> > ), countryB = c(9.4028512714591, 10.7551115504652, 11.2436629228434,
> > 8.25642360904389, 10.7054313972395, 10.1714609666091, 10.3726975056206,
> > 10.6594299429162, 8.56250595443296, 10.5612153841067, 8.07612112826519,
> > 9.94704207511951, 11.392407273156, 10.4257690445268, 10.6339442533038,
> > 10.5314883825356, 10.3506665399033, 10.2426403362978, 10.8437715647564,
> > 10.8247200587034, 11.2449815064171, 9.2898697883112, 9.05418978124619,
> > 10.6080277672463, 9.19882175737148, 11.3589722806948, 10.4139334238189,
> > 9.44305216810892, 9.58426470056472, 8.84208362003176, 10.8125431356391,
> > 7.71357872650814, 8.73526671289828, 10.714693958224, 9.49976972594189,
> > 9.41896864941478, 7.33073349261249, 10.5268398982262, 9.92255671125184,
> > 10.5665378092202, 10.5035704895405, 7.93682068228084, 10.882421050424,
> > 9.3237610577468, 8.42128120513304, 9.46103753451174, 10.3472215515392,
> > 11.0483414005193, 10.3421689244599, 7.85120280889754, 11.6327644046254,
> > 9.57620745972098, 10.6553844719749, 10.8490250129346, 10.2742492933876,
> > 9.55428072119304, 9.0976351049804, 10.0731951766966, 10.6956488509516,
> > 11.1530744146062, 10.3496303024767, 9.52734980693306, 9.64478424894734,
> > 9.28301632295047, 10.9568790570688, 11.6052870914912, 9.58530202776537,
> > 11.1338134902295, 8.66685735149472, 11.0230863576875, 10.8000609212302,
> > 10.6510296259782, 11.831292326569, 9.53836122448974, 9.55805411377422,
> > 9.90336204189518, 9.36377040999133, 11.7041009433341, 9.95628297574831,
> > 10.718111342931, 10.4562688422472, 8.85976383099186, 8.94085496683824,
> > 8.19538394018434, 10.1058448260449, 9.70821289789561, 9.08757962570738,
> > 10.6599997541876, 10.0521137258219, 9.9924295699559, 11.8730269098299,
> > 11.2634470795907, 11.3854762443416, 9.56742053529845, 10.4101561978503,
> > 9.53376547865009, 9.75410966995361, 9.92804558924886, 8.36231430067066,
> > 10.7486459346681, 12.0143881312685, 11.0083060332839, 9.32820954213586,
> > 10.8420346742049, 9.73064414798223, 10.7593902723319, 10.976622155215,
> > 10.1039774975157, 8.36317871802524, 9.21809894958653, 10.1015362220683,
> > 11.4655736295123, 9.65528297274543, 9.67844310028008, 10.1516820910267,
> > 8.38764450852642, 10.163558398201, 11.1432463477237, 12.0509818193223,
> > 10.9896913965091, 11.1772406550953, 9.14396687337779, 9.93338627749979,
> > 10.9548864433126, 8.64911301751956, 11.706463972364, 11.1012846649741,
> > 8.7805267197408, 11.5802098773954, 10.2268513542863, 10.3509617168731,
> > 9.09646558899397, 11.2706666647314, 11.3984335011704, 11.4808985388742,
> > 10.5608771133999, 10.3684356806175, 10.4815588822618, 10.5818867877558,
> > 12.2561035284691, 8.6464271477849, 10.3412351841865, 10.7577574534162,
> > 11.1124067479261, 9.91627943243343, 10.6356898895291, 10.2107566441478,
> > 10.0672734202575, 10.2385787014999, 11.7112606160069, 10.0453801263575,
> > 8.84654136100724, 10.2173421609193, 9.27919801705716, 10.4755578829547,
> > 7.69340209082122, 9.24705253848083, 10.8415406794597, 8.69603117680965,
> > 11.2589214416702, 10.5425642239737, 10.1389355042458, 9.17267675180435,
> > 12.3052338002213, 10.0181674985326, 12.2715476751051, 9.64516268052739,
> > 10.6305299379912, 10.1829347684655, 9.97983942366781, 10.2559847744715,
> > 10.3092266661814, 9.75215330673072, 10.250464278709, 9.31118800061454,
> > 10.3310666767171, 9.09703848990093, 10.241195105962, 8.57290406448477,
> > 8.98090855172704, 8.64653101832229, 12.6791587435376, 9.56000538681993,
> > 10.4062255533723, 11.067091476284, 10.5255014737268, 10.2240941949978,
> > 9.13081571869084, 9.5942352120783, 9.2753466212409, 10.2789293993548,
> > 8.10255065585342, 9.48751297655077, 8.51198576785003, 9.46310532206947,
> > 9.86727270762806, 11.5149248124739, 9.31557156735022, 9.34351230206303,
> > 10.022139448869, 11.4111350893792, 8.57891783464065, 10.3761090924661,
> > 9.38300408584683, 9.33694577526158, 9.25815555686085, 9.29856853889735,
> > 8.4250073823245, 8.83022950824832, 9.1510846172981, 10.2553042376765,
> > 10.0739540955956, 9.04955917463259, 10.8927827168631, 9.44611041690694,
> > 10.7883395708593, 10.6010088332078, 7.72560864006592, 10.1760839916637,
> > 11.5576569894392, 11.384809257294, 8.73504353987083, 9.00585942714512,
> > 9.62327893504013, 10.3527072699866, 10.5220100705827, 8.74921668696853,
> > 8.56415116683662, 12.1348451793815, 10.9496674323819, 9.64443817181322,
> > 9.52977454697087, 10.4281877186725, 8.52701721410292, 11.6911584965782,
> > 10.2300108250139, 8.65368821276485, 11.7733431942379, 10.2060233777681,
> > 9.57291673029552, 9.82687667895106, 10.5939736188493, 11.2510605726337,
> > 10.3383384488323, 9.92301237292945, 10.0164623230529, 10.4939857044034,
> > 10.5631769648289, 10.935731043532, 11.0659359187168, 8.51697010486427,
> > 9.79512310587405, 9.35132038807071, 11.3286703149903, 10.4621597293933,
> > 10.4099459919071, 8.86246315190942, 9.30054044639769, 9.40346575227191,
> > 9.59278722974697)), row.names = c(NA, -260L), class = "data.frame")
> >
> >
> >
> >
> >
> > From: Subhamitra Patra <mailto:subhamitra.patra at gmail.com>
> > Sent: Friday, September 13, 2019 3:59 PM
> > To: PIKAL Petr <mailto:petr.pikal at precheza.cz>; r-help mailing list
> > <mailto:r-help at r-project.org>
> > Subject: Re: [R] Query about calculating the monthly average of daily
> data
> > columns
> >
> > Dear PIKAL,
> >
> > Thank you very much for your suggestion.
> >
> > I tried your previous suggested code and getting the average value for
> > each month for both country A, and B. But in your recent email, you are
> > suggesting not to change the date column to real date. If I am going
> > through your recently suggested code, i.e.
> >
> >  "aggregate(value column, list(format(date column, "%m.%Y"), country
> > column), mean)"
> >
> > I am getting an Error that "aggregate(value, list(format(date, "%m.%Y"),
> > country), mean) : object 'value' not found".
> >
> > Here, my query "may I need to define the date column, country column, and
> > value column separately?"
> >
> > Further, I need something the average value result like below in the data
> > frame
> >
> > Month       Country A   Country B
> > Jan 1994    26.66         35.78
> > Feb 1994    26.13         29.14
> >
> > so that it will be easy for me to export to excel, and to use for the
> > further calculations.
> >
> > Please suggest me in this regard.
> >
> > Thank you.
> >
> >
> >
> >
> >
> >
> >
> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
> > Sender notified by
> >
> >
> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
> > 09/13/19, 07:22:53 PM
> >
> >
> >
> > On Fri, Sep 13, 2019 at 7:03 PM PIKAL Petr <mailto:
> petr.pikal at precheza.cz>
> > wrote:
> > Hi
> >
> > I am almost 100% sure that you would spare yourself much trouble if you
> > changed your date column to real date
> >
> > ?as.Date
> >
> > reshape your wide format to long one
> > library(reshape2)
> > ?melt
> >
> > to get 3 column data.frame with one date column, one country column and
> > one value column
> >
> > use ?aggregate and ?format to get summary value
> >
> > something like
> > aggregate(value column, list(format(date column, "%m.%Y"), country
> > column), mean)
> >
> > But if you insist to scratch your left ear with right hand accross your
> > head, you could continue your way.
> >
> > Cheers
> > Petr
> >
> > > -----Original Message-----
> > > From: R-help <mailto:r-help-bounces at r-project.org> On Behalf Of
> > Subhamitra
> > > Patra
> > > Sent: Friday, September 13, 2019 3:20 PM
> > > To: Jim Lemon <mailto:drjimlemon at gmail.com>; r-help mailing list
> > <r-help at r-
> > > http://project.org>
> > > Subject: Re: [R] Query about calculating the monthly average of daily
> > data
> > > columns
> > >
> > > Dear Sir,
> > >
> > > Yes, I understood the logic. But, still, I have a few queries that I
> > mentioned
> > > below your answers.
> > >
> > > "# if you only have to get the monthly averages, it can be done this
> way
> > > > spdat$month<-sapply(strsplit(spdat$dates,"-"),"["*,2*)
> > > > spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",*3*)"
> > > >
> > > > B. Here, I need to define the no. of months, and years separately,
> > right?
> > > > or else what 2, and 3 (in bold) indicates?
> > > >
> > >
> > > To get the grouping variable of sequential months that you want, you
> only
> > > need the month and year values of the dates in the first column. First
> I
> > used
> > > the "strsplit" function to split the date field at the hyphens, then
> used
> > > "sapply" to extract ("[") the second (month) and *third (year)* parts
> as
> > two
> > > new columns. Because you have more than one year of data, you need the
> > > year values or you will group all Januarys, all Februarys and so on.
> > > Notice how I pass both of the new columns as a list (a data frame is a
> > type of
> > > list) in the call to get the mean of each month.
> > >
> > > 1. Here, as per my understanding, the "3" indicates the 3rd year,
> right?
> > > But, you showed an average for 2 months of the same year. Then, what
> "3"
> > > in the  spdat$year object indicate?
> > >
> > >
> > > C. From this part, I got the exact average values of both January and
> > > > February of 1994 for country A, and B. But, in code, I have a query
> > > > that I need to define  spdat$returnA, and  spdat$returnB separately
> > > > before writing this code, right? Like this, I need to define for each
> > > > 84 countries separately with their respective number of months, and
> > > > years before writing this code, right?
> > > >
> > >
> > > I don't think so. Because I don't know what your data looks like, I am
> > > guessing that for each row, it has columns for each of the 84
> countries.
> > I
> > > don't know what these columns are named, either. Maybe:
> > >
> > > date             Australia   Belarus   ...    Zambia
> > > 01/01/1994   20             21                 22
> > > ...
> > >
> > > Here, due to my misunderstanding about the code, I was wrong. But, what
> > > data structure you guessed, it is absolutely right that for each row, I
> > have
> > > columns for each of the 84 countries. So, I think, I need to define the
> > date
> > > column with no. of months, and years once for all the countries.
> > > Therefore, I got my answer to the first and third question in the
> > previous
> > > email (what you suggested) that I no need to define the column of each
> > > country, as the date, and no. of observations are same for all
> countries.
> > > But, the no. of days are different for each month, and similarly, for
> > each
> > > year. So, I think I need to define date for each year separately.
> > Hence, I have
> > > given an example of 12 months, for 2 years (i.e. 1994, and 1995), and
> > have
> > > written the following code. Please correct me in case I am wrong.
> > >
> > >  spdat<-data.frame(
> > >
> > >
> >
> dates=paste(c(1:21,1:20,1:23,1:21,1:22,1:22,1:21,1:23,1:22,1:21,1:22,1:22),c(r
> > > ep(1,21),rep(2,20),
> > > rep(3,23), rep(4,21),
> > >
> >
> rep(5,22),rep(6,22),rep(7,21),rep(8,23),rep(9,22),rep(10,21),rep(11,22),rep(12
> > > ,22)
> > > ),rep(1994,260)
> > >  dates1=
> > >
> >
> paste(c(1:22,1:20,1:23,1:20,1:23,1:22,1:21,1:23,1:21,1:22,1:22,1:21),c(rep(1,2
> > > 2),rep(2,20),
> > > rep(3,23), rep(4,20),
> > >
> >
> rep(5,23),rep(6,22),rep(7,21),rep(8,23),rep(9,21),rep(10,21),rep(11,22),rep(12
> > > ,21)
> > > ),rep(1995,259) ,sep="-")
> > >
> > > Concerning the exporting of structure of the dataset to excel, I will
> > have
> > > 12*84 matrix. But, please suggest me the way to proceed for the large
> > > sample. I have mentioned below what I understood from your code. Please
> > > correct me if I am wrong.
> > > 1. I need to define the date for each year as the no. of days in each
> > month
> > > are different for each year (as mentioned in my above code). For
> > instance, in
> > > my data file, Jan 1994 has 21 days while Jan 1995 has 22 days.
> > > 2. Need to define the date column as character.
> > > 3. Need to define the monthly average for each month, and year. So, now
> > > code will be as follows.
> > >
> >
> spdat$month<-sapply(strsplit(spdat$dates,"-"),"[",2,3,4,5,6,7,8,9,10,11,12)
> > >   %%%%As I need all months average sequentially.
> > > spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",3)
> > >
> > > Here, this meaning of "3", I am really unable to get.
> > >
> > > 4. Need to define each country with each month and year as mentioned in
> > > the last part of your code.
> > >
> > > Please suggest me in this regard.
> > >
> > > Thank you.
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > > [image: Mailtrack]
> > > <https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_ca
> > > mpaign=signaturevirality5&>
> > > Sender
> > > notified by
> > > Mailtrack
> > > <https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_ca
> > > mpaign=signaturevirality5&>
> > > 09/13/19,
> > > 06:41:41 PM
> > >
> > > On Fri, Sep 13, 2019 at 4:24 PM Jim Lemon <mailto:drjimlemon at gmail.com
> >
> > wrote:
> > >
> > > > Hi Subhamitra,
> > > > I'll try to write my answers adjacent to your questions below.
> > > >
> > > > On Fri, Sep 13, 2019 at 6:08 PM Subhamitra Patra <
> > > > mailto:subhamitra.patra at gmail.com> wrote:
> > > >
> > > >> Dear Sir,
> > > >>
> > > >> Thank you very much for your suggestion.
> > > >>
> > > >> Yes, your suggested code worked. But, actually, I have data from 3rd
> > > >> January 1994 to 3rd August 2017 for very large (i.e. for 84
> > > >> countries) sample. From this, I have given the example of the years
> > > >> up to 2000. Before applying the same code for the long 24 years, I
> > > >> want to learn the logic behind the code. Actually, some part of the
> > > >> code is not understandable to me which I mentioned in the bold
> letter
> > as
> > > follows.
> > > >>
> > > >> "spdat<-data.frame(
> > > >>
> >  dates=paste(c(1:30,1:28),c(rep(1,30),rep(2,28)),rep(1994,58),sep="-"),
> > > >>   returnA=sample(*15:50*,58,TRUE),returnB=sample(*10:45*,58,TRUE))"
> > > >>
> > > >> A. Here, I need to define the no. of days in a month, and the no. of
> > > >> countries name separately, right? But, what is meant by 15:50, and
> > > >> 10:45 in return A, and B respectively?
> > > >>
> > > >
> > > > To paraphrase Donald Trump, this is FAKE DATA! I have no idea what
> the
> > > > real values of return are, so I made them up using the "sample"
> > function.
> > > > However, this is not meant to mislead anyone, just to show how
> > > > whatever numbers are in your data can be used in calculations. The
> > > > colon (":") operator creates a sequence of numbers starting with the
> > > > one to the left and ending with the one to the right.
> > > >
> > > >>
> > > >> "# if you only have to get the monthly averages, it can be done this
> > > >> way
> > > >> spdat$month<-sapply(strsplit(spdat$dates,"-"),"["*,2*)
> > > >> spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",*3*)"
> > > >>
> > > >> B. Here, I need to define the no. of months, and years separately,
> > right?
> > > >> or else what 2, and 3 (in bold) indicates?
> > > >>
> > > >
> > > > To get the grouping variable of sequential months that you want, you
> > > > only need the month and year values of the dates in the first column.
> > > > First I used the "strsplit" function to split the date field at the
> > > > hyphens, then used "sapply" to extract ("[") the second (month) and
> > > > third (year) parts as two new columns. Because you have more than one
> > > > year of data, you need the year values or you will group all
> Januarys,
> > > > all Februarys and so on. Notice how I pass both of the new columns as
> > > > a list (a data frame is a type of
> > > > list) in the call to get the mean of each month.
> > > >
> > > >>
> > > >> "# get the averages by month and year - is this correct?
> > > >> monthlyA<-by(*spdat$returnA*,spdat[,c("month","year")],mean)
> > > >> monthlyB<-by(*spdat$returnB*,spdat[,c("month","year")],mean)"
> > > >>
> > > >> C. From this part, I got the exact average values of both January
> and
> > > >> February of 1994 for country A, and B. But, in code, I have a query
> > > >> that I need to define  spdat$returnA, and  spdat$returnB separately
> > > >> before writing this code, right? Like this, I need to define for
> each
> > > >> 84 countries separately with their respective number of months, and
> > > >> years before writing this code, right?
> > > >>
> > > >
> > > > I don't think so. Because I don't know what your data looks like, I
> am
> > > > guessing that for each row, it has columns for each of the 84
> > > > countries. I don't know what these columns are named, either. Maybe:
> > > >
> > > > date             Australia   Belarus   ...    Zambia
> > > > 01/01/1994   20             21                 22
> > > > ...
> > > >
> > > >
> > > >> Yes, after obtaining the monthly average for each country's data, I
> > > >> need to use them for further calculations. So, I want to export the
> > > >> result to excel. But, until understanding the code, I think I
> willn't
> > > >> able to apply for the entire sample, and cannot be able to discuss
> > > >> the format of the resulted column to export to excel.
> > > >>
> > > >
> > > > Say that we perform the grouped mean calculation for the first two
> > > > country columns like this:
> > > > monmeans<-sapply(spdat[,2:3],by,spdat[,c("month","year")],mean)
> > > > monmeans
> > > >     Australia  Belarus
> > > > [1,]  29.70000 30.43333
> > > > [2,]  34.17857 27.39286
> > > >
> > > > We are presented with a 2x2 matrix of monthly means in just the
> format
> > > > someone might use for importing into Excel. The first row is January
> > > > 1994, the second February 1994 and so on. By expanding the columns to
> > > > include all the countries in your data, You should have the result
> you
> > want.
> > > >
> > > > Jim
> > > >
> > >
> > >
> > > --
> > > *Best Regards,*
> > > *Subhamitra Patra*
> > > *Phd. Research Scholar*
> > > *Department of Humanities and Social Sciences* *Indian Institute of
> > > Technology, Kharagpur*
> > > *INDIA*
> > >
> > > [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > mailto:R-help at r-project.org mailing list -- To UNSUBSCRIBE and more,
> see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide http://www.R-project.org/posting-
> > > guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > Osobn? ?daje: Informace o zpracov?n? a ochran? osobn?ch ?daj? obchodn?ch
> > partner? PRECHEZA a.s. jsou zve?ejn?ny na:
> > https://www.precheza.cz/zasady-ochrany-osobnich-udaju/ | Information
> > about processing and protection of business partner?s personal data are
> > available on website:
> > https://www.precheza.cz/en/personal-data-protection-principles/
> > D?v?rnost: Tento e-mail a jak?koliv k n?mu p?ipojen? dokumenty jsou
> > d?v?rn? a podl?haj? tomuto pr?vn? z?vazn?mu prohl??en? o vylou?en?
> > odpov?dnosti: https://www.precheza.cz/01-dovetek/ | This email and any
> > documents attached to it may be confidential and are subject to the
> legally
> > binding disclaimer: https://www.precheza.cz/en/01-disclaimer/
> >
> >
> >
> > --
> > Best Regards,
> > Subhamitra Patra
> > Phd. Research Scholar
> > Department of Humanities and Social Sciences
> > Indian Institute of Technology, Kharagpur
> > INDIA
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
>
> --
> *Best Regards,*
> *Subhamitra Patra*
> *Phd. Research Scholar*
> *Department of Humanities and Social Sciences*
> *Indian Institute of Technology, Kharagpur*
> *INDIA*
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Sun Oct 20 18:29:59 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sun, 20 Oct 2019 09:29:59 -0700
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
Message-ID: <CAGxFJbR0O_bGVZ_2zzpEqWo9t=vpCMAxqQj=r7CN6sDkFeaQdw@mail.gmail.com>

The legend must be "an expression vector."
c("Sans renard",bquote(.(densren) (ind./km)^2))   is not because the first
element is a character string.

This works:

   plot(1:100,1:100,type="n")
   legend(list(x=0,y=100),legend=c(expression("Sans
renard"),bquote(.(densren)
(ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")

Cheers,
Bert


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sun, Oct 20, 2019 at 9:02 AM Patrick Giraudoux <
patrick.giraudoux at univ-fcomte.fr> wrote:

> Thanks Bert and Peter,
>
> Yes Bert, I was aware of the legend() function syntax, and just quoting
> the legend argument within the function.
>
> However, Bert and Peter, I do not understand why it works with your
> absolutely reproducible examples and not in the slightly (not so slightly
> apparently) different context where I used it...
>
> densren=1.25
> plot(1:100,1:100,type="n")
> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren)
> (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
>
> densren=1.25
> plot(1:100,1:100,type="n")
> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) * "
> ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"
>
> Probably because the result of bquote() is concatenated in a character
> vector, but how to deal with this ?
>
> Best,
>
> Patrick
>
>
>
> Le 20/10/2019 ? 16:42, Bert Gunter a ?crit :
>
> Assuming you are using base graphics, your syntax for adding the legend
> appears to be wrong.
> legend() is a separate function, not a parameter of plot.default afaics.
>
> The following works for me:
>
> > densren <- 1.25
> > plot(1:10)
> > legend (x="center", legend =bquote(.(densren) (ind./km)^2))
>
> See ?legend
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux <
> patrick.giraudoux at univ-fcomte.fr> wrote:
>
>> Dear listers,
>>
>> I am trying to pass an expression inlcuding a variable and a
>> superpscript to a legend. What I want to obtain is e.g. with densren =
>> 1.25
>>
>> 1.25 ind./km^2
>>
>> I have tried many variants of the following:
>>
>> legend=bquote(.(densren) (ind./km)^2)
>>
>> but if not errors, do obtain
>>
>> 1.25 (ind./km^2)
>>
>> hence not what I want (no parenthesis, 2 in superscript...)
>>
>> Any idea about a correct syntax to get what I need ?
>>
>> Best,
>>
>> Patrick
>>
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>
>

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sun Oct 20 18:38:21 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 20 Oct 2019 17:38:21 +0100
Subject: [R] Query about calculating the monthly average of daily data
 columns
In-Reply-To: <CAAxdm-7SMS=VysFG+Y8-UVr6bZBj5ZkfgkENmORr1hcakPL++A@mail.gmail.com>
References: <CAOFE=kNgBOAT-S1ESiC160EE7F7vtvrMD4AAoCpMZn72z4zuBA@mail.gmail.com>
 <CA+8X3fWHvBqYxRMyAN-vp9WhjX=b7CYZ2BaNHyifKgJh3P2k6g@mail.gmail.com>
 <CAOFE=kOsSR1eKFUeXMvU4A6JvBdt1ZCt66teuD5qfRkCfiwOVw@mail.gmail.com>
 <CA+8X3fVnYXzuS3EHyLpBm1Of3m6aZNkmP+bW46w0HztgAduZ-w@mail.gmail.com>
 <CAOFE=kMAyQs6fH8UAdTvC-H0WnOSTtJe7OF0jj_CLnyZA4bDqQ@mail.gmail.com>
 <fcfb3138fcd74deb8ea541687523fe42@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kMEZa8GaxRiSGrvYV6hsBSBqQA9TjGvE-3uWb=jGYCEKg@mail.gmail.com>
 <539f802bb81040b89408ef874be28244@SRVEXCHCM1302.precheza.cz>
 <af92b2007e8a4050af6abe296276e70d@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kPZPcmpPnVxyTqyizV49RiDBm9mYbQgqch9vb4R1h+Dvg@mail.gmail.com>
 <CAAxdm-7SMS=VysFG+Y8-UVr6bZBj5ZkfgkENmORr1hcakPL++A@mail.gmail.com>
Message-ID: <b7b58c16-6c86-1331-81ee-ee8b81a3ee2a@sapo.pt>

Hello,

Here are two other ways using aggregate.
The difference is in the way to create a MONTH grouping column.
The second way is base R only.


df1$MONTH <- zoo::as.yearmon(as.Date(as.character(df1$DATE), '%Y%m%d'))
aggregate(Spread ~ PERMNO + MONTH, df1, mean)

df1$MONTH <- df1$DATE %/% 100
aggregate(Spread ~ PERMNO + MONTH, df1, mean)


Hope this helps,

Rui Barradas


?s 17:17 de 20/10/19, jim holtman escreveu:
> Does this do what you want:
> 
>> library(tidyverse)
> 
>> input <- read_delim("PERMNO DATE Spread
> + 111 19940103 0.025464308
> + 111 19940104 0.064424296
> + 111 19940105 0.018579337
> + 111 19940106 0.018872211
>   ..." ... [TRUNCATED]
> 
>> # drop last two digits to get the month
>> monthly <- input %>%
> +   group_by(PERMNO, month = DATE %/% 100) %>%
> +   summarise(avg = mean(Spread))
>> monthly
> # A tibble: 12 x 3
> # Groups:   PERMNO [3]
>     PERMNO  month      avg
>      <dbl>  <dbl>    <dbl>
>   1    111 199401 0.0416
>   2    111 199402 0.0508
>   3    111 199403 0.0567
>   4    111 199404 0.0466
>   5    112 199401 0.000533
>   6    112 199402 0.000593
>   7    112 199403 0.000471
>   8    112 199404 0.000587
>   9    113 199401 0.000692
> 10    113 199402 0.000591
> 11    113 199403 0.000677
> 12    113 199404 0.000555
>>
> 
> 
> Jim Holtman
> *Data Munger Guru*
> 
> 
> *What is the problem that you are trying to solve?Tell me what you want to
> do, not how you want to do it.*
> 
> 
> On Sun, Oct 20, 2019 at 5:10 AM Subhamitra Patra <subhamitra.patra at gmail.com>
> wrote:
> 
>> Dear Sir,
>>
>> Thank you very much for your suggestions.
>>
>> Due to certain inconveniences, I was unable to work on your suggestions.
>>
>> Today I worked on both suggestions and got the result that I really wanted
>> that monthly averages for each country.
>>
>> Here, I am asking one more query (just for learning purpose) that if my
>> country name and its respective variable is in the panel format, and I want
>> to take the monthly average for each country, how the code will be
>> arranged. For your convenience, I am providing a small data sample below.
>>
>> PERMNO DATE Spread
>> 111 19940103 0.025464308
>> 111 19940104 0.064424296
>> 111 19940105 0.018579337
>> 111 19940106 0.018872211
>> 111 19940107 0.065279782
>> 111 19940110 0.063485905
>> 111 19940111 0.018355453
>> 111 19940112 0.064135683
>> 111 19940113 0.063519987
>> 111 19940114 0.018277351
>> 111 19940117 0.018628417
>> 111 19940118 0.065630229
>> 111 19940119 0.018713152
>> 111 19940120 0.019119037
>> 111 19940121 0.068342043
>> 111 19940124 0.020843244
>> 111 19940125 0.019954211
>> 111 19940126 0.018980321
>> 111 19940127 0.066827165
>> 111 19940128 0.067459235
>> 111 19940131 0.068682559
>> 111 19940201 0.02081465
>> 111 19940202 0.068236091
>> 111 19940203 0.068821406
>> 111 19940204 0.020075648
>> 111 19940207 0.066070584
>> 111 19940208 0.066068837
>> 111 19940209 0.019077072
>> 111 19940210 0.065894875
>> 111 19940211 0.018847478
>> 111 19940214 0.065040844
>> 111 19940215 0.01880332
>> 111 19940216 0.018836199
>> 111 19940217 0.066888865
>> 111 19940218 0.067116793
>> 111 19940221 0.068809742
>> 111 19940222 0.068230213
>> 111 19940223 0.069502855
>> 111 19940224 0.070383523
>> 111 19940225 0.020430811
>> 111 19940228 0.067087257
>> 111 19940301 0.066776479
>> 111 19940302 0.019959031
>> 111 19940303 0.066596469
>> 111 19940304 0.019131334
>> 111 19940307 0.019312528
>> 111 19940308 0.067349909
>> 111 19940309 0.068916431
>> 111 19940310 0.068620043
>> 111 19940311 0.070494844
>> 111 19940314 0.071056842
>> 111 19940315 0.071042517
>> 111 19940316 0.072401771
>> 111 19940317 0.071940001
>> 111 19940318 0.07352884
>> 111 19940321 0.072671688
>> 111 19940322 0.072652595
>> 111 19940323 0.021352138
>> 111 19940324 0.069933727
>> 111 19940325 0.068717467
>> 111 19940328 0.020470748
>> 111 19940329 0.020003748
>> 111 19940330 0.065833717
>> 111 19940331 0.065268388
>> 111 19940401 0.018762356
>> 111 19940404 0.064914179
>> 111 19940405 0.064706743
>> 111 19940406 0.018764175
>> 111 19940407 0.06524806
>> 111 19940408 0.018593449
>> 111 19940411 0.064913949
>> 111 19940412 0.01872089
>> 111 19940413 0.018729328
>> 111 19940414 0.018978773
>> 111 19940415 0.065477137
>> 111 19940418 0.064614365
>> 111 19940419 0.064184148
>> 111 19940420 0.018553192
>> 111 19940421 0.066872771
>> 111 19940422 0.06680782
>> 111 19940425 0.067467961
>> 111 19940426 0.02014297
>> 111 19940427 0.062464016
>> 111 19940428 0.062357052
>> 112 19940429 0.000233993
>> 112 19940103 0.000815264
>> 112 19940104 0.000238165
>> 112 19940105 0.000813632
>> 112 19940106 0.000236915
>> 112 19940107 0.000809102
>> 112 19940110 0.000801642
>> 112 19940111 0.000797932
>> 112 19940112 0.000795251
>> 112 19940113 0.000795186
>> 112 19940114 0.000231359
>> 112 19940117 0.000232134
>> 112 19940118 0.000233718
>> 112 19940119 0.000233993
>> 112 19940120 0.000234694
>> 112 19940121 0.000235753
>> 112 19940124 0.000808653
>> 112 19940125 0.000235604
>> 112 19940126 0.000805068
>> 112 19940127 0.000802337
>> 112 19940128 0.000801768
>> 112 19940131 0.000233517
>> 112 19940201 0.000797431
>> 112 19940202 0.000233338
>> 112 19940203 0.000233826
>> 112 19940204 0.000799519
>> 112 19940207 0.000798105
>> 112 19940208 0.000792245
>> 112 19940209 0.000231113
>> 112 19940210 0.000233413
>> 112 19940211 0.000798168
>> 112 19940214 0.000233282
>> 112 19940215 0.000797848
>> 112 19940216 0.000785165
>> 112 19940217 0.000228426
>> 112 19940218 0.000786783
>> 112 19940221 0.00078343
>> 112 19940222 0.000781459
>> 112 19940223 0.000776264
>> 112 19940224 0.000226399
>> 112 19940225 0.000779066
>> 112 19940228 0.000773603
>> 112 19940301 0.000226487
>> 112 19940302 0.000775233
>> 112 19940303 0.000227017
>> 112 19940304 0.000227854
>> 112 19940307 0.000782814
>> 112 19940308 0.000229164
>> 112 19940309 0.000787033
>> 112 19940310 0.000784049
>> 112 19940311 0.000228984
>> 112 19940314 0.00078697
>> 112 19940315 0.000782567
>> 112 19940316 0.000228516
>> 112 19940317 0.000786347
>> 112 19940318 0.000229236
>> 112 19940321 0.000230107
>> 112 19940322 0.000792689
>> 112 19940323 0.000787284
>> 112 19940324 0.000787221
>> 112 19940325 0.000227978
>> 112 19940328 0.000228713
>> 112 19940329 0.000228894
>> 112 19940330 0.000229255
>> 112 19940331 0.000231003
>> 112 19940401 0.000796567
>> 112 19940404 0.000790668
>> 112 19940405 0.00078195
>> 112 19940406 0.000780475
>> 112 19940407 0.000228355
>> 112 19940408 0.000781723
>> 112 19940411 0.000775741
>> 112 19940412 0.000226647
>> 112 19940413 0.000778876
>> 112 19940414 0.000777336
>> 112 19940415 0.000775253
>> 112 19940418 0.000226362
>> 112 19940419 0.000779554
>> 112 19940420 0.000774824
>> 112 19940421 0.000225582
>> 112 19940422 0.000225724
>> 112 19940425 0.000773361
>> 112 19940426 0.0002256
>> 112 19940427 0.000776416
>> 113 19940428 0.000280542
>> 113 19940429 0.000964148
>> 113 19940103 0.000962654
>> 113 19940104 0.000281768
>> 113 19940105 0.000962219
>> 113 19940106 0.000961965
>> 113 19940107 0.000958602
>> 113 19940110 0.000280056
>> 113 19940111 0.000956348
>> 113 19940112 0.000952171
>> 113 19940113 0.000948176
>> 113 19940114 0.000275607
>> 113 19940117 0.000275773
>> 113 19940118 0.000276738
>> 113 19940119 0.000947068
>> 113 19940120 0.000940959
>> 113 19940121 0.000275224
>> 113 19940124 0.000948489
>> 113 19940125 0.000940076
>> 113 19940126 0.0009309
>> 113 19940127 0.000269955
>> 113 19940128 0.000270328
>> 113 19940131 0.000924234
>> 113 19940201 0.000924038
>> 113 19940202 0.000269088
>> 113 19940203 0.000270247
>> 113 19940204 0.000270562
>> 113 19940207 0.00092656
>> 113 19940208 0.000921819
>> 113 19940209 0.000920361
>> 113 19940210 0.000268958
>> 113 19940211 0.000924758
>> 113 19940214 0.000266768
>> 113 19940215 0.000911325
>> 113 19940216 0.000909294
>> 113 19940217 0.000905887
>> 113 19940218 0.000262919
>> 113 19940221 0.000262978
>> 113 19940222 0.000263189
>> 113 19940223 0.000904439
>> 113 19940224 0.000263512
>> 113 19940225 0.000906184
>> 113 19940228 0.000265198
>> 113 19940301 0.000906126
>> 113 19940302 0.000264357
>> 113 19940303 0.000265392
>> 113 19940304 0.000912495
>> 113 19940307 0.000910641
>> 113 19940308 0.000266143
>> 113 19940309 0.000910113
>> 113 19940310 0.000909277
>> 113 19940311 0.000905056
>> 113 19940314 0.00090285
>> 113 19940315 0.000898831
>> 113 19940316 0.000896118
>> 113 19940317 0.000261294
>> 113 19940318 0.000892563
>> 113 19940321 0.000890852
>> 113 19940322 0.00088639
>> 113 19940323 0.000258509
>> 113 19940324 0.000260286
>> 113 19940325 0.000889354
>> 113 19940328 0.000888373
>> 113 19940329 0.000885049
>> 113 19940330 0.000259116
>> 113 19940331 0.000259474
>> 113 19940401 0.000260316
>> 113 19940404 0.000897493
>> 113 19940405 0.000894592
>> 113 19940406 0.000260435
>> 113 19940407 0.000260989
>> 113 19940408 0.000262061
>> 113 19940411 0.000262262
>> 113 19940412 0.000263604
>> 113 19940413 0.000908682
>> 113 19940414 0.000265348
>> 113 19940415 0.000265637
>> 113 19940418 0.00026862
>> 113 19940419 0.000918882
>> 113 19940420 0.000909904
>> 113 19940421 0.000901725
>> 113 19940422 0.000900062
>> 113 19940425 0.000893547
>> 113 19940426 0.000260899
>> Here, the 1st column is the name of the countries panel which I identified
>> in number, 2nd is the date column arranged in yyyy-mm-dd format, and 3rd is
>> the daily variable for each country for 4 months of 1994. I need to take
>> the monthly average of spread variable for each country (i.e. noted as 111,
>> 112, and 113) in the above example. In short, my monthly spread variable
>> should be sorted on the basis of both PERMNO (i.e. country identifier), and
>> months of the particular year.
>>
>> Please educate me that in this data format, how the average code can be
>> written?
>>
>> Thank you very much.
>>
>>
>>
>> [image: Mailtrack]
>> <
>> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
>>>
>> Sender
>> notified by
>> Mailtrack
>> <
>> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
>>>
>> 10/20/19,
>> 05:31:23 PM
>>
>> On Mon, Sep 16, 2019 at 4:31 PM PIKAL Petr <petr.pikal at precheza.cz> wrote:
>>
>>> Original email did not come through (some problems with formating).
>>>
>>> Hi
>>>
>>> No, on contrary. I **am** suggesting to change date column to real date
>>> asi it is easy to handle with appropriate functions.
>>>
>>> Here are some fake data
>>>
>>>> str(spdat)
>>> 'data.frame':   260 obs. of  3 variables:
>>> $ dates   : Date, format: "1995-01-01" "1995-01-02" "1995-01-03"
>>> "1995-01-04" ...
>>> $ coutryA : num  0.188 0.405 -0.107 -0.596 -0.529 ...
>>> $ countryB: num  9.4 10.76 11.24 8.26 10.71 ..
>>>
>>>> head(spdat)
>>>         dates    coutryA  countryB
>>> 1 1995-01-01  0.1875060  9.402851
>>> 2 1995-01-02  0.4045193 10.755112
>>> 3 1995-01-03 -0.1073904 11.243663
>>> 4 1995-01-04 -0.5959683  8.256424
>>> 5 1995-01-05 -0.5293772 10.705431
>>> 6 1995-01-06 -0.2228029 10.171461
>>>
>>> First I melt it
>>> spdat.m <- melt(spdat, id.var="dates")
>>>
>>>> head(spdat.m)
>>>         dates variable      value
>>> 1 1995-01-01  coutryA  0.1875060
>>> 2 1995-01-02  coutryA  0.4045193
>>> 3 1995-01-03  coutryA -0.1073904
>>> 4 1995-01-04  coutryA -0.5959683
>>> 5 1995-01-05  coutryA -0.5293772
>>> 6 1995-01-06  coutryA -0.2228029
>>>
>>> I do aggregation
>>>
>>>> spdat.ag <- aggregate(spdat.m$value, list(format(spdat.m$dates,
>>> "%m.%Y"), spdat.m$variable), mean)
>>>
>>> And now I use dcast  to get required result.
>>>
>>>> dcast(spdat.ag, Group.1~Group.2)
>>> Using x as value column: use value.var to override.
>>>     Group.1      coutryA  countryB
>>> 1  01.1995  0.098688137 10.177696
>>> 2  02.1995  0.352264682  9.609261
>>> 3  03.1995  0.155521876 10.043503
>>> 4  04.1995 -0.166092393 10.129844
>>> 5  05.1995  0.164665188 10.308275
>>> 6  06.1995  0.260633585 10.210129
>>> 7  07.1995  0.003671979 10.549016
>>> 8  08.1995  0.045295990 10.087435
>>> 9  09.1995 -0.145488206  9.689876
>>> 10 10.1995 -0.225645950  9.743744
>>> 11 11.1995  0.030273383 10.025435
>>> 12 12.1995  0.043557468 10.105626
>>>
>>> Cheers
>>> Petr
>>>
>>> Here are the data.
>>>
>>>> dput(spdat)
>>> spdat  <- structure(list(dates = structure(c(9131, 9132, 9133, 9134,
>> 9135,
>>> 9136, 9137, 9138, 9139, 9140, 9141, 9142, 9143, 9144, 9145, 9146,
>>> 9147, 9148, 9149, 9150, 9151, 9152, 9162, 9163, 9164, 9165, 9166,
>>> 9167, 9168, 9169, 9170, 9171, 9172, 9173, 9174, 9175, 9176, 9177,
>>> 9178, 9179, 9180, 9181, 9190, 9191, 9192, 9193, 9194, 9195, 9196,
>>> 9197, 9198, 9199, 9200, 9201, 9202, 9203, 9204, 9205, 9206, 9207,
>>> 9208, 9209, 9210, 9211, 9212, 9221, 9222, 9223, 9224, 9225, 9226,
>>> 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237,
>>> 9238, 9239, 9240, 9251, 9252, 9253, 9254, 9255, 9256, 9257, 9258,
>>> 9259, 9260, 9261, 9262, 9263, 9264, 9265, 9266, 9267, 9268, 9269,
>>> 9270, 9271, 9272, 9273, 9282, 9283, 9284, 9285, 9286, 9287, 9288,
>>> 9289, 9290, 9291, 9292, 9293, 9294, 9295, 9296, 9297, 9298, 9299,
>>> 9300, 9301, 9302, 9303, 9312, 9313, 9314, 9315, 9316, 9317, 9318,
>>> 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327, 9328, 9329,
>>> 9330, 9331, 9332, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350,
>>> 9351, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360, 9361,
>>> 9362, 9363, 9364, 9365, 9374, 9375, 9376, 9377, 9378, 9379, 9380,
>>> 9381, 9382, 9383, 9384, 9385, 9386, 9387, 9388, 9389, 9390, 9391,
>>> 9392, 9393, 9394, 9404, 9405, 9406, 9407, 9408, 9409, 9410, 9411,
>>> 9412, 9413, 9414, 9415, 9416, 9417, 9418, 9419, 9420, 9421, 9422,
>>> 9423, 9424, 9456, 9435, 9436, 9437, 9438, 9439, 9440, 9441, 9442,
>>> 9443, 9444, 9445, 9446, 9447, 9448, 9449, 9450, 9451, 9452, 9453,
>>> 9454, 9455, 9486, 9465, 9466, 9467, 9468, 9469, 9470, 9471, 9472,
>>> 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483,
>>> 9484, 9151), class = "Date"), coutryA = c(0.187506004416315,
>>> 0.404519257417805, -0.107390371811605, -0.595968278805544,
>>> -0.529377240936012,
>>> -0.222802921207767, 0.413182392872818, 0.689673026532298,
>>> -1.2768723266992,
>>> -0.506308625809406, 0.113859233745174, -0.0963423819877653,
>>> 0.323987304768398,
>>> 1.63846917270538, 0.893233423250338, 0.297732439150487,
>> 0.949323101836486,
>>> -0.599518074708052, 0.366372319197032, -2.25734971953878,
>>> -0.190971733204918,
>>> -0.0874143568874351, 1.46699645184047, 0.00702170238687361,
>>> 0.11221346278474,
>>> -0.8060359607624, 0.340842350476532, 0.798838328074708,
>> 0.449214745851041,
>>> -0.664972890558734, 0.521830282184173, -1.35020467264521,
>>> -0.95240631225826,
>>> 1.25607320999849, 1.57018988549379, 0.99477900888445, -0.936218787378207,
>>> 1.48489932847779, 0.529222943794807, 0.0995675049147771,
>>> 0.477770516727839,
>>> 1.64567253670186, -0.0212651530684566, 0.558952796713992,
>>> 0.0409979382929057,
>>> 0.428675380654606, 0.0919422583362682, -0.819694497340459,
>>> 1.23998830450888,
>>> 0.607498144489643, -1.27724580163097, 1.41634774644371,
>>> -0.579094515769707,
>>> 2.02039606694223, 0.0740478208705996, -1.69826944583929,
>>> -0.321482399813063,
>>> -0.489198601400924, 2.0066750686302, -1.90624857752322, 0.46762405849973,
>>> 1.31264724137396, -0.0473627194710677, 0.141362267796145,
>>> 0.329709761206515,
>>> 0.518454586458572, -1.39489985851779, -0.388303591187678,
>>> -0.668922704543522,
>>> 0.0735115674875065, 1.30737242978235, 0.198503397980751,
>>> 0.257831448122427,
>>> -1.31173539205588, -1.45147941969116, 0.359725782295977,
>>> 0.612882118056585,
>>> -0.0733768753346202, -0.508349204402508, 1.35776663767231,
>>> 0.997807735669086,
>>> -1.41717534266382, -0.894170593324238, -0.68578120845151,
>>> -0.211509378018794,
>>> 0.436738904337909, -1.46932152770435, 0.0817388759874159,
>>> -0.0389350881653141,
>>> 0.709198476466861, -0.963669144724435, -0.548607422521798,
>>> -0.896886885575286,
>>> 0.322231150840934, 1.37327611339939, 0.0310213133870952,
>>> 0.796577750757324,
>>> -0.2010067423637, -0.241723752424226, 1.37547329580654,
>> -1.15382202538982,
>>> 0.101454200596915, 0.273663839664217, 1.8315140887841, 1.86096518756473,
>>> -0.536393730924719, -0.45845011727266, 1.10226256157127,
>>> -0.385596991265563,
>>> 3.20218061566932, -1.25865250042183, -0.13613128784276,
>> 0.483329357746514,
>>> -0.597187329618306, 0.710977603908319, -1.07945708269043,
>>> -0.477626236401394,
>>> 1.51034914684104, 2.35886426985999, -0.0250526828683629,
>>> -0.29439443478131,
>>> 0.665774016744828, 0.464027472251246, 0.226658374792016,
>>> -0.802597030454373,
>>> 0.825517059805602, -1.11293193130819, -1.27677400513873,
>> 1.60776237113347,
>>> 1.12490009531342, 0.95767047134623, 0.0475745549797055,
>>> -0.0591587460876868,
>>> -0.690617365240342, -1.62111622938126, -1.3545210707469, 1.8607927043106,
>>> 0.764367674339969, 1.49261525602638, 0.549570728337346,
>> -1.29658399741794,
>>> -1.6289903797869, 0.00573336252135834, 0.0300702149640632,
>>> 0.440810830115721,
>>> 0.663568666361326, -0.126685900835146, -0.00221628368438927,
>>> 0.815321995886579, -0.499280888368945, -0.271814047751667,
>>> -0.071025546459042,
>>> 1.73165491816826, -0.0294770299043331, 0.833605607221529,
>>> -0.670108794857159,
>>> -0.303323318026829, 1.29039844459134, -0.818806702120603,
>>> -0.445515595649677,
>>> -0.0128796557666887, 0.320923705586147, 0.230597275812536,
>>> -1.54009153212366,
>>> -0.294702981688559, 0.581209734391958, 0.121384768986639,
>>> 0.502914098451111,
>>> -1.59018268505718, -0.635101104166451, 1.48005776676403,
>>> -0.25631761189957,
>>> 0.171947814411552, 0.444646195980014, 0.172655758440111,
>>> -0.00432159794094836,
>>> -0.549321974240026, 0.585055026451421, -1.22813371480849,
>>> 0.846807540195381,
>>> 0.319629441352597, 0.393525732059709, -1.40275675444594,
>> 1.11062585584811,
>>> 0.214809571213853, -0.636432711800391, -0.283087127251573,
>>> -1.46385553207618,
>>> 0.436928676930225, -1.34231945433777, 0.451281957595763,
>>> -0.523155001924496,
>>> -2.69416779107545, 1.5513477373689, 0.989632029400036, 1.34636075948993,
>>> 0.346147428691405, -0.464527560160041, 0.337233933370495,
>>> 1.11331396366389,
>>> -1.00060600083316, -0.734784444487169, 1.40476315358621,
>> 1.01671092179193,
>>> -0.0144306250829694, -0.923555930346906, -1.02275966525015,
>>> 0.619422010219383,
>>> 0.603484309754755, -0.774553813657576, 0.0932792545556387,
>>> -0.651884521428279,
>>> -0.61965612647073, -1.22104834441579, -1.31439612639271,
>>> -2.87707752518163,
>>> -0.0343801084491906, -0.640678302378492, -1.38653452986558,
>>> 0.884963139028743,
>>> -0.657454283462004, 0.462842665244993, -0.20881674837534,
>> 0.6345884135548,
>>> 0.707165108434729, -0.162090928425892, -0.998662309785188,
>>> 1.3130254639318,
>>> 0.191890764940071, -0.0493619237876962, -0.55183232511689,
>>> 0.470263932874487,
>>> -0.217088645692971, 0.231550037620628, -0.530406537266415,
>>> -0.616522469083808,
>>> 0.329347084038265, 1.49420692610475, 1.91750823142859, 0.753536143872474,
>>> 0.766584887163714, -0.259803384094296, -0.402463714097741,
>>> -0.0229799209735185,
>>> -0.259677990559218, -1.41529707261105, 0.191362852138627,
>>> 1.54483266684747,
>>> -1.17947655378489, -0.426265411073274, 0.723010460481118,
>>> 1.37405142869537,
>>> -0.374771207936141, 0.0513905365832423, -0.369432731236118,
>>> -0.945441984794364,
>>> 0.179506648255554, 0.31971255725438, -1.25117960937319, 2.46228549580083
>>> ), countryB = c(9.4028512714591, 10.7551115504652, 11.2436629228434,
>>> 8.25642360904389, 10.7054313972395, 10.1714609666091, 10.3726975056206,
>>> 10.6594299429162, 8.56250595443296, 10.5612153841067, 8.07612112826519,
>>> 9.94704207511951, 11.392407273156, 10.4257690445268, 10.6339442533038,
>>> 10.5314883825356, 10.3506665399033, 10.2426403362978, 10.8437715647564,
>>> 10.8247200587034, 11.2449815064171, 9.2898697883112, 9.05418978124619,
>>> 10.6080277672463, 9.19882175737148, 11.3589722806948, 10.4139334238189,
>>> 9.44305216810892, 9.58426470056472, 8.84208362003176, 10.8125431356391,
>>> 7.71357872650814, 8.73526671289828, 10.714693958224, 9.49976972594189,
>>> 9.41896864941478, 7.33073349261249, 10.5268398982262, 9.92255671125184,
>>> 10.5665378092202, 10.5035704895405, 7.93682068228084, 10.882421050424,
>>> 9.3237610577468, 8.42128120513304, 9.46103753451174, 10.3472215515392,
>>> 11.0483414005193, 10.3421689244599, 7.85120280889754, 11.6327644046254,
>>> 9.57620745972098, 10.6553844719749, 10.8490250129346, 10.2742492933876,
>>> 9.55428072119304, 9.0976351049804, 10.0731951766966, 10.6956488509516,
>>> 11.1530744146062, 10.3496303024767, 9.52734980693306, 9.64478424894734,
>>> 9.28301632295047, 10.9568790570688, 11.6052870914912, 9.58530202776537,
>>> 11.1338134902295, 8.66685735149472, 11.0230863576875, 10.8000609212302,
>>> 10.6510296259782, 11.831292326569, 9.53836122448974, 9.55805411377422,
>>> 9.90336204189518, 9.36377040999133, 11.7041009433341, 9.95628297574831,
>>> 10.718111342931, 10.4562688422472, 8.85976383099186, 8.94085496683824,
>>> 8.19538394018434, 10.1058448260449, 9.70821289789561, 9.08757962570738,
>>> 10.6599997541876, 10.0521137258219, 9.9924295699559, 11.8730269098299,
>>> 11.2634470795907, 11.3854762443416, 9.56742053529845, 10.4101561978503,
>>> 9.53376547865009, 9.75410966995361, 9.92804558924886, 8.36231430067066,
>>> 10.7486459346681, 12.0143881312685, 11.0083060332839, 9.32820954213586,
>>> 10.8420346742049, 9.73064414798223, 10.7593902723319, 10.976622155215,
>>> 10.1039774975157, 8.36317871802524, 9.21809894958653, 10.1015362220683,
>>> 11.4655736295123, 9.65528297274543, 9.67844310028008, 10.1516820910267,
>>> 8.38764450852642, 10.163558398201, 11.1432463477237, 12.0509818193223,
>>> 10.9896913965091, 11.1772406550953, 9.14396687337779, 9.93338627749979,
>>> 10.9548864433126, 8.64911301751956, 11.706463972364, 11.1012846649741,
>>> 8.7805267197408, 11.5802098773954, 10.2268513542863, 10.3509617168731,
>>> 9.09646558899397, 11.2706666647314, 11.3984335011704, 11.4808985388742,
>>> 10.5608771133999, 10.3684356806175, 10.4815588822618, 10.5818867877558,
>>> 12.2561035284691, 8.6464271477849, 10.3412351841865, 10.7577574534162,
>>> 11.1124067479261, 9.91627943243343, 10.6356898895291, 10.2107566441478,
>>> 10.0672734202575, 10.2385787014999, 11.7112606160069, 10.0453801263575,
>>> 8.84654136100724, 10.2173421609193, 9.27919801705716, 10.4755578829547,
>>> 7.69340209082122, 9.24705253848083, 10.8415406794597, 8.69603117680965,
>>> 11.2589214416702, 10.5425642239737, 10.1389355042458, 9.17267675180435,
>>> 12.3052338002213, 10.0181674985326, 12.2715476751051, 9.64516268052739,
>>> 10.6305299379912, 10.1829347684655, 9.97983942366781, 10.2559847744715,
>>> 10.3092266661814, 9.75215330673072, 10.250464278709, 9.31118800061454,
>>> 10.3310666767171, 9.09703848990093, 10.241195105962, 8.57290406448477,
>>> 8.98090855172704, 8.64653101832229, 12.6791587435376, 9.56000538681993,
>>> 10.4062255533723, 11.067091476284, 10.5255014737268, 10.2240941949978,
>>> 9.13081571869084, 9.5942352120783, 9.2753466212409, 10.2789293993548,
>>> 8.10255065585342, 9.48751297655077, 8.51198576785003, 9.46310532206947,
>>> 9.86727270762806, 11.5149248124739, 9.31557156735022, 9.34351230206303,
>>> 10.022139448869, 11.4111350893792, 8.57891783464065, 10.3761090924661,
>>> 9.38300408584683, 9.33694577526158, 9.25815555686085, 9.29856853889735,
>>> 8.4250073823245, 8.83022950824832, 9.1510846172981, 10.2553042376765,
>>> 10.0739540955956, 9.04955917463259, 10.8927827168631, 9.44611041690694,
>>> 10.7883395708593, 10.6010088332078, 7.72560864006592, 10.1760839916637,
>>> 11.5576569894392, 11.384809257294, 8.73504353987083, 9.00585942714512,
>>> 9.62327893504013, 10.3527072699866, 10.5220100705827, 8.74921668696853,
>>> 8.56415116683662, 12.1348451793815, 10.9496674323819, 9.64443817181322,
>>> 9.52977454697087, 10.4281877186725, 8.52701721410292, 11.6911584965782,
>>> 10.2300108250139, 8.65368821276485, 11.7733431942379, 10.2060233777681,
>>> 9.57291673029552, 9.82687667895106, 10.5939736188493, 11.2510605726337,
>>> 10.3383384488323, 9.92301237292945, 10.0164623230529, 10.4939857044034,
>>> 10.5631769648289, 10.935731043532, 11.0659359187168, 8.51697010486427,
>>> 9.79512310587405, 9.35132038807071, 11.3286703149903, 10.4621597293933,
>>> 10.4099459919071, 8.86246315190942, 9.30054044639769, 9.40346575227191,
>>> 9.59278722974697)), row.names = c(NA, -260L), class = "data.frame")
>>>
>>>
>>>
>>>
>>>
>>> From: Subhamitra Patra <mailto:subhamitra.patra at gmail.com>
>>> Sent: Friday, September 13, 2019 3:59 PM
>>> To: PIKAL Petr <mailto:petr.pikal at precheza.cz>; r-help mailing list
>>> <mailto:r-help at r-project.org>
>>> Subject: Re: [R] Query about calculating the monthly average of daily
>> data
>>> columns
>>>
>>> Dear PIKAL,
>>>
>>> Thank you very much for your suggestion.
>>>
>>> I tried your previous suggested code and getting the average value for
>>> each month for both country A, and B. But in your recent email, you are
>>> suggesting not to change the date column to real date. If I am going
>>> through your recently suggested code, i.e.
>>>
>>>   "aggregate(value column, list(format(date column, "%m.%Y"), country
>>> column), mean)"
>>>
>>> I am getting an Error that "aggregate(value, list(format(date, "%m.%Y"),
>>> country), mean) : object 'value' not found".
>>>
>>> Here, my query "may I need to define the date column, country column, and
>>> value column separately?"
>>>
>>> Further, I need something the average value result like below in the data
>>> frame
>>>
>>> Month       Country A   Country B
>>> Jan 1994    26.66         35.78
>>> Feb 1994    26.13         29.14
>>>
>>> so that it will be easy for me to export to excel, and to use for the
>>> further calculations.
>>>
>>> Please suggest me in this regard.
>>>
>>> Thank you.
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
>>> Sender notified by
>>>
>>>
>> https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_campaign=signaturevirality5&
>>> 09/13/19, 07:22:53 PM
>>>
>>>
>>>
>>> On Fri, Sep 13, 2019 at 7:03 PM PIKAL Petr <mailto:
>> petr.pikal at precheza.cz>
>>> wrote:
>>> Hi
>>>
>>> I am almost 100% sure that you would spare yourself much trouble if you
>>> changed your date column to real date
>>>
>>> ?as.Date
>>>
>>> reshape your wide format to long one
>>> library(reshape2)
>>> ?melt
>>>
>>> to get 3 column data.frame with one date column, one country column and
>>> one value column
>>>
>>> use ?aggregate and ?format to get summary value
>>>
>>> something like
>>> aggregate(value column, list(format(date column, "%m.%Y"), country
>>> column), mean)
>>>
>>> But if you insist to scratch your left ear with right hand accross your
>>> head, you could continue your way.
>>>
>>> Cheers
>>> Petr
>>>
>>>> -----Original Message-----
>>>> From: R-help <mailto:r-help-bounces at r-project.org> On Behalf Of
>>> Subhamitra
>>>> Patra
>>>> Sent: Friday, September 13, 2019 3:20 PM
>>>> To: Jim Lemon <mailto:drjimlemon at gmail.com>; r-help mailing list
>>> <r-help at r-
>>>> http://project.org>
>>>> Subject: Re: [R] Query about calculating the monthly average of daily
>>> data
>>>> columns
>>>>
>>>> Dear Sir,
>>>>
>>>> Yes, I understood the logic. But, still, I have a few queries that I
>>> mentioned
>>>> below your answers.
>>>>
>>>> "# if you only have to get the monthly averages, it can be done this
>> way
>>>>> spdat$month<-sapply(strsplit(spdat$dates,"-"),"["*,2*)
>>>>> spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",*3*)"
>>>>>
>>>>> B. Here, I need to define the no. of months, and years separately,
>>> right?
>>>>> or else what 2, and 3 (in bold) indicates?
>>>>>
>>>>
>>>> To get the grouping variable of sequential months that you want, you
>> only
>>>> need the month and year values of the dates in the first column. First
>> I
>>> used
>>>> the "strsplit" function to split the date field at the hyphens, then
>> used
>>>> "sapply" to extract ("[") the second (month) and *third (year)* parts
>> as
>>> two
>>>> new columns. Because you have more than one year of data, you need the
>>>> year values or you will group all Januarys, all Februarys and so on.
>>>> Notice how I pass both of the new columns as a list (a data frame is a
>>> type of
>>>> list) in the call to get the mean of each month.
>>>>
>>>> 1. Here, as per my understanding, the "3" indicates the 3rd year,
>> right?
>>>> But, you showed an average for 2 months of the same year. Then, what
>> "3"
>>>> in the  spdat$year object indicate?
>>>>
>>>>
>>>> C. From this part, I got the exact average values of both January and
>>>>> February of 1994 for country A, and B. But, in code, I have a query
>>>>> that I need to define  spdat$returnA, and  spdat$returnB separately
>>>>> before writing this code, right? Like this, I need to define for each
>>>>> 84 countries separately with their respective number of months, and
>>>>> years before writing this code, right?
>>>>>
>>>>
>>>> I don't think so. Because I don't know what your data looks like, I am
>>>> guessing that for each row, it has columns for each of the 84
>> countries.
>>> I
>>>> don't know what these columns are named, either. Maybe:
>>>>
>>>> date             Australia   Belarus   ...    Zambia
>>>> 01/01/1994   20             21                 22
>>>> ...
>>>>
>>>> Here, due to my misunderstanding about the code, I was wrong. But, what
>>>> data structure you guessed, it is absolutely right that for each row, I
>>> have
>>>> columns for each of the 84 countries. So, I think, I need to define the
>>> date
>>>> column with no. of months, and years once for all the countries.
>>>> Therefore, I got my answer to the first and third question in the
>>> previous
>>>> email (what you suggested) that I no need to define the column of each
>>>> country, as the date, and no. of observations are same for all
>> countries.
>>>> But, the no. of days are different for each month, and similarly, for
>>> each
>>>> year. So, I think I need to define date for each year separately.
>>> Hence, I have
>>>> given an example of 12 months, for 2 years (i.e. 1994, and 1995), and
>>> have
>>>> written the following code. Please correct me in case I am wrong.
>>>>
>>>>   spdat<-data.frame(
>>>>
>>>>
>>>
>> dates=paste(c(1:21,1:20,1:23,1:21,1:22,1:22,1:21,1:23,1:22,1:21,1:22,1:22),c(r
>>>> ep(1,21),rep(2,20),
>>>> rep(3,23), rep(4,21),
>>>>
>>>
>> rep(5,22),rep(6,22),rep(7,21),rep(8,23),rep(9,22),rep(10,21),rep(11,22),rep(12
>>>> ,22)
>>>> ),rep(1994,260)
>>>>   dates1=
>>>>
>>>
>> paste(c(1:22,1:20,1:23,1:20,1:23,1:22,1:21,1:23,1:21,1:22,1:22,1:21),c(rep(1,2
>>>> 2),rep(2,20),
>>>> rep(3,23), rep(4,20),
>>>>
>>>
>> rep(5,23),rep(6,22),rep(7,21),rep(8,23),rep(9,21),rep(10,21),rep(11,22),rep(12
>>>> ,21)
>>>> ),rep(1995,259) ,sep="-")
>>>>
>>>> Concerning the exporting of structure of the dataset to excel, I will
>>> have
>>>> 12*84 matrix. But, please suggest me the way to proceed for the large
>>>> sample. I have mentioned below what I understood from your code. Please
>>>> correct me if I am wrong.
>>>> 1. I need to define the date for each year as the no. of days in each
>>> month
>>>> are different for each year (as mentioned in my above code). For
>>> instance, in
>>>> my data file, Jan 1994 has 21 days while Jan 1995 has 22 days.
>>>> 2. Need to define the date column as character.
>>>> 3. Need to define the monthly average for each month, and year. So, now
>>>> code will be as follows.
>>>>
>>>
>> spdat$month<-sapply(strsplit(spdat$dates,"-"),"[",2,3,4,5,6,7,8,9,10,11,12)
>>>>    %%%%As I need all months average sequentially.
>>>> spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",3)
>>>>
>>>> Here, this meaning of "3", I am really unable to get.
>>>>
>>>> 4. Need to define each country with each month and year as mentioned in
>>>> the last part of your code.
>>>>
>>>> Please suggest me in this regard.
>>>>
>>>> Thank you.
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>>
>>>> [image: Mailtrack]
>>>> <https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_ca
>>>> mpaign=signaturevirality5&>
>>>> Sender
>>>> notified by
>>>> Mailtrack
>>>> <https://mailtrack.io?utm_source=gmail&utm_medium=signature&utm_ca
>>>> mpaign=signaturevirality5&>
>>>> 09/13/19,
>>>> 06:41:41 PM
>>>>
>>>> On Fri, Sep 13, 2019 at 4:24 PM Jim Lemon <mailto:drjimlemon at gmail.com
>>>
>>> wrote:
>>>>
>>>>> Hi Subhamitra,
>>>>> I'll try to write my answers adjacent to your questions below.
>>>>>
>>>>> On Fri, Sep 13, 2019 at 6:08 PM Subhamitra Patra <
>>>>> mailto:subhamitra.patra at gmail.com> wrote:
>>>>>
>>>>>> Dear Sir,
>>>>>>
>>>>>> Thank you very much for your suggestion.
>>>>>>
>>>>>> Yes, your suggested code worked. But, actually, I have data from 3rd
>>>>>> January 1994 to 3rd August 2017 for very large (i.e. for 84
>>>>>> countries) sample. From this, I have given the example of the years
>>>>>> up to 2000. Before applying the same code for the long 24 years, I
>>>>>> want to learn the logic behind the code. Actually, some part of the
>>>>>> code is not understandable to me which I mentioned in the bold
>> letter
>>> as
>>>> follows.
>>>>>>
>>>>>> "spdat<-data.frame(
>>>>>>
>>>   dates=paste(c(1:30,1:28),c(rep(1,30),rep(2,28)),rep(1994,58),sep="-"),
>>>>>>    returnA=sample(*15:50*,58,TRUE),returnB=sample(*10:45*,58,TRUE))"
>>>>>>
>>>>>> A. Here, I need to define the no. of days in a month, and the no. of
>>>>>> countries name separately, right? But, what is meant by 15:50, and
>>>>>> 10:45 in return A, and B respectively?
>>>>>>
>>>>>
>>>>> To paraphrase Donald Trump, this is FAKE DATA! I have no idea what
>> the
>>>>> real values of return are, so I made them up using the "sample"
>>> function.
>>>>> However, this is not meant to mislead anyone, just to show how
>>>>> whatever numbers are in your data can be used in calculations. The
>>>>> colon (":") operator creates a sequence of numbers starting with the
>>>>> one to the left and ending with the one to the right.
>>>>>
>>>>>>
>>>>>> "# if you only have to get the monthly averages, it can be done this
>>>>>> way
>>>>>> spdat$month<-sapply(strsplit(spdat$dates,"-"),"["*,2*)
>>>>>> spdat$year<-sapply(strsplit(spdat$dates,"-"),"[",*3*)"
>>>>>>
>>>>>> B. Here, I need to define the no. of months, and years separately,
>>> right?
>>>>>> or else what 2, and 3 (in bold) indicates?
>>>>>>
>>>>>
>>>>> To get the grouping variable of sequential months that you want, you
>>>>> only need the month and year values of the dates in the first column.
>>>>> First I used the "strsplit" function to split the date field at the
>>>>> hyphens, then used "sapply" to extract ("[") the second (month) and
>>>>> third (year) parts as two new columns. Because you have more than one
>>>>> year of data, you need the year values or you will group all
>> Januarys,
>>>>> all Februarys and so on. Notice how I pass both of the new columns as
>>>>> a list (a data frame is a type of
>>>>> list) in the call to get the mean of each month.
>>>>>
>>>>>>
>>>>>> "# get the averages by month and year - is this correct?
>>>>>> monthlyA<-by(*spdat$returnA*,spdat[,c("month","year")],mean)
>>>>>> monthlyB<-by(*spdat$returnB*,spdat[,c("month","year")],mean)"
>>>>>>
>>>>>> C. From this part, I got the exact average values of both January
>> and
>>>>>> February of 1994 for country A, and B. But, in code, I have a query
>>>>>> that I need to define  spdat$returnA, and  spdat$returnB separately
>>>>>> before writing this code, right? Like this, I need to define for
>> each
>>>>>> 84 countries separately with their respective number of months, and
>>>>>> years before writing this code, right?
>>>>>>
>>>>>
>>>>> I don't think so. Because I don't know what your data looks like, I
>> am
>>>>> guessing that for each row, it has columns for each of the 84
>>>>> countries. I don't know what these columns are named, either. Maybe:
>>>>>
>>>>> date             Australia   Belarus   ...    Zambia
>>>>> 01/01/1994   20             21                 22
>>>>> ...
>>>>>
>>>>>
>>>>>> Yes, after obtaining the monthly average for each country's data, I
>>>>>> need to use them for further calculations. So, I want to export the
>>>>>> result to excel. But, until understanding the code, I think I
>> willn't
>>>>>> able to apply for the entire sample, and cannot be able to discuss
>>>>>> the format of the resulted column to export to excel.
>>>>>>
>>>>>
>>>>> Say that we perform the grouped mean calculation for the first two
>>>>> country columns like this:
>>>>> monmeans<-sapply(spdat[,2:3],by,spdat[,c("month","year")],mean)
>>>>> monmeans
>>>>>      Australia  Belarus
>>>>> [1,]  29.70000 30.43333
>>>>> [2,]  34.17857 27.39286
>>>>>
>>>>> We are presented with a 2x2 matrix of monthly means in just the
>> format
>>>>> someone might use for importing into Excel. The first row is January
>>>>> 1994, the second February 1994 and so on. By expanding the columns to
>>>>> include all the countries in your data, You should have the result
>> you
>>> want.
>>>>>
>>>>> Jim
>>>>>
>>>>
>>>>
>>>> --
>>>> *Best Regards,*
>>>> *Subhamitra Patra*
>>>> *Phd. Research Scholar*
>>>> *Department of Humanities and Social Sciences* *Indian Institute of
>>>> Technology, Kharagpur*
>>>> *INDIA*
>>>>
>>>> [[alternative HTML version deleted]]
>>>>
>>>> ______________________________________________
>>>> mailto:R-help at r-project.org mailing list -- To UNSUBSCRIBE and more,
>> see
>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>> PLEASE do read the posting guide http://www.R-project.org/posting-
>>>> guide.html
>>>> and provide commented, minimal, self-contained, reproducible code.
>>> Osobn? ?daje: Informace o zpracov?n? a ochran? osobn?ch ?daj? obchodn?ch
>>> partner? PRECHEZA a.s. jsou zve?ejn?ny na:
>>> https://www.precheza.cz/zasady-ochrany-osobnich-udaju/ | Information
>>> about processing and protection of business partner?s personal data are
>>> available on website:
>>> https://www.precheza.cz/en/personal-data-protection-principles/
>>> D?v?rnost: Tento e-mail a jak?koliv k n?mu p?ipojen? dokumenty jsou
>>> d?v?rn? a podl?haj? tomuto pr?vn? z?vazn?mu prohl??en? o vylou?en?
>>> odpov?dnosti: https://www.precheza.cz/01-dovetek/ | This email and any
>>> documents attached to it may be confidential and are subject to the
>> legally
>>> binding disclaimer: https://www.precheza.cz/en/01-disclaimer/
>>>
>>>
>>>
>>> --
>>> Best Regards,
>>> Subhamitra Patra
>>> Phd. Research Scholar
>>> Department of Humanities and Social Sciences
>>> Indian Institute of Technology, Kharagpur
>>> INDIA
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide
>>> http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>
>>
>>
>> --
>> *Best Regards,*
>> *Subhamitra Patra*
>> *Phd. Research Scholar*
>> *Department of Humanities and Social Sciences*
>> *Indian Institute of Technology, Kharagpur*
>> *INDIA*
>>
>>          [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Sun Oct 20 19:15:52 2019
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Sun, 20 Oct 2019 19:15:52 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <CAGxFJbR0O_bGVZ_2zzpEqWo9t=vpCMAxqQj=r7CN6sDkFeaQdw@mail.gmail.com>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
 <CAGxFJbR0O_bGVZ_2zzpEqWo9t=vpCMAxqQj=r7CN6sDkFeaQdw@mail.gmail.com>
Message-ID: <096f586c-84e3-c847-3c99-9136542e3749@univ-fcomte.fr>

Great !? You have helped to solve a problem on which I was sweating 
(sporadically, however) since months...

Thanks,

Best,


Le 20/10/2019 ? 18:29, Bert Gunter a ?crit?:
> The legend must be "an expression vector."
> c("Sans renard",bquote(.(densren) (ind./km)^2))?? is not because the 
> first element is a character string.
>
> This works:
>
> plot(1:100,1:100,type="n")
> ? ?legend(list(x=0,y=100),legend=c(expression("Sans 
> renard"),bquote(.(densren) 
> (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
>
> Cheers,
> Bert
>
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along 
> and sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Sun, Oct 20, 2019 at 9:02 AM Patrick Giraudoux 
> <patrick.giraudoux at univ-fcomte.fr 
> <mailto:patrick.giraudoux at univ-fcomte.fr>> wrote:
>
>     Thanks Bert and Peter,
>
>     Yes Bert, I was aware of the legend() function syntax, and just
>     quoting the legend argument within the function.
>
>     However, Bert and Peter, I do not understand why it works with
>     your absolutely reproducible examples and not in the slightly (not
>     so slightly apparently) different context where I used it...
>
>     densren=1.25
>     plot(1:100,1:100,type="n")
>     legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren)
>     (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
>
>     densren=1.25
>     plot(1:100,1:100,type="n")
>     legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) *
>     " ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"
>
>     Probably because the result of bquote() is concatenated in a
>     character vector, but how to deal with this ?
>
>     Best,
>
>     Patrick
>
>
>
>     Le 20/10/2019 ? 16:42, Bert Gunter a ?crit?:
>>     Assuming you are using base graphics, your syntax for adding the
>>     legend appears to be wrong.
>>     legend() is a separate function, not a parameter of plot.default
>>     afaics.
>>
>>     The following works for me:
>>
>>     > densren <- 1.25
>>     > plot(1:10)
>>     > legend (x="center", legend =bquote(.(densren) (ind./km)^2))
>>
>>     See ?legend
>>
>>     Bert Gunter
>>
>>     "The trouble with having an open mind is that people keep coming
>>     along and sticking things into it."
>>     -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>>
>>
>>     On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux
>>     <patrick.giraudoux at univ-fcomte.fr
>>     <mailto:patrick.giraudoux at univ-fcomte.fr>> wrote:
>>
>>         Dear listers,
>>
>>         I am trying to pass an expression inlcuding a variable and a
>>         superpscript to a legend. What I want to obtain is e.g. with
>>         densren = 1.25
>>
>>         1.25 ind./km^2
>>
>>         I have tried many variants of the following:
>>
>>         legend=bquote(.(densren) (ind./km)^2)
>>
>>         but if not errors, do obtain
>>
>>         1.25 (ind./km^2)
>>
>>         hence not what I want (no parenthesis, 2 in superscript...)
>>
>>         Any idea about a correct syntax to get what I need ?
>>
>>         Best,
>>
>>         Patrick
>>
>>
>>         ? ? ? ? [[alternative HTML version deleted]]
>>
>>         ______________________________________________
>>         R-help at r-project.org <mailto:R-help at r-project.org> mailing
>>         list -- To UNSUBSCRIBE and more, see
>>         https://stat.ethz.ch/mailman/listinfo/r-help
>>         PLEASE do read the posting guide
>>         http://www.R-project.org/posting-guide.html
>>         and provide commented, minimal, self-contained, reproducible
>>         code.
>>
>


	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Sun Oct 20 19:31:00 2019
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sun, 20 Oct 2019 19:31:00 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
Message-ID: <D07332B6-A82C-42DA-926E-975F400EE54D@gmail.com>

It's tricky, but I think what you want is

legend(list(x=0,y=100),
   legend=as.expression(list(
     "Sans renard",
     bquote(.(densren) * " ind."/"km"^2)
   )),
   lty=c(1,2),col=c("black","red"),bty="n")

Generally, if you want a vector of unevaluated expressions, you need an object of mode "expression", but you cannot create it directly with expression() because then the bquote() is left unevaluated:

> expression("Sans renard",bquote(.(densren) * " ind."/"km"^2))
expression("Sans renard", bquote(.(densren) * " ind."/"km"^2))

Putting the bquote on the outside _looks_ like it might work:

> bquote(expression("Sans renard",.(densren) * " ind."/"km"^2))
expression("Sans renard", 1.25 * " ind."/"km"^2)

but that is not an "expression" object, but a call to expression() (!). Try it and see.

Evaluating the call does actually work (notice that the printed value is exactly the same, but the object is not):

> eval(bquote(expression("Sans renard",.(densren) * " ind."/"km"^2)))
expression("Sans renard", 1.25 * " ind."/"km"^2)

but I think I prefer the as.expression(list(....)) construction.

An alternative tack is this:

> e <- expression(0,0)
> e[[1]] <- "sans renard"
> e[[2]] <- bquote(.(densren) * " ind."/"km"^2)
> plot(1:100,1:100,type="n")
> legend(list(x=0,y=100),legend=e, lty=c(1,2),col=c("black","red"),bty="n")



> On 20 Oct 2019, at 18:02 , Patrick Giraudoux <patrick.giraudoux at univ-fcomte.fr> wrote:
> 
> Thanks Bert and Peter,
> 
> Yes Bert, I was aware of the legend() function syntax, and just quoting the legend argument within the function. 
> 
> However, Bert and Peter, I do not understand why it works with your absolutely reproducible examples and not in the slightly (not so slightly apparently) different context where I used it...
> 
> densren=1.25
> plot(1:100,1:100,type="n")
> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
> 
> densren=1.25
> plot(1:100,1:100,type="n")
> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) * " ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"
> 
> Probably because the result of bquote() is concatenated in a character vector, but how to deal with this ?
> 
> Best,
> 
> Patrick
> 
> 
> 
> Le 20/10/2019 ? 16:42, Bert Gunter a ?crit :
>> Assuming you are using base graphics, your syntax for adding the legend appears to be wrong.
>> legend() is a separate function, not a parameter of plot.default afaics.
>> 
>> The following works for me:
>> 
>> > densren <- 1.25
>> > plot(1:10)
>> > legend (x="center", legend =bquote(.(densren) (ind./km)^2))
>> 
>> See ?legend
>> 
>> Bert Gunter
>> 
>> "The trouble with having an open mind is that people keep coming along and sticking things into it."
>> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>> 
>> 
>> On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux <patrick.giraudoux at univ-fcomte.fr> wrote:
>> Dear listers,
>> 
>> I am trying to pass an expression inlcuding a variable and a 
>> superpscript to a legend. What I want to obtain is e.g. with densren = 1.25
>> 
>> 1.25 ind./km^2
>> 
>> I have tried many variants of the following:
>> 
>> legend=bquote(.(densren) (ind./km)^2)
>> 
>> but if not errors, do obtain
>> 
>> 1.25 (ind./km^2)
>> 
>> hence not what I want (no parenthesis, 2 in superscript...)
>> 
>> Any idea about a correct syntax to get what I need ?
>> 
>> Best,
>> 
>> Patrick
>> 
>> 
>>         [[alternative HTML version deleted]]
>> 
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Sun Oct 20 20:01:40 2019
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Sun, 20 Oct 2019 20:01:40 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <D07332B6-A82C-42DA-926E-975F400EE54D@gmail.com>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
 <D07332B6-A82C-42DA-926E-975F400EE54D@gmail.com>
Message-ID: <f86f2b23-5210-4405-f9ea-d796c6f2407b@univ-fcomte.fr>

Now, we have two solutions working. This is great since I did not find 
any example of the kind searching r-help archives and google...
Thanks !

Le 20/10/2019 ? 19:31, Peter Dalgaard a ?crit?:
> It's tricky, but I think what you want is
>
> legend(list(x=0,y=100),
>     legend=as.expression(list(
>       "Sans renard",
>       bquote(.(densren) * " ind."/"km"^2)
>     )),
>     lty=c(1,2),col=c("black","red"),bty="n")
>
> Generally, if you want a vector of unevaluated expressions, you need an object of mode "expression", but you cannot create it directly with expression() because then the bquote() is left unevaluated:
>
>> expression("Sans renard",bquote(.(densren) * " ind."/"km"^2))
> expression("Sans renard", bquote(.(densren) * " ind."/"km"^2))
>
> Putting the bquote on the outside _looks_ like it might work:
>
>> bquote(expression("Sans renard",.(densren) * " ind."/"km"^2))
> expression("Sans renard", 1.25 * " ind."/"km"^2)
>
> but that is not an "expression" object, but a call to expression() (!). Try it and see.
>
> Evaluating the call does actually work (notice that the printed value is exactly the same, but the object is not):
>
>> eval(bquote(expression("Sans renard",.(densren) * " ind."/"km"^2)))
> expression("Sans renard", 1.25 * " ind."/"km"^2)
>
> but I think I prefer the as.expression(list(....)) construction.
>
> An alternative tack is this:
>
>> e <- expression(0,0)
>> e[[1]] <- "sans renard"
>> e[[2]] <- bquote(.(densren) * " ind."/"km"^2)
>> plot(1:100,1:100,type="n")
>> legend(list(x=0,y=100),legend=e, lty=c(1,2),col=c("black","red"),bty="n")
>
>
>> On 20 Oct 2019, at 18:02 , Patrick Giraudoux <patrick.giraudoux at univ-fcomte.fr> wrote:
>>
>> Thanks Bert and Peter,
>>
>> Yes Bert, I was aware of the legend() function syntax, and just quoting the legend argument within the function.
>>
>> However, Bert and Peter, I do not understand why it works with your absolutely reproducible examples and not in the slightly (not so slightly apparently) different context where I used it...
>>
>> densren=1.25
>> plot(1:100,1:100,type="n")
>> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
>>
>> densren=1.25
>> plot(1:100,1:100,type="n")
>> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) * " ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"
>>
>> Probably because the result of bquote() is concatenated in a character vector, but how to deal with this ?
>>
>> Best,
>>
>> Patrick
>>
>>
>>
>> Le 20/10/2019 ? 16:42, Bert Gunter a ?crit :
>>> Assuming you are using base graphics, your syntax for adding the legend appears to be wrong.
>>> legend() is a separate function, not a parameter of plot.default afaics.
>>>
>>> The following works for me:
>>>
>>>> densren <- 1.25
>>>> plot(1:10)
>>>> legend (x="center", legend =bquote(.(densren) (ind./km)^2))
>>> See ?legend
>>>
>>> Bert Gunter
>>>
>>> "The trouble with having an open mind is that people keep coming along and sticking things into it."
>>> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>>>
>>>
>>> On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux <patrick.giraudoux at univ-fcomte.fr> wrote:
>>> Dear listers,
>>>
>>> I am trying to pass an expression inlcuding a variable and a
>>> superpscript to a legend. What I want to obtain is e.g. with densren = 1.25
>>>
>>> 1.25 ind./km^2
>>>
>>> I have tried many variants of the following:
>>>
>>> legend=bquote(.(densren) (ind./km)^2)
>>>
>>> but if not errors, do obtain
>>>
>>> 1.25 (ind./km^2)
>>>
>>> hence not what I want (no parenthesis, 2 in superscript...)
>>>
>>> Any idea about a correct syntax to get what I need ?
>>>
>>> Best,
>>>
>>> Patrick
>>>
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>


From p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r  Sun Oct 20 20:09:08 2019
From: p@tr|ck@g|r@udoux @end|ng |rom un|v-|comte@|r (Patrick Giraudoux)
Date: Sun, 20 Oct 2019 20:09:08 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <096f586c-84e3-c847-3c99-9136542e3749@univ-fcomte.fr>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
 <CAGxFJbR0O_bGVZ_2zzpEqWo9t=vpCMAxqQj=r7CN6sDkFeaQdw@mail.gmail.com>
 <096f586c-84e3-c847-3c99-9136542e3749@univ-fcomte.fr>
Message-ID: <2f7e00e8-8ba3-8c61-e9b1-42c926856398@univ-fcomte.fr>


Would be nice to put those two way examples in the documentation of the 
function 'expression' and 'bquote' in the next R version (we are in the 
base) for other users? ;-) I am sure many would enjoy.



Le 20/10/2019 ? 19:15, Patrick Giraudoux a ?crit?:
> Great !? You have helped to solve a problem on which I was sweating 
> (sporadically, however) since months...
>
> Thanks,
>
> Best,
>
>
> Le 20/10/2019 ? 18:29, Bert Gunter a ?crit?:
>> The legend must be "an expression vector."
>> c("Sans renard",bquote(.(densren) (ind./km)^2))?? is not because the 
>> first element is a character string.
>>
>> This works:
>>
>> plot(1:100,1:100,type="n")
>> ? ?legend(list(x=0,y=100),legend=c(expression("Sans 
>> renard"),bquote(.(densren) 
>> (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
>>
>> Cheers,
>> Bert
>>
>>
>> Bert Gunter
>>
>> "The trouble with having an open mind is that people keep coming 
>> along and sticking things into it."
>> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>>
>>
>> On Sun, Oct 20, 2019 at 9:02 AM Patrick Giraudoux 
>> <patrick.giraudoux at univ-fcomte.fr 
>> <mailto:patrick.giraudoux at univ-fcomte.fr>> wrote:
>>
>>     Thanks Bert and Peter,
>>
>>     Yes Bert, I was aware of the legend() function syntax, and just
>>     quoting the legend argument within the function.
>>
>>     However, Bert and Peter, I do not understand why it works with
>>     your absolutely reproducible examples and not in the slightly
>>     (not so slightly apparently) different context where I used it...
>>
>>     densren=1.25
>>     plot(1:100,1:100,type="n")
>>     legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren)
>>     (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
>>
>>     densren=1.25
>>     plot(1:100,1:100,type="n")
>>     legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) *
>>     " ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"
>>
>>     Probably because the result of bquote() is concatenated in a
>>     character vector, but how to deal with this ?
>>
>>     Best,
>>
>>     Patrick
>>
>>
>>
>>     Le 20/10/2019 ? 16:42, Bert Gunter a ?crit?:
>>>     Assuming you are using base graphics, your syntax for adding the
>>>     legend appears to be wrong.
>>>     legend() is a separate function, not a parameter of plot.default
>>>     afaics.
>>>
>>>     The following works for me:
>>>
>>>     > densren <- 1.25
>>>     > plot(1:10)
>>>     > legend (x="center", legend =bquote(.(densren) (ind./km)^2))
>>>
>>>     See ?legend
>>>
>>>     Bert Gunter
>>>
>>>     "The trouble with having an open mind is that people keep coming
>>>     along and sticking things into it."
>>>     -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>>>
>>>
>>>     On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux
>>>     <patrick.giraudoux at univ-fcomte.fr
>>>     <mailto:patrick.giraudoux at univ-fcomte.fr>> wrote:
>>>
>>>         Dear listers,
>>>
>>>         I am trying to pass an expression inlcuding a variable and a
>>>         superpscript to a legend. What I want to obtain is e.g. with
>>>         densren = 1.25
>>>
>>>         1.25 ind./km^2
>>>
>>>         I have tried many variants of the following:
>>>
>>>         legend=bquote(.(densren) (ind./km)^2)
>>>
>>>         but if not errors, do obtain
>>>
>>>         1.25 (ind./km^2)
>>>
>>>         hence not what I want (no parenthesis, 2 in superscript...)
>>>
>>>         Any idea about a correct syntax to get what I need ?
>>>
>>>         Best,
>>>
>>>         Patrick
>>>
>>>
>>>         ? ? ? ? [[alternative HTML version deleted]]
>>>
>>>         ______________________________________________
>>>         R-help at r-project.org <mailto:R-help at r-project.org> mailing
>>>         list -- To UNSUBSCRIBE and more, see
>>>         https://stat.ethz.ch/mailman/listinfo/r-help
>>>         PLEASE do read the posting guide
>>>         http://www.R-project.org/posting-guide.html
>>>         and provide commented, minimal, self-contained, reproducible
>>>         code.
>>>
>>
>


	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Sun Oct 20 20:28:49 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sun, 20 Oct 2019 11:28:49 -0700
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <f86f2b23-5210-4405-f9ea-d796c6f2407b@univ-fcomte.fr>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
 <D07332B6-A82C-42DA-926E-975F400EE54D@gmail.com>
 <f86f2b23-5210-4405-f9ea-d796c6f2407b@univ-fcomte.fr>
Message-ID: <CAGxFJbS1oY4YnrZ676TK4a0xjvmMNXqUGBo12U8wLVCn8s0N-A@mail.gmail.com>

To continue down this rabbit hole ...

Actually, both solutions are the same; Peter's is just more general than
mine, as it works more conveniently for more lines in the legend.

However, note that:

> class(c("Sans renard", bquote(.(densren) (ind./km)^2)))
[1] "list"  # by coercion

so it does not seem necessary to explicitly call list(). That is:

   plot(1:100,1:100,type="n")
   legend(list(x=0,y=100), legend = as.expression(c("Sans renard",
bquote(.(densren) (ind./km)^2))),lty=c(1,2),col=c("black","red"),bty="n")

appears to suffice. I would appreciate correction if I'm wrong about this.

Cheers,
Bert



Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sun, Oct 20, 2019 at 11:01 AM Patrick Giraudoux <
patrick.giraudoux at univ-fcomte.fr> wrote:

> Now, we have two solutions working. This is great since I did not find
> any example of the kind searching r-help archives and google...
> Thanks !
>
> Le 20/10/2019 ? 19:31, Peter Dalgaard a ?crit :
> > It's tricky, but I think what you want is
> >
> > legend(list(x=0,y=100),
> >     legend=as.expression(list(
> >       "Sans renard",
> >       bquote(.(densren) * " ind."/"km"^2)
> >     )),
> >     lty=c(1,2),col=c("black","red"),bty="n")
> >
> > Generally, if you want a vector of unevaluated expressions, you need an
> object of mode "expression", but you cannot create it directly with
> expression() because then the bquote() is left unevaluated:
> >
> >> expression("Sans renard",bquote(.(densren) * " ind."/"km"^2))
> > expression("Sans renard", bquote(.(densren) * " ind."/"km"^2))
> >
> > Putting the bquote on the outside _looks_ like it might work:
> >
> >> bquote(expression("Sans renard",.(densren) * " ind."/"km"^2))
> > expression("Sans renard", 1.25 * " ind."/"km"^2)
> >
> > but that is not an "expression" object, but a call to expression() (!).
> Try it and see.
> >
> > Evaluating the call does actually work (notice that the printed value is
> exactly the same, but the object is not):
> >
> >> eval(bquote(expression("Sans renard",.(densren) * " ind."/"km"^2)))
> > expression("Sans renard", 1.25 * " ind."/"km"^2)
> >
> > but I think I prefer the as.expression(list(....)) construction.
> >
> > An alternative tack is this:
> >
> >> e <- expression(0,0)
> >> e[[1]] <- "sans renard"
> >> e[[2]] <- bquote(.(densren) * " ind."/"km"^2)
> >> plot(1:100,1:100,type="n")
> >> legend(list(x=0,y=100),legend=e,
> lty=c(1,2),col=c("black","red"),bty="n")
> >
> >
> >> On 20 Oct 2019, at 18:02 , Patrick Giraudoux <
> patrick.giraudoux at univ-fcomte.fr> wrote:
> >>
> >> Thanks Bert and Peter,
> >>
> >> Yes Bert, I was aware of the legend() function syntax, and just quoting
> the legend argument within the function.
> >>
> >> However, Bert and Peter, I do not understand why it works with your
> absolutely reproducible examples and not in the slightly (not so slightly
> apparently) different context where I used it...
> >>
> >> densren=1.25
> >> plot(1:100,1:100,type="n")
> >> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren)
> (ind./km)^2)),lty=c(1,2),col=c("black","red"),bty="n")
> >>
> >> densren=1.25
> >> plot(1:100,1:100,type="n")
> >> legend(list(x=0,y=100),legend=c("Sans renard",bquote(.(densren) * "
> ind."/"km"^2)),lty=c(1,2),col=c("black","red"),bty="n"
> >>
> >> Probably because the result of bquote() is concatenated in a character
> vector, but how to deal with this ?
> >>
> >> Best,
> >>
> >> Patrick
> >>
> >>
> >>
> >> Le 20/10/2019 ? 16:42, Bert Gunter a ?crit :
> >>> Assuming you are using base graphics, your syntax for adding the
> legend appears to be wrong.
> >>> legend() is a separate function, not a parameter of plot.default
> afaics.
> >>>
> >>> The following works for me:
> >>>
> >>>> densren <- 1.25
> >>>> plot(1:10)
> >>>> legend (x="center", legend =bquote(.(densren) (ind./km)^2))
> >>> See ?legend
> >>>
> >>> Bert Gunter
> >>>
> >>> "The trouble with having an open mind is that people keep coming along
> and sticking things into it."
> >>> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> >>>
> >>>
> >>> On Sun, Oct 20, 2019 at 5:30 AM Patrick Giraudoux <
> patrick.giraudoux at univ-fcomte.fr> wrote:
> >>> Dear listers,
> >>>
> >>> I am trying to pass an expression inlcuding a variable and a
> >>> superpscript to a legend. What I want to obtain is e.g. with densren =
> 1.25
> >>>
> >>> 1.25 ind./km^2
> >>>
> >>> I have tried many variants of the following:
> >>>
> >>> legend=bquote(.(densren) (ind./km)^2)
> >>>
> >>> but if not errors, do obtain
> >>>
> >>> 1.25 (ind./km^2)
> >>>
> >>> hence not what I want (no parenthesis, 2 in superscript...)
> >>>
> >>> Any idea about a correct syntax to get what I need ?
> >>>
> >>> Best,
> >>>
> >>> Patrick
> >>>
> >>>
> >>>          [[alternative HTML version deleted]]
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >>
>
>

	[[alternative HTML version deleted]]


From pd@|gd @end|ng |rom gm@||@com  Sun Oct 20 21:06:44 2019
From: pd@|gd @end|ng |rom gm@||@com (Peter Dalgaard)
Date: Sun, 20 Oct 2019 21:06:44 +0200
Subject: [R] using a variable and a superscript in a legend
In-Reply-To: <CAGxFJbS1oY4YnrZ676TK4a0xjvmMNXqUGBo12U8wLVCn8s0N-A@mail.gmail.com>
References: <26b217ab-1ca9-1633-8cb6-2b282c318062@univ-fcomte.fr>
 <CAGxFJbTaeOoN5Ta7SDps848xFjETAWpoCG_mDkDibKGG+pkPRQ@mail.gmail.com>
 <ffb1f2a5-5236-f9c7-1d85-f8eb42ea15dc@univ-fcomte.fr>
 <D07332B6-A82C-42DA-926E-975F400EE54D@gmail.com>
 <f86f2b23-5210-4405-f9ea-d796c6f2407b@univ-fcomte.fr>
 <CAGxFJbS1oY4YnrZ676TK4a0xjvmMNXqUGBo12U8wLVCn8s0N-A@mail.gmail.com>
Message-ID: <DDA1D3F4-737B-4340-BE1E-F32636FA667A@gmail.com>

You're right. I was worried that c() would create a character vector and deparse the unevaluated call in the process, but apparently it is an implicit as.character _inside_ legend that is doing us in. (I can't offhand see where it is happening, but there might be scope for improvement if legend() would just accept a list object and treat the elements separately).

-pd

> On 20 Oct 2019, at 20:28 , Bert Gunter <bgunter.4567 at gmail.com> wrote:
> 
> However, note that:
> 
> > class(c("Sans renard", bquote(.(densren) (ind./km)^2)))
> [1] "list"  # by coercion
> 
> so it does not seem necessary to explicitly call list(). That is:
> 
>    plot(1:100,1:100,type="n")
>    legend(list(x=0,y=100), legend = as.expression(c("Sans renard", bquote(.(densren) (ind./km)^2))),lty=c(1,2),col=c("black","red"),bty="n")
> 
> appears to suffice. I would appreciate correction if I'm wrong about this.
> 

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From r@turner @end|ng |rom @uck|@nd@@c@nz  Sun Oct 20 23:55:19 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Mon, 21 Oct 2019 10:55:19 +1300
Subject: [R] Retaining attributes of columns of a data frame when
 subsetting.
In-Reply-To: <22624fa3-d3b7-c9de-744b-e3e2f7358cea@sapo.pt>
References: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
 <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>
 <82a2ea0c-cd58-cdd5-8c93-623bb57a385e@auckland.ac.nz>
 <22624fa3-d3b7-c9de-744b-e3e2f7358cea@sapo.pt>
Message-ID: <f2bae083-7921-d5b6-a552-ff41a1894048@auckland.ac.nz>


On 21/10/19 1:15 AM, Rui Barradas wrote:

> Hello,
> 
> Richard's idea is good but shouldn't it be `[.myclass` instead?

Yes, I kind of thought that, and cobbled together something on that 
basis that seemed to work.  However my code was rather a hodge-podge.  I 
kept having to work around errors that I didn't understand.

You seem to have a much clearer understanding of what's going on, and 
your code is much cleaner than what I came up with.

> 
> 
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else 
>                    length(cols) == 1){
>  ? SaveAt <- lapply(X, attributes)
>  ? X <- NextMethod()
>  ? lX <- lapply(names(X),function(nm, x, Sat){
>  ??? attributes(x[[nm]]) <- Sat[[nm]]
>  ??? x[[nm]]}, x = X, Sat = SaveAt)
>  ? names(lX) <- names(X)
>  ? X <- as.data.frame(lX)
>  ? X
> }

But in the foregoing there seems to me to be some inconsistency in the 
use of "X" and "x".

Should not the first function argument be "X" rather than "x"?  Or 
perhaps the "X" symbols in the code should be replaced by "x"?  As in:

     SaveAt <- lapply(x, attributes)
     x <- NextMethod()
     ....
     ....

Or am I misunderstanding what's going on (as is so often
the case! :-( )?

> X <- data.frame(a = letters[1:5], x = 1:5)
> class(X) <- c("myclass", class(X))
> attr(X$a, "attr_a1") <- "first_a"
> attr(X$a, "attr_a2") <- "second_a"
> str(X)
> 
> ok <- c(1, 3, 4)
> X <- X[ok, ]
> str(X)
> 
> 
> Hope this helps,

Quite a lot!  But I'd appreciate clarification w.r.t. the misgiving that 
I expressed above.

Thanks.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Oct 21 00:07:13 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sun, 20 Oct 2019 23:07:13 +0100
Subject: [R] Retaining attributes of columns of a data frame when
 subsetting.
In-Reply-To: <f2bae083-7921-d5b6-a552-ff41a1894048@auckland.ac.nz>
References: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
 <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>
 <82a2ea0c-cd58-cdd5-8c93-623bb57a385e@auckland.ac.nz>
 <22624fa3-d3b7-c9de-744b-e3e2f7358cea@sapo.pt>
 <f2bae083-7921-d5b6-a552-ff41a1894048@auckland.ac.nz>
Message-ID: <7ba0e144-b951-5830-aa09-00c170bcb810@sapo.pt>

Hello,

Sorry, you're right, in the method it's x, X is the test dataframe.
Repost:

`[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else 
length(cols) == 1){
   SaveAt <- lapply(x, attributes)
   x <- NextMethod()
   lX <- lapply(names(x),function(nm, x, Sat){
     attributes(x[[nm]]) <- Sat[[nm]]
     x[[nm]]}, x = x, Sat = SaveAt)
   names(lX) <- names(x)
   x <- as.data.frame(lX)
   x
}


The (frequent) error comes from tests where a X was created in the 
globalenv and found by the method.

Rui Barradas

?s 22:55 de 20/10/19, Rolf Turner escreveu:
> 
> On 21/10/19 1:15 AM, Rui Barradas wrote:
> 
>> Hello,
>>
>> Richard's idea is good but shouldn't it be `[.myclass` instead?
> 
> Yes, I kind of thought that, and cobbled together something on that 
> basis that seemed to work.? However my code was rather a hodge-podge.? I 
> kept having to work around errors that I didn't understand.
> 
> You seem to have a much clearer understanding of what's going on, and 
> your code is much cleaner than what I came up with.
> 
>>
>>
>> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else 
>> ?????????????????? length(cols) == 1){
>> ?? SaveAt <- lapply(X, attributes)
>> ?? X <- NextMethod()
>> ?? lX <- lapply(names(X),function(nm, x, Sat){
>> ???? attributes(x[[nm]]) <- Sat[[nm]]
>> ???? x[[nm]]}, x = X, Sat = SaveAt)
>> ?? names(lX) <- names(X)
>> ?? X <- as.data.frame(lX)
>> ?? X
>> }
> 
> But in the foregoing there seems to me to be some inconsistency in the 
> use of "X" and "x".
> 
> Should not the first function argument be "X" rather than "x"?? Or 
> perhaps the "X" symbols in the code should be replaced by "x"?? As in:
> 
>  ??? SaveAt <- lapply(x, attributes)
>  ??? x <- NextMethod()
>  ??? ....
>  ??? ....
> 
> Or am I misunderstanding what's going on (as is so often
> the case! :-( )?
> 
>> X <- data.frame(a = letters[1:5], x = 1:5)
>> class(X) <- c("myclass", class(X))
>> attr(X$a, "attr_a1") <- "first_a"
>> attr(X$a, "attr_a2") <- "second_a"
>> str(X)
>>
>> ok <- c(1, 3, 4)
>> X <- X[ok, ]
>> str(X)
>>
>>
>> Hope this helps,
> 
> Quite a lot!? But I'd appreciate clarification w.r.t. the misgiving that 
> I expressed above.
> 
> Thanks.
> 
> cheers,
> 
> Rolf
>


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon Oct 21 00:45:08 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Sun, 20 Oct 2019 15:45:08 -0700
Subject: [R] Preserving numeric columns
In-Reply-To: <1452072544.4060003.1571528466814@mail.yahoo.com>
References: <1231334454.3865499.1571471066172.ref@mail.yahoo.com>
 <1231334454.3865499.1571471066172@mail.yahoo.com>
 <CD7CDB01-5600-4297-BE18-4172A9845225@dcn.davis.ca.us>
 <870093070.4013813.1571514620069@mail.yahoo.com>
 <EA676A84-1FB8-4388-80A3-81AB52829ACF@dcn.davis.ca.us>
 <1452072544.4060003.1571528466814@mail.yahoo.com>
Message-ID: <58850668-BA76-4FCC-9B49-9E84E80377CC@dcn.davis.ca.us>

Well, the direct answer is "no", but then again I did not know the answer to the other question until I Googled it either.

When I do the same for grid.draw, it appears to be a generic function for drawing graphical objects... data frames are not grobs, so you must be doing something to convert it first.

I don't use grid graphics to produce tables... I use knitr::kable or the xtable or tables packages within Rmd or Rnw files.

On October 19, 2019 4:41:06 PM PDT, Felipe Carrillo <mazatlanmexico at yahoo.com> wrote:
>Yes,?options(knitr.kable.NA = '-')? is?The answer for kable.
>Do you happen to know what are the arguments used for gridExtra
>grid.draw to acomplish the same thing?
>
>Sent from Yahoo Mail on Android 
> 
>On Sat, Oct 19, 2019 at 1:01 PM, Jeff
>Newmiller<jdnewmil at dcn.davis.ca.us> wrote:   Then the polite next step
>is for you to indicate what that solution was so people searching the
>archives can learn from your question. Was it to set the kable option?
>
>options(knitr.kable.NA = '-')?
>
>On October 19, 2019 12:50:20 PM PDT, Felipe Carrillo
><mazatlanmexico at yahoo.com> wrote:
>>You are correct. I didnt explain well and failed to mention that this
>>is for knitr::kable. I already figured it out.?
>>
>>Sent from Yahoo Mail on Android 
>> 
>>On Sat, Oct 19, 2019 at 1:04 AM, Jeff
>>Newmiller<jdnewmil at dcn.davis.ca.us> wrote:? Data frames are NOT
>>spreadsheets. Don't treat them like spreadsheets. All elements in a
>>column are parts of a vector which means they all have the same data
>>type.
>>
>>On the other hand, if you want to generate formatted output in HTML,
>>LaTeX, or Word, there are many tools for generating formatted tables
>in
>>the data output phase of data analysis, and it is common to convert
>>everything to character format intentionally then.
>>
>>On October 19, 2019 12:44:26 AM PDT, Felipe Carrillo via R-help
>><r-help at r-project.org> wrote:
>>>Consider the following dataset:? I need to replace NAs with "-" but I
>>>lose my numeric formatting??fall.estimate <- structure(list(`Salmon`
>=
>>>c("salmon River",?"Ant Creek", "big Creek", "oso River", "linda
>>>Creek"), `baseline` = c(80874.384012, 361.1997, 5012.8311,?638.6912,
>>>402.104433333333), `target` = c(160000,?720, 10000, 450, 800), `1992`
>>=
>>>c(27618.4365, 0, 3587.61719,?NA, NA), `1993` = c(100027.82328, NA,
>>>5647.83116, NA, NA), `1994` = c(99414.57438,?NA, 12896.93753, NA,
>NA),
>>>`1995` = c(235027.00518, NA, 32059.63037,?NA, NA), `1996` =
>>>c(143004.6423, NA, 17191.2152, NA, NA), `1997` = c(112796.88894,?NA,
>>>27365.24435, NA, NA), `1998` = c(102858.8148, NA, 20539.17372,?NA,
>>NA),
>>>`1999` = c(94113.26562, NA, 21916.44213, NA, NA)), row.names =
>>>c(NA,?-5L), class = c("tbl_df", "tbl", "data.frame"))
>>>fall.estimatestr(fall.estimate)#convert to class
>>dataframefall.estimate
>>><- as.data.frame(fall.estimate)
>>>#Remove all decimalsfall.estimate[,-1]
>>><-round(fall.estimate[,-1],0)#Replace NA's' with dash
>>>'-'fall.estimate[is.na(fall.estimate)] <- "-"
>>>#Here all my columns get converted to character#Try to convert back
>to
>>>numericfall.estimate <- mutate_all(fall.estimate, function(x)
>>>as.numeric(as.character(x)))?fall.estimate#But I get these warnings
>>>aand my dashes dissapearQuestion: How can I replace my NAs with
>dashes
>>>and keep all my dataframecolumns as numeric??Warning messages:1: In
>>>FUN(newX[, i], ...) : NAs introduced by coercion2: In FUN(newX[, i],
>>>...) : NAs introduced by coercion3: In FUN(newX[, i], ...) : NAs
>>>introduced by coercion4: In FUN(newX[, i], ...) : NAs introduced by
>>>coercion5: In FUN(newX[, i], ...) : NAs introduced by coercion6: In
>>>FUN(newX[, i], ...) : NAs introduced by coercion7: In FUN(newX[, i],
>>>...) : NAs introduced by coercion8: In FUN(newX[, i], ...) : NAs
>>>introduced by coercion9: In FUN(newX[, i], ...) : NAs introduced by
>>>coercion
>>>Thanks beforehand
>>>
>>>
>>>??? [[alternative HTML version deleted]]
>>>
>>>______________________________________________
>>>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>https://stat.ethz.ch/mailman/listinfo/r-help
>>>PLEASE do read the posting guide
>>>http://www.R-project.org/posting-guide.html
>>>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From r@turner @end|ng |rom @uck|@nd@@c@nz  Mon Oct 21 00:53:56 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Mon, 21 Oct 2019 11:53:56 +1300
Subject: [R] Retaining attributes of columns of a data frame when
 subsetting.
In-Reply-To: <7ba0e144-b951-5830-aa09-00c170bcb810@sapo.pt>
References: <3d070338-b2eb-31f1-7bda-5830d13c748a@auckland.ac.nz>
 <CAGx1TMBwMq67Sw3tyvqbAox0YH1acob1NBkQH1cmrGMjaietrQ@mail.gmail.com>
 <82a2ea0c-cd58-cdd5-8c93-623bb57a385e@auckland.ac.nz>
 <22624fa3-d3b7-c9de-744b-e3e2f7358cea@sapo.pt>
 <f2bae083-7921-d5b6-a552-ff41a1894048@auckland.ac.nz>
 <7ba0e144-b951-5830-aa09-00c170bcb810@sapo.pt>
Message-ID: <82fb849e-38ce-703f-9e06-8f3b67f23af5@auckland.ac.nz>


On 21/10/19 11:07 AM, Rui Barradas wrote:

> Hello,
> 
> Sorry, you're right, in the method it's x, X is the test dataframe.
> Repost:
> 
> `[.myclass` <- function(x, i, j, drop = if (missing(i)) TRUE else 
> length(cols) == 1){
>  ? SaveAt <- lapply(x, attributes)
>  ? x <- NextMethod()
>  ? lX <- lapply(names(x),function(nm, x, Sat){
>  ??? attributes(x[[nm]]) <- Sat[[nm]]
>  ??? x[[nm]]}, x = x, Sat = SaveAt)
>  ? names(lX) <- names(x)
>  ? x <- as.data.frame(lX)
>  ? x
> }
> 
> 
> The (frequent) error comes from tests where a X was created in the 
> globalenv and found by the method.

Yep!  Happens to me all the time! :-)

Thanks very much.

cheers,

Rolf

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From |@-m| @end|ng |rom @r||@@|t  Mon Oct 21 01:43:47 2019
From: |@-m| @end|ng |rom @r||@@|t (Francesco Ariis)
Date: Mon, 21 Oct 2019 01:43:47 +0200
Subject: [R] static vs. lexical scope
In-Reply-To: <20190925090242.zgua52gcxkbf6ph3@x60s.casa>
References: <20190925090242.zgua52gcxkbf6ph3@x60s.casa>
Message-ID: <20191020234347.GA12858@x60s.casa>

Hello everyone again,
    I much appreciated the explanations.

On Wed, Sep 25, 2019 at 11:02:42AM +0200, Francesco Ariis wrote:
> Maybe the Introduction should link to it (or similar page) with text
> "In case you are interest in the difference between static and lexical
> scope, check this explanation"?

Is any R-dev thinking about this?
I feel the nomenclature from the World Outside won't change any soon:
"Lexical scoping is also called static scoping." [1]

[1] http://courses.cs.washington.edu/courses/cse341/08au/general-concepts/scoping.html


From drj|m|emon @end|ng |rom gm@||@com  Mon Oct 21 05:15:45 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Mon, 21 Oct 2019 14:15:45 +1100
Subject: [R] Query about calculating the monthly average of daily data
 columns
In-Reply-To: <CAOFE=kPZPcmpPnVxyTqyizV49RiDBm9mYbQgqch9vb4R1h+Dvg@mail.gmail.com>
References: <CAOFE=kNgBOAT-S1ESiC160EE7F7vtvrMD4AAoCpMZn72z4zuBA@mail.gmail.com>
 <CA+8X3fWHvBqYxRMyAN-vp9WhjX=b7CYZ2BaNHyifKgJh3P2k6g@mail.gmail.com>
 <CAOFE=kOsSR1eKFUeXMvU4A6JvBdt1ZCt66teuD5qfRkCfiwOVw@mail.gmail.com>
 <CA+8X3fVnYXzuS3EHyLpBm1Of3m6aZNkmP+bW46w0HztgAduZ-w@mail.gmail.com>
 <CAOFE=kMAyQs6fH8UAdTvC-H0WnOSTtJe7OF0jj_CLnyZA4bDqQ@mail.gmail.com>
 <fcfb3138fcd74deb8ea541687523fe42@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kMEZa8GaxRiSGrvYV6hsBSBqQA9TjGvE-3uWb=jGYCEKg@mail.gmail.com>
 <539f802bb81040b89408ef874be28244@SRVEXCHCM1302.precheza.cz>
 <af92b2007e8a4050af6abe296276e70d@SRVEXCHCM1302.precheza.cz>
 <CAOFE=kPZPcmpPnVxyTqyizV49RiDBm9mYbQgqch9vb4R1h+Dvg@mail.gmail.com>
Message-ID: <CA+8X3fW0EFDMGYmeeC+3=6_rMDeHoxQOcS83FU2s73LH1m9adw@mail.gmail.com>

Hi Subhamitra,
This is not the only way to do this, but if you only want the monthly
averages, it is simple:

# I had to change the "soft" tabs in your email to commas
# in order to read the data in
spdf<-read.table(text="PERMNO,DATE,Spread
111,19940103,0.025464308
111,19940104,0.064424296
111,19940105,0.018579337
111,19940106,0.018872211
111,19940107,0.065279782
111,19940110,0.063485905
111,19940111,0.018355453
111,19940112,0.064135683
111,19940113,0.063519987
111,19940114,0.018277351
111,19940117,0.018628417
111,19940118,0.065630229
111,19940119,0.018713152
111,19940120,0.019119037
111,19940121,0.068342043
111,19940124,0.020843244
111,19940125,0.019954211
111,19940126,0.018980321
111,19940127,0.066827165
111,19940128,0.067459235
111,19940131,0.068682559
111,19940201,0.02081465
111,19940202,0.068236091
111,19940203,0.068821406
111,19940204,0.020075648
111,19940207,0.066070584
111,19940208,0.066068837
111,19940209,0.019077072
111,19940210,0.065894875
111,19940211,0.018847478
111,19940214,0.065040844
111,19940215,0.01880332
111,19940216,0.018836199
111,19940217,0.066888865
111,19940218,0.067116793
111,19940221,0.068809742
111,19940222,0.068230213
111,19940223,0.069502855
111,19940224,0.070383523
111,19940225,0.020430811
111,19940228,0.067087257
111,19940301,0.066776479
111,19940302,0.019959031
111,19940303,0.066596469
111,19940304,0.019131334
111,19940307,0.019312528
111,19940308,0.067349909
111,19940309,0.068916431
111,19940310,0.068620043
111,19940311,0.070494844
111,19940314,0.071056842
111,19940315,0.071042517
111,19940316,0.072401771
111,19940317,0.071940001
111,19940318,0.07352884
111,19940321,0.072671688
111,19940322,0.072652595
111,19940323,0.021352138
111,19940324,0.069933727
111,19940325,0.068717467
111,19940328,0.020470748
111,19940329,0.020003748
111,19940330,0.065833717
111,19940331,0.065268388
111,19940401,0.018762356
111,19940404,0.064914179
111,19940405,0.064706743
111,19940406,0.018764175
111,19940407,0.06524806
111,19940408,0.018593449
111,19940411,0.064913949
111,19940412,0.01872089
111,19940413,0.018729328
111,19940414,0.018978773
111,19940415,0.065477137
111,19940418,0.064614365
111,19940419,0.064184148
111,19940420,0.018553192
111,19940421,0.066872771
111,19940422,0.06680782
111,19940425,0.067467961
111,19940426,0.02014297
111,19940427,0.062464016
111,19940428,0.062357052
112,19940429,0.000233993
112,19940103,0.000815264
112,19940104,0.000238165
112,19940105,0.000813632
112,19940106,0.000236915
112,19940107,0.000809102
112,19940110,0.000801642
112,19940111,0.000797932
112,19940112,0.000795251
112,19940113,0.000795186
112,19940114,0.000231359
112,19940117,0.000232134
112,19940118,0.000233718
112,19940119,0.000233993
112,19940120,0.000234694
112,19940121,0.000235753
112,19940124,0.000808653
112,19940125,0.000235604
112,19940126,0.000805068
112,19940127,0.000802337
112,19940128,0.000801768
112,19940131,0.000233517
112,19940201,0.000797431
112,19940202,0.000233338
112,19940203,0.000233826
112,19940204,0.000799519
112,19940207,0.000798105
112,19940208,0.000792245
112,19940209,0.000231113
112,19940210,0.000233413
112,19940211,0.000798168
112,19940214,0.000233282
112,19940215,0.000797848
112,19940216,0.000785165
112,19940217,0.000228426
112,19940218,0.000786783
112,19940221,0.00078343
112,19940222,0.000781459
112,19940223,0.000776264
112,19940224,0.000226399
112,19940225,0.000779066
112,19940228,0.000773603
112,19940301,0.000226487
112,19940302,0.000775233
112,19940303,0.000227017
112,19940304,0.000227854
112,19940307,0.000782814
112,19940308,0.000229164
112,19940309,0.000787033
112,19940310,0.000784049
112,19940311,0.000228984
112,19940314,0.00078697
112,19940315,0.000782567
112,19940316,0.000228516
112,19940317,0.000786347
112,19940318,0.000229236
112,19940321,0.000230107
112,19940322,0.000792689
112,19940323,0.000787284
112,19940324,0.000787221
112,19940325,0.000227978",
header=TRUE,sep=",",stringsAsFactors=FALSE)
# split the year and month out of the date string
# as you have more than one year in your complete
# data set
spdf$yrmon<-substr(spdf$DATE,1,6)
# get the mean for each PERMNO and year/month
by(spdf$Spread,spdf[,c("PERMNO","yrmon")],mean)

Jim

On Sun, Oct 20, 2019 at 11:09 PM Subhamitra Patra <
subhamitra.patra at gmail.com> wrote:

>
> Here, I am asking one more query (just for learning purpose) that if my
> country name and its respective variable is in the panel format, and I want
> to take the monthly average for each country, how the code will be
> arranged. For your convenience, I am providing a small data sample below.
>
>
>

	[[alternative HTML version deleted]]


From g@@@uu| @end|ng |rom gm@||@com  Mon Oct 21 07:28:45 2019
From: g@@@uu| @end|ng |rom gm@||@com (ani jaya)
Date: Mon, 21 Oct 2019 14:28:45 +0900
Subject: [R] List of data frame
In-Reply-To: <41329aa2-4eff-2c69-b049-a15a243e915e@sapo.pt>
References: <CAHXS41zhJHvd9_iwBysdYBYO=7g7+rAvYuJynTCGK+TMEZT97w@mail.gmail.com>
 <41329aa2-4eff-2c69-b049-a15a243e915e@sapo.pt>
Message-ID: <CAHXS41yef5WsY6Q5JnDOR=6v+_YAyH+qht4KONdkdtHMXF6z_Q@mail.gmail.com>

Hai Rui,

It seems doesnt work for me, the "8888" still there.
So I used this one (Bert suggestion),

test<-lapply(test,function(x){x$RR[x$RR==8888] <- NA; x})

Best,
Ani






On Sat, Oct 19, 2019 at 6:55 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> Why not use read.xlsx argument 'na.strings', an argument that exists in
> many file reading functions? (read.table, and derivatives.)
>
>
> test <- lapply(sheets,function(i) {
>    read.xlsx("rainfall.xlsx", sheet = i,
>              startRow = 8, cols = 1:2,
>              na.strings = "8888")
> })
>
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 02:38 de 18/10/19, ani jaya escreveu:
> > Dear R-Help,
> >
> > I have a list of data frame that I import from excel file using read.xlsx
> > command.
> >
> > sheets <- openxlsx::getSheetNames("rainfall.xlsx")
> > test <- lapply(sheets,function(i) read.xlsx("rainfall.xlsx", sheet=i,
> > startRow=8, cols=1:2))
> > names(test) <- sprintf("%i", 1986:2015)
> >
> > And I got a data.frame with 365 rows and two columns contains date and
> > rainfall data.
> > There is a value in rainfall data that i want to change as NA (8888)
> >
> > test[1]$`1986`
> >         Date   RR
> > 1   01-01-1986    0
> > 2   02-01-1986    7
> > 3   03-01-1986   72
> > 4   04-01-1986    4
> > 5   05-01-1986   19
> > 6   06-01-1986    4
> > 7   07-01-1986   16
> > 8   08-01-1986   21
> > 9   09-01-1986   34
> > 10  10-01-1986   72
> > 11  11-01-1986   93
> > 12  12-01-1986  178
> > 13  13-01-1986   86
> > 14  14-01-1986   11
> > 15  15-01-1986    0
> > 16  16-01-1986   31
> > 17  17-01-1986   22
> > 18  18-01-1986   18
> > 19  19-01-1986    3
> > 20  20-01-1986    0
> > 21  21-01-1986   31
> > 22  22-01-1986   46
> > 23  23-01-1986    4
> > 24  24-01-1986   40
> > 25  25-01-1986   63
> > 26  26-01-1986  125
> > 27  27-01-1986   33
> > 28  28-01-1986   44
> > 29  29-01-1986    6
> > 30  30-01-1986    0
> > 31  31-01-1986    0
> > 32  01-02-1986    2
> > 33  02-02-1986   71
> > 34  03-02-1986 8888
> > 35  04-02-1986    0
> > 36  05-02-1986    0
> > 37  06-02-1986   56
> > 38  07-02-1986   19
> > 39  08-02-1986    3
> > 40  09-02-1986    7
> > 41  10-02-1986   24
> > 42  11-02-1986   55
> > 43  12-02-1986    0
> > 44  13-02-1986    0
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>

	[[alternative HTML version deleted]]


From j@vedbtk111 @end|ng |rom gm@||@com  Mon Oct 21 11:21:44 2019
From: j@vedbtk111 @end|ng |rom gm@||@com (javed khan)
Date: Mon, 21 Oct 2019 11:21:44 +0200
Subject: [R] About vargha effect size
Message-ID: <CAJhui+si0X3iwqtnQifH+TC6BxZheQru2sumGBuD0iqA1N6xFw@mail.gmail.com>

I have two samples A and B in excel and I want to use the vargha and
delaney effect size in R. VD.A (A, B) gives me the result as. 0.170 (large)

My question is how it can be large with this value because the large value
in vargha effect size begins with 0.7 and above.

	[[alternative HTML version deleted]]


From j@zh@o @end|ng |rom ye@h@net  Mon Oct 21 11:28:00 2019
From: j@zh@o @end|ng |rom ye@h@net (Jinsong Zhao)
Date: Mon, 21 Oct 2019 17:28:00 +0800 (CST)
Subject: [R] .libPaths() can not deal non-latin characters?
Message-ID: <7bd2dc7c.a1f2e.16deda50f0b.Coremail.jszhao@yeah.net>

Hi there,

I have a computer run Win10 with user names in Chinese. I installed R on it. It can run normally. When I installed a package, for example, ada, then the library would be installed into "C:/Users/??/Documents/R/win-library/3.6", where "??" is my user name.  

> library(ada)
Error in library(ada) : there is no package called ?ada?

> .libPaths()
[1] "C:/Program Files/R/R-3.6.1/library"

> .libPaths(c("C:/Users/??/Documents/R/win-library/3.6", .libPaths()))
> .libPaths()
[1] "C:/Program Files/R/R-3.6.1/library"

you will find that .libPaths() does not accept the path with Chinese (I think non-latin characters may not be accepted). 

I also tried to install the package to other directory with Chinese character, and then set the .libPaths, and failed. 

Is it the features?

Any hints? Thanks in advance.

Best,
Jinsong
	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Oct 21 12:30:10 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 21 Oct 2019 11:30:10 +0100
Subject: [R] About vargha effect size
In-Reply-To: <CAJhui+si0X3iwqtnQifH+TC6BxZheQru2sumGBuD0iqA1N6xFw@mail.gmail.com>
References: <CAJhui+si0X3iwqtnQifH+TC6BxZheQru2sumGBuD0iqA1N6xFw@mail.gmail.com>
Message-ID: <a310a7be-938c-8f0a-9f9d-d79caf98c3d4@sapo.pt>

Hello,

The question is not answerable. Please read the posting guide (link at 
the bottom of this e-mail).
You need to post sample data and code that reproduces the result you're 
getting.
Also, is the question about interpretation of a result? If so, as it 
seems to be, then this is not the right place to ask, R-Help is about R 
*code* not statistics. For questions about statistics see Cross 
Validated [1]

[1] https://stats.stackexchange.com


Hope this helps,

Rui Barradas

?s 10:21 de 21/10/19, javed khan escreveu:
> I have two samples A and B in excel and I want to use the vargha and
> delaney effect size in R. VD.A (A, B) gives me the result as. 0.170 (large)
> 
> My question is how it can be large with this value because the large value
> in vargha effect size begins with 0.7 and above.
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From r@oknz @end|ng |rom gm@||@com  Mon Oct 21 13:09:37 2019
From: r@oknz @end|ng |rom gm@||@com (Richard O'Keefe)
Date: Tue, 22 Oct 2019 00:09:37 +1300
Subject: [R] 
 [EXTERNAL] Re: "chi-square" | "chi-squared" | "chi squared" |
 "chi square" ?
In-Reply-To: <CAJeYpE9ut6z0+Kn9+uxQQTR-GthA4vN0cmN940G7BmYqxV6jaA@mail.gmail.com>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
 <CAGx1TMAB_2wkT1v6up3KaB9NBxCaD6BT1b3PoMipCqZDM0HnnA@mail.gmail.com>
 <CAJeYpE9ut6z0+Kn9+uxQQTR-GthA4vN0cmN940G7BmYqxV6jaA@mail.gmail.com>
Message-ID: <CABcYAd+FmT2DzdM6fU6xORqe4U3jYAGMu+b5T6NpXixkHu1LfA@mail.gmail.com>

Pearson's original paper uses both \chi and \chi^2 frequently but
never spells out how to pronounce the latter.
Try another question: when talking about \sigma^2 do you say
"sigma-square" (which sounds rather odd) or "sigma-squared" (which
sounds more natural)?  If you say sigma-square, say chi-square.  If
you say sigma-squared, say chi-squared.
For what it's worth, the multu=i-volume "Encyclopedia of Statistical
Sciences", 2nd edition, uses both variants.
And so does Kendal & Stuart, volume 2, 1961, although "-squared" seems
to predominate.

On Sat, 19 Oct 2019 at 11:27, Dalthorp, Daniel via R-help
<r-help at r-project.org> wrote:
>
> oh my...
>
> I'd like to see the statistics on it before jumping to a conclusion that
> the American preference is "chi-square" and the British preference is
> "chi-squared". I don't see that at all.
>
> ------
> In keeping with the pronunciation of x^2 and 3^2, maybe "chi-squared" makes
> the most sense,.
>
> The "chi-square"? Because the iterated dentals in "chi-squared
> distribution" and "chi-squared test" are a little cumbersome to pronounce,
> an even slightly lazy pronunciation would sound like "chi-square
> distribution" and "chi-square test". There's no need to write it that way
> though.
>
> -Dan
>
>
>
> On Fri, Oct 18, 2019 at 2:28 PM Richard M. Heiberger <rmh at temple.edu> wrote:
>
> > What a delightful question.  Bill Cochran discussed this in class
> > one day about 50 years ago.  He said the British usage (which I think
> > he said was chi-squared,
> > as is consistent with the other memories in this thread)
> > is what he learned and previously used.  But he had been in the US for
> > so long that he was now using
> > the American preference (chi-square).
> >
> > Rich
> >
> > On Fri, Oct 18, 2019 at 8:51 AM Martin Maechler
> > <maechler at stat.math.ethz.ch> wrote:
> > >
> > > As it's Friday ..
> > >
> > > and I also really want to clean up help files and similar R documents,
> > > both in R's own sources and in my new 'DPQ' CRAN package :
> > >
> > > As a trained mathematician, I'm uneasy if a thing has
> > > several easily confusable names, .. but as somewhat
> > > humanistically educated person, I know that natural languages,
> > > English in this case, are much more flexible than computer
> > > languages or math...
> > >
> > > Anyway, back to the question(s) .. which I had asked myself a
> > > couple of months ago, and already remained slightly undecided:
> > >
> > > The 0-th (meta-)question of course is
> > >
> > >   0. Is it worth using only one written form for the
> > >      ?? - distribution, e.g. "everywhere" in R?
> > >
> > > The answer is not obvious, as already the first few words of the
> > > (English) Wikipedia clearly convey:
> > >
> > > The URL is  https://en.wikipedia.org/wiki/Chi-squared_distribution
> > > and the main title therefore also
> > >     "Chi-squared distribution"
> > >
> > > Then it reads
> > >
> > > > This article is about the mathematics of the chi-squared
> > > > distribution. For its uses in statistics, see chi-squared
> > > > test. For the music [...]
> > >
> > > > In probability theory and statistics, the chi-square
> > > > distribution (also chi-squared or ?2-distribution) with k
> > > > degrees of freedom is the distribution of a sum of the squares
> > > > of k independent standard normal random variables.
> > >
> > > > The chi-square distribution is a special case of the gamma
> > > > distribution and is one of the most widely used probability
> > > > distributions in inferential statistics, notably in hypothesis
> > > > testing [........]
> > > > [........]
> > >
> > > So, in title and 1st paragraph its "chi-squared", but then
> > > everywhere(?) the text used "chi-square".
> > >
> > > Undoubtedly, Wilson & Hilferty (1931) has been an important
> > > paper and they use "Chi-square" in the title;
> > > also  Johnson, Kotz & Balakrishnan (1995)
> > > see R's help page ?pchisq use  "Chi-square" in the title of
> > > chapter 18 and then, diplomatically for chapter 29,
> > >  "Noncentral ??-Distributions" as title.
> > >
> > > So it seems, that historically and using prestigious sources,
> > > "chi-square" to dominate (notably if we do not count "??" as an
> > > alternative).
> > >
> > > Things look a bit different when I study R's sources; on one
> > > hand, I find all 4 forms (s.Subject); then in the "R source
> > > history", I see
> > >
> > >   $ svn log -c11342
> > >
> >  ------------------------------------------------------------------------
> > >   r11342 | <....> | 2000-11-14 ...
> > >
> > >   Use `chi-squared'.
> > >
> >  ------------------------------------------------------------------------
> > >
> > > which changed 16 (if I counted correctly) cases of 'chi-square' to
> > 'chi-squared'.
> > >
> > > I have not found any R-core internal (or public) reasoning about
> > > that change, but had kept it in mind and often worked along that "goal".
> > >
> > > As a consequence, "statistically" speaking, much of R's own use has been
> > > standardized to use "chi-squared"; but as I mentioned, I still
> > > find all  4  variants even in "R base" package help files
> > > (which of course I now could quite quickly change  (using Emacs M-x
> > grep, plus a script);
> > > but
> > >
> > > ... "as it is Friday" ... I'm interested to hear what others
> > > think, notably if you are native English (or "American" ;-)
> > > speaking and/or have some extra good knowledge on such
> > > matters...
> > >
> > > Martin Maechler
> > > ETH Zurich
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
>
> --
> Dan Dalthorp, PhD
> USGS Forest and Rangeland Ecosystem Science Center
> Forest Sciences Lab, Rm 311
> 3200 SW Jefferson Way
> Corvallis, OR 97331
> ph: 541-750-0953
> ddalthorp at usgs.gov
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Mon Oct 21 13:51:59 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Mon, 21 Oct 2019 13:51:59 +0200
Subject: [R] add error bars to rarecurve from package vegan
Message-ID: <CAMk+s2TejG8JWRk2yBX9RqCzCY=+HRvpKJwg+rT9RGpwOs36Kg@mail.gmail.com>

Hello,
I am using the package vegan to generate rarefaction curves with the
function rarecurve.
Is it possible to add error bars to the plot? I tried to add se =
FALSE but it did not work.
Also, would it be possible to remove the box around the label of the data?
Thank you

-- 
Best regards,
Luigi


From ed@|m@r|@ @end|ng |rom gm@||@com  Mon Oct 21 13:55:17 2019
From: ed@|m@r|@ @end|ng |rom gm@||@com (Eleftheria Dalmaris)
Date: Mon, 21 Oct 2019 14:55:17 +0300
Subject: [R] Heatmap
Message-ID: <CAOcmn_iVqCqL3UYF0CB3d+63jUsiD_pbONy+KHCMMA_ocULigg@mail.gmail.com>

Hello all,

I have made the attached heat map without a problem.

On this heat map, the yellows are my high values and the oranges are my low
values. Is there a way to change that? Where the orange color is to have
the yellow and vice versa?

Thanks a lot,

Eleftheria

P.S.
In case is needed here is the code:
data_heatmap <- heatmap(data_matrix, Rowv=NA, Colv=NA, col =
heat.colors(256), scale="column",
cexCol = 1.5, cexRow = 0.5, margins=c(0.5,5))

-------------- next part --------------
A non-text attachment was scrubbed...
Name: HeatMap_211019_withCluster.pdf
Type: application/pdf
Size: 5575 bytes
Desc: not available
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20191021/78729a7f/attachment.pdf>

From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Oct 21 14:12:24 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 21 Oct 2019 13:12:24 +0100
Subject: [R] Heatmap
In-Reply-To: <CAOcmn_iVqCqL3UYF0CB3d+63jUsiD_pbONy+KHCMMA_ocULigg@mail.gmail.com>
References: <CAOcmn_iVqCqL3UYF0CB3d+63jUsiD_pbONy+KHCMMA_ocULigg@mail.gmail.com>
Message-ID: <e3ef5063-a5b4-b8f9-c2dc-4548d16d8ea3@sapo.pt>

Hello,

Just do col = rev(heat.colors(256)) ?

Hope this helps,

Rui Barradas

?s 12:55 de 21/10/19, Eleftheria Dalmaris escreveu:
> Hello all,
> 
> I have made the attached heat map without a problem.
> 
> On this heat map, the yellows are my high values and the oranges are my low
> values. Is there a way to change that? Where the orange color is to have
> the yellow and vice versa?
> 
> Thanks a lot,
> 
> Eleftheria
> 
> P.S.
> In case is needed here is the code:
> data_heatmap <- heatmap(data_matrix, Rowv=NA, Colv=NA, col =
> heat.colors(256), scale="column",
> cexCol = 1.5, cexRow = 0.5, margins=c(0.5,5))
> 
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From er|cjberger @end|ng |rom gm@||@com  Mon Oct 21 14:40:49 2019
From: er|cjberger @end|ng |rom gm@||@com (Eric Berger)
Date: Mon, 21 Oct 2019 15:40:49 +0300
Subject: [R] add error bars to rarecurve from package vegan
In-Reply-To: <CAMk+s2TejG8JWRk2yBX9RqCzCY=+HRvpKJwg+rT9RGpwOs36Kg@mail.gmail.com>
References: <CAMk+s2TejG8JWRk2yBX9RqCzCY=+HRvpKJwg+rT9RGpwOs36Kg@mail.gmail.com>
Message-ID: <CAGgJW760PjhHcVneYih=4GppdqO5iqh1GW=KO-X-EQY+ppOoXA@mail.gmail.com>

You might improve your chances for getting a response by supplying
a minimal reproducible example. Remember to include all the library()
commands
showing which packages you are using.


On Mon, Oct 21, 2019 at 2:53 PM Luigi Marongiu <marongiu.luigi at gmail.com>
wrote:

> Hello,
> I am using the package vegan to generate rarefaction curves with the
> function rarecurve.
> Is it possible to add error bars to the plot? I tried to add se =
> FALSE but it did not work.
> Also, would it be possible to remove the box around the label of the data?
> Thank you
>
> --
> Best regards,
> Luigi
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Mon Oct 21 16:41:18 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Mon, 21 Oct 2019 16:41:18 +0200
Subject: [R] add error bars to rarecurve from package vegan
In-Reply-To: <CAGgJW760PjhHcVneYih=4GppdqO5iqh1GW=KO-X-EQY+ppOoXA@mail.gmail.com>
References: <CAMk+s2TejG8JWRk2yBX9RqCzCY=+HRvpKJwg+rT9RGpwOs36Kg@mail.gmail.com>
 <CAGgJW760PjhHcVneYih=4GppdqO5iqh1GW=KO-X-EQY+ppOoXA@mail.gmail.com>
Message-ID: <CAMk+s2QEK6nVQFWX6mN3cbj=KQ_dWAryfdXVCmnAu4cwLbyjbQ@mail.gmail.com>

I did not put an example because it is a question of the basic syntax
of this function, not about the data at hand. However, here is a
working example:

```
library(vegan)
data(dune)
spAbund <- rowSums(dune)
raremin <- min(rowSums(dune))
rarecurve(dune, col = "blue", es = TRUE)
```

Thank you

On Mon, Oct 21, 2019 at 2:41 PM Eric Berger <ericjberger at gmail.com> wrote:
>
> You might improve your chances for getting a response by supplying
> a minimal reproducible example. Remember to include all the library() commands
> showing which packages you are using.
>
>
> On Mon, Oct 21, 2019 at 2:53 PM Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
>>
>> Hello,
>> I am using the package vegan to generate rarefaction curves with the
>> function rarecurve.
>> Is it possible to add error bars to the plot? I tried to add se =
>> FALSE but it did not work.
>> Also, would it be possible to remove the box around the label of the data?
>> Thank you
>>
>> --
>> Best regards,
>> Luigi
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.



-- 
Best regards,
Luigi


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Mon Oct 21 16:43:57 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Mon, 21 Oct 2019 16:43:57 +0200
Subject: [R] add error bars to rarecurve from package vegan
In-Reply-To: <CAMk+s2QEK6nVQFWX6mN3cbj=KQ_dWAryfdXVCmnAu4cwLbyjbQ@mail.gmail.com>
References: <CAMk+s2TejG8JWRk2yBX9RqCzCY=+HRvpKJwg+rT9RGpwOs36Kg@mail.gmail.com>
 <CAGgJW760PjhHcVneYih=4GppdqO5iqh1GW=KO-X-EQY+ppOoXA@mail.gmail.com>
 <CAMk+s2QEK6nVQFWX6mN3cbj=KQ_dWAryfdXVCmnAu4cwLbyjbQ@mail.gmail.com>
Message-ID: <CAMk+s2TQfVg3X0AFHNVabP_RVum-YgQSo=D+XrzcRjCax1vB0w@mail.gmail.com>

sorry there was a typo: it is `se = TRUE` but the result is the same:
SE is not a rarecurve's parameter.

On Mon, Oct 21, 2019 at 4:41 PM Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
>
> I did not put an example because it is a question of the basic syntax
> of this function, not about the data at hand. However, here is a
> working example:
>
> ```
> library(vegan)
> data(dune)
> spAbund <- rowSums(dune)
> raremin <- min(rowSums(dune))
> rarecurve(dune, col = "blue", es = TRUE)
> ```
>
> Thank you
>
> On Mon, Oct 21, 2019 at 2:41 PM Eric Berger <ericjberger at gmail.com> wrote:
> >
> > You might improve your chances for getting a response by supplying
> > a minimal reproducible example. Remember to include all the library() commands
> > showing which packages you are using.
> >
> >
> > On Mon, Oct 21, 2019 at 2:53 PM Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
> >>
> >> Hello,
> >> I am using the package vegan to generate rarefaction curves with the
> >> function rarecurve.
> >> Is it possible to add error bars to the plot? I tried to add se =
> >> FALSE but it did not work.
> >> Also, would it be possible to remove the box around the label of the data?
> >> Thank you
> >>
> >> --
> >> Best regards,
> >> Luigi
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
>
>
>
> --
> Best regards,
> Luigi



-- 
Best regards,
Luigi


From henr|k@bengt@@on @end|ng |rom gm@||@com  Mon Oct 21 16:49:50 2019
From: henr|k@bengt@@on @end|ng |rom gm@||@com (Henrik Bengtsson)
Date: Mon, 21 Oct 2019 07:49:50 -0700
Subject: [R] .libPaths() can not deal non-latin characters?
In-Reply-To: <7bd2dc7c.a1f2e.16deda50f0b.Coremail.jszhao@yeah.net>
References: <7bd2dc7c.a1f2e.16deda50f0b.Coremail.jszhao@yeah.net>
Message-ID: <CAFDcVCQkMAzfjhX3BO939TwS42HgJU4sc+U4A5xr2j7QSXkfFA@mail.gmail.com>

The folder must exist. If not, .libPaths() *silently* ignores it. Could
that be it?

Henrik



On Mon, Oct 21, 2019, 02:32 Jinsong Zhao <jszhao at yeah.net> wrote:

> Hi there,
>
> I have a computer run Win10 with user names in Chinese. I installed R on
> it. It can run normally. When I installed a package, for example, ada, then
> the library would be installed into
> "C:/Users/??/Documents/R/win-library/3.6", where "??" is my user name.
>
> > library(ada)
> Error in library(ada) : there is no package called ?ada?
>
> > .libPaths()
> [1] "C:/Program Files/R/R-3.6.1/library"
>
> > .libPaths(c("C:/Users/??/Documents/R/win-library/3.6", .libPaths()))
> > .libPaths()
> [1] "C:/Program Files/R/R-3.6.1/library"
>
> you will find that .libPaths() does not accept the path with Chinese (I
> think non-latin characters may not be accepted).
>
> I also tried to install the package to other directory with Chinese
> character, and then set the .libPaths, and failed.
>
> Is it the features?
>
> Any hints? Thanks in advance.
>
> Best,
> Jinsong
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @teph@ne@kuhn @end|ng |rom @ecu@|u  Mon Oct 21 09:09:16 2019
From: @teph@ne@kuhn @end|ng |rom @ecu@|u (Stephane Kuhn)
Date: Mon, 21 Oct 2019 09:09:16 +0200
Subject: [R] proxy with authentification
Message-ID: <a72d3e8b-2246-21b6-f453-f83260b591a1@secu.lu>

Hello,

/We are using an explicit proxy with authentication for user internet 
access. It's not an option to create entire lists of always changing 
URLs of the entire R mirror network that would not require authentication./

/There seem to exist several methods for user authentication 
(https://support.rstudio.com/hc/en-us/articles/200488488-Configuring-R-to-Use-an-HTTP-or-HTTPS-Proxy)/

/http(s)_proxy="http://user:pwd at proxybc.secu.lu:80/"/

/or/

/http(s)_proxy="http://proxybc.secu.lu:80/"/
/together with/
/http(s)_proxy_user="user:pwd"/

/None of these seem to transmit credentials to the proxy./ /How to we 
provide credentials to the proxy?
/

/Thanks
St?phane
/




------------------------------------------------------------------------
*INFORMATIONS CONFIDENTIELLES*
Les informations contenues dans ce message ?lectronique peuvent ?tre de 
nature confidentielle et soumises au secret professionnel. Elles sont 
destin?es ? l'usage exclusif du r?el destinataire. Au regard du 
r?glement g?n?ral pour la protection des donn?es ? caract?re personnel, 
nous sommes oblig?s de vous informer que toute diffusion ou utilisation 
de ce message peut ?tre ill?gale. Si, malgr? tout le soin apport?, vous 
recevez ce message par erreur, merci de nous le notifier en nous le 
retournant ? l'adresse suivante : databreach.ccss at secu.lu 
<mailto:databreach.ccss at secu.lu> et en le supprimant de vos syst?mes.


	[[alternative HTML version deleted]]


From moh@n @end|ng |rom wh@t3word@@com  Mon Oct 21 15:58:52 2019
From: moh@n @end|ng |rom wh@t3word@@com (Mohan Ganesalingam)
Date: Mon, 21 Oct 2019 14:58:52 +0100
Subject: [R] MLE packages
Message-ID: <CACgRdJEyOQFPnXNd60qaKNq1g22k7QuOgM5AjG_Ouk5d7W03cw@mail.gmail.com>

I'm fairly new to R. The language is amazing, but I'm having trouble
navigating packages. I have a solution that handles the problems I'm
working on, but I don't know if it could be solved more cleanly with mle,
bbmle, maxLik, etc..

Here's an example problem first. I have run many WAV files through voice
recognition software; the software returns 50 hypotheses for each, together
with scores S_{ni} indicating how 'good' the i^th hypothesis is. I want to
map the S_{ni} to a probability distribution. So I'm using MLE to fit a
function f that maps scores to logs of relative probabilities. This means
maximising

\sum_n[   f(S_{nc_n}) - \log \sum_i \exp f(S_{ni})   ]

where c_n is the index of the correct hypothesis for the n^th sample.

Here's the code:

ave_log_likelihood = function(f, scores) {
    def = scores %>% filter(Sc > 0)
    log_likelihoods = with(def, f(Sc) - matrixStats::rowLogSumExps(f(S),
na.rm = T))
    return(mean(log_likelihoods))
}

nlopts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 500, print_level = 0)

best_linear_fit = function(scores) {
  res <- nloptr(c(0.01),
                function(a) -ave_log_likelihood(function(x) (a * x),
scores),
                opts = nlopts)
  return (data.frame(log_likelihood = -res$objective, slope = res$solution,
doubling = log(2)/res$solution))
}


Now, I need to write a lot of variants of this with different objectives
and with different classes of function. But there's a lot of verbiage in
best_linear_fit which would currently be copy/pasted. Also, as written it
makes it messy to fit on training data and then evaluate on test data.

I'd appreciate any advice on packages that might make it easier to write
this more cleanly, ideally using the idioms used in `lm`, etc., such as
formulae and `predict`. (Any pointers on writing cleaner R code would also
be lovely!)

Thanks in advance;
Mohan

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Mon Oct 21 17:40:00 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Mon, 21 Oct 2019 08:40:00 -0700
Subject: [R] MLE packages
In-Reply-To: <CACgRdJEyOQFPnXNd60qaKNq1g22k7QuOgM5AjG_Ouk5d7W03cw@mail.gmail.com>
References: <CACgRdJEyOQFPnXNd60qaKNq1g22k7QuOgM5AjG_Ouk5d7W03cw@mail.gmail.com>
Message-ID: <CAGxFJbTVC9A8uFPWCAb262x0wusEq6PBfU1cpnPgp2kE-S-dNQ@mail.gmail.com>

Are you familiar with R resources you can search?

1.  CRAN task views:
https://cran.r-project.org/web/views/

2. For searching:  https://rseek.org/
Searching on "maximum likelihood" there appeared to bring up relevant
resources.

3. RStudio resources: https://education.rstudio.com/
Note: RStudio is a private company that is not part of the R Foundation,
but may have useful programming resources for you.

4. Tons of online tutorials:  Just search!

I have not looked at your code in any detail, but I'd be willing to bet
you're trying to reinvent a square wheel.

Cheers,
Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Mon, Oct 21, 2019 at 8:21 AM Mohan Ganesalingam <mohan at what3words.com>
wrote:

> I'm fairly new to R. The language is amazing, but I'm having trouble
> navigating packages. I have a solution that handles the problems I'm
> working on, but I don't know if it could be solved more cleanly with mle,
> bbmle, maxLik, etc..
>
> Here's an example problem first. I have run many WAV files through voice
> recognition software; the software returns 50 hypotheses for each, together
> with scores S_{ni} indicating how 'good' the i^th hypothesis is. I want to
> map the S_{ni} to a probability distribution. So I'm using MLE to fit a
> function f that maps scores to logs of relative probabilities. This means
> maximising
>
> \sum_n[   f(S_{nc_n}) - \log \sum_i \exp f(S_{ni})   ]
>
> where c_n is the index of the correct hypothesis for the n^th sample.
>
> Here's the code:
>
> ave_log_likelihood = function(f, scores) {
>     def = scores %>% filter(Sc > 0)
>     log_likelihoods = with(def, f(Sc) - matrixStats::rowLogSumExps(f(S),
> na.rm = T))
>     return(mean(log_likelihoods))
> }
>
> nlopts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 500, print_level =
> 0)
>
> best_linear_fit = function(scores) {
>   res <- nloptr(c(0.01),
>                 function(a) -ave_log_likelihood(function(x) (a * x),
> scores),
>                 opts = nlopts)
>   return (data.frame(log_likelihood = -res$objective, slope = res$solution,
> doubling = log(2)/res$solution))
> }
>
>
> Now, I need to write a lot of variants of this with different objectives
> and with different classes of function. But there's a lot of verbiage in
> best_linear_fit which would currently be copy/pasted. Also, as written it
> makes it messy to fit on training data and then evaluate on test data.
>
> I'd appreciate any advice on packages that might make it easier to write
> this more cleanly, ideally using the idioms used in `lm`, etc., such as
> formulae and `predict`. (Any pointers on writing cleaner R code would also
> be lovely!)
>
> Thanks in advance;
> Mohan
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Mon Oct 21 18:05:55 2019
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Mon, 21 Oct 2019 19:05:55 +0300
Subject: [R] 
 [EXTERNAL] Re: "chi-square" | "chi-squared" | "chi squared" |
 "chi square" ?
In-Reply-To: <CAJeYpE9ut6z0+Kn9+uxQQTR-GthA4vN0cmN940G7BmYqxV6jaA@mail.gmail.com>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
 <CAGx1TMAB_2wkT1v6up3KaB9NBxCaD6BT1b3PoMipCqZDM0HnnA@mail.gmail.com>
 <CAJeYpE9ut6z0+Kn9+uxQQTR-GthA4vN0cmN940G7BmYqxV6jaA@mail.gmail.com>
Message-ID: <20191021190555.000be141@trisector>

On Fri, 18 Oct 2019 15:25:59 -0700
"Dalthorp, Daniel via R-help" <r-help at r-project.org> wrote:

> I'd like to see the statistics on it before jumping to a conclusion
> that the American preference is "chi-square" and the British
> preference is "chi-squared".

One way to get some data on this would be to count Scopus hits for
various usages in articles with different affiliations, with a query
like this:

{<usage #1>}
AND PUBYEAR > 1980
AND AFFILCOUNTRY(<country #1>)
AND NOT (
 AFFILCOUNTRY(<country #2>)
 OR {<usage #2>} OR {<usage #3>} OR {<usage #4>}
)

The year cutoff is here to show only the "modern usage" (the trends
look the same whether I leave it in or not). Intersections (papers with
authors from both countries and/or using more than one form) are a
minority and don't seem to reverse any trends, either. Here are the
results:

              UK    US
chi-square  4666 30159
chi-squared 1374  4798
chi square   769  3844
chi squared  142   197

"chi-square" seems to be the most popular form.

-- 
Best regards,
Ivan


From v@r|n@@ch@ @end|ng |rom y@hoo@|r  Mon Oct 21 18:40:37 2019
From: v@r|n@@ch@ @end|ng |rom y@hoo@|r (varin sacha)
Date: Mon, 21 Oct 2019 16:40:37 +0000 (UTC)
Subject: [R] Simulations study not working entirely...
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
Message-ID: <332012470.7516887.1571676037799@mail.yahoo.com>

Dear R-Experts,

Here below my reproducible example working but not entirely (working). What I understand is that there is a problem of libraries library(hbrfit) and ... ? How can I make it work entirely, many thanks for your precious help.

########SIMULATION STUDY 3 variables with 10% outliers n=2000
install.packages( "robustbase" )
install.packages( "MASS" )
install.packages( "quantreg" )
install.packages( "RobPer" )
install.packages("devtools")? library("devtools") install_github("kloke/hbrfit") install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz') 
install.packages( "RobStatTM" )


library(robustbase)
library(MASS)
library(quantreg)
library(RobPer)
library(hbrfit)

library(RobStatTM)

n<-2000

x<-runif(n, 0, 5)

z <- rnorm(n, 2, 3)

a <- runif(n, 0, 5)

y_model<- 0.1*x - 0.5 * z - a + 10

y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )


fastMM <- lmrob( y_obs ~ x+z+a)

Huber <- rlm( y_obs ~ x+z+a)

Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )

L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )

fastTau <- FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)

HBR<-hbrfit(y_obs ~ x+z+a)

DCML <-lmrobdetDCML(y_obs ~ x+z+a)

?
MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)

MSE_Huber<-mean((Huber$fitted.values - y_model)^2)

MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)

MSE_L1<-mean((L1$fitted.values - y_model)^2)

MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)

MSE_HBR<-mean((HBR$fitted.values - y_model)^2)

MSE_DCML<-mean((DCML$fitted.values - y_model)^2)


MSE_fastMM

MSE_Huber

MSE_Tukey

MSE_L1

MSE_fastTau

MSE_HBR

MSE_DCML

###############


From @zwj|08 @end|ng |rom gm@||@com  Mon Oct 21 19:56:46 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 21 Oct 2019 13:56:46 -0400
Subject: [R] Simulations study not working entirely...
In-Reply-To: <332012470.7516887.1571676037799@mail.yahoo.com>
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
 <332012470.7516887.1571676037799@mail.yahoo.com>
Message-ID: <CAGiFhPM55nWpsTk7oJxevbTgwO-N2FUDYZi3pNWTUy1HOLR8Vw@mail.gmail.com>

Hi Varin,

I did not look inside your code yet but I have a few suggestions. First I
think your problem should be described in more detail, just saying you have
a problem is not enough for us to diagnose. Second Your example depends on
too many other packages and I'm not sure if you need all of them to
reproduce the error. A minimum example will be appreciated. finally, if
this is a package problem as you said, it might be better to ask the
question in https://github.com/kloke/hbrfit/issues since the author
definitely knows the context more than us and might be able to provide a
solution for your question.

Best,
Jiefei

On Mon, Oct 21, 2019 at 12:41 PM varin sacha via R-help <
r-help at r-project.org> wrote:

> Dear R-Experts,
>
> Here below my reproducible example working but not entirely (working).
> What I understand is that there is a problem of libraries library(hbrfit)
> and ... ? How can I make it work entirely, many thanks for your precious
> help.
>
> ########SIMULATION STUDY 3 variables with 10% outliers n=2000
> install.packages( "robustbase" )
> install.packages( "MASS" )
> install.packages( "quantreg" )
> install.packages( "RobPer" )
> install.packages("devtools")  library("devtools")
> install_github("kloke/hbrfit") install.packages('
> http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
> install.packages( "RobStatTM" )
>
>
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
>
> library(RobStatTM)
>
> n<-2000
>
> x<-runif(n, 0, 5)
>
> z <- rnorm(n, 2, 3)
>
> a <- runif(n, 0, 5)
>
> y_model<- 0.1*x - 0.5 * z - a + 10
>
> y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
>
>
> fastMM <- lmrob( y_obs ~ x+z+a)
>
> Huber <- rlm( y_obs ~ x+z+a)
>
> Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )
>
> L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )
>
> fastTau <-
> FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)
>
> HBR<-hbrfit(y_obs ~ x+z+a)
>
> DCML <-lmrobdetDCML(y_obs ~ x+z+a)
>
>
> MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)
>
> MSE_Huber<-mean((Huber$fitted.values - y_model)^2)
>
> MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)
>
> MSE_L1<-mean((L1$fitted.values - y_model)^2)
>
> MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)
>
> MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
>
> MSE_DCML<-mean((DCML$fitted.values - y_model)^2)
>
>
> MSE_fastMM
>
> MSE_Huber
>
> MSE_Tukey
>
> MSE_L1
>
> MSE_fastTau
>
> MSE_HBR
>
> MSE_DCML
>
> ###############
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @zwj|08 @end|ng |rom gm@||@com  Mon Oct 21 20:11:51 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 21 Oct 2019 14:11:51 -0400
Subject: [R] Simulations study not working entirely...
In-Reply-To: <332012470.7516887.1571676037799@mail.yahoo.com>
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
 <332012470.7516887.1571676037799@mail.yahoo.com>
Message-ID: <CAGiFhPOuPUj22uLX8ga9s0dMY4BcvzupmZtu=FA1Kjrdh47MTw@mail.gmail.com>

Hi,

After I install all dependencies your example seems fine

```
> MSE_fastMM
[1] 2.629064e-05
>
> MSE_Huber
[1] 1.826184e-05
>
> MSE_Tukey
[1] 2.622499e-05
>
> MSE_L1
[1] 1.044155e-05
>
> MSE_fastTau
[1] NaN
>
> MSE_HBR
[1] 1.60821e-05
>
> MSE_DCML
[1] 9.519007e-06
>
> sessionInfo()
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
States.1252
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C

[5] LC_TIME=English_United States.1252

attached base packages:
[1] splines   stats     graphics  grDevices utils     datasets  methods
base

other attached packages:
 [1] hbrfit_0.02       Rfit_0.23.0       RobStatTM_1.0.1   fit.models_0.5-14
 [5] RobPer_1.2.2      rgenoud_5.8-3.0   BB_2019.10-1      quantreg_5.51
 [9] SparseM_1.77      MASS_7.3-51.4     robustbase_0.93-5
```

There is no error or warning, except that  MSE_fastTau is an NaN. What
problem are you looking for?

Best,
Jiefei

On Mon, Oct 21, 2019 at 12:41 PM varin sacha via R-help <
r-help at r-project.org> wrote:

> Dear R-Experts,
>
> Here below my reproducible example working but not entirely (working).
> What I understand is that there is a problem of libraries library(hbrfit)
> and ... ? How can I make it work entirely, many thanks for your precious
> help.
>
> ########SIMULATION STUDY 3 variables with 10% outliers n=2000
> install.packages( "robustbase" )
> install.packages( "MASS" )
> install.packages( "quantreg" )
> install.packages( "RobPer" )
> install.packages("devtools")  library("devtools")
> install_github("kloke/hbrfit") install.packages('
> http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
> install.packages( "RobStatTM" )
>
>
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
>
> library(RobStatTM)
>
> n<-2000
>
> x<-runif(n, 0, 5)
>
> z <- rnorm(n, 2, 3)
>
> a <- runif(n, 0, 5)
>
> y_model<- 0.1*x - 0.5 * z - a + 10
>
> y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
>
>
> fastMM <- lmrob( y_obs ~ x+z+a)
>
> Huber <- rlm( y_obs ~ x+z+a)
>
> Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )
>
> L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )
>
> fastTau <-
> FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)
>
> HBR<-hbrfit(y_obs ~ x+z+a)
>
> DCML <-lmrobdetDCML(y_obs ~ x+z+a)
>
>
> MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)
>
> MSE_Huber<-mean((Huber$fitted.values - y_model)^2)
>
> MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)
>
> MSE_L1<-mean((L1$fitted.values - y_model)^2)
>
> MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)
>
> MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
>
> MSE_DCML<-mean((DCML$fitted.values - y_model)^2)
>
>
> MSE_fastMM
>
> MSE_Huber
>
> MSE_Tukey
>
> MSE_L1
>
> MSE_fastTau
>
> MSE_HBR
>
> MSE_DCML
>
> ###############
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From dd@|thorp @end|ng |rom u@g@@gov  Mon Oct 21 20:23:30 2019
From: dd@|thorp @end|ng |rom u@g@@gov (Dalthorp, Daniel)
Date: Mon, 21 Oct 2019 11:23:30 -0700
Subject: [R] 
 [EXTERNAL] Re: "chi-square" | "chi-squared" | "chi squared" |
 "chi square" ?
In-Reply-To: <20191021190555.000be141@trisector>
References: <23977.46391.123399.411843@stat.math.ethz.ch>
 <CAGx1TMAB_2wkT1v6up3KaB9NBxCaD6BT1b3PoMipCqZDM0HnnA@mail.gmail.com>
 <CAJeYpE9ut6z0+Kn9+uxQQTR-GthA4vN0cmN940G7BmYqxV6jaA@mail.gmail.com>
 <20191021190555.000be141@trisector>
Message-ID: <CAJeYpE-m3FfcCGaKbkumimHW2qf4Z4ZCdaXNsOe9u41sdQ6fuA@mail.gmail.com>

Interesting!

Both UK and US show quite a bit more "square" than "squared" in your
sample, with maybe an even stronger tendency for "square" in US than in UK.

I like "squared" better because it fits better with standard English
pronunciation of, say, \sigma^2 or x^2 or r^2.




On Mon, Oct 21, 2019 at 9:46 AM Ivan Krylov <krylov.r00t at gmail.com> wrote:

> On Fri, 18 Oct 2019 15:25:59 -0700
> "Dalthorp, Daniel via R-help" <r-help at r-project.org> wrote:
>
> > I'd like to see the statistics on it before jumping to a conclusion
> > that the American preference is "chi-square" and the British
> > preference is "chi-squared".
>
> One way to get some data on this would be to count Scopus hits for
> various usages in articles with different affiliations, with a query
> like this:
>
> {<usage #1>}
> AND PUBYEAR > 1980
> AND AFFILCOUNTRY(<country #1>)
> AND NOT (
>  AFFILCOUNTRY(<country #2>)
>  OR {<usage #2>} OR {<usage #3>} OR {<usage #4>}
> )
>
> The year cutoff is here to show only the "modern usage" (the trends
> look the same whether I leave it in or not). Intersections (papers with
> authors from both countries and/or using more than one form) are a
> minority and don't seem to reverse any trends, either. Here are the
> results:
>
>               UK    US
> chi-square  4666 30159
> chi-squared 1374  4798
> chi square   769  3844
> chi squared  142   197
>
> "chi-square" seems to be the most popular form.
>
> --
> Best regards,
> Ivan
>


-- 
Dan Dalthorp, PhD
USGS Forest and Rangeland Ecosystem Science Center
Forest Sciences Lab, Rm 311
3200 SW Jefferson Way
Corvallis, OR 97331
ph: 541-750-0953
ddalthorp at usgs.gov

	[[alternative HTML version deleted]]


From rend0020 @end|ng |rom umn@edu  Mon Oct 21 18:33:58 2019
From: rend0020 @end|ng |rom umn@edu (Aaron Rendahl)
Date: Mon, 21 Oct 2019 11:33:58 -0500
Subject: [R] prop.test CI depends on null hypothesis?
Message-ID: <CAEY=Wf=pGKc=pCpT1PhjCU6hDaS93D31HqovtQSSNtNj7sR9sg@mail.gmail.com>

Why does prop.test use continuity correction "only if it does not exceed
the difference between sample and null proportions in absolute value"?  I'm
referring here to the single group method, though I believe there is a
similar issue with the two group method.

What this means in practice is that the confidence interval changes
depending on the null hypothesis; see examples below. This is unexpected,
and I have been unable to find any documentation explaining why this is
done (see links below examples).

## when the null proportion is equal to the sample proportion, it does not
## use the continuity correction, even when one is asked for

  > prop.test(30,60,p=0.5, correct=TRUE)

1-sample proportions test without continuity correction

data:  30 out of 60, null probability 0.5
X-squared = 0, df = 1, p-value = 1
alternative hypothesis: true p is not equal to 0.5
95 percent confidence interval:
 0.3773502 0.6226498
sample estimates:
  p
0.5

## however, when the null proportion is not equal to the sample proportion,
## it does use the continuity correction when it is asked for.

> prop.test(30,60,p=0.499, correct=TRUE)

1-sample proportions test with continuity correction

data:  30 out of 60, null probability 0.499
X-squared = 0, df = 1, p-value = 1
alternative hypothesis: true p is not equal to 0.499
95 percent confidence interval:
 0.3764106 0.6235894
sample estimates:
  p
0.5


The documentation refers to Newcombe's 1998 Statistics in Medicine article;
I read through this and found nothing about not using the continuity
correction in this situation.
https://doi.org/10.1002/(SICI)1097-0258(19980430)17:8%3C857::AID-SIM777%3E3.0.CO;2-E

On this mailing list, there was a 2013 post "prop.test correct true and
false gives same answer", which was answered only with the quote from the
help page: https://stat.ethz.ch/pipermail/r-help/2013-March/350386.html

I also found several questions asking which Newcombe method is implemented,
which didn't elicit specific answers; here's one from 2011:
https://stat.ethz.ch/pipermail/r-help/2011-April/274086.html



--
Aaron Rendahl, Ph.D.
Assistant Professor of Statistics and Informatics
College of Veterinary Medicine, University of Minnesota
295L AS/VM, 612-301-2161

	[[alternative HTML version deleted]]


From v@r|n@@ch@ @end|ng |rom y@hoo@|r  Mon Oct 21 21:13:55 2019
From: v@r|n@@ch@ @end|ng |rom y@hoo@|r (varin sacha)
Date: Mon, 21 Oct 2019 19:13:55 +0000 (UTC)
Subject: [R] Simulations study not working entirely...
In-Reply-To: <CAGiFhPOuPUj22uLX8ga9s0dMY4BcvzupmZtu=FA1Kjrdh47MTw@mail.gmail.com>
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
 <332012470.7516887.1571676037799@mail.yahoo.com>
 <CAGiFhPOuPUj22uLX8ga9s0dMY4BcvzupmZtu=FA1Kjrdh47MTw@mail.gmail.com>
Message-ID: <213002242.96031.1571685235572@mail.yahoo.com>

 Dear Wang,

Really appreciated but I have tried dependencies=TRUE and it still does not work. 
Is it because my R version is 3.6.1 ? sessionInfo() at the end of the message 

install.packages( "robustbase",dependencies=TRUE )
install.packages( "MASS" ,dependencies=TRUE )
install.packages( "quantreg" ,dependencies=TRUE )
install.packages( "RobPer",dependencies=TRUE ?)
install.packages("devtools",dependencies=TRUE )? install_github("kloke/hbrfit",dependencies=TRUE) install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz',dependencies=TRUE ) 
install.packages( "RobStatTM",dependencies=TRUE ?)

library(robustbase)
library(MASS)
library(quantreg)
library(RobPer)
library(hbrfit)
library(RobStatTM)

sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Sierra 10.12.6
Matrix products: default
BLAS:?? /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
Random number generation: 
RNG:???? Mersenne-Twister? 
Normal:? Inversion? 
Sample:? Rounding? 
locale:[1] fr_CH.UTF-8/fr_CH.UTF-8/fr_CH.UTF-8/C/fr_CH.UTF-8/fr_CH.UTF-8
attached base packages:[1] stats???? graphics? grDevices utils???? datasets? methods?? base???? 
loaded via a namespace (and not attached):[1] compiler_3.6.1







Le lundi 21 octobre 2019 ? 20:12:02 UTC+2, Wang Jiefei <szwjf08 at gmail.com> a ?crit : 





Hi,

After I install all dependencies your example seems fine

```
> MSE_fastMM
[1] 2.629064e-05
> 
> MSE_Huber
[1] 1.826184e-05
> 
> MSE_Tukey
[1] 2.622499e-05
> 
> MSE_L1
[1] 1.044155e-05
> 
> MSE_fastTau
[1] NaN
> 
> MSE_HBR
[1] 1.60821e-05
> 
> MSE_DCML
[1] 9.519007e-06
> 
> sessionInfo()
R version 3.6.0 (2019-04-26)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows >= 8 x64 (build 9200)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252 ?LC_CTYPE=English_United States.1252 ? 
[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C ? ? ? ? ? ? ? ? ? ? ? ? ?
[5] LC_TIME=English_United States.1252 ? ?

attached base packages:
[1] splines ? stats ? ? graphics ?grDevices utils ? ? datasets ?methods ? base ? ? 

other attached packages:
?[1] hbrfit_0.02 ? ? ? Rfit_0.23.0 ? ? ? RobStatTM_1.0.1 ? fit.models_0.5-14
?[5] RobPer_1.2.2 ? ? ?rgenoud_5.8-3.0 ? BB_2019.10-1 ? ? ?quantreg_5.51 ? ?
?[9] SparseM_1.77 ? ? ?MASS_7.3-51.4 ? ? robustbase_0.93-5
```

There is no error or warning, except that? MSE_fastTau is an NaN. What problem?are you looking for?

Best,
Jiefei

On Mon, Oct 21, 2019 at 12:41 PM varin sacha via R-help <r-help at r-project.org> wrote:
> Dear R-Experts,
> 
> Here below my reproducible example working but not entirely (working). What I understand is that there is a problem of libraries library(hbrfit) and ... ? How can I make it work entirely, many thanks for your precious help.
> 
> ########SIMULATION STUDY 3 variables with 10% outliers n=2000
> install.packages( "robustbase" )
> install.packages( "MASS" )
> install.packages( "quantreg" )
> install.packages( "RobPer" )
> install.packages("devtools")? library("devtools") install_github("kloke/hbrfit") install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz') 
> install.packages( "RobStatTM" )
> 
> 
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
> 
> library(RobStatTM)
> 
> n<-2000
> 
> x<-runif(n, 0, 5)
> 
> z <- rnorm(n, 2, 3)
> 
> a <- runif(n, 0, 5)
> 
> y_model<- 0.1*x - 0.5 * z - a + 10
> 
> y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
> 
> 
> fastMM <- lmrob( y_obs ~ x+z+a)
> 
> Huber <- rlm( y_obs ~ x+z+a)
> 
> Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )
> 
> L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )
> 
> fastTau <- FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)
> 
> HBR<-hbrfit(y_obs ~ x+z+a)
> 
> DCML <-lmrobdetDCML(y_obs ~ x+z+a)
> 
> ?
> MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)
> 
> MSE_Huber<-mean((Huber$fitted.values - y_model)^2)
> 
> MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)
> 
> MSE_L1<-mean((L1$fitted.values - y_model)^2)
> 
> MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)
> 
> MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
> 
> MSE_DCML<-mean((DCML$fitted.values - y_model)^2)
> 
> 
> MSE_fastMM
> 
> MSE_Huber
> 
> MSE_Tukey
> 
> MSE_L1
> 
> MSE_fastTau
> 
> MSE_HBR
> 
> MSE_DCML
> 
> ###############
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 


From @zwj|08 @end|ng |rom gm@||@com  Mon Oct 21 21:20:58 2019
From: @zwj|08 @end|ng |rom gm@||@com (Wang Jiefei)
Date: Mon, 21 Oct 2019 15:20:58 -0400
Subject: [R] Simulations study not working entirely...
In-Reply-To: <213002242.96031.1571685235572@mail.yahoo.com>
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
 <332012470.7516887.1571676037799@mail.yahoo.com>
 <CAGiFhPOuPUj22uLX8ga9s0dMY4BcvzupmZtu=FA1Kjrdh47MTw@mail.gmail.com>
 <213002242.96031.1571685235572@mail.yahoo.com>
Message-ID: <CAGiFhPP=RENvDXT0g1MVzzR5KhX26e72178UuH36VrwAeOnUMg@mail.gmail.com>

What problem you have encountered? I still do not know your question.
Please elaborate on your question and post the error message or
something else that prevents you from running the code.

Thanks,
Jiefei

On Mon, Oct 21, 2019 at 3:13 PM varin sacha <varinsacha at yahoo.fr> wrote:

>  Dear Wang,
>
> Really appreciated but I have tried dependencies=TRUE and it still does
> not work.
> Is it because my R version is 3.6.1 ? sessionInfo() at the end of the
> message
>
> install.packages( "robustbase",dependencies=TRUE )
> install.packages( "MASS" ,dependencies=TRUE )
> install.packages( "quantreg" ,dependencies=TRUE )
> install.packages( "RobPer",dependencies=TRUE  )
> install.packages("devtools",dependencies=TRUE )
> install_github("kloke/hbrfit",dependencies=TRUE) install.packages('
> http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz',dependencies=TRUE
> )
> install.packages( "RobStatTM",dependencies=TRUE  )
>
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
> library(RobStatTM)
>
> sessionInfo()
> R version 3.6.1 (2019-07-05)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: macOS Sierra 10.12.6
> Matrix products: default
> BLAS:
> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
> LAPACK:
> /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
> Random number generation:
> RNG:     Mersenne-Twister
> Normal:  Inversion
> Sample:  Rounding
> locale:[1] fr_CH.UTF-8/fr_CH.UTF-8/fr_CH.UTF-8/C/fr_CH.UTF-8/fr_CH.UTF-8
> attached base packages:[1] stats     graphics  grDevices utils
> datasets  methods   base
> loaded via a namespace (and not attached):[1] compiler_3.6.1
>
>
>
>
>
>
>
> Le lundi 21 octobre 2019 ? 20:12:02 UTC+2, Wang Jiefei <szwjf08 at gmail.com>
> a ?crit :
>
>
>
>
>
> Hi,
>
> After I install all dependencies your example seems fine
>
> ```
> > MSE_fastMM
> [1] 2.629064e-05
> >
> > MSE_Huber
> [1] 1.826184e-05
> >
> > MSE_Tukey
> [1] 2.622499e-05
> >
> > MSE_L1
> [1] 1.044155e-05
> >
> > MSE_fastTau
> [1] NaN
> >
> > MSE_HBR
> [1] 1.60821e-05
> >
> > MSE_DCML
> [1] 9.519007e-06
> >
> > sessionInfo()
> R version 3.6.0 (2019-04-26)
> Platform: x86_64-w64-mingw32/x64 (64-bit)
> Running under: Windows >= 8 x64 (build 9200)
>
> Matrix products: default
>
> locale:
> [1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United
> States.1252
> [3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C
>
> [5] LC_TIME=English_United States.1252
>
> attached base packages:
> [1] splines   stats     graphics  grDevices utils     datasets  methods
> base
>
> other attached packages:
>  [1] hbrfit_0.02       Rfit_0.23.0       RobStatTM_1.0.1
> fit.models_0.5-14
>  [5] RobPer_1.2.2      rgenoud_5.8-3.0   BB_2019.10-1      quantreg_5.51
>
>  [9] SparseM_1.77      MASS_7.3-51.4     robustbase_0.93-5
> ```
>
> There is no error or warning, except that  MSE_fastTau is an NaN. What
> problem are you looking for?
>
> Best,
> Jiefei
>
> On Mon, Oct 21, 2019 at 12:41 PM varin sacha via R-help <
> r-help at r-project.org> wrote:
> > Dear R-Experts,
> >
> > Here below my reproducible example working but not entirely (working).
> What I understand is that there is a problem of libraries library(hbrfit)
> and ... ? How can I make it work entirely, many thanks for your precious
> help.
> >
> > ########SIMULATION STUDY 3 variables with 10% outliers n=2000
> > install.packages( "robustbase" )
> > install.packages( "MASS" )
> > install.packages( "quantreg" )
> > install.packages( "RobPer" )
> > install.packages("devtools")  library("devtools")
> install_github("kloke/hbrfit") install.packages('
> http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
> > install.packages( "RobStatTM" )
> >
> >
> > library(robustbase)
> > library(MASS)
> > library(quantreg)
> > library(RobPer)
> > library(hbrfit)
> >
> > library(RobStatTM)
> >
> > n<-2000
> >
> > x<-runif(n, 0, 5)
> >
> > z <- rnorm(n, 2, 3)
> >
> > a <- runif(n, 0, 5)
> >
> > y_model<- 0.1*x - 0.5 * z - a + 10
> >
> > y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
> >
> >
> > fastMM <- lmrob( y_obs ~ x+z+a)
> >
> > Huber <- rlm( y_obs ~ x+z+a)
> >
> > Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )
> >
> > L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )
> >
> > fastTau <-
> FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)
> >
> > HBR<-hbrfit(y_obs ~ x+z+a)
> >
> > DCML <-lmrobdetDCML(y_obs ~ x+z+a)
> >
> >
> > MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)
> >
> > MSE_Huber<-mean((Huber$fitted.values - y_model)^2)
> >
> > MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)
> >
> > MSE_L1<-mean((L1$fitted.values - y_model)^2)
> >
> > MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)
> >
> > MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
> >
> > MSE_DCML<-mean((DCML$fitted.values - y_model)^2)
> >
> >
> > MSE_fastMM
> >
> > MSE_Huber
> >
> > MSE_Tukey
> >
> > MSE_L1
> >
> > MSE_fastTau
> >
> > MSE_HBR
> >
> > MSE_DCML
> >
> > ###############
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>

	[[alternative HTML version deleted]]


From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Oct 21 22:00:27 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Mon, 21 Oct 2019 13:00:27 -0700
Subject: [R] Simulations study not working entirely...
In-Reply-To: <332012470.7516887.1571676037799@mail.yahoo.com>
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
 <332012470.7516887.1571676037799@mail.yahoo.com>
Message-ID: <bf84a087-55ee-e84b-77f8-f1a789b814bb@comcast.net>


On 10/21/19 9:40 AM, varin sacha via R-help wrote:
> Dear R-Experts,
>
> Here below my reproducible example working but not entirely (working). What I understand is that there is a problem of libraries library(hbrfit) and ... ? How can I make it work entirely, many thanks for your precious help.
>
> ########SIMULATION STUDY 3 variables with 10% outliers n=2000
> install.packages( "robustbase" )
> install.packages( "MASS" )
> install.packages( "quantreg" )
> install.packages( "RobPer" )
> install.packages("devtools")? library("devtools") install_github("kloke/hbrfit")


When I attempted to replicate your code, I deciced to issue both of 
these commands in hte line above on separate lines. If you entered as 
above there shoiuld have been an error because there needs to be a 
semicolon to separate more than one? distinct command on a single line.

> install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
> install.packages( "RobStatTM" )
>
>
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
>
> library(RobStatTM)
>
> n<-2000
>
> x<-runif(n, 0, 5)
>
> z <- rnorm(n, 2, 3)
>
> a <- runif(n, 0, 5)
>
> y_model<- 0.1*x - 0.5 * z - a + 10
>
> y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
>
>
> fastMM <- lmrob( y_obs ~ x+z+a)
>
> Huber <- rlm( y_obs ~ x+z+a)
>
> Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )
>
> L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )
>
> fastTau <- FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)


At this point the compiler should emit an error since newdata has not 
been created:


fastTau <- 
FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)
Error in eval(predvars, data, env) : object 'newdata' not found

 ?--

David.


>
> HBR<-hbrfit(y_obs ~ x+z+a)
>
> DCML <-lmrobdetDCML(y_obs ~ x+z+a)
>
>   
> MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)
>
> MSE_Huber<-mean((Huber$fitted.values - y_model)^2)
>
> MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)
>
> MSE_L1<-mean((L1$fitted.values - y_model)^2)
>
> MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)
>
> MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
>
> MSE_DCML<-mean((DCML$fitted.values - y_model)^2)
>
>
> MSE_fastMM
>
> MSE_Huber
>
> MSE_Tukey
>
> MSE_L1
>
> MSE_fastTau
>
> MSE_HBR
>
> MSE_DCML
>
> ###############
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From du|c@|m@ @end|ng |rom b|gpond@com  Tue Oct 22 01:17:08 2019
From: du|c@|m@ @end|ng |rom b|gpond@com (Duncan Mackay)
Date: Tue, 22 Oct 2019 10:17:08 +1100
Subject: [R] add error bars to rarecurve from package vegan
In-Reply-To: <CAMk+s2TQfVg3X0AFHNVabP_RVum-YgQSo=D+XrzcRjCax1vB0w@mail.gmail.com>
References: <CAMk+s2TejG8JWRk2yBX9RqCzCY=+HRvpKJwg+rT9RGpwOs36Kg@mail.gmail.com>
 <CAGgJW760PjhHcVneYih=4GppdqO5iqh1GW=KO-X-EQY+ppOoXA@mail.gmail.com>
 <CAMk+s2QEK6nVQFWX6mN3cbj=KQ_dWAryfdXVCmnAu4cwLbyjbQ@mail.gmail.com>
 <CAMk+s2TQfVg3X0AFHNVabP_RVum-YgQSo=D+XrzcRjCax1vB0w@mail.gmail.com>
Message-ID: <001201d58865$abcf4660$036dd320$@bigpond.com>

Hi Luigi

Using the help example for vegan:: rarefy 
It appears that the example for vegan:: rarefy does not work for SE=T
in the plot command the x values (S) are a vector and  yvalues Srare is a
list

It appears that the argument se = TRUE is not coded
So that your commands cannot produce error bars

Suggest contacting the maintainer

Regards

Duncan

Duncan Mackay
Department of Agronomy and Soil Science
University of New England
Armidale NSW 2350


-----Original Message-----
From: R-help [mailto:r-help-bounces at r-project.org] On Behalf Of Luigi
Marongiu
Sent: Tuesday, 22 October 2019 01:44
To: Eric Berger
Cc: r-help
Subject: Re: [R] add error bars to rarecurve from package vegan

sorry there was a typo: it is `se = TRUE` but the result is the same:
SE is not a rarecurve's parameter.

On Mon, Oct 21, 2019 at 4:41 PM Luigi Marongiu <marongiu.luigi at gmail.com>
wrote:
>
> I did not put an example because it is a question of the basic syntax
> of this function, not about the data at hand. However, here is a
> working example:
>
> ```
> library(vegan)
> data(dune)
> spAbund <- rowSums(dune)
> raremin <- min(rowSums(dune))
> rarecurve(dune, col = "blue", es = TRUE)
> ```
>
> Thank you
>
> On Mon, Oct 21, 2019 at 2:41 PM Eric Berger <ericjberger at gmail.com> wrote:
> >
> > You might improve your chances for getting a response by supplying
> > a minimal reproducible example. Remember to include all the library()
commands
> > showing which packages you are using.
> >
> >
> > On Mon, Oct 21, 2019 at 2:53 PM Luigi Marongiu
<marongiu.luigi at gmail.com> wrote:
> >>
> >> Hello,
> >> I am using the package vegan to generate rarefaction curves with the
> >> function rarecurve.
> >> Is it possible to add error bars to the plot? I tried to add se =
> >> FALSE but it did not work.
> >> Also, would it be possible to remove the box around the label of the
data?
> >> Thank you
> >>
> >> --
> >> Best regards,
> >> Luigi
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
>
>
>
> --
> Best regards,
> Luigi



-- 
Best regards,
Luigi

______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From j@zh@o @end|ng |rom ye@h@net  Tue Oct 22 02:14:00 2019
From: j@zh@o @end|ng |rom ye@h@net (Jinsong Zhao)
Date: Tue, 22 Oct 2019 08:14:00 +0800
Subject: [R] .libPaths() can not deal non-latin characters?
In-Reply-To: <CAFDcVCQkMAzfjhX3BO939TwS42HgJU4sc+U4A5xr2j7QSXkfFA@mail.gmail.com>
References: <7bd2dc7c.a1f2e.16deda50f0b.Coremail.jszhao@yeah.net>
 <CAFDcVCQkMAzfjhX3BO939TwS42HgJU4sc+U4A5xr2j7QSXkfFA@mail.gmail.com>
Message-ID: <3711f385-703e-a752-17df-ca08af57874b@yeah.net>

The folder is there. The problem is caused by Sys.glob() in .libPaths(). 
Sys.glob() will return character(0) when the path contains Chinese 
characters.

Here is another demo:

 > dir.exists("c:/Users/zjs/Desktop/??/R")
[1] TRUE
 > Sys.glob("c:/Users/zjs/Desktop/??/R")
character(0)
 > Sys.glob("c:/Users/zjs/Desktop/?*/R")
character(0)
 > Sys.glob("c:/Users/zjs/Desktop/*?/R")
character(0)
 > Sys.glob("c:/Users/zjs/Desktop/*/R")
[1] "c:/Users/zjs/Desktop/??/R"

Best,

Jinsong

On 2019/10/21 22:49, Henrik Bengtsson wrote:
> The folder must exist. If not, .libPaths() *silently* ignores it. Could 
> that be it?
> 
> Henrik
> 
> 
> 
> On Mon, Oct 21, 2019, 02:32 Jinsong Zhao <jszhao at yeah.net 
> <mailto:jszhao at yeah.net>> wrote:
> 
>     Hi there,
> 
>     I have a computer run Win10 with user names in Chinese. I installed
>     R on it. It can run normally. When I installed a package, for
>     example, ada, then the library would be installed into "C:/Users/?
>     ?/Documents/R/win-library/3.6", where "??" is my user name.
> 
>      > library(ada)
>     Error in library(ada) : there is no package called ?ada?
> 
>      > .libPaths()
>     [1] "C:/Program Files/R/R-3.6.1/library"
> 
>      > .libPaths(c("C:/Users/??/Documents/R/win-library/3.6",
>     .libPaths()))
>      > .libPaths()
>     [1] "C:/Program Files/R/R-3.6.1/library"
> 
>     you will find that .libPaths() does not accept the path with Chinese
>     (I think non-latin characters may not be accepted).
> 
>     I also tried to install the package to other directory with Chinese
>     character, and then set the .libPaths, and failed.
> 
>     Is it the features?
> 
>     Any hints? Thanks in advance.
> 
>     Best,
>     Jinsong


From e@ @end|ng |rom enr|co@chum@nn@net  Tue Oct 22 08:16:36 2019
From: e@ @end|ng |rom enr|co@chum@nn@net (Enrico Schumann)
Date: Tue, 22 Oct 2019 08:16:36 +0200
Subject: [R] [R-pkgs] NMOF 2.0-1 (Numerical Methods and Optimization in
 Finance)
Message-ID: <20191022081636.Horde.EoC89oRNWVWpSwPnev1fws0@webmail.your-server.de>

Dear all,

version 2.0-1 of package NMOF is on CRAN now.

NMOF stands for 'Numerical Methods and Optimization in Finance',
and it accompanies the book with the same name, written by
Manfred Gilli, Dietmar Maringer and Enrico Schumann.[1]

The new version of the package provides all R code and datasets
of the book's second edition, which has been published a few weeks ago.
All updates and new features are listed in the NEWS file.[2]
Sample materials of the book, on backtesting and on optimization
heuristics, are available as well.[3][4]

Kind regards
      Enrico

[1] http://enricoschumann.net/NMOF
[2] https://github.com/enricoschumann/NMOF/blob/master/NEWS
[3] optimisation heuristics: https://ssrn.com/abstract=3391756
[4] backtesting: https://ssrn.com/abstract=3374195



-- 
Enrico Schumann
Lucerne, Switzerland
http://enricoschumann.net

_______________________________________________
R-packages mailing list
R-packages at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-packages


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Tue Oct 22 11:18:49 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Tue, 22 Oct 2019 11:18:49 +0200
Subject: [R] Change colour ggiNEXT plot package iNEXT
Message-ID: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>

Dear all,
is it possible to provide custom color to the rarefaction curve of the
package iNEXT (ggiNEXT)?
If I have these data:
```
library(iNEXT)
library(ggplot2)
data(spider)
out <- iNEXT(spider, q=0, datatype="abundance")
ggiNEXT(out, type=1)
```
can i colour the lines with, let's say, yellow and green?
Thank you
-- 
Best regards,
Luigi


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Tue Oct 22 17:29:23 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Tue, 22 Oct 2019 08:29:23 -0700
Subject: [R] Change colour ggiNEXT plot package iNEXT
In-Reply-To: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>
References: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>
Message-ID: <E3C4D84D-885B-4112-AFE0-28252F189F08@dcn.davis.ca.us>

Probably, assuming that function returns a ggplot object. You will need to identify the levels of the factor used for distinguishing groups, and add a scale_colour_manual() to the ggplot object with colors specified in the same order as those levels.

Support for obscure packages is technically off-topic here ... if you need a more specific answer you may need to correspond with the package authors or use their suggested support resources.

On October 22, 2019 2:18:49 AM PDT, Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
>Dear all,
>is it possible to provide custom color to the rarefaction curve of the
>package iNEXT (ggiNEXT)?
>If I have these data:
>```
>library(iNEXT)
>library(ggplot2)
>data(spider)
>out <- iNEXT(spider, q=0, datatype="abundance")
>ggiNEXT(out, type=1)
>```
>can i colour the lines with, let's say, yellow and green?
>Thank you

-- 
Sent from my phone. Please excuse my brevity.


From v@r|n@@ch@ @end|ng |rom y@hoo@|r  Tue Oct 22 17:30:46 2019
From: v@r|n@@ch@ @end|ng |rom y@hoo@|r (varin sacha)
Date: Tue, 22 Oct 2019 15:30:46 +0000 (UTC)
Subject: [R] Simulations study not working entirely...
In-Reply-To: <bf84a087-55ee-e84b-77f8-f1a789b814bb@comcast.net>
References: <332012470.7516887.1571676037799.ref@mail.yahoo.com>
 <332012470.7516887.1571676037799@mail.yahoo.com>
 <bf84a087-55ee-e84b-77f8-f1a789b814bb@comcast.net>
Message-ID: <241541330.8328165.1571758246940@mail.yahoo.com>

Dear David, Dear Jiefei,
Many thanks for your comments. I got it now. It works.

Best,
Sacha
 

    Le lundi 21 octobre 2019 ? 22:00:39 UTC+2, David Winsemius <dwinsemius at comcast.net> a ?crit :  
 
 
On 10/21/19 9:40 AM, varin sacha via R-help wrote:
> Dear R-Experts,
>
> Here below my reproducible example working but not entirely (working). What I understand is that there is a problem of libraries library(hbrfit) and ... ? How can I make it work entirely, many thanks for your precious help.
>
> ########SIMULATION STUDY 3 variables with 10% outliers n=2000
> install.packages( "robustbase" )
> install.packages( "MASS" )
> install.packages( "quantreg" )
> install.packages( "RobPer" )
> install.packages("devtools")? library("devtools") install_github("kloke/hbrfit")


When I attempted to replicate your code, I deciced to issue both of 
these commands in hte line above on separate lines. If you entered as 
above there shoiuld have been an error because there needs to be a 
semicolon to separate more than one? distinct command on a single line.

> install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
> install.packages( "RobStatTM" )
>
>
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
>
> library(RobStatTM)
>
> n<-2000
>
> x<-runif(n, 0, 5)
>
> z <- rnorm(n, 2, 3)
>
> a <- runif(n, 0, 5)
>
> y_model<- 0.1*x - 0.5 * z - a + 10
>
> y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
>
>
> fastMM <- lmrob( y_obs ~ x+z+a)
>
> Huber <- rlm( y_obs ~ x+z+a)
>
> Tukey <- rlm( y_obs ~ x+z+a, psi = psi.bisquare )
>
> L1 <- rq( y_obs ~ x+z+a, tau = 0.5 )
>
> fastTau <- FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)


At this point the compiler should emit an error since newdata has not 
been created:


fastTau <- 
FastTau(model.matrix(~newdata$x+newdata$z+newdata$a),newdata$y_obs)
Error in eval(predvars, data, env) : object 'newdata' not found

 ?--

David.


>
> HBR<-hbrfit(y_obs ~ x+z+a)
>
> DCML <-lmrobdetDCML(y_obs ~ x+z+a)
>
>? 
> MSE_fastMM<-mean((fastMM$fitted.values - y_model)^2)
>
> MSE_Huber<-mean((Huber$fitted.values - y_model)^2)
>
> MSE_Tukey<-mean((Tukey$fitted.values - y_model)^2)
>
> MSE_L1<-mean((L1$fitted.values - y_model)^2)
>
> MSE_fastTau<-mean((fastTau$fitted.values - y_model)^2)
>
> MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
>
> MSE_DCML<-mean((DCML$fitted.values - y_model)^2)
>
>
> MSE_fastMM
>
> MSE_Huber
>
> MSE_Tukey
>
> MSE_L1
>
> MSE_fastTau
>
> MSE_HBR
>
> MSE_DCML
>
> ###############
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
  
	[[alternative HTML version deleted]]


From moh@n @end|ng |rom wh@t3word@@com  Mon Oct 21 18:40:28 2019
From: moh@n @end|ng |rom wh@t3word@@com (Mohan Ganesalingam)
Date: Mon, 21 Oct 2019 17:40:28 +0100
Subject: [R] MLE packages
In-Reply-To: <CAGxFJbTVC9A8uFPWCAb262x0wusEq6PBfU1cpnPgp2kE-S-dNQ@mail.gmail.com>
References: <CACgRdJEyOQFPnXNd60qaKNq1g22k7QuOgM5AjG_Ouk5d7W03cw@mail.gmail.com>
 <CAGxFJbTVC9A8uFPWCAb262x0wusEq6PBfU1cpnPgp2kE-S-dNQ@mail.gmail.com>
Message-ID: <CACgRdJEjSOtxOvUQ3O4z+CYqv2wtZ4NnBv=2u8aPZqpso5uEmA@mail.gmail.com>

Hi Bert,

thanks for the quick reply. I spent a while searching before I posted, and
also read through the documentation for the mle fn and the  maxLik and
bbmle packages. As you say, it seems likely I'm reinventing something
standard, but nothing I can find quite seems to do what I need. Hence
posting on the mailing list... .

best wishes,
Mohan

On Mon, 21 Oct 2019 at 16:40, Bert Gunter <bgunter.4567 at gmail.com> wrote:

> Are you familiar with R resources you can search?
>
> 1.  CRAN task views:
> https://cran.r-project.org/web/views/
>
> 2. For searching:  https://rseek.org/
> Searching on "maximum likelihood" there appeared to bring up relevant
> resources.
>
> 3. RStudio resources: https://education.rstudio.com/
> Note: RStudio is a private company that is not part of the R Foundation,
> but may have useful programming resources for you.
>
> 4. Tons of online tutorials:  Just search!
>
> I have not looked at your code in any detail, but I'd be willing to bet
> you're trying to reinvent a square wheel.
>
> Cheers,
> Bert
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Mon, Oct 21, 2019 at 8:21 AM Mohan Ganesalingam <mohan at what3words.com>
> wrote:
>
>> I'm fairly new to R. The language is amazing, but I'm having trouble
>> navigating packages. I have a solution that handles the problems I'm
>> working on, but I don't know if it could be solved more cleanly with mle,
>> bbmle, maxLik, etc..
>>
>> Here's an example problem first. I have run many WAV files through voice
>> recognition software; the software returns 50 hypotheses for each,
>> together
>> with scores S_{ni} indicating how 'good' the i^th hypothesis is. I want to
>> map the S_{ni} to a probability distribution. So I'm using MLE to fit a
>> function f that maps scores to logs of relative probabilities. This means
>> maximising
>>
>> \sum_n[   f(S_{nc_n}) - \log \sum_i \exp f(S_{ni})   ]
>>
>> where c_n is the index of the correct hypothesis for the n^th sample.
>>
>> Here's the code:
>>
>> ave_log_likelihood = function(f, scores) {
>>     def = scores %>% filter(Sc > 0)
>>     log_likelihoods = with(def, f(Sc) - matrixStats::rowLogSumExps(f(S),
>> na.rm = T))
>>     return(mean(log_likelihoods))
>> }
>>
>> nlopts = list(algorithm = "NLOPT_LN_BOBYQA", maxeval = 500, print_level =
>> 0)
>>
>> best_linear_fit = function(scores) {
>>   res <- nloptr(c(0.01),
>>                 function(a) -ave_log_likelihood(function(x) (a * x),
>> scores),
>>                 opts = nlopts)
>>   return (data.frame(log_likelihood = -res$objective, slope =
>> res$solution,
>> doubling = log(2)/res$solution))
>> }
>>
>>
>> Now, I need to write a lot of variants of this with different objectives
>> and with different classes of function. But there's a lot of verbiage in
>> best_linear_fit which would currently be copy/pasted. Also, as written it
>> makes it messy to fit on training data and then evaluate on test data.
>>
>> I'd appreciate any advice on packages that might make it easier to write
>> this more cleanly, ideally using the idioms used in `lm`, etc., such as
>> formulae and `predict`. (Any pointers on writing cleaner R code would also
>> be lovely!)
>>
>> Thanks in advance;
>> Mohan
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

	[[alternative HTML version deleted]]


From ye@@m|n@@|e@ @end|ng |rom gm@||@com  Tue Oct 22 10:59:58 2019
From: ye@@m|n@@|e@ @end|ng |rom gm@||@com (Yeasmin Alea)
Date: Tue, 22 Oct 2019 16:59:58 +0800
Subject: [R] Conditions in R (Help Post)
Message-ID: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>

Hello Team
I would like to add a new column (for example-Phase) from the below data
set based on the conditions
   YEAR   DAY      X     Y   Sig
 1  1981     9 -0.213 1.08   1.10
 2  1981    10  0.065 1.05   1.05
*Conditions*

D$Phase=sapply(D,function(a,b) {
     a <-D$X
     b<-D$Y
     if (a<0 && b<0 && b<a)
    {phase=1} else if (a<0 && b<0 && b>a)
    {phase=2} else if (a<0 && b>0 && b<a)
    {phase=7} else if (a<0 && b>0 && b>a)
    {phase=8} else if (a>0 && b<0 && b<a)
    {phase=3} else if (a>0 && b<0 && b>a)
    {phase=4} else if (a>0 && b>0 && b>a)
    {phase=6} else (a>0 && b>0 && b<a)
    {phase=5}
})

Can anyone help to fix the script to get a Phase column based on the
conditions. The table will be like the below
   YEAR   DAY      X     Y   Sig      Phase
 1  1981     9 -0.213 1.08   1.10   phase=7
 2  1981    10  0.065 1.05   1.05   phase=6

Many thanks
Alea

	[[alternative HTML version deleted]]


From jho|tm@n @end|ng |rom gm@||@com  Tue Oct 22 20:20:17 2019
From: jho|tm@n @end|ng |rom gm@||@com (jim holtman)
Date: Tue, 22 Oct 2019 11:20:17 -0700
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
Message-ID: <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>

Here is one way of doing it; I think the output you show is wrong:

library(tidyverse)
input <- read_delim(" YEAR   DAY      X     Y   Sig
  1981     9 -0.213 1.08   1.10
  1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)

input <- mutate(input,
  phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
                    X < 0 & Y > 0 & Y < X ~ 'phase=2',
                    X < 0 & Y > 0 & Y < X ~ 'phase=7',
                    X < 0 & Y > 0 & Y > X ~ 'phase=8',
                    X > 0 & Y < 0 & Y < X ~ 'phase=3',
                    X > 0 & Y < 0 & Y > X ~ 'phase=4',
                    X > 0 & Y > 0 & Y > X ~ 'phase=6',
                    X > 0 & Y > 0 & Y < X ~ 'phase=5',
                    TRUE ~ 'unknown'
  )
)

> input
# A tibble: 2 x 6
   YEAR   DAY      X     Y   Sig phase
  <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
1  1981     9 -0.213  1.08  1.1  phase=8
2  1981    10  0.065  1.05  1.05 phase=6

Jim Holtman
*Data Munger Guru*


*What is the problem that you are trying to solve?Tell me what you want to
do, not how you want to do it.*


On Tue, Oct 22, 2019 at 9:43 AM Yeasmin Alea <yeasmin.alea at gmail.com> wrote:

> Hello Team
> I would like to add a new column (for example-Phase) from the below data
> set based on the conditions
>    YEAR   DAY      X     Y   Sig
>  1  1981     9 -0.213 1.08   1.10
>  2  1981    10  0.065 1.05   1.05
> *Conditions*
>
> D$Phase=sapply(D,function(a,b) {
>      a <-D$X
>      b<-D$Y
>      if (a<0 && b<0 && b<a)
>     {phase=1} else if (a<0 && b<0 && b>a)
>     {phase=2} else if (a<0 && b>0 && b<a)
>     {phase=7} else if (a<0 && b>0 && b>a)
>     {phase=8} else if (a>0 && b<0 && b<a)
>     {phase=3} else if (a>0 && b<0 && b>a)
>     {phase=4} else if (a>0 && b>0 && b>a)
>     {phase=6} else (a>0 && b>0 && b<a)
>     {phase=5}
> })
>
> Can anyone help to fix the script to get a Phase column based on the
> conditions. The table will be like the below
>    YEAR   DAY      X     Y   Sig      Phase
>  1  1981     9 -0.213 1.08   1.10   phase=7
>  2  1981    10  0.065 1.05   1.05   phase=6
>
> Many thanks
> Alea
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From jho|tm@n @end|ng |rom gm@||@com  Tue Oct 22 20:28:32 2019
From: jho|tm@n @end|ng |rom gm@||@com (jim holtman)
Date: Tue, 22 Oct 2019 11:28:32 -0700
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
 <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
Message-ID: <CAAxdm-4MkAaVfFbNMyw0ozBbKYiUgdTd_wQt9XebRNhP1YV2Cw@mail.gmail.com>

Had the condition for phase=2 incorrect:

library(tidyverse)
input <- read_delim(" YEAR   DAY      X     Y   Sig
  1981     9 -0.213 1.08   1.10
  1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)

input <- mutate(input,
  phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
                    X < 0 & Y < 0 & Y > X ~ 'phase=2',
                    X < 0 & Y > 0 & Y < X ~ 'phase=7',
                    X < 0 & Y > 0 & Y > X ~ 'phase=8',
                    X > 0 & Y < 0 & Y < X ~ 'phase=3',
                    X > 0 & Y < 0 & Y > X ~ 'phase=4',
                    X > 0 & Y > 0 & Y > X ~ 'phase=6',
                    X > 0 & Y > 0 & Y < X ~ 'phase=5',
                    TRUE ~ 'unknown'
  )
)

Jim Holtman
*Data Munger Guru*


*What is the problem that you are trying to solve?Tell me what you want to
do, not how you want to do it.*


On Tue, Oct 22, 2019 at 11:20 AM jim holtman <jholtman at gmail.com> wrote:

> Here is one way of doing it; I think the output you show is wrong:
>
> library(tidyverse)
> input <- read_delim(" YEAR   DAY      X     Y   Sig
>   1981     9 -0.213 1.08   1.10
>   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>
> input <- mutate(input,
>   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
>                     X < 0 & Y > 0 & Y < X ~ 'phase=2',
>                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
>                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
>                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
>                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
>                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
>                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
>                     TRUE ~ 'unknown'
>   )
> )
>
> > input
> # A tibble: 2 x 6
>    YEAR   DAY      X     Y   Sig phase
>   <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
> 1  1981     9 -0.213  1.08  1.1  phase=8
> 2  1981    10  0.065  1.05  1.05 phase=6
>
> Jim Holtman
> *Data Munger Guru*
>
>
> *What is the problem that you are trying to solve?Tell me what you want to
> do, not how you want to do it.*
>
>
> On Tue, Oct 22, 2019 at 9:43 AM Yeasmin Alea <yeasmin.alea at gmail.com>
> wrote:
>
>> Hello Team
>> I would like to add a new column (for example-Phase) from the below data
>> set based on the conditions
>>    YEAR   DAY      X     Y   Sig
>>  1  1981     9 -0.213 1.08   1.10
>>  2  1981    10  0.065 1.05   1.05
>> *Conditions*
>>
>> D$Phase=sapply(D,function(a,b) {
>>      a <-D$X
>>      b<-D$Y
>>      if (a<0 && b<0 && b<a)
>>     {phase=1} else if (a<0 && b<0 && b>a)
>>     {phase=2} else if (a<0 && b>0 && b<a)
>>     {phase=7} else if (a<0 && b>0 && b>a)
>>     {phase=8} else if (a>0 && b<0 && b<a)
>>     {phase=3} else if (a>0 && b<0 && b>a)
>>     {phase=4} else if (a>0 && b>0 && b>a)
>>     {phase=6} else (a>0 && b>0 && b<a)
>>     {phase=5}
>> })
>>
>> Can anyone help to fix the script to get a Phase column based on the
>> conditions. The table will be like the below
>>    YEAR   DAY      X     Y   Sig      Phase
>>  1  1981     9 -0.213 1.08   1.10   phase=7
>>  2  1981    10  0.065 1.05   1.05   phase=6
>>
>> Many thanks
>> Alea
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

	[[alternative HTML version deleted]]


From jho|tm@n @end|ng |rom gm@||@com  Tue Oct 22 20:42:17 2019
From: jho|tm@n @end|ng |rom gm@||@com (jim holtman)
Date: Tue, 22 Oct 2019 11:42:17 -0700
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAAxdm-4MkAaVfFbNMyw0ozBbKYiUgdTd_wQt9XebRNhP1YV2Cw@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
 <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
 <CAAxdm-4MkAaVfFbNMyw0ozBbKYiUgdTd_wQt9XebRNhP1YV2Cw@mail.gmail.com>
Message-ID: <CAAxdm-4ExR6MU+nUiWepnfXOj4SLhNjajt=b6qB3w0TnL1NQVQ@mail.gmail.com>

Here is another way of doing it by computing the index based on the
conditions

> input <- read_delim(" YEAR   DAY      X     Y   Sig
+   1981     9 -0.213 1.08   1.10
+   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>
> input <- mutate(input,
+   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
+                     X < 0 & Y < 0 & Y > X ~ 'phase=2',
+                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
+                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
+                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
+                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
+                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
+                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
+                     TRUE ~ 'unknown'
+   )
+ )
> input
# A tibble: 2 x 6
   YEAR   DAY      X     Y   Sig phase
  <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
1  1981     9 -0.213  1.08  1.1  phase=8
2  1981    10  0.065  1.05  1.05 phase=6
>
> # another way of doing it by constructing an integer to be used as
> # index for the phase value based on the evaluation of X<0, Y<0 and Y<X.
>
> index <- with(input,
+               (X < 0) * 4 + (Y < 0) * 2 + (Y < X)
+ )
>
> phase_val <- c(6, 5, 4, 3, 8, 7, 2, 1)
>
> input$phase_2 <- paste0('phase=', phase_val[index + 1L])
> input
# A tibble: 2 x 7
   YEAR   DAY      X     Y   Sig phase   phase_2
  <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>   <chr>
1  1981     9 -0.213  1.08  1.1  phase=8 phase=8
2  1981    10  0.065  1.05  1.05 phase=6 phase=6
>

Jim Holtman
*Data Munger Guru*


*What is the problem that you are trying to solve?Tell me what you want to
do, not how you want to do it.*


On Tue, Oct 22, 2019 at 11:28 AM jim holtman <jholtman at gmail.com> wrote:

> Had the condition for phase=2 incorrect:
>
> library(tidyverse)
> input <- read_delim(" YEAR   DAY      X     Y   Sig
>   1981     9 -0.213 1.08   1.10
>   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>
> input <- mutate(input,
>   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
>                     X < 0 & Y < 0 & Y > X ~ 'phase=2',
>                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
>                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
>                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
>                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
>                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
>                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
>                     TRUE ~ 'unknown'
>   )
> )
>
> Jim Holtman
> *Data Munger Guru*
>
>
> *What is the problem that you are trying to solve?Tell me what you want to
> do, not how you want to do it.*
>
>
> On Tue, Oct 22, 2019 at 11:20 AM jim holtman <jholtman at gmail.com> wrote:
>
>> Here is one way of doing it; I think the output you show is wrong:
>>
>> library(tidyverse)
>> input <- read_delim(" YEAR   DAY      X     Y   Sig
>>   1981     9 -0.213 1.08   1.10
>>   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>>
>> input <- mutate(input,
>>   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
>>                     X < 0 & Y > 0 & Y < X ~ 'phase=2',
>>                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
>>                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
>>                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
>>                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
>>                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
>>                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
>>                     TRUE ~ 'unknown'
>>   )
>> )
>>
>> > input
>> # A tibble: 2 x 6
>>    YEAR   DAY      X     Y   Sig phase
>>   <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
>> 1  1981     9 -0.213  1.08  1.1  phase=8
>> 2  1981    10  0.065  1.05  1.05 phase=6
>>
>> Jim Holtman
>> *Data Munger Guru*
>>
>>
>> *What is the problem that you are trying to solve?Tell me what you want
>> to do, not how you want to do it.*
>>
>>
>> On Tue, Oct 22, 2019 at 9:43 AM Yeasmin Alea <yeasmin.alea at gmail.com>
>> wrote:
>>
>>> Hello Team
>>> I would like to add a new column (for example-Phase) from the below data
>>> set based on the conditions
>>>    YEAR   DAY      X     Y   Sig
>>>  1  1981     9 -0.213 1.08   1.10
>>>  2  1981    10  0.065 1.05   1.05
>>> *Conditions*
>>>
>>> D$Phase=sapply(D,function(a,b) {
>>>      a <-D$X
>>>      b<-D$Y
>>>      if (a<0 && b<0 && b<a)
>>>     {phase=1} else if (a<0 && b<0 && b>a)
>>>     {phase=2} else if (a<0 && b>0 && b<a)
>>>     {phase=7} else if (a<0 && b>0 && b>a)
>>>     {phase=8} else if (a>0 && b<0 && b<a)
>>>     {phase=3} else if (a>0 && b<0 && b>a)
>>>     {phase=4} else if (a>0 && b>0 && b>a)
>>>     {phase=6} else (a>0 && b>0 && b<a)
>>>     {phase=5}
>>> })
>>>
>>> Can anyone help to fix the script to get a Phase column based on the
>>> conditions. The table will be like the below
>>>    YEAR   DAY      X     Y   Sig      Phase
>>>  1  1981     9 -0.213 1.08   1.10   phase=7
>>>  2  1981    10  0.065 1.05   1.05   phase=6
>>>
>>> Many thanks
>>> Alea
>>>
>>>         [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide
>>> http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>
>>

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Tue Oct 22 20:59:36 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Tue, 22 Oct 2019 11:59:36 -0700
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAAxdm-4MkAaVfFbNMyw0ozBbKYiUgdTd_wQt9XebRNhP1YV2Cw@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
 <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
 <CAAxdm-4MkAaVfFbNMyw0ozBbKYiUgdTd_wQt9XebRNhP1YV2Cw@mail.gmail.com>
Message-ID: <CAGxFJbRvbegd3dYi=0cOY=JtsTLimZ2JCaBdEOh_pZpz66c=4w@mail.gmail.com>

Both your syntax and semantics are wrong. This indicates to me that you
should spend more time with some basic R tutorials before proceeding.

That said, here are some of the errors:

1) You are not using sapply correctly. Moreover, no R level iteration is
needed anyway (sapply() iterates over columns in a data frame).
2) You are confusing && (not vectorized) with & (vectorized)
3) You seem to be confusing if ... else (flow control) with ifelse()
(vectorized function)
4) Many of your conditions are nonsense or redundant. For example:
 (a<0 & b>0 & b<a)  is nonsense
 (a<0 & b>0 & b>a)  is the same as (a < 0 & b > 0)

etc.

A simple way to accomplish what you want, I think, that takes advantage of
coercion of logicals to numeric
is something along the lines of this reproducible example:

set.seed(4444)
a <- floor(runif(50,-20,20))   ## D$X
b <- floor(runif(50,-20,20))   ## D$Y

D$phase <- rep_len(0, length(b)) +
   1*(a<0 & b<0 & b<a) +
   2*(a<0 & b<0 & b>a) +
   8*(a<0 & b>0)   ## etc.


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Tue, Oct 22, 2019 at 11:30 AM jim holtman <jholtman at gmail.com> wrote:

> Had the condition for phase=2 incorrect:
>
> library(tidyverse)
> input <- read_delim(" YEAR   DAY      X     Y   Sig
>   1981     9 -0.213 1.08   1.10
>   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>
> input <- mutate(input,
>   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
>                     X < 0 & Y < 0 & Y > X ~ 'phase=2',
>                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
>                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
>                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
>                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
>                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
>                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
>                     TRUE ~ 'unknown'
>   )
> )
>
> Jim Holtman
> *Data Munger Guru*
>
>
> *What is the problem that you are trying to solve?Tell me what you want to
> do, not how you want to do it.*
>
>
> On Tue, Oct 22, 2019 at 11:20 AM jim holtman <jholtman at gmail.com> wrote:
>
> > Here is one way of doing it; I think the output you show is wrong:
> >
> > library(tidyverse)
> > input <- read_delim(" YEAR   DAY      X     Y   Sig
> >   1981     9 -0.213 1.08   1.10
> >   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
> >
> > input <- mutate(input,
> >   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
> >                     X < 0 & Y > 0 & Y < X ~ 'phase=2',
> >                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
> >                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
> >                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
> >                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
> >                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
> >                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
> >                     TRUE ~ 'unknown'
> >   )
> > )
> >
> > > input
> > # A tibble: 2 x 6
> >    YEAR   DAY      X     Y   Sig phase
> >   <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
> > 1  1981     9 -0.213  1.08  1.1  phase=8
> > 2  1981    10  0.065  1.05  1.05 phase=6
> >
> > Jim Holtman
> > *Data Munger Guru*
> >
> >
> > *What is the problem that you are trying to solve?Tell me what you want
> to
> > do, not how you want to do it.*
> >
> >
> > On Tue, Oct 22, 2019 at 9:43 AM Yeasmin Alea <yeasmin.alea at gmail.com>
> > wrote:
> >
> >> Hello Team
> >> I would like to add a new column (for example-Phase) from the below data
> >> set based on the conditions
> >>    YEAR   DAY      X     Y   Sig
> >>  1  1981     9 -0.213 1.08   1.10
> >>  2  1981    10  0.065 1.05   1.05
> >> *Conditions*
> >>
> >> D$Phase=sapply(D,function(a,b) {
> >>      a <-D$X
> >>      b<-D$Y
> >>      if (a<0 && b<0 && b<a)
> >>     {phase=1} else if (a<0 && b<0 && b>a)
> >>     {phase=2} else if (a<0 && b>0 && b<a)
> >>     {phase=7} else if (a<0 && b>0 && b>a)
> >>     {phase=8} else if (a>0 && b<0 && b<a)
> >>     {phase=3} else if (a>0 && b<0 && b>a)
> >>     {phase=4} else if (a>0 && b>0 && b>a)
> >>     {phase=6} else (a>0 && b>0 && b<a)
> >>     {phase=5}
> >> })
> >>
> >> Can anyone help to fix the script to get a Phase column based on the
> >> conditions. The table will be like the below
> >>    YEAR   DAY      X     Y   Sig      Phase
> >>  1  1981     9 -0.213 1.08   1.10   phase=7
> >>  2  1981    10  0.065 1.05   1.05   phase=6
> >>
> >> Many thanks
> >> Alea
> >>
> >>         [[alternative HTML version deleted]]
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >>
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Tue Oct 22 21:48:49 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Tue, 22 Oct 2019 21:48:49 +0200
Subject: [R] Change colour ggiNEXT plot package iNEXT
In-Reply-To: <E3C4D84D-885B-4112-AFE0-28252F189F08@dcn.davis.ca.us>
References: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>
 <E3C4D84D-885B-4112-AFE0-28252F189F08@dcn.davis.ca.us>
Message-ID: <CAMk+s2Q+JQKv02SNiGbib9XggUq+piNtMQTwqvntWMr7Q=nVaQ@mail.gmail.com>

I thought it was a major package for ecological analysis. Anyway,
thank you for the tips. I'll dip from there.

On Tue, Oct 22, 2019 at 5:29 PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
>
> Probably, assuming that function returns a ggplot object. You will need to identify the levels of the factor used for distinguishing groups, and add a scale_colour_manual() to the ggplot object with colors specified in the same order as those levels.
>
> Support for obscure packages is technically off-topic here ... if you need a more specific answer you may need to correspond with the package authors or use their suggested support resources.
>
> On October 22, 2019 2:18:49 AM PDT, Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
> >Dear all,
> >is it possible to provide custom color to the rarefaction curve of the
> >package iNEXT (ggiNEXT)?
> >If I have these data:
> >```
> >library(iNEXT)
> >library(ggplot2)
> >data(spider)
> >out <- iNEXT(spider, q=0, datatype="abundance")
> >ggiNEXT(out, type=1)
> >```
> >can i colour the lines with, let's say, yellow and green?
> >Thank you
>
> --
> Sent from my phone. Please excuse my brevity.



-- 
Best regards,
Luigi


From rend0020 @end|ng |rom umn@edu  Tue Oct 22 22:39:53 2019
From: rend0020 @end|ng |rom umn@edu (Aaron Rendahl)
Date: Tue, 22 Oct 2019 15:39:53 -0500
Subject: [R] prop.test CI depends on null hypothesis?
In-Reply-To: <CAEY=Wf=pGKc=pCpT1PhjCU6hDaS93D31HqovtQSSNtNj7sR9sg@mail.gmail.com>
References: <CAEY=Wf=pGKc=pCpT1PhjCU6hDaS93D31HqovtQSSNtNj7sR9sg@mail.gmail.com>
Message-ID: <CAEY=WfmwG6Y+-RRM8796BN29NtMe6-oD9YBPtNrXBE3vTD_9ZA@mail.gmail.com>

I believe this is correct behavior for computing the p-value, though the
wording is awkward in that it implies that R is not implementing the
continuity correction in this situation, when in fact, this behavior is
part of how the continuity correction is defined. The correction simply
treats the normal approximation as appropriately discrete, so (to translate
to a binomial variable) computes P(X > 12) using P(X > 11.5). The case the
documentation discusses is simply the case where the null hypothesis falls
within the discrete band corresponding to the observed value; in this only
enough of the correction is used so that the test statistic is
appropriately zero and the p-value is 1.

However, this is not correct behavior for the confidence interval. There is
nothing in any of the listed documentation that would support such
behavior, and additionally, it doesn't make sense for a confidence interval
to depend on a null parameter. If continuity correction is desired, the
edges of the confidence bound should still be fully adjusted even when the
observed proportion is close to the null parameter. What's currently
happening is that it's not adjusted at all when the observed proportion
equals the null proportion, and in cases where it is not equal but still
close enough that the correction is adjusted, the confidence intervals are
neither "with" correction" or "without" correction but instead somewhere in
between!

An additional confusing matter is how R reports whether the test was
performed "with" or "without" continuity correction; this is determined in
code by whether or not the adjusted correction is zero or not. This happens
when the observed proportion equals the null proportion, so whenever that
happens, it's reported "without" continuity correction, so this "flips" on
the user in this case. Though oddly (to the user), changing the null p by a
tiny amount gives only tiny changes to the result but then it is reported
"with" correction.

This behavior has presumably been in R for a long time (though I haven't
checked the code history), so I would love to have feedback from the R-help
community about:
 * does the current behavior really make sense, and I've just misunderstood
something?
 * is there documentation or discussions about this behavior out there
somewhere that I've missed?
 * if this really is a "new" discovery, how best to bring it to the
attention of those who can decide what to do about it?

Thanks!

On Mon, Oct 21, 2019 at 11:33 AM Aaron Rendahl <rend0020 at umn.edu> wrote:

> Why does prop.test use continuity correction "only if it does not exceed
> the difference between sample and null proportions in absolute value"?  I'm
> referring here to the single group method, though I believe there is a
> similar issue with the two group method.
>
> What this means in practice is that the confidence interval changes
> depending on the null hypothesis; see examples below. This is unexpected,
> and I have been unable to find any documentation explaining why this is
> done (see links below examples).
>
> ## when the null proportion is equal to the sample proportion, it does not
> ## use the continuity correction, even when one is asked for
>
>   > prop.test(30,60,p=0.5, correct=TRUE)
>
> 1-sample proportions test without continuity correction
>
> data:  30 out of 60, null probability 0.5
> X-squared = 0, df = 1, p-value = 1
> alternative hypothesis: true p is not equal to 0.5
> 95 percent confidence interval:
>  0.3773502 0.6226498
> sample estimates:
>   p
> 0.5
>
> ## however, when the null proportion is not equal to the sample
> proportion,
> ## it does use the continuity correction when it is asked for.
>
> > prop.test(30,60,p=0.499, correct=TRUE)
>
> 1-sample proportions test with continuity correction
>
> data:  30 out of 60, null probability 0.499
> X-squared = 0, df = 1, p-value = 1
> alternative hypothesis: true p is not equal to 0.499
> 95 percent confidence interval:
>  0.3764106 0.6235894
> sample estimates:
>   p
> 0.5
>
>
> The documentation refers to Newcombe's 1998 Statistics in Medicine
> article; I read through this and found nothing about not using the
> continuity correction in this situation.
>
> https://doi.org/10.1002/(SICI)1097-0258(19980430)17:8%3C857::AID-SIM777%3E3.0.CO;2-E
>
> On this mailing list, there was a 2013 post "prop.test correct true and
> false gives same answer", which was answered only with the quote from the
> help page: https://stat.ethz.ch/pipermail/r-help/2013-March/350386.html
>
> I also found several questions asking which Newcombe method is
> implemented, which didn't elicit specific answers; here's one from 2011:
> https://stat.ethz.ch/pipermail/r-help/2011-April/274086.html
>

-- 
Aaron Rendahl, Ph.D.
Assistant Professor of Statistics and Informatics
College of Veterinary Medicine, University of Minnesota
295L AS/VM, 612-301-2161

	[[alternative HTML version deleted]]


From herd_dog @end|ng |rom cox@net  Tue Oct 22 22:54:07 2019
From: herd_dog @end|ng |rom cox@net (Phillip Heinrich)
Date: Tue, 22 Oct 2019 13:54:07 -0700
Subject: [R] If Loop I Think
Message-ID: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>

      Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3 
      1 0       
      2 1       
      3 1       
      4 1 arenn001      
      5 2 arenn001      
      6 0       
      7 0 perad001      
      8 0 polla001 perad001     
      9 0 goldp001 polla001 perad001    
      10 0  lambj001 goldp001    
      11 1  lambj001 goldp001    
      12 2   lambj001    
      13 0       
      14 1       



With the above data, Arizona Diamondbacks baseball, I?m trying to put zeros into the R1 column is the RunnerFirst column is blank and a one if the column has a coded entry such as rows 4,5,7,8,& 9.  Similarly I want zeros in R2 and R3 if RunnerSecond and RunnerThird respectively are blank and ones if there is an entry.  

I?ve tried everything I know how to do such as ?If Loops?, ?If-Then loops?, ?apply?, ?sapply?, etc.  I wrote function below and it ran without errors but I have no idea what to do with it to accomplish my goal:

R1 <- function(x) {  
  if (ari18.test3$RunnerFirst == " "){
       ari18.test3$R1 <- 0
       return(R1)
         }else{
           R1 <- ari18.test3$R1 <- 1
           return(R1)
         }
   }

The name of the data frame is ari18.test3

On a more philosophical note, data handling in R seems to be made up of thousands of details with no over-riding principles.  I?ve read two books on R and a number of tutorial and watched several videos but I don?t seem to be making any progress.  Can anyone suggest videos, or tutorials, or books that might help?  Database stuff has never been my strong point but I?m determined to learn.

Thanks,
Philip Heinrich
	[[alternative HTML version deleted]]


From drj|m|emon @end|ng |rom gm@||@com  Tue Oct 22 23:38:01 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Wed, 23 Oct 2019 08:38:01 +1100
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
Message-ID: <CA+8X3fXXGk0gD3HWArhBfWoL3Q1mbqssq6iEPSAgaVrxnzqdww@mail.gmail.com>

Hi Yeasmin,
I suspect that you didn't intend to have conditions like:

a<0 && b>0 && b<a)

I'm going to guess that you meant:

a < 0 && b > 0 && abs(b) < abs(a)

If this is the case, the following function seems to return the values
of phase that you want:

assign_phase<-function(x,y) {
 phase<-c(1,2,7,8,3,4,6,5)
 phase_index<-4 * (x > 0) + 2 * (y > 0) + (abs(x) < abs(y))
 return(phase[phase_index+1])
}

Jim

On Wed, Oct 23, 2019 at 3:43 AM Yeasmin Alea <yeasmin.alea at gmail.com> wrote:
>
> Hello Team
> I would like to add a new column (for example-Phase) from the below data
> set based on the conditions
>    YEAR   DAY      X     Y   Sig
>  1  1981     9 -0.213 1.08   1.10
>  2  1981    10  0.065 1.05   1.05
> *Conditions*
>
> D$Phase=sapply(D,function(a,b) {
>      a <-D$X
>      b<-D$Y
>      if (a<0 && b<0 && b<a)
>     {phase=1} else if (a<0 && b<0 && b>a)
>     {phase=2} else if (a<0 && b>0 && b<a)
>     {phase=7} else if (a<0 && b>0 && b>a)
>     {phase=8} else if (a>0 && b<0 && b<a)
>     {phase=3} else if (a>0 && b<0 && b>a)
>     {phase=4} else if (a>0 && b>0 && b>a)
>     {phase=6} else (a>0 && b>0 && b<a)
>     {phase=5}
> })
>
> Can anyone help to fix the script to get a Phase column based on the
> conditions. The table will be like the below
>    YEAR   DAY      X     Y   Sig      Phase
>  1  1981     9 -0.213 1.08   1.10   phase=7
>  2  1981    10  0.065 1.05   1.05   phase=6
>
> Many thanks
> Alea
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From drj|m|emon @end|ng |rom gm@||@com  Wed Oct 23 00:26:28 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Wed, 23 Oct 2019 09:26:28 +1100
Subject: [R] If Loop I Think
In-Reply-To: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
References: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
Message-ID: <CA+8X3fWiTja7Qf0GMG9tFw91ujwWj-=XCbZwQr264RoNUhxA-Q@mail.gmail.com>

Hi Philip,
Try this:

phdf<-read.table(
text="Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
1 0
2 1
3 1
4 1 arenn001
5 2 arenn001
6 0
7 0 perad001
8 0 polla001 perad001
9 0 goldp001 polla001 perad001
10 0  lambj001 goldp001
11 1  lambj001 goldp001
12 2   lambj001
13 0
14 1       ",
header=TRUE,stringsAsFactors=FALSE,fill=TRUE)
phdf$R1<-ifelse(nchar(phdf$RunnerFirst) > 0,1,0)
phdf$R2<-ifelse(nchar(phdf$RunnerSecond) > 0,1,0)
phdf$R3<-ifelse(nchar(phdf$RunnerThird) > 0,1,0)

Jim

On Wed, Oct 23, 2019 at 7:54 AM Phillip Heinrich <herd_dog at cox.net> wrote:
>
>       Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
>       1 0
>       2 1
>       3 1
>       4 1 arenn001
>       5 2 arenn001
>       6 0
>       7 0 perad001
>       8 0 polla001 perad001
>       9 0 goldp001 polla001 perad001
>       10 0  lambj001 goldp001
>       11 1  lambj001 goldp001
>       12 2   lambj001
>       13 0
>       14 1
>
>
>
> With the above data, Arizona Diamondbacks baseball, I?m trying to put zeros into the R1 column is the RunnerFirst column is blank and a one if the column has a coded entry such as rows 4,5,7,8,& 9.  Similarly I want zeros in R2 and R3 if RunnerSecond and RunnerThird respectively are blank and ones if there is an entry.
>
> I?ve tried everything I know how to do such as ?If Loops?, ?If-Then loops?, ?apply?, ?sapply?, etc.  I wrote function below and it ran without errors but I have no idea what to do with it to accomplish my goal:
>
> R1 <- function(x) {
>   if (ari18.test3$RunnerFirst == " "){
>        ari18.test3$R1 <- 0
>        return(R1)
>          }else{
>            R1 <- ari18.test3$R1 <- 1
>            return(R1)
>          }
>    }
>
> The name of the data frame is ari18.test3
>
> On a more philosophical note, data handling in R seems to be made up of thousands of details with no over-riding principles.  I?ve read two books on R and a number of tutorial and watched several videos but I don?t seem to be making any progress.  Can anyone suggest videos, or tutorials, or books that might help?  Database stuff has never been my strong point but I?m determined to learn.
>
> Thanks,
> Philip Heinrich
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From dw|n@em|u@ @end|ng |rom comc@@t@net  Wed Oct 23 00:29:06 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Tue, 22 Oct 2019 15:29:06 -0700
Subject: [R] If Loop I Think
In-Reply-To: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
References: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
Message-ID: <41d9629b-52e3-55b2-d078-6274901cf9d9@comcast.net>


On 10/22/19 1:54 PM, Phillip Heinrich wrote:
>        Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
>        1 0
>        2 1
>        3 1
>        4 1 arenn001
>        5 2 arenn001
>        6 0
>        7 0 perad001
>        8 0 polla001 perad001
>        9 0 goldp001 polla001 perad001
>        10 0  lambj001 goldp001
>        11 1  lambj001 goldp001
>        12 2   lambj001
>        13 0
>        14 1
>
>
>
> With the above data, Arizona Diamondbacks baseball, I?m trying to put zeros into the R1 column is the RunnerFirst column is blank and a one if the column has a coded entry such as rows 4,5,7,8,& 9.  Similarly I want zeros in R2 and R3 if RunnerSecond and RunnerThird respectively are blank and ones if there is an entry.
>
> I?ve tried everything I know how to do such as ?If Loops?, ?If-Then loops?, ?apply?, ?sapply?, etc.  I wrote function below and it ran without errors but I have no idea what to do with it to accomplish my goal:
>
> R1 <- function(x) {
>    if (ari18.test3$RunnerFirst == " "){
>         ari18.test3$R1 <- 0
>         return(R1)
>           }else{
>             R1 <- ari18.test3$R1 <- 1
>             return(R1)
>           }
>     }
>
> The name of the data frame is ari18.test3
>
> On a more philosophical note, data handling in R seems to be made up of thousands of details with no over-riding principles.  I?ve read two books on R and a number of tutorial and watched several videos but I don?t seem to be making any progress.  Can anyone suggest videos, or tutorials, or books that might help?  Database stuff has never been my strong point but I?m determined to learn.
>
> Thanks,
> Philip Heinrich
> 	[[alternative HTML version deleted]]

I'm not sure how well you read instructions since you submitted this in 
HTML. The advice I would give for learning data handling is to study R's 
data structures and the help pages for `[<-`, `lapply`,`merge`, and the 
concept of vectorization. If you don't know Boolean logic well, then 
studying that topic would also be helpful. Studying the help page for 
`[<-` is a stepo may newbies think they can avoid, but mastery will 
elude you until you have read through it probably ten or tweny times.

Here's how to input that data and create R1. The methods to create 
R2,and R3 would take two more similar lines of code.

 > dat <- read.table(text="????? Row Outs RunnerFirst RunnerSecond 
RunnerThird R1 R2 R3
+?????? 1 0
+?????? 2 1
+?????? 3 1
+?????? 4 1 arenn001
+?????? 5 2 arenn001
+?????? 6 0
+?????? 7 0 perad001
+?????? 8 0 polla001 perad001
+?????? 9 0 goldp001 polla001 perad001
+?????? 10 0? lambj001 goldp001
+?????? 11 1? lambj001 goldp001
+?????? 12 2?? lambj001
+?????? 13 0
+?????? 14 1?????? ", header=TRUE, fill=TRUE)
 > dat
 ?? Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
1??? 1??? 0????????????????????????????????????? NA NA NA
2??? 2??? 1????????????????????????????????????? NA NA NA
3??? 3??? 1????????????????????????????????????? NA NA NA
4??? 4??? 1??? arenn001????????????????????????? NA NA NA
5??? 5??? 2??? arenn001????????????????????????? NA NA NA
6??? 6??? 0????????????????????????????????????? NA NA NA
7??? 7??? 0??? perad001????????????????????????? NA NA NA
8??? 8??? 0??? polla001???? perad001???????????? NA NA NA
9??? 9??? 0??? goldp001???? polla001??? perad001 NA NA NA
10? 10??? 0??? lambj001???? goldp001???????????? NA NA NA
11? 11??? 1??? lambj001???? goldp001???????????? NA NA NA
12? 12??? 2??? lambj001????????????????????????? NA NA NA
13? 13??? 0????????????????????????????????????? NA NA NA
14? 14??? 1????????????????????????????????????? NA NA NA
 > levels(dat$RunnerFirst)
[1] ""???????? "arenn001" "goldp001" "lambj001" "perad001" "polla001"
 > dat$R1 <- as.numeric( dat$RunnerFirst != "")
 > dat$R1
 ?[1] 0 0 0 1 1 0 1 1 1 1 1 1 0 0

-- 

David.


>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From drj|m|emon @end|ng |rom gm@||@com  Wed Oct 23 02:35:47 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Wed, 23 Oct 2019 11:35:47 +1100
Subject: [R] If Loop I Think
In-Reply-To: <5DD53ACC18FB45969BBFFBF9C8BB6404@OWNERPC>
References: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
 <CA+8X3fWiTja7Qf0GMG9tFw91ujwWj-=XCbZwQr264RoNUhxA-Q@mail.gmail.com>
 <5DD53ACC18FB45969BBFFBF9C8BB6404@OWNERPC>
Message-ID: <CA+8X3fXezY9B0usF23JSSxzt7AYYc_489NuCvA2ARR2JCZLggQ@mail.gmail.com>

Notice that I used the argument stringsAsFactors=FALSE to do this when
reading in.
What I did was to change Rn columns to 1 if there were any characters
in the corresponding Runnerxxx column and 0 otherwise. The "nchar"
function returns the number of characters in a string. If I apply ">0"
to it, I get TRUE(1) if nchar returns a number larger than zero and
FALSE (0) otherwise. By using the result of this operation as the
first argument in the call to "ifelse", I can set the values of the Rn
columns one by one. It is possible to do all three in one call with an
appropriate  function:

whos_on_first<-function(x)
 return(as.numeric(nchar(x) > 0))
phdf[,6:8]<-sapply(phdf[,3:5],whos_on_first)

Jiim

On Wed, Oct 23, 2019 at 11:20 AM Phillip Heinrich <herd_dog at cox.net> wrote:
>
> The routine you suggested worked once I changed RunnerFirst, Second, & Third
> to character vectors.
>
> But I really don't understand what the code is doing.  I understand the
> Ifelse(no-character in RunnerFirst vector) but the 0,1,0 is a mystery.  I
> assume the first zero is if the field is blank and a one if there is
> something in the field.  But what does the third number do?  And why is a >
> symbol used as opposed to an = sign?
>
> Again the bigger question is how do I learn this stuff?  I bought another
> book, "R Projects for Dummies".  I will work through the examples over the
> next week and hope I'll know more once I'm done.
>
> Can you suggest any other sources?
>
> Thanks.
>
> -----Original Message-----
> From: Jim Lemon
> Sent: Tuesday, October 22, 2019 3:26 PM
> To: Phillip Heinrich
> Cc: r-help
> Subject: Re: [R] If Loop I Think
>
> Hi Philip,
> Try this:
>
> phdf<-read.table(
> text="Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
> 1 0
> 2 1
> 3 1
> 4 1 arenn001
> 5 2 arenn001
> 6 0
> 7 0 perad001
> 8 0 polla001 perad001
> 9 0 goldp001 polla001 perad001
> 10 0  lambj001 goldp001
> 11 1  lambj001 goldp001
> 12 2   lambj001
> 13 0
> 14 1       ",
> header=TRUE,stringsAsFactors=FALSE,fill=TRUE)
> phdf$R1<-ifelse(nchar(phdf$RunnerFirst) > 0,1,0)
> phdf$R2<-ifelse(nchar(phdf$RunnerSecond) > 0,1,0)
> phdf$R3<-ifelse(nchar(phdf$RunnerThird) > 0,1,0)
>
> Jim
>
> On Wed, Oct 23, 2019 at 7:54 AM Phillip Heinrich <herd_dog at cox.net> wrote:
> >
> >       Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
> >       1 0
> >       2 1
> >       3 1
> >       4 1 arenn001
> >       5 2 arenn001
> >       6 0
> >       7 0 perad001
> >       8 0 polla001 perad001
> >       9 0 goldp001 polla001 perad001
> >       10 0  lambj001 goldp001
> >       11 1  lambj001 goldp001
> >       12 2   lambj001
> >       13 0
> >       14 1
> >
> >
> >
> > With the above data, Arizona Diamondbacks baseball, I?m trying to put
> > zeros into the R1 column is the RunnerFirst column is blank and a one if
> > the column has a coded entry such as rows 4,5,7,8,& 9.  Similarly I want
> > zeros in R2 and R3 if RunnerSecond and RunnerThird respectively are blank
> > and ones if there is an entry.
> >
> > I?ve tried everything I know how to do such as ?If Loops?, ?If-Then loops?,
> > ?apply?, ?sapply?, etc.  I wrote function below and it ran without errors
> > but I have no idea what to do with it to accomplish my goal:
> >
> > R1 <- function(x) {
> >   if (ari18.test3$RunnerFirst == " "){
> >        ari18.test3$R1 <- 0
> >        return(R1)
> >          }else{
> >            R1 <- ari18.test3$R1 <- 1
> >            return(R1)
> >          }
> >    }
> >
> > The name of the data frame is ari18.test3
> >
> > On a more philosophical note, data handling in R seems to be made up of
> > thousands of details with no over-riding principles.  I?ve read two books
> > on R and a number of tutorial and watched several videos but I don?t seem
> > to be making any progress.  Can anyone suggest videos, or tutorials, or
> > books that might help?  Database stuff has never been my strong point but
> > I?m determined to learn.
> >
> > Thanks,
> > Philip Heinrich
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Wed Oct 23 03:17:45 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Tue, 22 Oct 2019 20:17:45 -0500
Subject: [R] how to compare two distributions and calculate p value?
Message-ID: <CAF9-5jPXciN5aE5Ms7y+tqULvhGyxg8HrU6=3Rr+iscF9=75rg@mail.gmail.com>

Hello,

I would like to calculate a p value from two distributions, one looks like this:
> head(b)
             gene_id number_of_eqtles_per_gene
1: ENSG00000237683.5                         5
2: ENSG00000225972.1                       267
3: ENSG00000225630.1                        97
4: ENSG00000237973.1                       257
5: ENSG00000240409.1                        19
6: ENSG00000248527.1                        41
> dim(b)
[1] 31385     2
and the other  one (call it "a") looks very similar to "b" only has 103 entries.

How would I do say t test considering these two have different number
of entries?
t.test(a,b...)

Thanks
Ana


From bgunter@4567 @end|ng |rom gm@||@com  Wed Oct 23 03:34:46 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Tue, 22 Oct 2019 18:34:46 -0700
Subject: [R] how to compare two distributions and calculate p value?
In-Reply-To: <CAF9-5jPXciN5aE5Ms7y+tqULvhGyxg8HrU6=3Rr+iscF9=75rg@mail.gmail.com>
References: <CAF9-5jPXciN5aE5Ms7y+tqULvhGyxg8HrU6=3Rr+iscF9=75rg@mail.gmail.com>
Message-ID: <CAGxFJbQKKoSawuVyCe_kBT7A=qnpxFGyBygDKR7xK7dLHF4EMw@mail.gmail.com>

"How would I do say t test considering these two have different number
of entries?"

Read and follow ?t.test  .

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Tue, Oct 22, 2019 at 6:18 PM Ana Marija <sokovic.anamarija at gmail.com>
wrote:

> Hello,
>
> I would like to calculate a p value from two distributions, one looks like
> this:
> > head(b)
>              gene_id number_of_eqtles_per_gene
> 1: ENSG00000237683.5                         5
> 2: ENSG00000225972.1                       267
> 3: ENSG00000225630.1                        97
> 4: ENSG00000237973.1                       257
> 5: ENSG00000240409.1                        19
> 6: ENSG00000248527.1                        41
> > dim(b)
> [1] 31385     2
> and the other  one (call it "a") looks very similar to "b" only has 103
> entries.
>
> How would I do say t test considering these two have different number
> of entries?
> t.test(a,b...)
>
> Thanks
> Ana
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Wed Oct 23 04:24:56 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Tue, 22 Oct 2019 21:24:56 -0500
Subject: [R] how to compare two distributions and calculate p value?
In-Reply-To: <CAGxFJbQKKoSawuVyCe_kBT7A=qnpxFGyBygDKR7xK7dLHF4EMw@mail.gmail.com>
References: <CAF9-5jPXciN5aE5Ms7y+tqULvhGyxg8HrU6=3Rr+iscF9=75rg@mail.gmail.com>
 <CAGxFJbQKKoSawuVyCe_kBT7A=qnpxFGyBygDKR7xK7dLHF4EMw@mail.gmail.com>
Message-ID: <CAF9-5jMx-D2BnCyEFU3=q=V2Xh4L=R9TcUG37Tn=DteAQ-P7=w@mail.gmail.com>

ok, I would have paired = FALSE option. What other options you would recommend?

On Tue, Oct 22, 2019 at 8:34 PM Bert Gunter <bgunter.4567 at gmail.com> wrote:
>
> "How would I do say t test considering these two have different number
> of entries?"
>
> Read and follow ?t.test  .
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Tue, Oct 22, 2019 at 6:18 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>>
>> Hello,
>>
>> I would like to calculate a p value from two distributions, one looks like this:
>> > head(b)
>>              gene_id number_of_eqtles_per_gene
>> 1: ENSG00000237683.5                         5
>> 2: ENSG00000225972.1                       267
>> 3: ENSG00000225630.1                        97
>> 4: ENSG00000237973.1                       257
>> 5: ENSG00000240409.1                        19
>> 6: ENSG00000248527.1                        41
>> > dim(b)
>> [1] 31385     2
>> and the other  one (call it "a") looks very similar to "b" only has 103 entries.
>>
>> How would I do say t test considering these two have different number
>> of entries?
>> t.test(a,b...)
>>
>> Thanks
>> Ana
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.


From petr@p|k@| @end|ng |rom prechez@@cz  Wed Oct 23 09:40:20 2019
From: petr@p|k@| @end|ng |rom prechez@@cz (PIKAL Petr)
Date: Wed, 23 Oct 2019 07:40:20 +0000
Subject: [R] If Loop I Think
In-Reply-To: <CA+8X3fWiTja7Qf0GMG9tFw91ujwWj-=XCbZwQr264RoNUhxA-Q@mail.gmail.com>
References: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
 <CA+8X3fWiTja7Qf0GMG9tFw91ujwWj-=XCbZwQr264RoNUhxA-Q@mail.gmail.com>
Message-ID: <93ec5c3b439141ff85f3a400afe618c9@SRVEXCHCM1302.precheza.cz>

Hi

***do not think in if or if loops in R***.

to elaborate Jim's solution further

With simple function based on logical expression
fff <- function(x) (x!="")+0

you could use apply

t(apply(phdf[,3:5], 1, fff))

and add results to your data frame columns
phdf[, 6:8] <- t(apply(phdf[,3:5], 1, fff))

Regarding some tutorial

Basic stuff is in R-intro, there is excellent documentation to each function.

And as R users pool is huge, you could simply ask Google
e.g.
r change values based on condition

Cheers
Petr

> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Jim Lemon
> Sent: Wednesday, October 23, 2019 12:26 AM
> To: Phillip Heinrich <herd_dog at cox.net>
> Cc: r-help <R-help at r-project.org>
> Subject: Re: [R] If Loop I Think
> 
> Hi Philip,
> Try this:
> 
> phdf<-read.table(
> text="Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
> 1 0
> 2 1
> 3 1
> 4 1 arenn001
> 5 2 arenn001
> 6 0
> 7 0 perad001
> 8 0 polla001 perad001
> 9 0 goldp001 polla001 perad001
> 10 0  lambj001 goldp001
> 11 1  lambj001 goldp001
> 12 2   lambj001
> 13 0
> 14 1       ",
> header=TRUE,stringsAsFactors=FALSE,fill=TRUE)
> phdf$R1<-ifelse(nchar(phdf$RunnerFirst) > 0,1,0)
> phdf$R2<-ifelse(nchar(phdf$RunnerSecond) > 0,1,0)
> phdf$R3<-ifelse(nchar(phdf$RunnerThird) > 0,1,0)
> 
> Jim
> 
> On Wed, Oct 23, 2019 at 7:54 AM Phillip Heinrich <herd_dog at cox.net>
> wrote:
> >
> >       Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
> >       1 0
> >       2 1
> >       3 1
> >       4 1 arenn001
> >       5 2 arenn001
> >       6 0
> >       7 0 perad001
> >       8 0 polla001 perad001
> >       9 0 goldp001 polla001 perad001
> >       10 0  lambj001 goldp001
> >       11 1  lambj001 goldp001
> >       12 2   lambj001
> >       13 0
> >       14 1
> >
> >
> >
> > With the above data, Arizona Diamondbacks baseball, I?m trying to put
> zeros into the R1 column is the RunnerFirst column is blank and a one if the
> column has a coded entry such as rows 4,5,7,8,& 9.  Similarly I want zeros in
> R2 and R3 if RunnerSecond and RunnerThird respectively are blank and ones
> if there is an entry.
> >
> > I?ve tried everything I know how to do such as ?If Loops?, ?If-Then loops?,
> ?apply?, ?sapply?, etc.  I wrote function below and it ran without errors but I
> have no idea what to do with it to accomplish my goal:
> >
> > R1 <- function(x) {
> >   if (ari18.test3$RunnerFirst == " "){
> >        ari18.test3$R1 <- 0
> >        return(R1)
> >          }else{
> >            R1 <- ari18.test3$R1 <- 1
> >            return(R1)
> >          }
> >    }
> >
> > The name of the data frame is ari18.test3
> >
> > On a more philosophical note, data handling in R seems to be made up of
> thousands of details with no over-riding principles.  I?ve read two books on R
> and a number of tutorial and watched several videos but I don?t seem to be
> making any progress.  Can anyone suggest videos, or tutorials, or books that
> might help?  Database stuff has never been my strong point but I?m
> determined to learn.
> >
> > Thanks,
> > Philip Heinrich
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-
> guide.html
> and provide commented, minimal, self-contained, reproducible code.

From @hm@d@r@hb@ry @end|ng |rom gm@||@com  Wed Oct 23 06:13:04 2019
From: @hm@d@r@hb@ry @end|ng |rom gm@||@com (Ahmad Rahbari)
Date: Wed, 23 Oct 2019 07:43:04 +0330
Subject: [R] problem in drawing relative potency curve
Message-ID: <CAJ1G-TeXC-pWD7v-LgX=-LViZhRwTM+ZJObQmAEErjLmS4j0qw@mail.gmail.com>

Dear
I investigated herbicide affect on weeds growth (dose-response). I used drc
package and fitted data to best model by mselect function and parameters of
models. For some data, Logistic model was the best and for others, Weibull.
But when I wanted to draw relative potency curve, the R-program displayed
error massage just for Weibull model (attachment files).
could you please help me?
thanks a lot.
your sincerely, Ahmad Rahbari

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: error.txt
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20191023/3290c289/attachment.txt>

From ye@@m|n@@|e@ @end|ng |rom gm@||@com  Wed Oct 23 07:19:56 2019
From: ye@@m|n@@|e@ @end|ng |rom gm@||@com (Yeasmin Alea)
Date: Wed, 23 Oct 2019 13:19:56 +0800
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
 <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
Message-ID: <CAA7jBJVADFOj99D9_v2Vag+ktgmH=UZ1n0AxXheUEGPTeQFBqA@mail.gmail.com>

Thank you. Can you please have a look the below data sets, script and
question?

*Dataset-1: Pen*

*YEAR   DAY      X     Y   Sig phase  *

*  <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>  *

*1  1981     9 -0.213 1.08   1.10 Phase-7*

*2  1981    10  0.065 1.05   1.05 Phase-6*



*Dataset-2: Book*

*YEAR         Time *

*1  1981     1981-12-03 06:00:00 *

*2  1981    1981-12-04 00:00:00*



I want the output table as

*YEAR         Time                                   phase*

*1  1981     1981-12-03 06:00:00     Phase-7*

*2  1981    1981-12-04 00:00:00     Phase-4*



*How can I combine and match the Dataset-1 DAY (365 days*35 years) +YEAR
with Dataset-2 YEAR+Time? Dataset 1 has 5,551 rows and dataset 2 has 22,210*

d$Pen<-Pen[cbind(match(Book$Time,Pen$DAY)]
Kind regards
Alea Yeasmin


On Wed, Oct 23, 2019 at 2:20 AM jim holtman <jholtman at gmail.com> wrote:

> Here is one way of doing it; I think the output you show is wrong:
>
> library(tidyverse)
> input <- read_delim(" YEAR   DAY      X     Y   Sig
>   1981     9 -0.213 1.08   1.10
>   1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>
> input <- mutate(input,
>   phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
>                     X < 0 & Y > 0 & Y < X ~ 'phase=2',
>                     X < 0 & Y > 0 & Y < X ~ 'phase=7',
>                     X < 0 & Y > 0 & Y > X ~ 'phase=8',
>                     X > 0 & Y < 0 & Y < X ~ 'phase=3',
>                     X > 0 & Y < 0 & Y > X ~ 'phase=4',
>                     X > 0 & Y > 0 & Y > X ~ 'phase=6',
>                     X > 0 & Y > 0 & Y < X ~ 'phase=5',
>                     TRUE ~ 'unknown'
>   )
> )
>
> > input
> # A tibble: 2 x 6
>    YEAR   DAY      X     Y   Sig phase
>   <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
> 1  1981     9 -0.213  1.08  1.1  phase=8
> 2  1981    10  0.065  1.05  1.05 phase=6
>
> Jim Holtman
> *Data Munger Guru*
>
>
> *What is the problem that you are trying to solve?Tell me what you want to
> do, not how you want to do it.*
>
>
> On Tue, Oct 22, 2019 at 9:43 AM Yeasmin Alea <yeasmin.alea at gmail.com>
> wrote:
>
>> Hello Team
>> I would like to add a new column (for example-Phase) from the below data
>> set based on the conditions
>>    YEAR   DAY      X     Y   Sig
>>  1  1981     9 -0.213 1.08   1.10
>>  2  1981    10  0.065 1.05   1.05
>> *Conditions*
>>
>> D$Phase=sapply(D,function(a,b) {
>>      a <-D$X
>>      b<-D$Y
>>      if (a<0 && b<0 && b<a)
>>     {phase=1} else if (a<0 && b<0 && b>a)
>>     {phase=2} else if (a<0 && b>0 && b<a)
>>     {phase=7} else if (a<0 && b>0 && b>a)
>>     {phase=8} else if (a>0 && b<0 && b<a)
>>     {phase=3} else if (a>0 && b<0 && b>a)
>>     {phase=4} else if (a>0 && b>0 && b>a)
>>     {phase=6} else (a>0 && b>0 && b<a)
>>     {phase=5}
>> })
>>
>> Can anyone help to fix the script to get a Phase column based on the
>> conditions. The table will be like the below
>>    YEAR   DAY      X     Y   Sig      Phase
>>  1  1981     9 -0.213 1.08   1.10   phase=7
>>  2  1981    10  0.065 1.05   1.05   phase=6
>>
>> Many thanks
>> Alea
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

	[[alternative HTML version deleted]]


From dw|n@em|u@ @end|ng |rom comc@@t@net  Wed Oct 23 20:13:04 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Wed, 23 Oct 2019 11:13:04 -0700
Subject: [R] Change colour ggiNEXT plot package iNEXT
In-Reply-To: <CAMk+s2Q+JQKv02SNiGbib9XggUq+piNtMQTwqvntWMr7Q=nVaQ@mail.gmail.com>
References: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>
 <E3C4D84D-885B-4112-AFE0-28252F189F08@dcn.davis.ca.us>
 <CAMk+s2Q+JQKv02SNiGbib9XggUq+piNtMQTwqvntWMr7Q=nVaQ@mail.gmail.com>
Message-ID: <83b814ab-4ab2-82aa-fea8-6a76cce96f72@comcast.net>


On 10/22/19 12:48 PM, Luigi Marongiu wrote:
> I thought it was a major package for ecological analysis.


Yours is the first question in 20 years of Rhelp about the package iNEXT.


-- 

David

> Anyway,
> thank you for the tips. I'll dip from there.
>
> On Tue, Oct 22, 2019 at 5:29 PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
>> Probably, assuming that function returns a ggplot object. You will need to identify the levels of the factor used for distinguishing groups, and add a scale_colour_manual() to the ggplot object with colors specified in the same order as those levels.
>>
>> Support for obscure packages is technically off-topic here ... if you need a more specific answer you may need to correspond with the package authors or use their suggested support resources.
>>
>> On October 22, 2019 2:18:49 AM PDT, Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
>>> Dear all,
>>> is it possible to provide custom color to the rarefaction curve of the
>>> package iNEXT (ggiNEXT)?
>>> If I have these data:
>>> ```
>>> library(iNEXT)
>>> library(ggplot2)
>>> data(spider)
>>> out <- iNEXT(spider, q=0, datatype="abundance")
>>> ggiNEXT(out, type=1)
>>> ```
>>> can i colour the lines with, let's say, yellow and green?
>>> Thank you
>> --
>> Sent from my phone. Please excuse my brevity.
>
>


From dw|n@em|u@ @end|ng |rom comc@@t@net  Wed Oct 23 20:29:29 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Wed, 23 Oct 2019 11:29:29 -0700
Subject: [R] Conditions in R (Help Post)
In-Reply-To: <CAA7jBJVADFOj99D9_v2Vag+ktgmH=UZ1n0AxXheUEGPTeQFBqA@mail.gmail.com>
References: <CAA7jBJXUxmrNesZzWQWjkYamdra-XnKUnU0VLtaiYdeoDv_5hA@mail.gmail.com>
 <CAAxdm-5gCma6RjDWF3q3QoAG8xxHWZNfDK9fWMaTUxFVnaMAcQ@mail.gmail.com>
 <CAA7jBJVADFOj99D9_v2Vag+ktgmH=UZ1n0AxXheUEGPTeQFBqA@mail.gmail.com>
Message-ID: <940e137d-5e50-6ede-9632-944abcbfb9d2@comcast.net>


On 10/22/19 10:19 PM, Yeasmin Alea wrote:
> Thank you. Can you please have a look the below data sets, script and
> question?
>
> *Dataset-1: Pen*
>
> *YEAR   DAY      X     Y   Sig phase  *
>
> *  <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>  *
>
> *1  1981     9 -0.213 1.08   1.10 Phase-7*
>
> *2  1981    10  0.065 1.05   1.05 Phase-6*
>
>
>
> *Dataset-2: Book*
>
> *YEAR         Time *
>
> *1  1981     1981-12-03 06:00:00 *
>
> *2  1981    1981-12-04 00:00:00*
>
>
>
> I want the output table as
>
> *YEAR         Time                                   phase*
>
> *1  1981     1981-12-03 06:00:00     Phase-7*
>
> *2  1981    1981-12-04 00:00:00     Phase-4*


You are posting in HTML. R help is a plain text mailing list. It is easy 
to send plain text using gmail. You should start over by configuring 
your mail client for this purpose and send the output of dput(head(Pen)) 
and dput(head(Book)) rather than the versions above which do not lend 
themselves to simple input strategies.


-- 

David.

>
>
>
> *How can I combine and match the Dataset-1 DAY (365 days*35 years) +YEAR
> with Dataset-2 YEAR+Time? Dataset 1 has 5,551 rows and dataset 2 has 22,210*
>
> d$Pen<-Pen[cbind(match(Book$Time,Pen$DAY)]
> Kind regards
> Alea Yeasmin
>
>
> On Wed, Oct 23, 2019 at 2:20 AM jim holtman <jholtman at gmail.com> wrote:
>
>> Here is one way of doing it; I think the output you show is wrong:
>>
>> library(tidyverse)
>> input <- read_delim(" YEAR   DAY      X     Y   Sig
>>    1981     9 -0.213 1.08   1.10
>>    1981    10  0.065 1.05   1.05", delim = ' ', trim_ws = TRUE)
>>
>> input <- mutate(input,
>>    phase = case_when(X < 0 & Y < 0 & Y < X ~ 'phase=1',
>>                      X < 0 & Y > 0 & Y < X ~ 'phase=2',
>>                      X < 0 & Y > 0 & Y < X ~ 'phase=7',
>>                      X < 0 & Y > 0 & Y > X ~ 'phase=8',
>>                      X > 0 & Y < 0 & Y < X ~ 'phase=3',
>>                      X > 0 & Y < 0 & Y > X ~ 'phase=4',
>>                      X > 0 & Y > 0 & Y > X ~ 'phase=6',
>>                      X > 0 & Y > 0 & Y < X ~ 'phase=5',
>>                      TRUE ~ 'unknown'
>>    )
>> )
>>
>>> input
>> # A tibble: 2 x 6
>>     YEAR   DAY      X     Y   Sig phase
>>    <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>
>> 1  1981     9 -0.213  1.08  1.1  phase=8
>> 2  1981    10  0.065  1.05  1.05 phase=6
>>
>> Jim Holtman
>> *Data Munger Guru*
>>
>>
>> *What is the problem that you are trying to solve?Tell me what you want to
>> do, not how you want to do it.*
>>
>>
>> On Tue, Oct 22, 2019 at 9:43 AM Yeasmin Alea <yeasmin.alea at gmail.com>
>> wrote:
>>
>>> Hello Team
>>> I would like to add a new column (for example-Phase) from the below data
>>> set based on the conditions
>>>     YEAR   DAY      X     Y   Sig
>>>   1  1981     9 -0.213 1.08   1.10
>>>   2  1981    10  0.065 1.05   1.05
>>> *Conditions*
>>>
>>> D$Phase=sapply(D,function(a,b) {
>>>       a <-D$X
>>>       b<-D$Y
>>>       if (a<0 && b<0 && b<a)
>>>      {phase=1} else if (a<0 && b<0 && b>a)
>>>      {phase=2} else if (a<0 && b>0 && b<a)
>>>      {phase=7} else if (a<0 && b>0 && b>a)
>>>      {phase=8} else if (a>0 && b<0 && b<a)
>>>      {phase=3} else if (a>0 && b<0 && b>a)
>>>      {phase=4} else if (a>0 && b>0 && b>a)
>>>      {phase=6} else (a>0 && b>0 && b<a)
>>>      {phase=5}
>>> })
>>>
>>> Can anyone help to fix the script to get a Phase column based on the
>>> conditions. The table will be like the below
>>>     YEAR   DAY      X     Y   Sig      Phase
>>>   1  1981     9 -0.213 1.08   1.10   phase=7
>>>   2  1981    10  0.065 1.05   1.05   phase=6
>>>
>>> Many thanks
>>> Alea
>>>
>>>          [[alternative HTML version deleted]]
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide
>>> http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From wjm1 @end|ng |rom c@@@co|umb|@@edu  Wed Oct 23 23:23:06 2019
From: wjm1 @end|ng |rom c@@@co|umb|@@edu (William Michels)
Date: Wed, 23 Oct 2019 14:23:06 -0700
Subject: [R] Change colour ggiNEXT plot package iNEXT
In-Reply-To: <83b814ab-4ab2-82aa-fea8-6a76cce96f72@comcast.net>
References: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>
 <E3C4D84D-885B-4112-AFE0-28252F189F08@dcn.davis.ca.us>
 <CAMk+s2Q+JQKv02SNiGbib9XggUq+piNtMQTwqvntWMr7Q=nVaQ@mail.gmail.com>
 <83b814ab-4ab2-82aa-fea8-6a76cce96f72@comcast.net>
Message-ID: <CAA99HCyb847Tiwd4epHsLJNPGO6YztWW6Pr1zyr7ckcWseV4Xw@mail.gmail.com>

Apparently, the iNEXT package was first described in an academic paper
published in 2016, although CRAN archives go back to 2015.
http://chao.stat.nthu.edu.tw/wordpress/paper/120_pdf_appendix.pdf
https://cran.r-project.org/src/contrib/Archive/iNEXT/

The vignette below has a section entitled "General Customization"
which talks about color. See the four lines of code I've added to the
vignette's code to get a general idea what to do.
https://cran.r-project.org/web/packages/iNEXT/vignettes/Introduction.html

library(iNEXT)
library(ggplot2)
library(gridExtra)
library(grid)
data("spider")
out <- iNEXT(spider, q=0, datatype="abundance")
g <- ggiNEXT(out, type=1, color.var = "site")
print(g)
g1 <- g + scale_colour_manual(values=c("yellow", "green"))
print(g1)
g2 <- g1 + scale_fill_manual(values=c("yellow", "green"))
print(g2)

HTH, Bill.

W. Michels, Ph.D.




On Wed, Oct 23, 2019 at 11:13 AM David Winsemius <dwinsemius at comcast.net> wrote:
>
>
> On 10/22/19 12:48 PM, Luigi Marongiu wrote:
> > I thought it was a major package for ecological analysis.
>
>
> Yours is the first question in 20 years of Rhelp about the package iNEXT.
>
>
> --
>
> David
>
> > Anyway,
> > thank you for the tips. I'll dip from there.
> >
> > On Tue, Oct 22, 2019 at 5:29 PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
> >> Probably, assuming that function returns a ggplot object. You will need to identify the levels of the factor used for distinguishing groups, and add a scale_colour_manual() to the ggplot object with colors specified in the same order as those levels.
> >>
> >> Support for obscure packages is technically off-topic here ... if you need a more specific answer you may need to correspond with the package authors or use their suggested support resources.
> >>
> >> On October 22, 2019 2:18:49 AM PDT, Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
> >>> Dear all,
> >>> is it possible to provide custom color to the rarefaction curve of the
> >>> package iNEXT (ggiNEXT)?
> >>> If I have these data:
> >>> ```
> >>> library(iNEXT)
> >>> library(ggplot2)
> >>> data(spider)
> >>> out <- iNEXT(spider, q=0, datatype="abundance")
> >>> ggiNEXT(out, type=1)
> >>> ```
> >>> can i colour the lines with, let's say, yellow and green?
> >>> Thank you
> >> --
> >> Sent from my phone. Please excuse my brevity.
> >
> >
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 24 00:32:53 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 23 Oct 2019 17:32:53 -0500
Subject: [R] negative vector length when merging data frames
Message-ID: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>

Hello,

I have two data frames like this:

> head(l4)
    X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> head(asign)
              gene  chr                chr_pos   pos p.val.Retina
1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
  negative length vectors are not allowed
> sapply(l4,class)
          X1           X2           X3           X4           X5   variant_id
 "character"  "character"  "character"  "character"  "character"  "character"
pval_nominal  gene_id.LCL
   "numeric"  "character"
> sapply(asign,class)
        gene          chr      chr_pos          pos p.val.Retina
 "character"  "character"  "character"  "character"  "character"

Please advise as to why I am getting this error when merging?

Thanks
Ana


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 24 01:04:41 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 23 Oct 2019 18:04:41 -0500
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
Message-ID: <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>

I also tried left_join but I got: Error: std::bad_alloc

> df3 <- left_join(l4, asign, by = c("chr","pos"))
Error: std::bad_alloc
> dim(l4)
[1] 166941635         8
> dim(asign)
[1] 107371528         5

On Wed, Oct 23, 2019 at 5:32 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hello,
>
> I have two data frames like this:
>
> > head(l4)
>     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > head(asign)
>               gene  chr                chr_pos   pos p.val.Retina
> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
>   negative length vectors are not allowed
> > sapply(l4,class)
>           X1           X2           X3           X4           X5   variant_id
>  "character"  "character"  "character"  "character"  "character"  "character"
> pval_nominal  gene_id.LCL
>    "numeric"  "character"
> > sapply(asign,class)
>         gene          chr      chr_pos          pos p.val.Retina
>  "character"  "character"  "character"  "character"  "character"
>
> Please advise as to why I am getting this error when merging?
>
> Thanks
> Ana


From drj|m|emon @end|ng |rom gm@||@com  Thu Oct 24 01:05:32 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 24 Oct 2019 10:05:32 +1100
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
Message-ID: <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>

Hi Ana,
When I run this example taken from your email:

l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
header=TRUE,stringsAsFactors=FALSE)
asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
header=TRUE,stringsAsFactors=FALSE)
merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
 [1] X1           X2           X3           X4           X5
[6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
[11] p.val.Retina
<0 rows> (or 0-length row.names)

It works okay, but there are no matches in the join. So I can't even
guess what the problem is.

Jim

On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hello,
>
> I have two data frames like this:
>
> > head(l4)
>     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > head(asign)
>               gene  chr                chr_pos   pos p.val.Retina
> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
>   negative length vectors are not allowed
> > sapply(l4,class)
>           X1           X2           X3           X4           X5   variant_id
>  "character"  "character"  "character"  "character"  "character"  "character"
> pval_nominal  gene_id.LCL
>    "numeric"  "character"
> > sapply(asign,class)
>         gene          chr      chr_pos          pos p.val.Retina
>  "character"  "character"  "character"  "character"  "character"
>
> Please advise as to why I am getting this error when merging?
>
> Thanks
> Ana
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From drj|m|emon @end|ng |rom gm@||@com  Thu Oct 24 01:07:31 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 24 Oct 2019 10:07:31 +1100
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>
Message-ID: <CA+8X3fVejo7NLhvoVx+1xZqeN7gDi0scdtSpTMaQ2Yh40G_xEw@mail.gmail.com>

Ah, it looks like a memory allocation problem.

Jim

On Thu, Oct 24, 2019 at 10:05 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> I also tried left_join but I got: Error: std::bad_alloc
>
> > df3 <- left_join(l4, asign, by = c("chr","pos"))
> Error: std::bad_alloc
> > dim(l4)
> [1] 166941635         8
> > dim(asign)
> [1] 107371528         5
>
> On Wed, Oct 23, 2019 at 5:32 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >
> > Hello,
> >
> > I have two data frames like this:
> >
> > > head(l4)
> >     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> > 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > > head(asign)
> >               gene  chr                chr_pos   pos p.val.Retina
> > 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> >   negative length vectors are not allowed
> > > sapply(l4,class)
> >           X1           X2           X3           X4           X5   variant_id
> >  "character"  "character"  "character"  "character"  "character"  "character"
> > pval_nominal  gene_id.LCL
> >    "numeric"  "character"
> > > sapply(asign,class)
> >         gene          chr      chr_pos          pos p.val.Retina
> >  "character"  "character"  "character"  "character"  "character"
> >
> > Please advise as to why I am getting this error when merging?
> >
> > Thanks
> > Ana
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 24 01:08:27 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 23 Oct 2019 18:08:27 -0500
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
Message-ID: <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>

Hi Jim,

I think one of the issue is that data frames are so big,
> dim(l4)
[1] 166941635         8
> dim(asign)
[1] 107371528         5

so my example would not reproduce the error

On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>
> Hi Ana,
> When I run this example taken from your email:
>
> l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
> chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
> header=TRUE,stringsAsFactors=FALSE)
> asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
> ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
> header=TRUE,stringsAsFactors=FALSE)
> merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>  [1] X1           X2           X3           X4           X5
> [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
> [11] p.val.Retina
> <0 rows> (or 0-length row.names)
>
> It works okay, but there are no matches in the join. So I can't even
> guess what the problem is.
>
> Jim
>
> On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >
> > Hello,
> >
> > I have two data frames like this:
> >
> > > head(l4)
> >     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> > 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > > head(asign)
> >               gene  chr                chr_pos   pos p.val.Retina
> > 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> >   negative length vectors are not allowed
> > > sapply(l4,class)
> >           X1           X2           X3           X4           X5   variant_id
> >  "character"  "character"  "character"  "character"  "character"  "character"
> > pval_nominal  gene_id.LCL
> >    "numeric"  "character"
> > > sapply(asign,class)
> >         gene          chr      chr_pos          pos p.val.Retina
> >  "character"  "character"  "character"  "character"  "character"
> >
> > Please advise as to why I am getting this error when merging?
> >
> > Thanks
> > Ana
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.


From drj|m|emon @end|ng |rom gm@||@com  Thu Oct 24 01:15:58 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 24 Oct 2019 10:15:58 +1100
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
Message-ID: <CA+8X3fWLrvPzBG3uT=zkh5VUgZ4zHhk-Bj2SG0Od3XJhbrXrbw@mail.gmail.com>

Yes. Have you tried the bigmemory package?

Jim

On Thu, Oct 24, 2019 at 10:08 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hi Jim,
>
> I think one of the issue is that data frames are so big,
> > dim(l4)
> [1] 166941635         8
> > dim(asign)
> [1] 107371528         5
>
> so my example would not reproduce the error
>
> On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> >
> > Hi Ana,
> > When I run this example taken from your email:
> >
> > l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
> > chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
> > header=TRUE,stringsAsFactors=FALSE)
> > asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
> > ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
> > header=TRUE,stringsAsFactors=FALSE)
> > merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> >  [1] X1           X2           X3           X4           X5
> > [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
> > [11] p.val.Retina
> > <0 rows> (or 0-length row.names)
> >
> > It works okay, but there are no matches in the join. So I can't even
> > guess what the problem is.
> >
> > Jim
> >
> > On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > >
> > > Hello,
> > >
> > > I have two data frames like this:
> > >
> > > > head(l4)
> > >     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> > > 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > > > head(asign)
> > >               gene  chr                chr_pos   pos p.val.Retina
> > > 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > > > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > > Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> > >   negative length vectors are not allowed
> > > > sapply(l4,class)
> > >           X1           X2           X3           X4           X5   variant_id
> > >  "character"  "character"  "character"  "character"  "character"  "character"
> > > pval_nominal  gene_id.LCL
> > >    "numeric"  "character"
> > > > sapply(asign,class)
> > >         gene          chr      chr_pos          pos p.val.Retina
> > >  "character"  "character"  "character"  "character"  "character"
> > >
> > > Please advise as to why I am getting this error when merging?
> > >
> > > Thanks
> > > Ana
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 24 01:17:25 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 23 Oct 2019 18:17:25 -0500
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CA+8X3fWLrvPzBG3uT=zkh5VUgZ4zHhk-Bj2SG0Od3XJhbrXrbw@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
 <CA+8X3fWLrvPzBG3uT=zkh5VUgZ4zHhk-Bj2SG0Od3XJhbrXrbw@mail.gmail.com>
Message-ID: <CAF9-5jMOfKyjNMLJoPz=VMQKZsMtSGeAHWDKHPgE_O7GMWH-zg@mail.gmail.com>

no can you please send me an example how the command would look like in my case?

On Wed, Oct 23, 2019 at 6:16 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>
> Yes. Have you tried the bigmemory package?
>
> Jim
>
> On Thu, Oct 24, 2019 at 10:08 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >
> > Hi Jim,
> >
> > I think one of the issue is that data frames are so big,
> > > dim(l4)
> > [1] 166941635         8
> > > dim(asign)
> > [1] 107371528         5
> >
> > so my example would not reproduce the error
> >
> > On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> > >
> > > Hi Ana,
> > > When I run this example taken from your email:
> > >
> > > l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
> > > chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
> > > header=TRUE,stringsAsFactors=FALSE)
> > > asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
> > > ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
> > > header=TRUE,stringsAsFactors=FALSE)
> > > merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > >  [1] X1           X2           X3           X4           X5
> > > [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
> > > [11] p.val.Retina
> > > <0 rows> (or 0-length row.names)
> > >
> > > It works okay, but there are no matches in the join. So I can't even
> > > guess what the problem is.
> > >
> > > Jim
> > >
> > > On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > > >
> > > > Hello,
> > > >
> > > > I have two data frames like this:
> > > >
> > > > > head(l4)
> > > >     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> > > > 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > > 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > > 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > > 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > > 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > > 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > > > > head(asign)
> > > >               gene  chr                chr_pos   pos p.val.Retina
> > > > 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > > 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > > 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > > 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > > 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > > 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > > > > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > > > Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> > > >   negative length vectors are not allowed
> > > > > sapply(l4,class)
> > > >           X1           X2           X3           X4           X5   variant_id
> > > >  "character"  "character"  "character"  "character"  "character"  "character"
> > > > pval_nominal  gene_id.LCL
> > > >    "numeric"  "character"
> > > > > sapply(asign,class)
> > > >         gene          chr      chr_pos          pos p.val.Retina
> > > >  "character"  "character"  "character"  "character"  "character"
> > > >
> > > > Please advise as to why I am getting this error when merging?
> > > >
> > > > Thanks
> > > > Ana
> > > >
> > > > ______________________________________________
> > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > > and provide commented, minimal, self-contained, reproducible code.


From drj|m|emon @end|ng |rom gm@||@com  Thu Oct 24 01:30:54 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 24 Oct 2019 10:30:54 +1100
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jMOfKyjNMLJoPz=VMQKZsMtSGeAHWDKHPgE_O7GMWH-zg@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
 <CA+8X3fWLrvPzBG3uT=zkh5VUgZ4zHhk-Bj2SG0Od3XJhbrXrbw@mail.gmail.com>
 <CAF9-5jMOfKyjNMLJoPz=VMQKZsMtSGeAHWDKHPgE_O7GMWH-zg@mail.gmail.com>
Message-ID: <CA+8X3fXE9eS+5M7tXUof7QDrgkzSq87aSz6MUBog_YQAb-fVfA@mail.gmail.com>

I don't have it installed - that was merely a suggestion. I notice
that both data.table and dplyr packages are mentioned as possibilities
for "merge big datasets in r". Apparently the best way to do it if you
have a database manager is to read the two datasets into tables and do
the join via SQL or whatever language is available.

Jim

On Thu, Oct 24, 2019 at 10:17 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> no can you please send me an example how the command would look like in my case?
>
> On Wed, Oct 23, 2019 at 6:16 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> >
> > Yes. Have you tried the bigmemory package?
> >
> > Jim
> >
> > On Thu, Oct 24, 2019 at 10:08 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > >
> > > Hi Jim,
> > >
> > > I think one of the issue is that data frames are so big,
> > > > dim(l4)
> > > [1] 166941635         8
> > > > dim(asign)
> > > [1] 107371528         5
> > >
> > > so my example would not reproduce the error
> > >
> > > On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> > > >
> > > > Hi Ana,
> > > > When I run this example taken from your email:
> > > >
> > > > l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
> > > > chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > > chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > > chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > > chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > > chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > > chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
> > > > header=TRUE,stringsAsFactors=FALSE)
> > > > asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
> > > > ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > > ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > > ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > > ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > > ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > > ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
> > > > header=TRUE,stringsAsFactors=FALSE)
> > > > merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > > >  [1] X1           X2           X3           X4           X5
> > > > [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
> > > > [11] p.val.Retina
> > > > <0 rows> (or 0-length row.names)
> > > >
> > > > It works okay, but there are no matches in the join. So I can't even
> > > > guess what the problem is.
> > > >
> > > > Jim
> > > >
> > > > On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > > > >
> > > > > Hello,
> > > > >
> > > > > I have two data frames like this:
> > > > >
> > > > > > head(l4)
> > > > >     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> > > > > 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > > > 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > > > 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > > > 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > > > 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > > > 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > > > > > head(asign)
> > > > >               gene  chr                chr_pos   pos p.val.Retina
> > > > > 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > > > 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > > > 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > > > 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > > > 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > > > 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > > > > > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > > > > Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> > > > >   negative length vectors are not allowed
> > > > > > sapply(l4,class)
> > > > >           X1           X2           X3           X4           X5   variant_id
> > > > >  "character"  "character"  "character"  "character"  "character"  "character"
> > > > > pval_nominal  gene_id.LCL
> > > > >    "numeric"  "character"
> > > > > > sapply(asign,class)
> > > > >         gene          chr      chr_pos          pos p.val.Retina
> > > > >  "character"  "character"  "character"  "character"  "character"
> > > > >
> > > > > Please advise as to why I am getting this error when merging?
> > > > >
> > > > > Thanks
> > > > > Ana
> > > > >
> > > > > ______________________________________________
> > > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > > > and provide commented, minimal, self-contained, reproducible code.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 24 01:33:13 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 23 Oct 2019 18:33:13 -0500
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CA+8X3fXE9eS+5M7tXUof7QDrgkzSq87aSz6MUBog_YQAb-fVfA@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
 <CA+8X3fWLrvPzBG3uT=zkh5VUgZ4zHhk-Bj2SG0Od3XJhbrXrbw@mail.gmail.com>
 <CAF9-5jMOfKyjNMLJoPz=VMQKZsMtSGeAHWDKHPgE_O7GMWH-zg@mail.gmail.com>
 <CA+8X3fXE9eS+5M7tXUof7QDrgkzSq87aSz6MUBog_YQAb-fVfA@mail.gmail.com>
Message-ID: <CAF9-5jOUazJMPB-ob6Pbkeo+pU2KpfN17WTY+rO0YbTOoeBfpg@mail.gmail.com>

thanks but I would need solution in R

On Wed, Oct 23, 2019 at 6:31 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>
> I don't have it installed - that was merely a suggestion. I notice
> that both data.table and dplyr packages are mentioned as possibilities
> for "merge big datasets in r". Apparently the best way to do it if you
> have a database manager is to read the two datasets into tables and do
> the join via SQL or whatever language is available.
>
> Jim
>
> On Thu, Oct 24, 2019 at 10:17 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >
> > no can you please send me an example how the command would look like in my case?
> >
> > On Wed, Oct 23, 2019 at 6:16 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> > >
> > > Yes. Have you tried the bigmemory package?
> > >
> > > Jim
> > >
> > > On Thu, Oct 24, 2019 at 10:08 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > > >
> > > > Hi Jim,
> > > >
> > > > I think one of the issue is that data frames are so big,
> > > > > dim(l4)
> > > > [1] 166941635         8
> > > > > dim(asign)
> > > > [1] 107371528         5
> > > >
> > > > so my example would not reproduce the error
> > > >
> > > > On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> > > > >
> > > > > Hi Ana,
> > > > > When I run this example taken from your email:
> > > > >
> > > > > l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
> > > > > chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > > > chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > > > chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > > > chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > > > chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > > > chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
> > > > > header=TRUE,stringsAsFactors=FALSE)
> > > > > asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
> > > > > ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > > > ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > > > ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > > > ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > > > ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > > > ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
> > > > > header=TRUE,stringsAsFactors=FALSE)
> > > > > merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > > > >  [1] X1           X2           X3           X4           X5
> > > > > [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
> > > > > [11] p.val.Retina
> > > > > <0 rows> (or 0-length row.names)
> > > > >
> > > > > It works okay, but there are no matches in the join. So I can't even
> > > > > guess what the problem is.
> > > > >
> > > > > Jim
> > > > >
> > > > > On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > > > > >
> > > > > > Hello,
> > > > > >
> > > > > > I have two data frames like this:
> > > > > >
> > > > > > > head(l4)
> > > > > >     X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> > > > > > 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> > > > > > 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> > > > > > 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> > > > > > 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> > > > > > 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> > > > > > 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> > > > > > > head(asign)
> > > > > >               gene  chr                chr_pos   pos p.val.Retina
> > > > > > 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> > > > > > 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> > > > > > 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> > > > > > 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> > > > > > 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> > > > > > 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> > > > > > > m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> > > > > > Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> > > > > >   negative length vectors are not allowed
> > > > > > > sapply(l4,class)
> > > > > >           X1           X2           X3           X4           X5   variant_id
> > > > > >  "character"  "character"  "character"  "character"  "character"  "character"
> > > > > > pval_nominal  gene_id.LCL
> > > > > >    "numeric"  "character"
> > > > > > > sapply(asign,class)
> > > > > >         gene          chr      chr_pos          pos p.val.Retina
> > > > > >  "character"  "character"  "character"  "character"  "character"
> > > > > >
> > > > > > Please advise as to why I am getting this error when merging?
> > > > > >
> > > > > > Thanks
> > > > > > Ana
> > > > > >
> > > > > > ______________________________________________
> > > > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > > > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > > > > and provide commented, minimal, self-contained, reproducible code.


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Oct 24 01:54:49 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Wed, 23 Oct 2019 19:54:49 -0400
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>
Message-ID: <6b646b26-fdd1-0582-0613-aa519010bcf4@gmail.com>

On 23/10/2019 7:04 p.m., Ana Marija wrote:
> I also tried left_join but I got: Error: std::bad_alloc
> 
>> df3 <- left_join(l4, asign, by = c("chr","pos")
> Error: std::bad_alloc

Looks like bugs in whatever package you're finding "left_join" in (and 
previously "merge").  Are those from dplyr and base?  Showing us 
str(lr), str(asign), and sessionInfo() would be helpful.

Duncan Murdoch

>> dim(l4)
> [1] 166941635         8
>> dim(asign)
> [1] 107371528         5
> 
> On Wed, Oct 23, 2019 at 5:32 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>>
>> Hello,
>>
>> I have two data frames like this:
>>
>>> head(l4)
>>      X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
>> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
>> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
>> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
>> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
>> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
>> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
>>> head(asign)
>>                gene  chr                chr_pos   pos p.val.Retina
>> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
>> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
>> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
>> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
>> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
>> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
>>> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
>>    negative length vectors are not allowed
>>> sapply(l4,class)
>>            X1           X2           X3           X4           X5   variant_id
>>   "character"  "character"  "character"  "character"  "character"  "character"
>> pval_nominal  gene_id.LCL
>>     "numeric"  "character"
>>> sapply(asign,class)
>>          gene          chr      chr_pos          pos p.val.Retina
>>   "character"  "character"  "character"  "character"  "character"
>>
>> Please advise as to why I am getting this error when merging?
>>
>> Thanks
>> Ana
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 24 02:05:44 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 23 Oct 2019 19:05:44 -0500
Subject: [R] negative vector length when merging data frames
In-Reply-To: <6b646b26-fdd1-0582-0613-aa519010bcf4@gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>
 <6b646b26-fdd1-0582-0613-aa519010bcf4@gmail.com>
Message-ID: <CAF9-5jPV7K2r9+yZjuEer=1E20WjffCQquaafevXZ_PsbHE1pA@mail.gmail.com>

I am using R-3.6.1
and these libraries:
library(data.table)
library(dplyr)

On Wed, Oct 23, 2019 at 6:54 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 23/10/2019 7:04 p.m., Ana Marija wrote:
> > I also tried left_join but I got: Error: std::bad_alloc
> >
> >> df3 <- left_join(l4, asign, by = c("chr","pos")
> > Error: std::bad_alloc
>
> Looks like bugs in whatever package you're finding "left_join" in (and
> previously "merge").  Are those from dplyr and base?  Showing us
> str(lr), str(asign), and sessionInfo() would be helpful.
>
> Duncan Murdoch
>
> >> dim(l4)
> > [1] 166941635         8
> >> dim(asign)
> > [1] 107371528         5
> >
> > On Wed, Oct 23, 2019 at 5:32 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >>
> >> Hello,
> >>
> >> I have two data frames like this:
> >>
> >>> head(l4)
> >>      X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> >> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> >> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> >> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> >> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> >> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> >> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> >>> head(asign)
> >>                gene  chr                chr_pos   pos p.val.Retina
> >> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> >> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> >> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> >> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> >> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> >> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> >>> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> >> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> >>    negative length vectors are not allowed
> >>> sapply(l4,class)
> >>            X1           X2           X3           X4           X5   variant_id
> >>   "character"  "character"  "character"  "character"  "character"  "character"
> >> pval_nominal  gene_id.LCL
> >>     "numeric"  "character"
> >>> sapply(asign,class)
> >>          gene          chr      chr_pos          pos p.val.Retina
> >>   "character"  "character"  "character"  "character"  "character"
> >>
> >> Please advise as to why I am getting this error when merging?
> >>
> >> Thanks
> >> Ana
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Thu Oct 24 02:51:45 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Wed, 23 Oct 2019 17:51:45 -0700
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jPV7K2r9+yZjuEer=1E20WjffCQquaafevXZ_PsbHE1pA@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CAF9-5jMZS1iS8PM_sCtPEpBuUGg=eTLFCEo+zHabCN2WH8DQFg@mail.gmail.com>
 <6b646b26-fdd1-0582-0613-aa519010bcf4@gmail.com>
 <CAF9-5jPV7K2r9+yZjuEer=1E20WjffCQquaafevXZ_PsbHE1pA@mail.gmail.com>
Message-ID: <CB65AFD0-2D3E-4664-A13C-3963C9657ABF@dcn.davis.ca.us>

Ana... contributed packages like data.table and dplyr are developed completely independently from R, have their own versions, and in fact both of them have recommendations as to how to report bugs in their package descriptions.

As for getting help here, you really need to supply ALL of the information requested to make forward progress in clarifying next steps... there were several items that Duncan mentioned that you failed to provide.

Also, note that dplyr and data.table take very different approaches to handling data, and have been known to not play well with each other. At the very least I would suggest using as.data.frame to convert to a standardized data representation before switching from using functions in one of these packages to using functions in the other package.

[1] https://cran.r-project.org/web/packages/data.table/index.html

[2] https://cran.r-project.org/web/packages/dplyr/index.html

On October 23, 2019 5:05:44 PM PDT, Ana Marija <sokovic.anamarija at gmail.com> wrote:
>I am using R-3.6.1
>and these libraries:
>library(data.table)
>library(dplyr)
>
>On Wed, Oct 23, 2019 at 6:54 PM Duncan Murdoch
><murdoch.duncan at gmail.com> wrote:
>>
>> On 23/10/2019 7:04 p.m., Ana Marija wrote:
>> > I also tried left_join but I got: Error: std::bad_alloc
>> >
>> >> df3 <- left_join(l4, asign, by = c("chr","pos")
>> > Error: std::bad_alloc
>>
>> Looks like bugs in whatever package you're finding "left_join" in
>(and
>> previously "merge").  Are those from dplyr and base?  Showing us
>> str(lr), str(asign), and sessionInfo() would be helpful.
>>
>> Duncan Murdoch
>>
>> >> dim(l4)
>> > [1] 166941635         8
>> >> dim(asign)
>> > [1] 107371528         5
>> >
>> > On Wed, Oct 23, 2019 at 5:32 PM Ana Marija
><sokovic.anamarija at gmail.com> wrote:
>> >>
>> >> Hello,
>> >>
>> >> I have two data frames like this:
>> >>
>> >>> head(l4)
>> >>      X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
>> >> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
>> >> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
>> >> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
>> >> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
>> >> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
>> >> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
>> >>> head(asign)
>> >>                gene  chr                chr_pos   pos p.val.Retina
>> >> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
>> >> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
>> >> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
>> >> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
>> >> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
>> >> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
>> >>> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>> >> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y =
>c("chr",  :
>> >>    negative length vectors are not allowed
>> >>> sapply(l4,class)
>> >>            X1           X2           X3           X4           X5 
> variant_id
>> >>   "character"  "character"  "character"  "character"  "character" 
>"character"
>> >> pval_nominal  gene_id.LCL
>> >>     "numeric"  "character"
>> >>> sapply(asign,class)
>> >>          gene          chr      chr_pos          pos p.val.Retina
>> >>   "character"  "character"  "character"  "character"  "character"
>> >>
>> >> Please advise as to why I am getting this error when merging?
>> >>
>> >> Thanks
>> >> Ana
>> >
>> > ______________________________________________
>> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> > https://stat.ethz.ch/mailman/listinfo/r-help
>> > PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>> > and provide commented, minimal, self-contained, reproducible code.
>> >
>>
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From Seb@@t|en@B|hore| @end|ng |rom cogn|gencorp@com  Thu Oct 24 03:31:21 2019
From: Seb@@t|en@B|hore| @end|ng |rom cogn|gencorp@com (Sebastien Bihorel)
Date: Thu, 24 Oct 2019 01:31:21 +0000
Subject: [R] read.table and NaN
Message-ID: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>

Hi,

Is there a way to make read.table consider NaN as a string of characters rather than the internal NaN? Changing the na.strings argument does not seems to have any effect on how R interprets the NaN string (while is does not the the NA string)

con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '', stringsAsFactors = FALSE)
close.connection(con)
tmp
class(tmp[,1])
class(tmp[,2])



From bgunter@4567 @end|ng |rom gm@||@com  Thu Oct 24 06:08:34 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Wed, 23 Oct 2019 21:08:34 -0700
Subject: [R] read.table and NaN
In-Reply-To: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
References: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
Message-ID: <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>

Like this?

con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
stringsAsFactors = FALSE,
+                   colClasses = c("numeric", "character"))
> close.connection(con)
> tmp
   A   B
1  1 NaN
2 NA   2
> class(tmp[,1])
[1] "numeric"
> class(tmp[,2])
[1] "character"
> tmp[,2]
[1] "NaN" "2"


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Wed, Oct 23, 2019 at 6:31 PM Sebastien Bihorel via R-help <
r-help at r-project.org> wrote:

> Hi,
>
> Is there a way to make read.table consider NaN as a string of characters
> rather than the internal NaN? Changing the na.strings argument does not
> seems to have any effect on how R interprets the NaN string (while is does
> not the the NA string)
>
> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
> stringsAsFactors = FALSE)
> close.connection(con)
> tmp
> class(tmp[,1])
> class(tmp[,2])
>
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Thu Oct 24 09:03:46 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Thu, 24 Oct 2019 09:03:46 +0200
Subject: [R] Change colour ggiNEXT plot package iNEXT
In-Reply-To: <CAA99HCyb847Tiwd4epHsLJNPGO6YztWW6Pr1zyr7ckcWseV4Xw@mail.gmail.com>
References: <CAMk+s2Rn6aQ=9kiiofW5h7AS1QMQDSUY4jp0R9G=hQtK1t8Pfg@mail.gmail.com>
 <E3C4D84D-885B-4112-AFE0-28252F189F08@dcn.davis.ca.us>
 <CAMk+s2Q+JQKv02SNiGbib9XggUq+piNtMQTwqvntWMr7Q=nVaQ@mail.gmail.com>
 <83b814ab-4ab2-82aa-fea8-6a76cce96f72@comcast.net>
 <CAA99HCyb847Tiwd4epHsLJNPGO6YztWW6Pr1zyr7ckcWseV4Xw@mail.gmail.com>
Message-ID: <CAMk+s2Qr7XvSbrJnBwQ9vojJrvjZbSSUf0nXk8PT5Amy2UrV2A@mail.gmail.com>

Thank you!

On Wed, Oct 23, 2019 at 11:23 PM William Michels <wjm1 at caa.columbia.edu> wrote:
>
> Apparently, the iNEXT package was first described in an academic paper
> published in 2016, although CRAN archives go back to 2015.
> http://chao.stat.nthu.edu.tw/wordpress/paper/120_pdf_appendix.pdf
> https://cran.r-project.org/src/contrib/Archive/iNEXT/
>
> The vignette below has a section entitled "General Customization"
> which talks about color. See the four lines of code I've added to the
> vignette's code to get a general idea what to do.
> https://cran.r-project.org/web/packages/iNEXT/vignettes/Introduction.html
>
> library(iNEXT)
> library(ggplot2)
> library(gridExtra)
> library(grid)
> data("spider")
> out <- iNEXT(spider, q=0, datatype="abundance")
> g <- ggiNEXT(out, type=1, color.var = "site")
> print(g)
> g1 <- g + scale_colour_manual(values=c("yellow", "green"))
> print(g1)
> g2 <- g1 + scale_fill_manual(values=c("yellow", "green"))
> print(g2)
>
> HTH, Bill.
>
> W. Michels, Ph.D.
>
>
>
>
> On Wed, Oct 23, 2019 at 11:13 AM David Winsemius <dwinsemius at comcast.net> wrote:
> >
> >
> > On 10/22/19 12:48 PM, Luigi Marongiu wrote:
> > > I thought it was a major package for ecological analysis.
> >
> >
> > Yours is the first question in 20 years of Rhelp about the package iNEXT.
> >
> >
> > --
> >
> > David
> >
> > > Anyway,
> > > thank you for the tips. I'll dip from there.
> > >
> > > On Tue, Oct 22, 2019 at 5:29 PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
> > >> Probably, assuming that function returns a ggplot object. You will need to identify the levels of the factor used for distinguishing groups, and add a scale_colour_manual() to the ggplot object with colors specified in the same order as those levels.
> > >>
> > >> Support for obscure packages is technically off-topic here ... if you need a more specific answer you may need to correspond with the package authors or use their suggested support resources.
> > >>
> > >> On October 22, 2019 2:18:49 AM PDT, Luigi Marongiu <marongiu.luigi at gmail.com> wrote:
> > >>> Dear all,
> > >>> is it possible to provide custom color to the rarefaction curve of the
> > >>> package iNEXT (ggiNEXT)?
> > >>> If I have these data:
> > >>> ```
> > >>> library(iNEXT)
> > >>> library(ggplot2)
> > >>> data(spider)
> > >>> out <- iNEXT(spider, q=0, datatype="abundance")
> > >>> ggiNEXT(out, type=1)
> > >>> ```
> > >>> can i colour the lines with, let's say, yellow and green?
> > >>> Thank you
> > >> --
> > >> Sent from my phone. Please excuse my brevity.
> > >
> > >
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.



-- 
Best regards,
Luigi


From m@rong|u@|u|g| @end|ng |rom gm@||@com  Thu Oct 24 11:21:47 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Thu, 24 Oct 2019 11:21:47 +0200
Subject: [R] R lattice stripplot add median line to data
Message-ID: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>

Dear all,
I am plotting data with lattice's stripplot. Is it possible to add a
median line to each cluster?
This is the working example:

```
Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
            "A9", "A9", "A9", "H1", "H1",
            "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1", "P1", "P1",
            "P2", "P2", "P2", "P3",
            "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5", "P7", "P7",
            "P7", "A0", "A0", "A0",
            "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9", "A9", "H1",
            "H1", "H1", "H2", "H2",
            "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2", "P2", "P2",
            "P3", "P3", "P3", "P4",
            "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7")
Group = rep(c("Normal", "Tumour",  "Metastasis" ), 26)
Taxon = c(rep("Microviridae", 39), rep("Caudovirales", 39))
Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4,  87,   7,
               16,  13,  22,  47,  12,   1,
                5, 251,   4,   8,   4,   2,  14,   4,   2,  10,   4,   4,
               13,   1,   1,   5,   7,   2,   6,   6,   4,   1,   2,   1,
               2,   1,   2,   0,   0,   2,   0,   0,   1,   0,   0,   0,
               0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
               0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0)
df = data.frame(Sample, Group, Taxon, Aboundance,
                stringsAsFactors = FALSE)
library(lattice)
stripplot(
  Aboundance ~ Taxon|Group,
  df,
  groups = Taxon,
  scales=list(y=list(log=T)),
  pch=16,  cex = 1.5,
  ylab = expression(bold("Number of taxons")),
  jitter.data = TRUE,
  layout=c(3,1),
  col = "black",
  # colour panels differently
  par.settings=list(strip.background=list(col=c("darkorchid3",
                                                "darkolivegreen3", "brown3"))),
  strip = function(..., bg) {
    strip.default(...,
                  bg = trellis.par.get("strip.background")$col[which.packet()])
  },
  # add median bar
)
```

Thank you
-- 
Best regards,
Luigi


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Thu Oct 24 12:42:28 2019
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Thu, 24 Oct 2019 11:42:28 +0100
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jOUazJMPB-ob6Pbkeo+pU2KpfN17WTY+rO0YbTOoeBfpg@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
 <CA+8X3fWLrvPzBG3uT=zkh5VUgZ4zHhk-Bj2SG0Od3XJhbrXrbw@mail.gmail.com>
 <CAF9-5jMOfKyjNMLJoPz=VMQKZsMtSGeAHWDKHPgE_O7GMWH-zg@mail.gmail.com>
 <CA+8X3fXE9eS+5M7tXUof7QDrgkzSq87aSz6MUBog_YQAb-fVfA@mail.gmail.com>
 <CAF9-5jOUazJMPB-ob6Pbkeo+pU2KpfN17WTY+rO0YbTOoeBfpg@mail.gmail.com>
Message-ID: <b30e4326-0154-2d4f-764e-9a5e415b18bd@dewey.myzen.co.uk>

Dear Ana

Since this appears to be genetics data have you thought of looking at 
Bioconductor for help? I do not use genetic data-sets but people there 
must use big files every day three times before breakfast.

Michael

On 24/10/2019 00:33, Ana Marija wrote:
> thanks but I would need solution in R
> 
> On Wed, Oct 23, 2019 at 6:31 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>>
>> I don't have it installed - that was merely a suggestion. I notice
>> that both data.table and dplyr packages are mentioned as possibilities
>> for "merge big datasets in r". Apparently the best way to do it if you
>> have a database manager is to read the two datasets into tables and do
>> the join via SQL or whatever language is available.
>>
>> Jim
>>
>> On Thu, Oct 24, 2019 at 10:17 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>>>
>>> no can you please send me an example how the command would look like in my case?
>>>
>>> On Wed, Oct 23, 2019 at 6:16 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>>>>
>>>> Yes. Have you tried the bigmemory package?
>>>>
>>>> Jim
>>>>
>>>> On Thu, Oct 24, 2019 at 10:08 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>>>>>
>>>>> Hi Jim,
>>>>>
>>>>> I think one of the issue is that data frames are so big,
>>>>>> dim(l4)
>>>>> [1] 166941635         8
>>>>>> dim(asign)
>>>>> [1] 107371528         5
>>>>>
>>>>> so my example would not reproduce the error
>>>>>
>>>>> On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>>>>>>
>>>>>> Hi Ana,
>>>>>> When I run this example taken from your email:
>>>>>>
>>>>>> l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
>>>>>> chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
>>>>>> chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
>>>>>> chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
>>>>>> chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
>>>>>> chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
>>>>>> chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
>>>>>> header=TRUE,stringsAsFactors=FALSE)
>>>>>> asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
>>>>>> ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
>>>>>> ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
>>>>>> ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
>>>>>> ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
>>>>>> ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
>>>>>> ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
>>>>>> header=TRUE,stringsAsFactors=FALSE)
>>>>>> merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>>>>>>   [1] X1           X2           X3           X4           X5
>>>>>> [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
>>>>>> [11] p.val.Retina
>>>>>> <0 rows> (or 0-length row.names)
>>>>>>
>>>>>> It works okay, but there are no matches in the join. So I can't even
>>>>>> guess what the problem is.
>>>>>>
>>>>>> Jim
>>>>>>
>>>>>> On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>>>>>>>
>>>>>>> Hello,
>>>>>>>
>>>>>>> I have two data frames like this:
>>>>>>>
>>>>>>>> head(l4)
>>>>>>>      X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
>>>>>>> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
>>>>>>> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
>>>>>>> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
>>>>>>> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
>>>>>>> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
>>>>>>> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
>>>>>>>> head(asign)
>>>>>>>                gene  chr                chr_pos   pos p.val.Retina
>>>>>>> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
>>>>>>> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
>>>>>>> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
>>>>>>> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
>>>>>>> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
>>>>>>> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
>>>>>>>> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>>>>>>> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
>>>>>>>    negative length vectors are not allowed
>>>>>>>> sapply(l4,class)
>>>>>>>            X1           X2           X3           X4           X5   variant_id
>>>>>>>   "character"  "character"  "character"  "character"  "character"  "character"
>>>>>>> pval_nominal  gene_id.LCL
>>>>>>>     "numeric"  "character"
>>>>>>>> sapply(asign,class)
>>>>>>>          gene          chr      chr_pos          pos p.val.Retina
>>>>>>>   "character"  "character"  "character"  "character"  "character"
>>>>>>>
>>>>>>> Please advise as to why I am getting this error when merging?
>>>>>>>
>>>>>>> Thanks
>>>>>>> Ana
>>>>>>>
>>>>>>> ______________________________________________
>>>>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>>>>>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 

-- 
Michael
http://www.dewey.myzen.co.uk/home.html


From @|gbert @end|ng |rom w|w|@hu-ber||n@de  Thu Oct 24 13:18:15 2019
From: @|gbert @end|ng |rom w|w|@hu-ber||n@de (Sigbert Klinke)
Date: Thu, 24 Oct 2019 13:18:15 +0200
Subject: [R] read_dta & .name_repair
Message-ID: <caf90df2-7bcc-9c4a-dcf0-fc5350084c49@wiwi.hu-berlin.de>

Hi,

I can not read in a data set from Stata. When I try I get the first 
error. If I follow the advice then I get "unused argument error".

How do I use .name_repair?

Best Sigbert

----

 > library("haven")
 > packageVersion("haven")

[1] ?2.1.1?

 > xp <- read_dta("XXX.dta")

Fehler in df_parse_dta_file(spec, encoding) :
   Evaluation error: Column name `Merge` must not be duplicated.
Use .name_repair to specify repair..

 > mynr <- function(nms) { }
 > xp <- read_dta("XXX.dta", .name_repair=mynr)

Fehler in read_dta("XXX.dta", .name_repair = mynr) :
   unbenutztes Argument (.name_repair = mynr)


-- 
https://hu.berlin/sk
https://hu.berlin/mmstat3


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Thu Oct 24 15:23:42 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Thu, 24 Oct 2019 06:23:42 -0700
Subject: [R] read_dta & .name_repair
In-Reply-To: <caf90df2-7bcc-9c4a-dcf0-fc5350084c49@wiwi.hu-berlin.de>
References: <caf90df2-7bcc-9c4a-dcf0-fc5350084c49@wiwi.hu-berlin.de>
Message-ID: <DDBA5109-3296-474F-8A28-81562BE15C02@dcn.davis.ca.us>

I don't know, but the function interface for read_dta ]1] does not appear to offer the opportunity to modify the arguments to .name_repair. This looks like a bug in the package, which means you should be using the resources identified by the package maintainer [2] to report this issue.

[1] https://www.rdocumentation.org/packages/haven/versions/2.1.1/topics/read_dta

[2] https://cran.r-project.org/web/packages/haven/index.html

On October 24, 2019 4:18:15 AM PDT, Sigbert Klinke <sigbert at wiwi.hu-berlin.de> wrote:
>Hi,
>
>I can not read in a data set from Stata. When I try I get the first 
>error. If I follow the advice then I get "unused argument error".
>
>How do I use .name_repair?
>
>Best Sigbert
>
>----
>
> > library("haven")
> > packageVersion("haven")
>
>[1] ?2.1.1?
>
> > xp <- read_dta("XXX.dta")
>
>Fehler in df_parse_dta_file(spec, encoding) :
>   Evaluation error: Column name `Merge` must not be duplicated.
>Use .name_repair to specify repair..
>
> > mynr <- function(nms) { }
> > xp <- read_dta("XXX.dta", .name_repair=mynr)
>
>Fehler in read_dta("XXX.dta", .name_repair = mynr) :
>   unbenutztes Argument (.name_repair = mynr)

-- 
Sent from my phone. Please excuse my brevity.


From Seb@@t|en@B|hore| @end|ng |rom cogn|gencorp@com  Thu Oct 24 15:43:26 2019
From: Seb@@t|en@B|hore| @end|ng |rom cogn|gencorp@com (Sebastien Bihorel)
Date: Thu, 24 Oct 2019 13:43:26 +0000
Subject: [R] read.table and NaN
In-Reply-To: <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>
References: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>,
 <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>
Message-ID: <CH2PR19MB38645EAE6D563B97A9063F7B926A0@CH2PR19MB3864.namprd19.prod.outlook.com>

Thanks Gunter

It seems that one has to know the structure of the data and adapt the read.table call accordingly. I am working on a framework that is meant to process data files with unknown structure, so I have to think a bit more about that...
________________________________
From: Bert Gunter <bgunter.4567 at gmail.com>
Sent: Thursday, October 24, 2019 00:08
To: Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com>
Cc: r-help at r-project.org <r-help at r-project.org>
Subject: Re: [R] read.table and NaN

Like this?

con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '', stringsAsFactors = FALSE,
+                   colClasses = c("numeric", "character"))
> close.connection(con)
> tmp
   A   B
1  1 NaN
2 NA   2
> class(tmp[,1])
[1] "numeric"
> class(tmp[,2])
[1] "character"
> tmp[,2]
[1] "NaN" "2"


Bert Gunter

"The trouble with having an open mind is that people keep coming along and sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Wed, Oct 23, 2019 at 6:31 PM Sebastien Bihorel via R-help <r-help at r-project.org<mailto:r-help at r-project.org>> wrote:
Hi,

Is there a way to make read.table consider NaN as a string of characters rather than the internal NaN? Changing the na.strings argument does not seems to have any effect on how R interprets the NaN string (while is does not the the NA string)

con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '', stringsAsFactors = FALSE)
close.connection(con)
tmp
class(tmp[,1])
class(tmp[,2])


______________________________________________
R-help at r-project.org<mailto:R-help at r-project.org> mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Thu Oct 24 16:39:15 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Thu, 24 Oct 2019 07:39:15 -0700
Subject: [R] read.table and NaN
In-Reply-To: <CH2PR19MB38645EAE6D563B97A9063F7B926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
References: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
 <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>
 <CH2PR19MB38645EAE6D563B97A9063F7B926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
Message-ID: <CAGxFJbTe70QZ4W2xPZaVDGzgvUKFJq_22nbZ879kB3yyEJenHA@mail.gmail.com>

Not so. Read ?read.table carefully. You can use "NA" as a default.
Moreover, you **specified** that you want NaN read as character, which
means that any column containing NaN **must** be character. That's part of
the specification for data frames (all columns must be one data type). So
either change your specfication or change your data structure.

And, incidentally, my first name is "Bert" .

Cheers,
Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Thu, Oct 24, 2019 at 6:43 AM Sebastien Bihorel <
Sebastien.Bihorel at cognigencorp.com> wrote:

> Thanks Gunter
>
> It seems that one has to know the structure of the data and adapt the
> read.table call accordingly. I am working on a framework that is meant to
> process data files with unknown structure, so I have to think a bit more
> about that...
> ------------------------------
> *From:* Bert Gunter <bgunter.4567 at gmail.com>
> *Sent:* Thursday, October 24, 2019 00:08
> *To:* Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com>
> *Cc:* r-help at r-project.org <r-help at r-project.org>
> *Subject:* Re: [R] read.table and NaN
>
> Like this?
>
> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> > tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
> stringsAsFactors = FALSE,
> +                   colClasses = c("numeric", "character"))
> > close.connection(con)
> > tmp
>    A   B
> 1  1 NaN
> 2 NA   2
> > class(tmp[,1])
> [1] "numeric"
> > class(tmp[,2])
> [1] "character"
> > tmp[,2]
> [1] "NaN" "2"
>
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Wed, Oct 23, 2019 at 6:31 PM Sebastien Bihorel via R-help <
> r-help at r-project.org> wrote:
>
> Hi,
>
> Is there a way to make read.table consider NaN as a string of characters
> rather than the internal NaN? Changing the na.strings argument does not
> seems to have any effect on how R interprets the NaN string (while is does
> not the the NA string)
>
> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
> stringsAsFactors = FALSE)
> close.connection(con)
> tmp
> class(tmp[,1])
> class(tmp[,2])
>
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
>

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Thu Oct 24 18:22:38 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Thu, 24 Oct 2019 09:22:38 -0700
Subject: [R] R lattice stripplot add median line to data
In-Reply-To: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
References: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
Message-ID: <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>

Yes, it's possible to do about anything in lattice, but you have to learn
how to write custom panel functions, which takes some effort. If you want
to use lattice in this way, you should probably go through Deepayan's book.

Here is one way to do what I think you want. Note that it depends on
knowing that when the x axis is a factor, the x positions of the y
variables are at 1, 2, 3, .. etc (to the number of levels of the factor) to
draw the horizontal line segments. This is documented somewhere, but I
don't remember where.

stripplot(
   Aboundance ~ Taxon|Group,
   df,
   groups = Taxon,
   scales=list(y=list(log=T)),
   pch=16,  cex = 1.5,
   ylab = expression(bold("Number of taxons")),
   jitter.data = TRUE,
   layout=c(3,1),
   col = "black",
   # colour panels differently
   par.settings=list(strip.background=list(col=c("darkorchid3",
                                                 "darkolivegreen3",
"brown3"))),
   strip = function(...,bg) {
      strip.default(...,
                    bg =
trellis.par.get("strip.background")$col[which.packet()])
      },
   panel = function(x,y,...){
      panel.stripplot(x,y,...)
      lev <- seq_along(levels(x))
      meds <- tapply(y,x,median,na.rm = TRUE)
      for(i in lev)panel.segments(x0 = i-.25, y0 = meds[i], x1 = i+.25, y1
= meds[i],
                  lwd=2,col = "red")
   }
)

Cheers,
Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Thu, Oct 24, 2019 at 2:22 AM Luigi Marongiu <marongiu.luigi at gmail.com>
wrote:

> Dear all,
> I am plotting data with lattice's stripplot. Is it possible to add a
> median line to each cluster?
> This is the working example:
>
> ```
> Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
>             "A9", "A9", "A9", "H1", "H1",
>             "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1", "P1", "P1",
>             "P2", "P2", "P2", "P3",
>             "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5", "P7", "P7",
>             "P7", "A0", "A0", "A0",
>             "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9", "A9", "H1",
>             "H1", "H1", "H2", "H2",
>             "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2", "P2", "P2",
>             "P3", "P3", "P3", "P4",
>             "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7")
> Group = rep(c("Normal", "Tumour",  "Metastasis" ), 26)
> Taxon = c(rep("Microviridae", 39), rep("Caudovirales", 39))
> Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4,  87,   7,
>                16,  13,  22,  47,  12,   1,
>                 5, 251,   4,   8,   4,   2,  14,   4,   2,  10,   4,   4,
>                13,   1,   1,   5,   7,   2,   6,   6,   4,   1,   2,   1,
>                2,   1,   2,   0,   0,   2,   0,   0,   1,   0,   0,   0,
>                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
>                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0)
> df = data.frame(Sample, Group, Taxon, Aboundance,
>                 stringsAsFactors = FALSE)
> library(lattice)
> stripplot(
>   Aboundance ~ Taxon|Group,
>   df,
>   groups = Taxon,
>   scales=list(y=list(log=T)),
>   pch=16,  cex = 1.5,
>   ylab = expression(bold("Number of taxons")),
>   jitter.data = TRUE,
>   layout=c(3,1),
>   col = "black",
>   # colour panels differently
>   par.settings=list(strip.background=list(col=c("darkorchid3",
>                                                 "darkolivegreen3",
> "brown3"))),
>   strip = function(..., bg) {
>     strip.default(...,
>                   bg =
> trellis.par.get("strip.background")$col[which.packet()])
>   },
>   # add median bar
> )
> ```
>
> Thank you
> --
> Best regards,
> Luigi
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Thu Oct 24 18:38:52 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Thu, 24 Oct 2019 09:38:52 -0700
Subject: [R] read.table and NaN
In-Reply-To: <CAGxFJbTe70QZ4W2xPZaVDGzgvUKFJq_22nbZ879kB3yyEJenHA@mail.gmail.com>
References: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
 <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>
 <CH2PR19MB38645EAE6D563B97A9063F7B926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
 <CAGxFJbTe70QZ4W2xPZaVDGzgvUKFJq_22nbZ879kB3yyEJenHA@mail.gmail.com>
Message-ID: <CAGxFJbT_km95pbSyNnT5nXAfTRaPwpi76jo+hAVdtK6QRq9TvQ@mail.gmail.com>

Oh, and btw, I think you should omit the groups = argument.
It's not needed since "groups" is already the conditioning variable, so
only one group per panel,
and using it seems to interact unfavorably with the way jittering is done.


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Thu, Oct 24, 2019 at 7:39 AM Bert Gunter <bgunter.4567 at gmail.com> wrote:

> Not so. Read ?read.table carefully. You can use "NA" as a default.
> Moreover, you **specified** that you want NaN read as character, which
> means that any column containing NaN **must** be character. That's part of
> the specification for data frames (all columns must be one data type). So
> either change your specfication or change your data structure.
>
> And, incidentally, my first name is "Bert" .
>
> Cheers,
> Bert
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Thu, Oct 24, 2019 at 6:43 AM Sebastien Bihorel <
> Sebastien.Bihorel at cognigencorp.com> wrote:
>
>> Thanks Gunter
>>
>> It seems that one has to know the structure of the data and adapt the
>> read.table call accordingly. I am working on a framework that is meant to
>> process data files with unknown structure, so I have to think a bit more
>> about that...
>> ------------------------------
>> *From:* Bert Gunter <bgunter.4567 at gmail.com>
>> *Sent:* Thursday, October 24, 2019 00:08
>> *To:* Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com>
>> *Cc:* r-help at r-project.org <r-help at r-project.org>
>> *Subject:* Re: [R] read.table and NaN
>>
>> Like this?
>>
>> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
>> > tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
>> stringsAsFactors = FALSE,
>> +                   colClasses = c("numeric", "character"))
>> > close.connection(con)
>> > tmp
>>    A   B
>> 1  1 NaN
>> 2 NA   2
>> > class(tmp[,1])
>> [1] "numeric"
>> > class(tmp[,2])
>> [1] "character"
>> > tmp[,2]
>> [1] "NaN" "2"
>>
>>
>> Bert Gunter
>>
>> "The trouble with having an open mind is that people keep coming along
>> and sticking things into it."
>> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>>
>>
>> On Wed, Oct 23, 2019 at 6:31 PM Sebastien Bihorel via R-help <
>> r-help at r-project.org> wrote:
>>
>> Hi,
>>
>> Is there a way to make read.table consider NaN as a string of characters
>> rather than the internal NaN? Changing the na.strings argument does not
>> seems to have any effect on how R interprets the NaN string (while is does
>> not the the NA string)
>>
>> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
>> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
>> stringsAsFactors = FALSE)
>> close.connection(con)
>> tmp
>> class(tmp[,1])
>> class(tmp[,2])
>>
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>>

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Thu Oct 24 21:17:16 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Thu, 24 Oct 2019 20:17:16 +0100
Subject: [R] negative vector length when merging data frames
In-Reply-To: <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
Message-ID: <9679f0e4-5241-0ee6-8e16-feb79ea763ad@sapo.pt>

Hello,

Sometimes sqldf::sqldf tends to save memory. Maybe if you try

library(sqldf)

sqldf('select l4.*, asign.gene, asign.chr_pos, asign.`p.val.Retina`
       from l4
       inner join asign
       on X1 = asign.chr and X2 = asign.pos')

Or you can filter the rows that match first, then merge the results.
Something along the lines of

# read in only the columns needed with fread, it's fast
l4join <- data.table::fread(l4_file, select = c("X1", "X2"))
ajoin <- data.table::fread(asign_file, select = c("chr", "pos"))

# create indices with the matches on both sides
i1 <- (l4join$X1 %in% ajoin$chr) & (l4join$X2 %in% ajoin$pos)
i2 <- (ajoin$chr %in% l4join$X1) & (ajoin$pos %in% l4join$X2)

rm(l4join, ajoin)   # don't need this any more, remove them

# now the real fread's
l4 <- data.table::fread(l4_file)
asign <- data.table::fread(asign_file)

# extract the relevant rows and merge
res <- l4[i1, ]
res2 <- asign[i2, setdiff(names(asign), names(l4))]
merge(res, res2, by.x = c("X1", "X2"), by.y = c("chr", "pos"))


Hope this helps,

Rui Barradas






?s 00:08 de 24/10/19, Ana Marija escreveu:
> Hi Jim,
> 
> I think one of the issue is that data frames are so big,
>> dim(l4)
> [1] 166941635         8
>> dim(asign)
> [1] 107371528         5
> 
> so my example would not reproduce the error
> 
> On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>>
>> Hi Ana,
>> When I run this example taken from your email:
>>
>> l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
>> chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
>> chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
>> chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
>> chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
>> chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
>> chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
>> header=TRUE,stringsAsFactors=FALSE)
>> asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
>> ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
>> ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
>> ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
>> ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
>> ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
>> ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
>> header=TRUE,stringsAsFactors=FALSE)
>> merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>>   [1] X1           X2           X3           X4           X5
>> [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
>> [11] p.val.Retina
>> <0 rows> (or 0-length row.names)
>>
>> It works okay, but there are no matches in the join. So I can't even
>> guess what the problem is.
>>
>> Jim
>>
>> On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>>>
>>> Hello,
>>>
>>> I have two data frames like this:
>>>
>>>> head(l4)
>>>      X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
>>> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
>>> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
>>> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
>>> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
>>> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
>>> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
>>>> head(asign)
>>>                gene  chr                chr_pos   pos p.val.Retina
>>> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
>>> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
>>> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
>>> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
>>> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
>>> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
>>>> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
>>> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
>>>    negative length vectors are not allowed
>>>> sapply(l4,class)
>>>            X1           X2           X3           X4           X5   variant_id
>>>   "character"  "character"  "character"  "character"  "character"  "character"
>>> pval_nominal  gene_id.LCL
>>>     "numeric"  "character"
>>>> sapply(asign,class)
>>>          gene          chr      chr_pos          pos p.val.Retina
>>>   "character"  "character"  "character"  "character"  "character"
>>>
>>> Please advise as to why I am getting this error when merging?
>>>
>>> Thanks
>>> Ana
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From wjm1 @end|ng |rom c@@@co|umb|@@edu  Thu Oct 24 21:44:23 2019
From: wjm1 @end|ng |rom c@@@co|umb|@@edu (William Michels)
Date: Thu, 24 Oct 2019 12:44:23 -0700
Subject: [R] If Loop I Think
In-Reply-To: <93ec5c3b439141ff85f3a400afe618c9@SRVEXCHCM1302.precheza.cz>
References: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
 <CA+8X3fWiTja7Qf0GMG9tFw91ujwWj-=XCbZwQr264RoNUhxA-Q@mail.gmail.com>
 <93ec5c3b439141ff85f3a400afe618c9@SRVEXCHCM1302.precheza.cz>
Message-ID: <CAA99HCy-WEDFJoG+Yh6Pi-JX5kWuhgZ5HTOWg+JEoUG2EP+gjQ@mail.gmail.com>

Hi Phillip,

Jim and David and Petr all wrote you good code, but you have major
problems in data formatting. Your data uses spaces both as a column
separator and also to denote "blank fields". Because of problems with
your input data structure, it's doubtful whether the good code you've
received will result in the correct baseball answer.

The Arizona Diamondbacks data you posted shows runner positions for
about seven outs of a game (about 1-and-1/6 inning)--I say "about"
because there may be subsequent rows with the same number of outs
listed in row 14. However, rows 10/11 have two blank spaces between
the number-of-outs and a runner_ID (suggesting one "blank field" to
the left of the first runner_ID), while row 12 has three blank spaces
between the number-of-outs and the first runner_ID (suggesting two
"blank fields" to the left of the first runner_ID).

Since bases are loaded in row 9 and no outs are recorded between rows
9 and 10, the game situation suggests that two runners score between
rows 9 and 10 (polla001 and perad001), with the remaining baserunners
ending up on second and third base, not first and second base (best
guess: batter lambj001 hits a double, winds up on second base, and
gets two RBIs). Similarly between rows 11 and 12, goldp001 is removed
as a baserunner and an out is recorded, however no new baserunners
appear. This game situation suggests both runners advancing (e.g. by a
sacrifice fly) with goldp001 scoring and the remaining baserunner
(lambj001) ending up on third base, not second base or first base.

Now if you run the code posted earlier using read.table(), in all
cases you will find blank fields removed between the "outs" column and
the first baserunner listed, so every row of your data with
runners-on-base will have a runner on first-base. Intuitively, you
know this must be wrong (think doubles and triples). The mechanics of
read.table() are such that the field separator character ("sep"
parameter) defaults to 'white space', that is to say, "ONE OR MORE
spaces, tabs, newlines or carriage returns" (capitalization mine). So
multiple white space characters in your file are read as a single
"field separator" separating two adjacent columns.

What you really need to do is export your data in a format that R can
easily understand. There's a possibility that posting your code in
HTML to the R-Help mailing list may have corrupted your data (e.g.
removing tabs and inserting spaces instead), but no matter. You need
to set up a workflow so this **cannot** happen, i.e. start exporting
from a spreadsheet program in ".csv" format and start importing into R
using R's read.csv() function instead. Colleagues have recommended the
book "Beyond Spreadsheets with R" by Dr. Jonathan Carroll to me as a
good introductory text for tackling these issues.

Finally (if you're read this far), the truth is if you work at it a
little bit, you can get the data you posted into R into a reasonable
format using lists (although starting from a ".csv" file may be
conceptually easier for you). Lists are very useful when you have
multiple vectors of different lengths. See the code below (note--I
dropped your first "Row#" column):

> zz <- textConnection("ari18.test3.raw", "w")
> writeLines(con=zz, c("0
+ 1
+ 1
+ 1 arenn001
+ 2 arenn001
+ 0
+ 0 perad001
+ 0 polla001 perad001
+ 0 goldp001 polla001 perad001
+ 0  lambj001 goldp001
+ 1  lambj001 goldp001
+ 2   lambj001
+ 0
+ 1       "))
> close(zz)
> ari18.test3.raw
 [1] "0       "                         "1       "
 [3] "1       "                         "1 arenn001      "
 [5] "2 arenn001      "                 "0       "
 [7] "0 perad001      "                 "0 polla001 perad001     "
 [9] "0 goldp001 polla001 perad001    " "0  lambj001 goldp001    "
[11] "1  lambj001 goldp001    "         "2   lambj001    "
[13] "0       "                         "1       "
> aa <- strsplit(trimws(ari18.test3.raw), split=" ")
> bb <- t(sapply(aa, FUN=function(x) {c(x, rep(NA, length.out=4-length(x)))} ))
> cc <- t(apply(bb[,-1], 1, FUN=function(x) {ifelse(test=nchar(x), yes=1, no=0)} ))
> bb
      [,1] [,2]       [,3]       [,4]
 [1,] "0"  NA         NA         NA
 [2,] "1"  NA         NA         NA
 [3,] "1"  NA         NA         NA
 [4,] "1"  "arenn001" NA         NA
 [5,] "2"  "arenn001" NA         NA
 [6,] "0"  NA         NA         NA
 [7,] "0"  "perad001" NA         NA
 [8,] "0"  "polla001" "perad001" NA
 [9,] "0"  "goldp001" "polla001" "perad001"
[10,] "0"  ""         "lambj001" "goldp001"
[11,] "1"  ""         "lambj001" "goldp001"
[12,] "2"  ""         ""         "lambj001"
[13,] "0"  NA         NA         NA
[14,] "1"  NA         NA         NA
> cc
      [,1] [,2] [,3]
 [1,]   NA   NA   NA
 [2,]   NA   NA   NA
 [3,]   NA   NA   NA
 [4,]    1   NA   NA
 [5,]    1   NA   NA
 [6,]   NA   NA   NA
 [7,]    1   NA   NA
 [8,]    1    1   NA
 [9,]    1    1    1
[10,]    0    1    1
[11,]    0    1    1
[12,]    0    0    1
[13,]   NA   NA   NA
[14,]   NA   NA   NA
>

HTH, Bill.

W. Michels, Ph.D.





On Wed, Oct 23, 2019 at 12:40 AM PIKAL Petr <petr.pikal at precheza.cz> wrote:
>
> Hi
>
> ***do not think in if or if loops in R***.
>
> to elaborate Jim's solution further
>
> With simple function based on logical expression
> fff <- function(x) (x!="")+0
>
> you could use apply
>
> t(apply(phdf[,3:5], 1, fff))
>
> and add results to your data frame columns
> phdf[, 6:8] <- t(apply(phdf[,3:5], 1, fff))
>
> Regarding some tutorial
>
> Basic stuff is in R-intro, there is excellent documentation to each function.
>
> And as R users pool is huge, you could simply ask Google
> e.g.
> r change values based on condition
>
> Cheers
> Petr
>
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Jim Lemon
> > Sent: Wednesday, October 23, 2019 12:26 AM
> > To: Phillip Heinrich <herd_dog at cox.net>
> > Cc: r-help <R-help at r-project.org>
> > Subject: Re: [R] If Loop I Think
> >
> > Hi Philip,
> > Try this:
> >
> > phdf<-read.table(
> > text="Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
> > 1 0
> > 2 1
> > 3 1
> > 4 1 arenn001
> > 5 2 arenn001
> > 6 0
> > 7 0 perad001
> > 8 0 polla001 perad001
> > 9 0 goldp001 polla001 perad001
> > 10 0  lambj001 goldp001
> > 11 1  lambj001 goldp001
> > 12 2   lambj001
> > 13 0
> > 14 1       ",
> > header=TRUE,stringsAsFactors=FALSE,fill=TRUE)
> > phdf$R1<-ifelse(nchar(phdf$RunnerFirst) > 0,1,0)
> > phdf$R2<-ifelse(nchar(phdf$RunnerSecond) > 0,1,0)
> > phdf$R3<-ifelse(nchar(phdf$RunnerThird) > 0,1,0)
> >
> > Jim
> >
> > On Wed, Oct 23, 2019 at 7:54 AM Phillip Heinrich <herd_dog at cox.net>
> > wrote:
> > >
> > >       Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
> > >       1 0
> > >       2 1
> > >       3 1
> > >       4 1 arenn001
> > >       5 2 arenn001
> > >       6 0
> > >       7 0 perad001
> > >       8 0 polla001 perad001
> > >       9 0 goldp001 polla001 perad001
> > >       10 0  lambj001 goldp001
> > >       11 1  lambj001 goldp001
> > >       12 2   lambj001
> > >       13 0
> > >       14 1
> > >
> > >
> > >
> > > With the above data, Arizona Diamondbacks baseball, I?m trying to put
> > zeros into the R1 column is the RunnerFirst column is blank and a one if the
> > column has a coded entry such as rows 4,5,7,8,& 9.  Similarly I want zeros in
> > R2 and R3 if RunnerSecond and RunnerThird respectively are blank and ones
> > if there is an entry.
> > >
> > > I?ve tried everything I know how to do such as ?If Loops?, ?If-Then loops?,
> > ?apply?, ?sapply?, etc.  I wrote function below and it ran without errors but I
> > have no idea what to do with it to accomplish my goal:
> > >
> > > R1 <- function(x) {
> > >   if (ari18.test3$RunnerFirst == " "){
> > >        ari18.test3$R1 <- 0
> > >        return(R1)
> > >          }else{
> > >            R1 <- ari18.test3$R1 <- 1
> > >            return(R1)
> > >          }
> > >    }
> > >
> > > The name of the data frame is ari18.test3
> > >
> > > On a more philosophical note, data handling in R seems to be made up of
> > thousands of details with no over-riding principles.  I?ve read two books on R
> > and a number of tutorial and watched several videos but I don?t seem to be
> > making any progress.  Can anyone suggest videos, or tutorials, or books that
> > might help?  Database stuff has never been my strong point but I?m
> > determined to learn.
> > >
> > > Thanks,
> > > Philip Heinrich
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-
> > guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From petr@p|k@| @end|ng |rom prechez@@cz  Fri Oct 25 11:19:26 2019
From: petr@p|k@| @end|ng |rom prechez@@cz (PIKAL Petr)
Date: Fri, 25 Oct 2019 09:19:26 +0000
Subject: [R] R lattice stripplot add median line to data
In-Reply-To: <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>
References: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
 <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>
Message-ID: <76beef35061e4c1dacc0a60671a7a7cd@SRVEXCHCM1301.precheza.cz>

Hi

I asked similar question few yeas ago (in different context) and besed on
answers I made custom function which adds line after the lattice graph is
plotted.

after your lattice plot just do

addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)

the function is defined as follows

addLine <- function (a = NULL, b = NULL, v = NULL, h = NULL, ..., once = F) 
{
    tcL <- trellis.currentLayout()
    k <- 0
    for (i in 1:nrow(tcL)) for (j in 1:ncol(tcL)) if (tcL[i, 
        j] > 0) {
        k <- k + 1
        trellis.focus("panel", j, i, highlight = FALSE)
        if (once) 
            panel.abline(a = a[k], b = b[k], v = v[k], h = h[k], 
                ...)
        else panel.abline(a = a, b = b, v = v, h = h, ...)
        trellis.unfocus()
    }
  }

Cheers
Petr



> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert Gunter
> Sent: Thursday, October 24, 2019 6:23 PM
> To: Luigi Marongiu <marongiu.luigi at gmail.com>
> Cc: r-help <r-help at r-project.org>
> Subject: Re: [R] R lattice stripplot add median line to data
> 
> Yes, it's possible to do about anything in lattice, but you have to learn
how
> to write custom panel functions, which takes some effort. If you want to
use
> lattice in this way, you should probably go through Deepayan's book.
> 
> Here is one way to do what I think you want. Note that it depends on
> knowing that when the x axis is a factor, the x positions of the y
variables are
> at 1, 2, 3, .. etc (to the number of levels of the factor) to draw the
horizontal
> line segments. This is documented somewhere, but I don't remember where.
> 
> stripplot(
>    Aboundance ~ Taxon|Group,
>    df,
>    groups = Taxon,
>    scales=list(y=list(log=T)),
>    pch=16,  cex = 1.5,
>    ylab = expression(bold("Number of taxons")),
>    jitter.data = TRUE,
>    layout=c(3,1),
>    col = "black",
>    # colour panels differently
>    par.settings=list(strip.background=list(col=c("darkorchid3",
>                                                  "darkolivegreen3",
"brown3"))),
>    strip = function(...,bg) {
>       strip.default(...,
>                     bg =
> trellis.par.get("strip.background")$col[which.packet()])
>       },
>    panel = function(x,y,...){
>       panel.stripplot(x,y,...)
>       lev <- seq_along(levels(x))
>       meds <- tapply(y,x,median,na.rm = TRUE)
>       for(i in lev)panel.segments(x0 = i-.25, y0 = meds[i], x1 = i+.25, y1
= meds[i],
>                   lwd=2,col = "red")
>    }
> )
> 
> Cheers,
> Bert
> 
> Bert Gunter
> 
> "The trouble with having an open mind is that people keep coming along
> and sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> 
> 
> On Thu, Oct 24, 2019 at 2:22 AM Luigi Marongiu
> <marongiu.luigi at gmail.com>
> wrote:
> 
> > Dear all,
> > I am plotting data with lattice's stripplot. Is it possible to add a
> > median line to each cluster?
> > This is the working example:
> >
> > ```
> > Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
> >             "A9", "A9", "A9", "H1", "H1",
> >             "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1", "P1", "P1",
> >             "P2", "P2", "P2", "P3",
> >             "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5", "P7", "P7",
> >             "P7", "A0", "A0", "A0",
> >             "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9", "A9", "H1",
> >             "H1", "H1", "H2", "H2",
> >             "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2", "P2", "P2",
> >             "P3", "P3", "P3", "P4",
> >             "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7") Group =
> > rep(c("Normal", "Tumour",  "Metastasis" ), 26) Taxon =
> > c(rep("Microviridae", 39), rep("Caudovirales", 39))
> > Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4,  87,   7,
> >                16,  13,  22,  47,  12,   1,
> >                 5, 251,   4,   8,   4,   2,  14,   4,   2,  10,   4,
4,
> >                13,   1,   1,   5,   7,   2,   6,   6,   4,   1,   2,
1,
> >                2,   1,   2,   0,   0,   2,   0,   0,   1,   0,   0,   0,
> >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
> >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0)
> > df = data.frame(Sample, Group, Taxon, Aboundance,
> >                 stringsAsFactors = FALSE)
> > library(lattice)
> > stripplot(
> >   Aboundance ~ Taxon|Group,
> >   df,
> >   groups = Taxon,
> >   scales=list(y=list(log=T)),
> >   pch=16,  cex = 1.5,
> >   ylab = expression(bold("Number of taxons")),
> >   jitter.data = TRUE,
> >   layout=c(3,1),
> >   col = "black",
> >   # colour panels differently
> >   par.settings=list(strip.background=list(col=c("darkorchid3",
> >                                                 "darkolivegreen3",
> > "brown3"))),
> >   strip = function(..., bg) {
> >     strip.default(...,
> >                   bg =
> > trellis.par.get("strip.background")$col[which.packet()])
> >   },
> >   # add median bar
> > )
> > ```
> >
> > Thank you
> > --
> > Best regards,
> > Luigi
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-
> guide.html
> and provide commented, minimal, self-contained, reproducible code.

From m@rong|u@|u|g| @end|ng |rom gm@||@com  Fri Oct 25 11:24:00 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Fri, 25 Oct 2019 11:24:00 +0200
Subject: [R] R lattice stripplot add median line to data
In-Reply-To: <76beef35061e4c1dacc0a60671a7a7cd@SRVEXCHCM1301.precheza.cz>
References: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
 <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>
 <76beef35061e4c1dacc0a60671a7a7cd@SRVEXCHCM1301.precheza.cz>
Message-ID: <CAMk+s2Tx6tZ7NVYryqSxnrFwSxZ85neN01XGE7C6Qk46MHCosA@mail.gmail.com>

This essentially has transformed the stripplot into a boxplot...

On Fri, Oct 25, 2019 at 11:19 AM PIKAL Petr <petr.pikal at precheza.cz> wrote:
>
> Hi
>
> I asked similar question few yeas ago (in different context) and besed on
> answers I made custom function which adds line after the lattice graph is
> plotted.
>
> after your lattice plot just do
>
> addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)
>
> the function is defined as follows
>
> addLine <- function (a = NULL, b = NULL, v = NULL, h = NULL, ..., once = F)
> {
>     tcL <- trellis.currentLayout()
>     k <- 0
>     for (i in 1:nrow(tcL)) for (j in 1:ncol(tcL)) if (tcL[i,
>         j] > 0) {
>         k <- k + 1
>         trellis.focus("panel", j, i, highlight = FALSE)
>         if (once)
>             panel.abline(a = a[k], b = b[k], v = v[k], h = h[k],
>                 ...)
>         else panel.abline(a = a, b = b, v = v, h = h, ...)
>         trellis.unfocus()
>     }
>   }
>
> Cheers
> Petr
>
>
>
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert Gunter
> > Sent: Thursday, October 24, 2019 6:23 PM
> > To: Luigi Marongiu <marongiu.luigi at gmail.com>
> > Cc: r-help <r-help at r-project.org>
> > Subject: Re: [R] R lattice stripplot add median line to data
> >
> > Yes, it's possible to do about anything in lattice, but you have to learn
> how
> > to write custom panel functions, which takes some effort. If you want to
> use
> > lattice in this way, you should probably go through Deepayan's book.
> >
> > Here is one way to do what I think you want. Note that it depends on
> > knowing that when the x axis is a factor, the x positions of the y
> variables are
> > at 1, 2, 3, .. etc (to the number of levels of the factor) to draw the
> horizontal
> > line segments. This is documented somewhere, but I don't remember where.
> >
> > stripplot(
> >    Aboundance ~ Taxon|Group,
> >    df,
> >    groups = Taxon,
> >    scales=list(y=list(log=T)),
> >    pch=16,  cex = 1.5,
> >    ylab = expression(bold("Number of taxons")),
> >    jitter.data = TRUE,
> >    layout=c(3,1),
> >    col = "black",
> >    # colour panels differently
> >    par.settings=list(strip.background=list(col=c("darkorchid3",
> >                                                  "darkolivegreen3",
> "brown3"))),
> >    strip = function(...,bg) {
> >       strip.default(...,
> >                     bg =
> > trellis.par.get("strip.background")$col[which.packet()])
> >       },
> >    panel = function(x,y,...){
> >       panel.stripplot(x,y,...)
> >       lev <- seq_along(levels(x))
> >       meds <- tapply(y,x,median,na.rm = TRUE)
> >       for(i in lev)panel.segments(x0 = i-.25, y0 = meds[i], x1 = i+.25, y1
> = meds[i],
> >                   lwd=2,col = "red")
> >    }
> > )
> >
> > Cheers,
> > Bert
> >
> > Bert Gunter
> >
> > "The trouble with having an open mind is that people keep coming along
> > and sticking things into it."
> > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> >
> >
> > On Thu, Oct 24, 2019 at 2:22 AM Luigi Marongiu
> > <marongiu.luigi at gmail.com>
> > wrote:
> >
> > > Dear all,
> > > I am plotting data with lattice's stripplot. Is it possible to add a
> > > median line to each cluster?
> > > This is the working example:
> > >
> > > ```
> > > Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
> > >             "A9", "A9", "A9", "H1", "H1",
> > >             "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1", "P1", "P1",
> > >             "P2", "P2", "P2", "P3",
> > >             "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5", "P7", "P7",
> > >             "P7", "A0", "A0", "A0",
> > >             "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9", "A9", "H1",
> > >             "H1", "H1", "H2", "H2",
> > >             "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2", "P2", "P2",
> > >             "P3", "P3", "P3", "P4",
> > >             "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7") Group =
> > > rep(c("Normal", "Tumour",  "Metastasis" ), 26) Taxon =
> > > c(rep("Microviridae", 39), rep("Caudovirales", 39))
> > > Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4,  87,   7,
> > >                16,  13,  22,  47,  12,   1,
> > >                 5, 251,   4,   8,   4,   2,  14,   4,   2,  10,   4,
> 4,
> > >                13,   1,   1,   5,   7,   2,   6,   6,   4,   1,   2,
> 1,
> > >                2,   1,   2,   0,   0,   2,   0,   0,   1,   0,   0,   0,
> > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
> > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0)
> > > df = data.frame(Sample, Group, Taxon, Aboundance,
> > >                 stringsAsFactors = FALSE)
> > > library(lattice)
> > > stripplot(
> > >   Aboundance ~ Taxon|Group,
> > >   df,
> > >   groups = Taxon,
> > >   scales=list(y=list(log=T)),
> > >   pch=16,  cex = 1.5,
> > >   ylab = expression(bold("Number of taxons")),
> > >   jitter.data = TRUE,
> > >   layout=c(3,1),
> > >   col = "black",
> > >   # colour panels differently
> > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > >                                                 "darkolivegreen3",
> > > "brown3"))),
> > >   strip = function(..., bg) {
> > >     strip.default(...,
> > >                   bg =
> > > trellis.par.get("strip.background")$col[which.packet()])
> > >   },
> > >   # add median bar
> > > )
> > > ```
> > >
> > > Thank you
> > > --
> > > Best regards,
> > > Luigi
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > >
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-
> > guide.html
> > and provide commented, minimal, self-contained, reproducible code.



-- 
Best regards,
Luigi


From petr@p|k@| @end|ng |rom prechez@@cz  Fri Oct 25 13:27:34 2019
From: petr@p|k@| @end|ng |rom prechez@@cz (PIKAL Petr)
Date: Fri, 25 Oct 2019 11:27:34 +0000
Subject: [R] R lattice stripplot add median line to data
In-Reply-To: <CAMk+s2Tx6tZ7NVYryqSxnrFwSxZ85neN01XGE7C6Qk46MHCosA@mail.gmail.com>
References: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
 <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>
 <76beef35061e4c1dacc0a60671a7a7cd@SRVEXCHCM1301.precheza.cz>
 <CAMk+s2Tx6tZ7NVYryqSxnrFwSxZ85neN01XGE7C6Qk46MHCosA@mail.gmail.com>
Message-ID: <ccf4aa6f861241c3a80d97bfb1c69543@SRVEXCHCM1301.precheza.cz>

Hi

> This essentially has transformed the stripplot into a boxplot...

NO

I wrote:

***after*** your lattice plot just do...

and I ment issue addLine after the stripplot is plotted.

So first
> > > > stripplot(
> > > >   Aboundance ~ Taxon|Group,
> > > >   df,
> > > >   groups = Taxon,
> > > >   scales=list(y=list(log=T)),
> > > >   pch=16,  cex = 1.5,
> > > >   ylab = expression(bold("Number of taxons")),
> > > >   jitter.data = TRUE,
> > > >   layout=c(3,1),
> > > >   col = "black",
> > > >   # colour panels differently
> > > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > > >                                                 "darkolivegreen3",
> > > > "brown3"))),
> > > >   strip = function(..., bg) {
> > > >     strip.default(...,
> > > >                   bg =
> > > > trellis.par.get("strip.background")$col[which.packet()])
> > > >   },
> > > >   # add median bar
> > > > )

than

addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)

Cheers
Petr

> -----Original Message-----
> From: Luigi Marongiu <marongiu.luigi at gmail.com>
> Sent: Friday, October 25, 2019 11:24 AM
> To: PIKAL Petr <petr.pikal at precheza.cz>
> Cc: Bert Gunter <bgunter.4567 at gmail.com>; r-help <r-help at r-project.org>
> Subject: Re: [R] R lattice stripplot add median line to data
>
> This essentially has transformed the stripplot into a boxplot...
>
> On Fri, Oct 25, 2019 at 11:19 AM PIKAL Petr <petr.pikal at precheza.cz> wrote:
> >
> > Hi
> >
> > I asked similar question few yeas ago (in different context) and besed
> > on answers I made custom function which adds line after the lattice
> > graph is plotted.
> >
> > after your lattice plot just do
> >
> > addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)
> >
> > the function is defined as follows
> >
> > addLine <- function (a = NULL, b = NULL, v = NULL, h = NULL, ..., once
> > = F) {
> >     tcL <- trellis.currentLayout()
> >     k <- 0
> >     for (i in 1:nrow(tcL)) for (j in 1:ncol(tcL)) if (tcL[i,
> >         j] > 0) {
> >         k <- k + 1
> >         trellis.focus("panel", j, i, highlight = FALSE)
> >         if (once)
> >             panel.abline(a = a[k], b = b[k], v = v[k], h = h[k],
> >                 ...)
> >         else panel.abline(a = a, b = b, v = v, h = h, ...)
> >         trellis.unfocus()
> >     }
> >   }
> >
> > Cheers
> > Petr
> >
> >
> >
> > > -----Original Message-----
> > > From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert Gunter
> > > Sent: Thursday, October 24, 2019 6:23 PM
> > > To: Luigi Marongiu <marongiu.luigi at gmail.com>
> > > Cc: r-help <r-help at r-project.org>
> > > Subject: Re: [R] R lattice stripplot add median line to data
> > >
> > > Yes, it's possible to do about anything in lattice, but you have to
> > > learn
> > how
> > > to write custom panel functions, which takes some effort. If you
> > > want to
> > use
> > > lattice in this way, you should probably go through Deepayan's book.
> > >
> > > Here is one way to do what I think you want. Note that it depends on
> > > knowing that when the x axis is a factor, the x positions of the y
> > variables are
> > > at 1, 2, 3, .. etc (to the number of levels of the factor) to draw
> > > the
> > horizontal
> > > line segments. This is documented somewhere, but I don't remember
> where.
> > >
> > > stripplot(
> > >    Aboundance ~ Taxon|Group,
> > >    df,
> > >    groups = Taxon,
> > >    scales=list(y=list(log=T)),
> > >    pch=16,  cex = 1.5,
> > >    ylab = expression(bold("Number of taxons")),
> > >    jitter.data = TRUE,
> > >    layout=c(3,1),
> > >    col = "black",
> > >    # colour panels differently
> > >    par.settings=list(strip.background=list(col=c("darkorchid3",
> > >                                                  "darkolivegreen3",
> > "brown3"))),
> > >    strip = function(...,bg) {
> > >       strip.default(...,
> > >                     bg =
> > > trellis.par.get("strip.background")$col[which.packet()])
> > >       },
> > >    panel = function(x,y,...){
> > >       panel.stripplot(x,y,...)
> > >       lev <- seq_along(levels(x))
> > >       meds <- tapply(y,x,median,na.rm = TRUE)
> > >       for(i in lev)panel.segments(x0 = i-.25, y0 = meds[i], x1 =
> > > i+.25, y1
> > = meds[i],
> > >                   lwd=2,col = "red")
> > >    }
> > > )
> > >
> > > Cheers,
> > > Bert
> > >
> > > Bert Gunter
> > >
> > > "The trouble with having an open mind is that people keep coming
> > > along and sticking things into it."
> > > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> > >
> > >
> > > On Thu, Oct 24, 2019 at 2:22 AM Luigi Marongiu
> > > <marongiu.luigi at gmail.com>
> > > wrote:
> > >
> > > > Dear all,
> > > > I am plotting data with lattice's stripplot. Is it possible to add
> > > > a median line to each cluster?
> > > > This is the working example:
> > > >
> > > > ```
> > > > Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
> > > >             "A9", "A9", "A9", "H1", "H1",
> > > >             "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1", "P1", 
> > > > "P1",
> > > >             "P2", "P2", "P2", "P3",
> > > >             "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5", "P7", 
> > > > "P7",
> > > >             "P7", "A0", "A0", "A0",
> > > >             "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9", "A9", 
> > > > "H1",
> > > >             "H1", "H1", "H2", "H2",
> > > >             "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2", "P2", 
> > > > "P2",
> > > >             "P3", "P3", "P3", "P4",
> > > >             "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7") Group
> > > > = rep(c("Normal", "Tumour",  "Metastasis" ), 26) Taxon =
> > > > c(rep("Microviridae", 39), rep("Caudovirales", 39))
> > > > Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4,  87, 
> > > > 7,
> > > >                16,  13,  22,  47,  12,   1,
> > > >                 5, 251,   4,   8,   4,   2,  14,   4,   2,  10,   4,
> > 4,
> > > >                13,   1,   1,   5,   7,   2,   6,   6,   4,   1,   2,
> > 1,
> > > >                2,   1,   2,   0,   0,   2,   0,   0,   1,   0,   0, 
> > > > 0,
> > > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
> > > > 0,
> > > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
> > > > 0)
> > > > df = data.frame(Sample, Group, Taxon, Aboundance,
> > > >                 stringsAsFactors = FALSE)
> > > > library(lattice)
> > > > stripplot(
> > > >   Aboundance ~ Taxon|Group,
> > > >   df,
> > > >   groups = Taxon,
> > > >   scales=list(y=list(log=T)),
> > > >   pch=16,  cex = 1.5,
> > > >   ylab = expression(bold("Number of taxons")),
> > > >   jitter.data = TRUE,
> > > >   layout=c(3,1),
> > > >   col = "black",
> > > >   # colour panels differently
> > > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > > >                                                 "darkolivegreen3",
> > > > "brown3"))),
> > > >   strip = function(..., bg) {
> > > >     strip.default(...,
> > > >                   bg =
> > > > trellis.par.get("strip.background")$col[which.packet()])
> > > >   },
> > > >   # add median bar
> > > > )
> > > > ```
> > > >
> > > > Thank you
> > > > --
> > > > Best regards,
> > > > Luigi
> > > >
> > > > ______________________________________________
> > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > PLEASE do read the posting guide
> > > > http://www.R-project.org/posting-guide.html
> > > > and provide commented, minimal, self-contained, reproducible code.
> > > >
> > >
> > >       [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide http://www.R-project.org/posting-
> > > guide.html and provide commented, minimal, self-contained,
> > > reproducible code.
>
>
>
> --
> Best regards,
> Luigi

From m@rong|u@|u|g| @end|ng |rom gm@||@com  Fri Oct 25 13:32:38 2019
From: m@rong|u@|u|g| @end|ng |rom gm@||@com (Luigi Marongiu)
Date: Fri, 25 Oct 2019 13:32:38 +0200
Subject: [R] R lattice stripplot add median line to data
In-Reply-To: <ccf4aa6f861241c3a80d97bfb1c69543@SRVEXCHCM1301.precheza.cz>
References: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
 <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>
 <76beef35061e4c1dacc0a60671a7a7cd@SRVEXCHCM1301.precheza.cz>
 <CAMk+s2Tx6tZ7NVYryqSxnrFwSxZ85neN01XGE7C6Qk46MHCosA@mail.gmail.com>
 <ccf4aa6f861241c3a80d97bfb1c69543@SRVEXCHCM1301.precheza.cz>
Message-ID: <CAMk+s2QuHBvqk1oZeyrH9++K2qKBj7r2Z9KKc0utDsF863Tmig@mail.gmail.com>

Ops, yes now it works. But again it gives a single value for each
class (normal, tumour, metastasis).

On Fri, Oct 25, 2019 at 1:27 PM PIKAL Petr <petr.pikal at precheza.cz> wrote:
>
> Hi
>
> > This essentially has transformed the stripplot into a boxplot...
>
> NO
>
> I wrote:
>
> ***after*** your lattice plot just do...
>
> and I ment issue addLine after the stripplot is plotted.
>
> So first
> > > > > stripplot(
> > > > >   Aboundance ~ Taxon|Group,
> > > > >   df,
> > > > >   groups = Taxon,
> > > > >   scales=list(y=list(log=T)),
> > > > >   pch=16,  cex = 1.5,
> > > > >   ylab = expression(bold("Number of taxons")),
> > > > >   jitter.data = TRUE,
> > > > >   layout=c(3,1),
> > > > >   col = "black",
> > > > >   # colour panels differently
> > > > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > > > >                                                 "darkolivegreen3",
> > > > > "brown3"))),
> > > > >   strip = function(..., bg) {
> > > > >     strip.default(...,
> > > > >                   bg =
> > > > > trellis.par.get("strip.background")$col[which.packet()])
> > > > >   },
> > > > >   # add median bar
> > > > > )
>
> than
>
> addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)
>
> Cheers
> Petr
>
> > -----Original Message-----
> > From: Luigi Marongiu <marongiu.luigi at gmail.com>
> > Sent: Friday, October 25, 2019 11:24 AM
> > To: PIKAL Petr <petr.pikal at precheza.cz>
> > Cc: Bert Gunter <bgunter.4567 at gmail.com>; r-help <r-help at r-project.org>
> > Subject: Re: [R] R lattice stripplot add median line to data
> >
> > This essentially has transformed the stripplot into a boxplot...
> >
> > On Fri, Oct 25, 2019 at 11:19 AM PIKAL Petr <petr.pikal at precheza.cz> wrote:
> > >
> > > Hi
> > >
> > > I asked similar question few yeas ago (in different context) and besed
> > > on answers I made custom function which adds line after the lattice
> > > graph is plotted.
> > >
> > > after your lattice plot just do
> > >
> > > addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)
> > >
> > > the function is defined as follows
> > >
> > > addLine <- function (a = NULL, b = NULL, v = NULL, h = NULL, ..., once
> > > = F) {
> > >     tcL <- trellis.currentLayout()
> > >     k <- 0
> > >     for (i in 1:nrow(tcL)) for (j in 1:ncol(tcL)) if (tcL[i,
> > >         j] > 0) {
> > >         k <- k + 1
> > >         trellis.focus("panel", j, i, highlight = FALSE)
> > >         if (once)
> > >             panel.abline(a = a[k], b = b[k], v = v[k], h = h[k],
> > >                 ...)
> > >         else panel.abline(a = a, b = b, v = v, h = h, ...)
> > >         trellis.unfocus()
> > >     }
> > >   }
> > >
> > > Cheers
> > > Petr
> > >
> > >
> > >
> > > > -----Original Message-----
> > > > From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert Gunter
> > > > Sent: Thursday, October 24, 2019 6:23 PM
> > > > To: Luigi Marongiu <marongiu.luigi at gmail.com>
> > > > Cc: r-help <r-help at r-project.org>
> > > > Subject: Re: [R] R lattice stripplot add median line to data
> > > >
> > > > Yes, it's possible to do about anything in lattice, but you have to
> > > > learn
> > > how
> > > > to write custom panel functions, which takes some effort. If you
> > > > want to
> > > use
> > > > lattice in this way, you should probably go through Deepayan's book.
> > > >
> > > > Here is one way to do what I think you want. Note that it depends on
> > > > knowing that when the x axis is a factor, the x positions of the y
> > > variables are
> > > > at 1, 2, 3, .. etc (to the number of levels of the factor) to draw
> > > > the
> > > horizontal
> > > > line segments. This is documented somewhere, but I don't remember
> > where.
> > > >
> > > > stripplot(
> > > >    Aboundance ~ Taxon|Group,
> > > >    df,
> > > >    groups = Taxon,
> > > >    scales=list(y=list(log=T)),
> > > >    pch=16,  cex = 1.5,
> > > >    ylab = expression(bold("Number of taxons")),
> > > >    jitter.data = TRUE,
> > > >    layout=c(3,1),
> > > >    col = "black",
> > > >    # colour panels differently
> > > >    par.settings=list(strip.background=list(col=c("darkorchid3",
> > > >                                                  "darkolivegreen3",
> > > "brown3"))),
> > > >    strip = function(...,bg) {
> > > >       strip.default(...,
> > > >                     bg =
> > > > trellis.par.get("strip.background")$col[which.packet()])
> > > >       },
> > > >    panel = function(x,y,...){
> > > >       panel.stripplot(x,y,...)
> > > >       lev <- seq_along(levels(x))
> > > >       meds <- tapply(y,x,median,na.rm = TRUE)
> > > >       for(i in lev)panel.segments(x0 = i-.25, y0 = meds[i], x1 =
> > > > i+.25, y1
> > > = meds[i],
> > > >                   lwd=2,col = "red")
> > > >    }
> > > > )
> > > >
> > > > Cheers,
> > > > Bert
> > > >
> > > > Bert Gunter
> > > >
> > > > "The trouble with having an open mind is that people keep coming
> > > > along and sticking things into it."
> > > > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> > > >
> > > >
> > > > On Thu, Oct 24, 2019 at 2:22 AM Luigi Marongiu
> > > > <marongiu.luigi at gmail.com>
> > > > wrote:
> > > >
> > > > > Dear all,
> > > > > I am plotting data with lattice's stripplot. Is it possible to add
> > > > > a median line to each cluster?
> > > > > This is the working example:
> > > > >
> > > > > ```
> > > > > Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
> > > > >             "A9", "A9", "A9", "H1", "H1",
> > > > >             "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1", "P1",
> > > > > "P1",
> > > > >             "P2", "P2", "P2", "P3",
> > > > >             "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5", "P7",
> > > > > "P7",
> > > > >             "P7", "A0", "A0", "A0",
> > > > >             "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9", "A9",
> > > > > "H1",
> > > > >             "H1", "H1", "H2", "H2",
> > > > >             "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2", "P2",
> > > > > "P2",
> > > > >             "P3", "P3", "P3", "P4",
> > > > >             "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7") Group
> > > > > = rep(c("Normal", "Tumour",  "Metastasis" ), 26) Taxon =
> > > > > c(rep("Microviridae", 39), rep("Caudovirales", 39))
> > > > > Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4,  87,
> > > > > 7,
> > > > >                16,  13,  22,  47,  12,   1,
> > > > >                 5, 251,   4,   8,   4,   2,  14,   4,   2,  10,   4,
> > > 4,
> > > > >                13,   1,   1,   5,   7,   2,   6,   6,   4,   1,   2,
> > > 1,
> > > > >                2,   1,   2,   0,   0,   2,   0,   0,   1,   0,   0,
> > > > > 0,
> > > > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
> > > > > 0,
> > > > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
> > > > > 0)
> > > > > df = data.frame(Sample, Group, Taxon, Aboundance,
> > > > >                 stringsAsFactors = FALSE)
> > > > > library(lattice)
> > > > > stripplot(
> > > > >   Aboundance ~ Taxon|Group,
> > > > >   df,
> > > > >   groups = Taxon,
> > > > >   scales=list(y=list(log=T)),
> > > > >   pch=16,  cex = 1.5,
> > > > >   ylab = expression(bold("Number of taxons")),
> > > > >   jitter.data = TRUE,
> > > > >   layout=c(3,1),
> > > > >   col = "black",
> > > > >   # colour panels differently
> > > > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > > > >                                                 "darkolivegreen3",
> > > > > "brown3"))),
> > > > >   strip = function(..., bg) {
> > > > >     strip.default(...,
> > > > >                   bg =
> > > > > trellis.par.get("strip.background")$col[which.packet()])
> > > > >   },
> > > > >   # add median bar
> > > > > )
> > > > > ```
> > > > >
> > > > > Thank you
> > > > > --
> > > > > Best regards,
> > > > > Luigi
> > > > >
> > > > > ______________________________________________
> > > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > > PLEASE do read the posting guide
> > > > > http://www.R-project.org/posting-guide.html
> > > > > and provide commented, minimal, self-contained, reproducible code.
> > > > >
> > > >
> > > >       [[alternative HTML version deleted]]
> > > >
> > > > ______________________________________________
> > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > PLEASE do read the posting guide http://www.R-project.org/posting-
> > > > guide.html and provide commented, minimal, self-contained,
> > > > reproducible code.
> >
> >
> >
> > --
> > Best regards,
> > Luigi



-- 
Best regards,
Luigi


From petr@p|k@| @end|ng |rom prechez@@cz  Fri Oct 25 14:34:53 2019
From: petr@p|k@| @end|ng |rom prechez@@cz (PIKAL Petr)
Date: Fri, 25 Oct 2019 12:34:53 +0000
Subject: [R] R lattice stripplot add median line to data
In-Reply-To: <CAMk+s2QuHBvqk1oZeyrH9++K2qKBj7r2Z9KKc0utDsF863Tmig@mail.gmail.com>
References: <CAMk+s2TiPssNTM5wMoNJygRAuf1fq_h85CG9Heiefr7FzoTUow@mail.gmail.com>
 <CAGxFJbRKBk_-4fOh37t4G+N6Z+z_KJy+u9YkYAOOH5qqxXCxVQ@mail.gmail.com>
 <76beef35061e4c1dacc0a60671a7a7cd@SRVEXCHCM1301.precheza.cz>
 <CAMk+s2Tx6tZ7NVYryqSxnrFwSxZ85neN01XGE7C6Qk46MHCosA@mail.gmail.com>
 <ccf4aa6f861241c3a80d97bfb1c69543@SRVEXCHCM1301.precheza.cz>
 <CAMk+s2QuHBvqk1oZeyrH9++K2qKBj7r2Z9KKc0utDsF863Tmig@mail.gmail.com>
Message-ID: <ffca0c5bb72845d5b03833aa100ca362@SRVEXCHCM1301.precheza.cz>

Hi

See in line

> -----Original Message-----
> From: Luigi Marongiu <marongiu.luigi at gmail.com>
> Sent: Friday, October 25, 2019 1:33 PM
> To: PIKAL Petr <petr.pikal at precheza.cz>
> Cc: Bert Gunter <bgunter.4567 at gmail.com>; r-help <r-help at r-project.org>
> Subject: Re: [R] R lattice stripplot add median line to data
>
> Ops, yes now it works. But again it gives a single value for each class 
> (normal,
> tumour, metastasis).

And you wanted more lines in each panel? You should not use "once" option in 
the function

addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)
addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, col=2)

and you have function code so you are free to modify it according to your 
needs. Its quite flexible approach, you could modify what to add to which 
panel.

Cheers
Petr





>
> On Fri, Oct 25, 2019 at 1:27 PM PIKAL Petr <petr.pikal at precheza.cz> wrote:
> >
> > Hi
> >
> > > This essentially has transformed the stripplot into a boxplot...
> >
> > NO
> >
> > I wrote:
> >
> > ***after*** your lattice plot just do...
> >
> > and I ment issue addLine after the stripplot is plotted.
> >
> > So first
> > > > > > stripplot(
> > > > > >   Aboundance ~ Taxon|Group,
> > > > > >   df,
> > > > > >   groups = Taxon,
> > > > > >   scales=list(y=list(log=T)),
> > > > > >   pch=16,  cex = 1.5,
> > > > > >   ylab = expression(bold("Number of taxons")),
> > > > > >   jitter.data = TRUE,
> > > > > >   layout=c(3,1),
> > > > > >   col = "black",
> > > > > >   # colour panels differently
> > > > > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > > > > >
> > > > > > "darkolivegreen3", "brown3"))),
> > > > > >   strip = function(..., bg) {
> > > > > >     strip.default(...,
> > > > > >                   bg =
> > > > > > trellis.par.get("strip.background")$col[which.packet()])
> > > > > >   },
> > > > > >   # add median bar
> > > > > > )
> >
> > than
> >
> > addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x, once=T)
> >
> > Cheers
> > Petr
> >
> > > -----Original Message-----
> > > From: Luigi Marongiu <marongiu.luigi at gmail.com>
> > > Sent: Friday, October 25, 2019 11:24 AM
> > > To: PIKAL Petr <petr.pikal at precheza.cz>
> > > Cc: Bert Gunter <bgunter.4567 at gmail.com>; r-help
> > > <r-help at r-project.org>
> > > Subject: Re: [R] R lattice stripplot add median line to data
> > >
> > > This essentially has transformed the stripplot into a boxplot...
> > >
> > > On Fri, Oct 25, 2019 at 11:19 AM PIKAL Petr <petr.pikal at precheza.cz>
> wrote:
> > > >
> > > > Hi
> > > >
> > > > I asked similar question few yeas ago (in different context) and
> > > > besed on answers I made custom function which adds line after the
> > > > lattice graph is plotted.
> > > >
> > > > after your lattice plot just do
> > > >
> > > > addLine(h=aggregate(df$Aboundance, list(df$Group), median)$x,
> > > > once=T)
> > > >
> > > > the function is defined as follows
> > > >
> > > > addLine <- function (a = NULL, b = NULL, v = NULL, h = NULL, ...,
> > > > once = F) {
> > > >     tcL <- trellis.currentLayout()
> > > >     k <- 0
> > > >     for (i in 1:nrow(tcL)) for (j in 1:ncol(tcL)) if (tcL[i,
> > > >         j] > 0) {
> > > >         k <- k + 1
> > > >         trellis.focus("panel", j, i, highlight = FALSE)
> > > >         if (once)
> > > >             panel.abline(a = a[k], b = b[k], v = v[k], h = h[k],
> > > >                 ...)
> > > >         else panel.abline(a = a, b = b, v = v, h = h, ...)
> > > >         trellis.unfocus()
> > > >     }
> > > >   }
> > > >
> > > > Cheers
> > > > Petr
> > > >
> > > >
> > > >
> > > > > -----Original Message-----
> > > > > From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert
> > > > > Gunter
> > > > > Sent: Thursday, October 24, 2019 6:23 PM
> > > > > To: Luigi Marongiu <marongiu.luigi at gmail.com>
> > > > > Cc: r-help <r-help at r-project.org>
> > > > > Subject: Re: [R] R lattice stripplot add median line to data
> > > > >
> > > > > Yes, it's possible to do about anything in lattice, but you have
> > > > > to learn
> > > > how
> > > > > to write custom panel functions, which takes some effort. If you
> > > > > want to
> > > > use
> > > > > lattice in this way, you should probably go through Deepayan's book.
> > > > >
> > > > > Here is one way to do what I think you want. Note that it
> > > > > depends on knowing that when the x axis is a factor, the x
> > > > > positions of the y
> > > > variables are
> > > > > at 1, 2, 3, .. etc (to the number of levels of the factor) to
> > > > > draw the
> > > > horizontal
> > > > > line segments. This is documented somewhere, but I don't
> > > > > remember
> > > where.
> > > > >
> > > > > stripplot(
> > > > >    Aboundance ~ Taxon|Group,
> > > > >    df,
> > > > >    groups = Taxon,
> > > > >    scales=list(y=list(log=T)),
> > > > >    pch=16,  cex = 1.5,
> > > > >    ylab = expression(bold("Number of taxons")),
> > > > >    jitter.data = TRUE,
> > > > >    layout=c(3,1),
> > > > >    col = "black",
> > > > >    # colour panels differently
> > > > >    par.settings=list(strip.background=list(col=c("darkorchid3",
> > > > >
> > > > > "darkolivegreen3",
> > > > "brown3"))),
> > > > >    strip = function(...,bg) {
> > > > >       strip.default(...,
> > > > >                     bg =
> > > > > trellis.par.get("strip.background")$col[which.packet()])
> > > > >       },
> > > > >    panel = function(x,y,...){
> > > > >       panel.stripplot(x,y,...)
> > > > >       lev <- seq_along(levels(x))
> > > > >       meds <- tapply(y,x,median,na.rm = TRUE)
> > > > >       for(i in lev)panel.segments(x0 = i-.25, y0 = meds[i], x1 =
> > > > > i+.25, y1
> > > > = meds[i],
> > > > >                   lwd=2,col = "red")
> > > > >    }
> > > > > )
> > > > >
> > > > > Cheers,
> > > > > Bert
> > > > >
> > > > > Bert Gunter
> > > > >
> > > > > "The trouble with having an open mind is that people keep coming
> > > > > along and sticking things into it."
> > > > > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip
> > > > > )
> > > > >
> > > > >
> > > > > On Thu, Oct 24, 2019 at 2:22 AM Luigi Marongiu
> > > > > <marongiu.luigi at gmail.com>
> > > > > wrote:
> > > > >
> > > > > > Dear all,
> > > > > > I am plotting data with lattice's stripplot. Is it possible to
> > > > > > add a median line to each cluster?
> > > > > > This is the working example:
> > > > > >
> > > > > > ```
> > > > > > Sample =  c("A0", "A0", "A0", "A3", "A3", "A3", "A7", "A7", "A7",
> > > > > >             "A9", "A9", "A9", "H1", "H1",
> > > > > >             "H1", "H2", "H2", "H2", "H3", "H3", "H3", "P1",
> > > > > > "P1", "P1",
> > > > > >             "P2", "P2", "P2", "P3",
> > > > > >             "P3", "P3", "P4", "P4", "P4", "P5", "P5", "P5",
> > > > > > "P7", "P7",
> > > > > >             "P7", "A0", "A0", "A0",
> > > > > >             "A3", "A3", "A3", "A7", "A7", "A7", "A9", "A9",
> > > > > > "A9", "H1",
> > > > > >             "H1", "H1", "H2", "H2",
> > > > > >             "H2", "H3", "H3", "H3", "P1", "P1", "P1", "P2",
> > > > > > "P2", "P2",
> > > > > >             "P3", "P3", "P3", "P4",
> > > > > >             "P4", "P4", "P5", "P5", "P5", "P7", "P7", "P7")
> > > > > > Group = rep(c("Normal", "Tumour",  "Metastasis" ), 26) Taxon =
> > > > > > c(rep("Microviridae", 39), rep("Caudovirales", 39))
> > > > > > Aboundance = c(0, 151,   3,   0, 102, 509,   4,   1, 277,   4, 
> > > > > > 87,
> > > > > > 7,
> > > > > >                16,  13,  22,  47,  12,   1,
> > > > > >                 5, 251,   4,   8,   4,   2,  14,   4,   2,  10, 
> > > > > > 4,
> > > > 4,
> > > > > >                13,   1,   1,   5,   7,   2,   6,   6,   4,   1, 
> > > > > > 2,
> > > > 1,
> > > > > >                2,   1,   2,   0,   0,   2,   0,   0,   1,   0, 
> > > > > > 0,
> > > > > > 0,
> > > > > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
> > > > > > 0,
> > > > > > 0,
> > > > > >                0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 
> > > > > > 0,
> > > > > > 0)
> > > > > > df = data.frame(Sample, Group, Taxon, Aboundance,
> > > > > >                 stringsAsFactors = FALSE)
> > > > > > library(lattice)
> > > > > > stripplot(
> > > > > >   Aboundance ~ Taxon|Group,
> > > > > >   df,
> > > > > >   groups = Taxon,
> > > > > >   scales=list(y=list(log=T)),
> > > > > >   pch=16,  cex = 1.5,
> > > > > >   ylab = expression(bold("Number of taxons")),
> > > > > >   jitter.data = TRUE,
> > > > > >   layout=c(3,1),
> > > > > >   col = "black",
> > > > > >   # colour panels differently
> > > > > >   par.settings=list(strip.background=list(col=c("darkorchid3",
> > > > > >
> > > > > > "darkolivegreen3", "brown3"))),
> > > > > >   strip = function(..., bg) {
> > > > > >     strip.default(...,
> > > > > >                   bg =
> > > > > > trellis.par.get("strip.background")$col[which.packet()])
> > > > > >   },
> > > > > >   # add median bar
> > > > > > )
> > > > > > ```
> > > > > >
> > > > > > Thank you
> > > > > > --
> > > > > > Best regards,
> > > > > > Luigi
> > > > > >
> > > > > > ______________________________________________
> > > > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more,
> > > > > > see https://stat.ethz.ch/mailman/listinfo/r-help
> > > > > > PLEASE do read the posting guide
> > > > > > http://www.R-project.org/posting-guide.html
> > > > > > and provide commented, minimal, self-contained, reproducible
> code.
> > > > > >
> > > > >
> > > > >       [[alternative HTML version deleted]]
> > > > >
> > > > > ______________________________________________
> > > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more,
> > > > > see https://stat.ethz.ch/mailman/listinfo/r-help
> > > > > PLEASE do read the posting guide
> > > > > http://www.R-project.org/posting- guide.html and provide
> > > > > commented, minimal, self-contained, reproducible code.
> > >
> > >
> > >
> > > --
> > > Best regards,
> > > Luigi
>
>
>
> --
> Best regards,
> Luigi

From Seb@@t|en@B|hore| @end|ng |rom cogn|gencorp@com  Fri Oct 25 22:12:27 2019
From: Seb@@t|en@B|hore| @end|ng |rom cogn|gencorp@com (Sebastien Bihorel)
Date: Fri, 25 Oct 2019 20:12:27 +0000
Subject: [R] read.table and NaN
In-Reply-To: <CAGxFJbTe70QZ4W2xPZaVDGzgvUKFJq_22nbZ879kB3yyEJenHA@mail.gmail.com>
References: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
 <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>
 <CH2PR19MB38645EAE6D563B97A9063F7B926A0@CH2PR19MB3864.namprd19.prod.outlook.com>,
 <CAGxFJbTe70QZ4W2xPZaVDGzgvUKFJq_22nbZ879kB3yyEJenHA@mail.gmail.com>
Message-ID: <CH2PR19MB3864566A86ADD07FD16BA715926A0@CH2PR19MB3864.namprd19.prod.outlook.com>

My bad, Bert ?

My point is that my function/framework has very minimal expectations about the source data (mostly, that it is a rectangular shape table of data separated by some separator) and does not have any a-priori knowledge about what the first, second, etc columns in the data files must contain.... so while it would be possible to pass down some class vector which would be passed down as the colClasses argument to read.table, it is not necessarily reasonable in the context of the overall framework.

I guess I was surprised that read.table interprets NaN in an input file as the internal "Not a number" rather than as a string... there is nothing in the ?read.table about that.

Anyways, as I said, I need to think more about this in the context of the framework where this function operates...

Thanks for the input


________________________________
From: Bert Gunter <bgunter.4567 at gmail.com>
Sent: Thursday, October 24, 2019 10:39
To: Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com>
Cc: r-help at r-project.org <r-help at r-project.org>
Subject: Re: [R] read.table and NaN

Not so. Read ?read.table carefully. You can use "NA" as a default. Moreover, you **specified** that you want NaN read as character, which means that any column containing NaN **must** be character. That's part of the specification for data frames (all columns must be one data type). So either change your specfication or change your data structure.

And, incidentally, my first name is "Bert" .

Cheers,
Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Thu, Oct 24, 2019 at 6:43 AM Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com<mailto:Sebastien.Bihorel at cognigencorp.com>> wrote:
Thanks Gunter

It seems that one has to know the structure of the data and adapt the read.table call accordingly. I am working on a framework that is meant to process data files with unknown structure, so I have to think a bit more about that...
________________________________
From: Bert Gunter <bgunter.4567 at gmail.com<mailto:bgunter.4567 at gmail.com>>
Sent: Thursday, October 24, 2019 00:08
To: Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com<mailto:Sebastien.Bihorel at cognigencorp.com>>
Cc: r-help at r-project.org<mailto:r-help at r-project.org> <r-help at r-project.org<mailto:r-help at r-project.org>>
Subject: Re: [R] read.table and NaN

Like this?

con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '', stringsAsFactors = FALSE,
+                   colClasses = c("numeric", "character"))
> close.connection(con)
> tmp
   A   B
1  1 NaN
2 NA   2
> class(tmp[,1])
[1] "numeric"
> class(tmp[,2])
[1] "character"
> tmp[,2]
[1] "NaN" "2"


Bert Gunter

"The trouble with having an open mind is that people keep coming along and sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Wed, Oct 23, 2019 at 6:31 PM Sebastien Bihorel via R-help <r-help at r-project.org<mailto:r-help at r-project.org>> wrote:
Hi,

Is there a way to make read.table consider NaN as a string of characters rather than the internal NaN? Changing the na.strings argument does not seems to have any effect on how R interprets the NaN string (while is does not the the NA string)

con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '', stringsAsFactors = FALSE)
close.connection(con)
tmp
class(tmp[,1])
class(tmp[,2])


______________________________________________
R-help at r-project.org<mailto:R-help at r-project.org> mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Fri Oct 25 22:34:50 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Fri, 25 Oct 2019 13:34:50 -0700
Subject: [R] read.table and NaN
In-Reply-To: <CH2PR19MB3864566A86ADD07FD16BA715926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
References: <CH2PR19MB386419A66F2FD98AAA442845926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
 <CAGxFJbQowh4Wrdubc1KcUAsje7x7WDpWJXjDjanXRkXTsrLwRA@mail.gmail.com>
 <CH2PR19MB38645EAE6D563B97A9063F7B926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
 <CAGxFJbTe70QZ4W2xPZaVDGzgvUKFJq_22nbZ879kB3yyEJenHA@mail.gmail.com>
 <CH2PR19MB3864566A86ADD07FD16BA715926A0@CH2PR19MB3864.namprd19.prod.outlook.com>
Message-ID: <CAGxFJbQ7nTtB7nyz1XRPuKe=4kNr_BeCRV473BH1UeA31p8pxA@mail.gmail.com>

Please read ?is.finite and sections on NA and NaN in The Intro to R and /or
The R Language Definition.

You seem to be engaging in lots of incorrect speculation without first
having ascertained the facts about how these things work.

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Fri, Oct 25, 2019 at 1:12 PM Sebastien Bihorel <
Sebastien.Bihorel at cognigencorp.com> wrote:

> My bad, Bert ?
>
> My point is that my function/framework has very minimal expectations about
> the source data (mostly, that it is a rectangular shape table of data
> separated by some separator) and does not have any a-priori knowledge about
> what the first, second, etc columns in the data files must contain.... so
> while it would be possible to pass down some class vector which would be
> passed down as the colClasses argument to read.table, it is not necessarily
> reasonable in the context of the overall framework.
>
> I guess I was surprised that read.table interprets NaN in an input file as
> the internal "Not a number" rather than as a string... there is nothing in
> the ?read.table about that.
>
> Anyways, as I said, I need to think more about this in the context of the
> framework where this function operates...
>
> Thanks for the input
>
>
> ------------------------------
> *From:* Bert Gunter <bgunter.4567 at gmail.com>
> *Sent:* Thursday, October 24, 2019 10:39
> *To:* Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com>
> *Cc:* r-help at r-project.org <r-help at r-project.org>
> *Subject:* Re: [R] read.table and NaN
>
> Not so. Read ?read.table carefully. You can use "NA" as a default.
> Moreover, you **specified** that you want NaN read as character, which
> means that any column containing NaN **must** be character. That's part of
> the specification for data frames (all columns must be one data type). So
> either change your specfication or change your data structure.
>
> And, incidentally, my first name is "Bert" .
>
> Cheers,
> Bert
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Thu, Oct 24, 2019 at 6:43 AM Sebastien Bihorel <
> Sebastien.Bihorel at cognigencorp.com> wrote:
>
> Thanks Gunter
>
> It seems that one has to know the structure of the data and adapt the
> read.table call accordingly. I am working on a framework that is meant to
> process data files with unknown structure, so I have to think a bit more
> about that...
> ------------------------------
> *From:* Bert Gunter <bgunter.4567 at gmail.com>
> *Sent:* Thursday, October 24, 2019 00:08
> *To:* Sebastien Bihorel <Sebastien.Bihorel at cognigencorp.com>
> *Cc:* r-help at r-project.org <r-help at r-project.org>
> *Subject:* Re: [R] read.table and NaN
>
> Like this?
>
> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> > tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
> stringsAsFactors = FALSE,
> +                   colClasses = c("numeric", "character"))
> > close.connection(con)
> > tmp
>    A   B
> 1  1 NaN
> 2 NA   2
> > class(tmp[,1])
> [1] "numeric"
> > class(tmp[,2])
> [1] "character"
> > tmp[,2]
> [1] "NaN" "2"
>
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Wed, Oct 23, 2019 at 6:31 PM Sebastien Bihorel via R-help <
> r-help at r-project.org> wrote:
>
> Hi,
>
> Is there a way to make read.table consider NaN as a string of characters
> rather than the internal NaN? Changing the na.strings argument does not
> seems to have any effect on how R interprets the NaN string (while is does
> not the the NA string)
>
> con <- textConnection(object = 'A,B\n1,NaN\nNA,2')
> tmp <- read.table(con, header = TRUE, sep = ',', na.strings = '',
> stringsAsFactors = FALSE)
> close.connection(con)
> tmp
> class(tmp[,1])
> class(tmp[,2])
>
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
>

	[[alternative HTML version deleted]]


From robem@rt @end|ng |rom qt|@qu@|comm@com  Fri Oct 25 11:00:35 2019
From: robem@rt @end|ng |rom qt|@qu@|comm@com (Roberto Martinez Caballero)
Date: Fri, 25 Oct 2019 09:00:35 +0000
Subject: [R] Matching Values issue
Message-ID: <CH2PR02MB65065CE84B90ACB94A772AEFE2650@CH2PR02MB6506.namprd02.prod.outlook.com>

A non-text attachment was scrubbed...
Name: issue.PNG
Type: image/png
Size: 26283 bytes
Desc: issue.PNG
URL: <https://stat.ethz.ch/pipermail/r-help/attachments/20191025/a4032774/attachment.png>

From r@turner @end|ng |rom @uck|@nd@@c@nz  Sat Oct 26 00:15:04 2019
From: r@turner @end|ng |rom @uck|@nd@@c@nz (Rolf Turner)
Date: Sat, 26 Oct 2019 11:15:04 +1300
Subject: [R] [FORGED]  Matching Values issue
In-Reply-To: <CH2PR02MB65065CE84B90ACB94A772AEFE2650@CH2PR02MB6506.namprd02.prod.outlook.com>
References: <CH2PR02MB65065CE84B90ACB94A772AEFE2650@CH2PR02MB6506.namprd02.prod.outlook.com>
Message-ID: <e23b60fe-90b1-b1c6-e88c-8e5f8428396d@auckland.ac.nz>


Sigh.  See FAQ 7.31.  (As someone else has remarked on this list, 7.31 
is by far the most frequently asked of all frequently asked questions.)

An aside:  you should seriously consider upgrading your R installation; 
the current version is 3.6.1.

cheers,

Rolf Turner

-- 
Honorary Research Fellow
Department of Statistics
University of Auckland
Phone: +64-9-373-7599 ext. 88276


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Sat Oct 26 01:31:35 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Fri, 25 Oct 2019 18:31:35 -0500
Subject: [R] how to calculate multiple meta p values
Message-ID: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>

Hello,

I would like to use this package metap
to calculate multiple o values

I have my data frame with 3 p values
> head(tt)
          RS            G           E          B
1: rs2089177   0.9986   0.7153   0.604716
2: rs4360974   0.9738   0.7838   0.430228
3: rs6502526   0.9744   0.7839   0.429160
4: rs8069906   0.7184   0.4918   0.521452
5: rs9905280   0.7205   0.4861   0.465758
6: rs4313843   0.9804   0.8522   0.474313

and data frame with corresponding weights for each of the p values
from the tt data frame

> head(df)
       wg       we             wb                RS
1 40.6325 35.39774 580.6436 rs2089177
2 40.6325 35.39774 580.6436 rs4360974
3 40.6325 35.39774 580.6436 rs6502526
4 40.6325 35.39774 580.6436 rs8069906
5 40.6325 35.39774 580.6436 rs9905280
6 40.6325 35.39774 580.6436 rs4313843

RS column is the same in df and tt

How to use this sunz() function to create a new data frame which would
look the same as tt only it would have additional column, say named
"META" which has calculated meta p values for each row

This i s example of how much would be p value in the first row:

> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
p =  0.6940048

Thanks
Ana


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Sat Oct 26 01:32:20 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Fri, 25 Oct 2019 18:32:20 -0500
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
Message-ID: <CAF9-5jM4E+Kt_MWGLK4vfk2r=SUFFinmUq60c9YT-+qC91Soxg@mail.gmail.com>

this is the function I was referring to:
https://www.rdocumentation.org/packages/metap/versions/1.1/topics/sumz

On Fri, Oct 25, 2019 at 6:31 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hello,
>
> I would like to use this package metap
> to calculate multiple o values
>
> I have my data frame with 3 p values
> > head(tt)
>           RS            G           E          B
> 1: rs2089177   0.9986   0.7153   0.604716
> 2: rs4360974   0.9738   0.7838   0.430228
> 3: rs6502526   0.9744   0.7839   0.429160
> 4: rs8069906   0.7184   0.4918   0.521452
> 5: rs9905280   0.7205   0.4861   0.465758
> 6: rs4313843   0.9804   0.8522   0.474313
>
> and data frame with corresponding weights for each of the p values
> from the tt data frame
>
> > head(df)
>        wg       we             wb                RS
> 1 40.6325 35.39774 580.6436 rs2089177
> 2 40.6325 35.39774 580.6436 rs4360974
> 3 40.6325 35.39774 580.6436 rs6502526
> 4 40.6325 35.39774 580.6436 rs8069906
> 5 40.6325 35.39774 580.6436 rs9905280
> 6 40.6325 35.39774 580.6436 rs4313843
>
> RS column is the same in df and tt
>
> How to use this sunz() function to create a new data frame which would
> look the same as tt only it would have additional column, say named
> "META" which has calculated meta p values for each row
>
> This i s example of how much would be p value in the first row:
>
> > sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
> p =  0.6940048
>
> Thanks
> Ana


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Sat Oct 26 08:06:17 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Sat, 26 Oct 2019 07:06:17 +0100
Subject: [R] Matching Values issue
In-Reply-To: <CH2PR02MB65065CE84B90ACB94A772AEFE2650@CH2PR02MB6506.namprd02.prod.outlook.com>
References: <CH2PR02MB65065CE84B90ACB94A772AEFE2650@CH2PR02MB6506.namprd02.prod.outlook.com>
Message-ID: <900b31a4-9d8e-bdef-292d-448b596942f6@sapo.pt>

Hello,

That's a floating-point issue.
See FAQ 7.31.
See also [1], [2] and the links therein.

[1] 
https://stackoverflow.com/questions/9508518/why-are-these-numbers-not-equal
[2] https://stackoverflow.com/questions/588004/is-floating-point-math-broken


Hope this helps,

Rui Barradas

?s 10:00 de 25/10/19, Roberto Martinez Caballero escreveu:
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From @pr||ett|ngton @end|ng |rom gm@||@com  Sat Oct 26 12:50:35 2019
From: @pr||ett|ngton @end|ng |rom gm@||@com (April Ettington)
Date: Sat, 26 Oct 2019 23:50:35 +1300
Subject: [R] ggpubr: order of non-numeric x-axis items
Message-ID: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>

Hi,

When I use ggpubr with an x-axis utilizing descriptive categories (eg. bar
chart for different colors of car), it sorts all of the labels
alphabetically.  Is there a way to change this so it shows in the order I
want?

Thanks,

April

	[[alternative HTML version deleted]]


From m@|one @end|ng |rom m@|onequ@nt|t@t|ve@com  Sat Oct 26 15:08:55 2019
From: m@|one @end|ng |rom m@|onequ@nt|t@t|ve@com (Patrick (Malone Quantitative))
Date: Sat, 26 Oct 2019 09:08:55 -0400
Subject: [R] ggpubr: order of non-numeric x-axis items
In-Reply-To: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>
References: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>
Message-ID: <CAJc=yOEV1ObA3XuwiT-Z_LP_UCfKs76eBYopfNxUPp4svRtLEw@mail.gmail.com>

Try using relevel() to organize the categories in your factor in the
desired order. You may need to use relevel(as.factor()) .

On Sat, Oct 26, 2019 at 6:51 AM April Ettington
<aprilettington at gmail.com> wrote:
>
> Hi,
>
> When I use ggpubr with an x-axis utilizing descriptive categories (eg. bar
> chart for different colors of car), it sorts all of the labels
> alphabetically.  Is there a way to change this so it shows in the order I
> want?
>
> Thanks,
>
> April
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bgunter@4567 @end|ng |rom gm@||@com  Sat Oct 26 16:51:34 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sat, 26 Oct 2019 07:51:34 -0700
Subject: [R] ggpubr: order of non-numeric x-axis items
In-Reply-To: <CAJc=yOEV1ObA3XuwiT-Z_LP_UCfKs76eBYopfNxUPp4svRtLEw@mail.gmail.com>
References: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>
 <CAJc=yOEV1ObA3XuwiT-Z_LP_UCfKs76eBYopfNxUPp4svRtLEw@mail.gmail.com>
Message-ID: <CAGxFJbRxr-Cvg2zFr5xnV6rUE_0ANUUq8So3=RQKyU2-E4OmYw@mail.gmail.com>

No. relevel() only changes the order in one specific way. Use `levels<-`()
to reorder in a general way:

> z <- factor(rep(letters[3:1],2))
> z
[1] c b a c b a
Levels: a b c
> z <-relevel(z, ref = "c")
> z
[1] c b a c b a
Levels: c a b
> levels(z)<- c("c","b","a")
> z
[1] c a b c a b
Levels: c b a

Cheers,
Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sat, Oct 26, 2019 at 6:09 AM Patrick (Malone Quantitative) <
malone at malonequantitative.com> wrote:

> Try using relevel() to organize the categories in your factor in the
> desired order. You may need to use relevel(as.factor()) .
>
> On Sat, Oct 26, 2019 at 6:51 AM April Ettington
> <aprilettington at gmail.com> wrote:
> >
> > Hi,
> >
> > When I use ggpubr with an x-axis utilizing descriptive categories (eg.
> bar
> > chart for different colors of car), it sorts all of the labels
> > alphabetically.  Is there a way to change this so it shows in the order I
> > want?
> >
> > Thanks,
> >
> > April
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From deep@y@n@@@rk@r @end|ng |rom gm@||@com  Sat Oct 26 17:55:32 2019
From: deep@y@n@@@rk@r @end|ng |rom gm@||@com (Deepayan Sarkar)
Date: Sat, 26 Oct 2019 21:25:32 +0530
Subject: [R] ggpubr: order of non-numeric x-axis items
In-Reply-To: <CAGxFJbRxr-Cvg2zFr5xnV6rUE_0ANUUq8So3=RQKyU2-E4OmYw@mail.gmail.com>
References: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>
 <CAJc=yOEV1ObA3XuwiT-Z_LP_UCfKs76eBYopfNxUPp4svRtLEw@mail.gmail.com>
 <CAGxFJbRxr-Cvg2zFr5xnV6rUE_0ANUUq8So3=RQKyU2-E4OmYw@mail.gmail.com>
Message-ID: <CADfFDC56DyG__Jdq+CCNZke7ZcJGwYaVsxetoO8TjPMkBhfqCg@mail.gmail.com>

On Sat, Oct 26, 2019 at 8:22 PM Bert Gunter <bgunter.4567 at gmail.com> wrote:
>
> No. relevel() only changes the order in one specific way. Use `levels<-`()
> to reorder in a general way:
>
> > z <- factor(rep(letters[3:1],2))
> > z
> [1] c b a c b a
> Levels: a b c
> > z <-relevel(z, ref = "c")
> > z
> [1] c b a c b a
> Levels: c a b
> > levels(z)<- c("c","b","a")
> > z
> [1] c a b c a b
> Levels: c b a

No, that changes the data, not just the order of the levels; "b" and
"a" have been switched.

You need some version of

> factor(z, levels = c("c", "a", "b"))
[1] c b a c b a

See also ?reorder for a useful way of reordering the levels,
especially in plots.

-Deepayan

> Cheers,
> Bert
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Sat, Oct 26, 2019 at 6:09 AM Patrick (Malone Quantitative) <
> malone at malonequantitative.com> wrote:
>
> > Try using relevel() to organize the categories in your factor in the
> > desired order. You may need to use relevel(as.factor()) .
> >
> > On Sat, Oct 26, 2019 at 6:51 AM April Ettington
> > <aprilettington at gmail.com> wrote:
> > >
> > > Hi,
> > >
> > > When I use ggpubr with an x-axis utilizing descriptive categories (eg.
> > bar
> > > chart for different colors of car), it sorts all of the labels
> > > alphabetically.  Is there a way to change this so it shows in the order I
> > > want?
> > >
> > > Thanks,
> > >
> > > April
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From m@|one @end|ng |rom m@|onequ@nt|t@t|ve@com  Sat Oct 26 19:18:15 2019
From: m@|one @end|ng |rom m@|onequ@nt|t@t|ve@com (Patrick (Malone Quantitative))
Date: Sat, 26 Oct 2019 13:18:15 -0400
Subject: [R] ggpubr: order of non-numeric x-axis items
In-Reply-To: <CADfFDC56DyG__Jdq+CCNZke7ZcJGwYaVsxetoO8TjPMkBhfqCg@mail.gmail.com>
References: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>
 <CAJc=yOEV1ObA3XuwiT-Z_LP_UCfKs76eBYopfNxUPp4svRtLEw@mail.gmail.com>
 <CAGxFJbRxr-Cvg2zFr5xnV6rUE_0ANUUq8So3=RQKyU2-E4OmYw@mail.gmail.com>
 <CADfFDC56DyG__Jdq+CCNZke7ZcJGwYaVsxetoO8TjPMkBhfqCg@mail.gmail.com>
Message-ID: <CAJc=yOFLTM02Vp1+FfGx_JCMrP+mOHiXNUUgiwAp3VFktp2GnQ@mail.gmail.com>

Thanks, both of you.

On Sat, Oct 26, 2019 at 11:55 AM Deepayan Sarkar
<deepayan.sarkar at gmail.com> wrote:
>
> On Sat, Oct 26, 2019 at 8:22 PM Bert Gunter <bgunter.4567 at gmail.com> wrote:
> >
> > No. relevel() only changes the order in one specific way. Use `levels<-`()
> > to reorder in a general way:
> >
> > > z <- factor(rep(letters[3:1],2))
> > > z
> > [1] c b a c b a
> > Levels: a b c
> > > z <-relevel(z, ref = "c")
> > > z
> > [1] c b a c b a
> > Levels: c a b
> > > levels(z)<- c("c","b","a")
> > > z
> > [1] c a b c a b
> > Levels: c b a
>
> No, that changes the data, not just the order of the levels; "b" and
> "a" have been switched.
>
> You need some version of
>
> > factor(z, levels = c("c", "a", "b"))
> [1] c b a c b a
>
> See also ?reorder for a useful way of reordering the levels,
> especially in plots.
>
> -Deepayan
>
> > Cheers,
> > Bert
> >
> > Bert Gunter
> >
> > "The trouble with having an open mind is that people keep coming along and
> > sticking things into it."
> > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> >
> >
> > On Sat, Oct 26, 2019 at 6:09 AM Patrick (Malone Quantitative) <
> > malone at malonequantitative.com> wrote:
> >
> > > Try using relevel() to organize the categories in your factor in the
> > > desired order. You may need to use relevel(as.factor()) .
> > >
> > > On Sat, Oct 26, 2019 at 6:51 AM April Ettington
> > > <aprilettington at gmail.com> wrote:
> > > >
> > > > Hi,
> > > >
> > > > When I use ggpubr with an x-axis utilizing descriptive categories (eg.
> > > bar
> > > > chart for different colors of car), it sorts all of the labels
> > > > alphabetically.  Is there a way to change this so it shows in the order I
> > > > want?
> > > >
> > > > Thanks,
> > > >
> > > > April
> > > >
> > > >         [[alternative HTML version deleted]]
> > > >
> > > > ______________________________________________
> > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > > and provide commented, minimal, self-contained, reproducible code.
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.


From bgunter@4567 @end|ng |rom gm@||@com  Sat Oct 26 19:35:41 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Sat, 26 Oct 2019 10:35:41 -0700
Subject: [R] ggpubr: order of non-numeric x-axis items
In-Reply-To: <CADfFDC56DyG__Jdq+CCNZke7ZcJGwYaVsxetoO8TjPMkBhfqCg@mail.gmail.com>
References: <CAE9tUWepygoEJUBQuFrboSL1mH17QDOnu6HWuOrpYNfpOT0CKw@mail.gmail.com>
 <CAJc=yOEV1ObA3XuwiT-Z_LP_UCfKs76eBYopfNxUPp4svRtLEw@mail.gmail.com>
 <CAGxFJbRxr-Cvg2zFr5xnV6rUE_0ANUUq8So3=RQKyU2-E4OmYw@mail.gmail.com>
 <CADfFDC56DyG__Jdq+CCNZke7ZcJGwYaVsxetoO8TjPMkBhfqCg@mail.gmail.com>
Message-ID: <CAGxFJbSsihmYMjvTDEdbSzYhEA9P-M4_dsGhxg3DkQVDmm=4rQ@mail.gmail.com>

Yes , thanks Deepayan. Darn! -- I've committed this error in the past,
also, but keep forgetting. Sigh... the aging brain.

-- Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Sat, Oct 26, 2019 at 8:55 AM Deepayan Sarkar <deepayan.sarkar at gmail.com>
wrote:

> On Sat, Oct 26, 2019 at 8:22 PM Bert Gunter <bgunter.4567 at gmail.com>
> wrote:
> >
> > No. relevel() only changes the order in one specific way. Use
> `levels<-`()
> > to reorder in a general way:
> >
> > > z <- factor(rep(letters[3:1],2))
> > > z
> > [1] c b a c b a
> > Levels: a b c
> > > z <-relevel(z, ref = "c")
> > > z
> > [1] c b a c b a
> > Levels: c a b
> > > levels(z)<- c("c","b","a")
> > > z
> > [1] c a b c a b
> > Levels: c b a
>
> No, that changes the data, not just the order of the levels; "b" and
> "a" have been switched.
>
> You need some version of
>
> > factor(z, levels = c("c", "a", "b"))
> [1] c b a c b a
>
> See also ?reorder for a useful way of reordering the levels,
> especially in plots.
>
> -Deepayan
>
> > Cheers,
> > Bert
> >
> > Bert Gunter
> >
> > "The trouble with having an open mind is that people keep coming along
> and
> > sticking things into it."
> > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> >
> >
> > On Sat, Oct 26, 2019 at 6:09 AM Patrick (Malone Quantitative) <
> > malone at malonequantitative.com> wrote:
> >
> > > Try using relevel() to organize the categories in your factor in the
> > > desired order. You may need to use relevel(as.factor()) .
> > >
> > > On Sat, Oct 26, 2019 at 6:51 AM April Ettington
> > > <aprilettington at gmail.com> wrote:
> > > >
> > > > Hi,
> > > >
> > > > When I use ggpubr with an x-axis utilizing descriptive categories
> (eg.
> > > bar
> > > > chart for different colors of car), it sorts all of the labels
> > > > alphabetically.  Is there a way to change this so it shows in the
> order I
> > > > want?
> > > >
> > > > Thanks,
> > > >
> > > > April
> > > >
> > > >         [[alternative HTML version deleted]]
> > > >
> > > > ______________________________________________
> > > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > > and provide commented, minimal, self-contained, reproducible code.
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > >
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From ||ndbrook @end|ng |rom gm@||@com  Tue Oct 22 19:39:11 2019
From: ||ndbrook @end|ng |rom gm@||@com (Peter Li)
Date: Tue, 22 Oct 2019 10:39:11 -0700
Subject: [R] [R-pkgs] packageRank (v.0.3.0) update
Message-ID: <CAEX8acpSjAF+kHuEh7nk5fGyYFX_OdGF3OWW3X0xYy_RQpeNeg@mail.gmail.com>

packageRank: compute and visualize package download counts and rank
percentiles

* compute and visualize the counts and ranks (nominal and percentile) of
downloads from RStudio's CRAN mirror and Bioconductor.
* compute and visualize a package's position in the overall distribution of
download counts for a given day (cross-sectionally) or over time
(longitudinally).
* compute and visualize the downloads of the R application.

CRAN: https://cran.r-project.org/package=packageRank
GitHub: https://github.com/lindbrook/packageRank

	[[alternative HTML version deleted]]

_______________________________________________
R-packages mailing list
R-packages at r-project.org
https://stat.ethz.ch/mailman/listinfo/r-packages


From b@b@hehu0 @end|ng |rom gm@||@com  Fri Oct 25 11:30:27 2019
From: b@b@hehu0 @end|ng |rom gm@||@com (basiru shehu)
Date: Fri, 25 Oct 2019 10:30:27 +0100
Subject: [R] Assistant
Message-ID: <CANjx9L+0GQV5oyoATnSikewQKEgcSyO2Y7rduZVu=jHP4-XncA@mail.gmail.com>

I am Basiru Shehu by name, wishing to conduct my research base on the
multivariate Behrems Fisher problems, please I need your help with a manual
that I can use to analyse the data using R. Thanks so much.

	[[alternative HTML version deleted]]


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Sun Oct 27 15:49:40 2019
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Sun, 27 Oct 2019 14:49:40 +0000
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
Message-ID: <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>

Dear Ana

There must be several ways of doing this but see below for an idea with 
comments in-line.

On 26/10/2019 00:31, Ana Marija wrote:
> Hello,
> 
> I would like to use this package metap
> to calculate multiple o values
> 
> I have my data frame with 3 p values
>> head(tt)
>            RS            G           E          B
> 1: rs2089177   0.9986   0.7153   0.604716
> 2: rs4360974   0.9738   0.7838   0.430228
> 3: rs6502526   0.9744   0.7839   0.429160
> 4: rs8069906   0.7184   0.4918   0.521452
> 5: rs9905280   0.7205   0.4861   0.465758
> 6: rs4313843   0.9804   0.8522   0.474313
> 
> and data frame with corresponding weights for each of the p values
> from the tt data frame
> 
>> head(df)
>         wg       we             wb                RS
> 1 40.6325 35.39774 580.6436 rs2089177
> 2 40.6325 35.39774 580.6436 rs4360974
> 3 40.6325 35.39774 580.6436 rs6502526
> 4 40.6325 35.39774 580.6436 rs8069906
> 5 40.6325 35.39774 580.6436 rs9905280
> 6 40.6325 35.39774 580.6436 rs4313843
> 
> RS column is the same in df and tt
> 

So you can create a new data-frame with merge()

newdata <- merge(tt, df)

which will use RS as the key to merge them on.

The write a function of one argument, a seven element vector, which 
picks out the p-values and the weights and feeds them to sumz(). 
Something like

helper <- function(x) {
  p <- sumz(x[2:4], weights = x[5:7])$p
  p
}
Note you need to check that 2:4 and 5:7 are actually where they are in 
the row of newdat.

Then use apply() to apply that to the rows of newdat.

I have not tested any of this but the general idea should be OK even if 
the details are wrong.

Michael


> How to use this sunz() function to create a new data frame which would
> look the same as tt only it would have additional column, say named
> "META" which has calculated meta p values for each row
> 
> This i s example of how much would be p value in the first row:
> 
>> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
> p =  0.6940048
> 
> Thanks
> Ana
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 

-- 
Michael
http://www.dewey.myzen.co.uk/home.html


From bend|x@c@r@ten@en @end|ng |rom reg|onh@dk  Sun Oct 27 12:22:56 2019
From: bend|x@c@r@ten@en @end|ng |rom reg|onh@dk (Bendix Carstensen)
Date: Sun, 27 Oct 2019 11:22:56 +0000
Subject: [R] ggpubr: order of non-numeric x-axis items
Message-ID: <AM6PR08MB431278EBEF2A85CFE86BE6B89D670@AM6PR08MB4312.eurprd08.prod.outlook.com>

In the Epi package is a function, Relevel  (note the capital R), that does general reordering and combination of factor levels.
Bendix Carstensen
maintainer of Epi

From tr@xp|@yer @end|ng |rom gm@||@com  Mon Oct 28 00:01:40 2019
From: tr@xp|@yer @end|ng |rom gm@||@com (=?UTF-8?Q?Martin_M=C3=B8ller_Skarbiniks_Pedersen?=)
Date: Mon, 28 Oct 2019 00:01:40 +0100
Subject: [R] Conversion from python to R - log-problem
Message-ID: <CAGAA5befhtxk47HD8jsyYHHKxR5hWmqM0XJLLoq2idDNiZa2MA@mail.gmail.com>

Hi,
  I am trying to convert a small python computation to R but my R version
gets the wrong result.

The python code:
import math import log
x = log(2)
for i in range(3,7):
   x = log(i)**x
print(x)
3.14157738716919

My R-version:
x <- log10(2)
for (i in 3:6) {
    x <- log10(i)**x
}
print(x)
[1] 0.8207096

=

range(3,7) (Python) is the same as 3:6 (R)
log() (Python) is the same as log10 (R)

What can be wrong?

Regards
Martin M. S. Pedersen

ps. I hope this is plain text without any HTML.

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Mon Oct 28 00:15:43 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Sun, 27 Oct 2019 19:15:43 -0400
Subject: [R] Conversion from python to R - log-problem
In-Reply-To: <CAGAA5befhtxk47HD8jsyYHHKxR5hWmqM0XJLLoq2idDNiZa2MA@mail.gmail.com>
References: <CAGAA5befhtxk47HD8jsyYHHKxR5hWmqM0XJLLoq2idDNiZa2MA@mail.gmail.com>
Message-ID: <63041b57-b334-d459-d53a-e4da23ef3da5@gmail.com>

On 27/10/2019 7:01 p.m., Martin M?ller Skarbiniks Pedersen wrote:
> Hi,
>    I am trying to convert a small python computation to R but my R version
> gets the wrong result.

You are using log10() in R, when you should be using log().

> 
> The python code:
> import math import log
> x = log(2)
> for i in range(3,7):
>     x = log(i)**x
> print(x)
> 3.14157738716919
> 
> My R-version:
> x <- log10(2)
> for (i in 3:6) {
>      x <- log10(i)**x
> }
> print(x)
> [1] 0.8207096
> 
> =
> 
> range(3,7) (Python) is the same as 3:6 (R)
> log() (Python) is the same as log10 (R)
> 
> What can be wrong?
> 
> Regards
> Martin M. S. Pedersen
> 
> ps. I hope this is plain text without any HTML.

Nope!  But it was readable anyway.


> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Oct 28 01:34:18 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Sun, 27 Oct 2019 17:34:18 -0700
Subject: [R] Assistant
In-Reply-To: <CANjx9L+0GQV5oyoATnSikewQKEgcSyO2Y7rduZVu=jHP4-XncA@mail.gmail.com>
References: <CANjx9L+0GQV5oyoATnSikewQKEgcSyO2Y7rduZVu=jHP4-XncA@mail.gmail.com>
Message-ID: <c05b5318-6c24-829a-36ba-d34dfa4207e9@comcast.net>

I thought this text was pretty useful:

https://www.amazon.com/Introduction-Scientific-Programming-Simulation-Chapman/dp/1420068725


-- 

David

On 10/25/19 2:30 AM, basiru shehu wrote:
> I am Basiru Shehu by name, wishing to conduct my research base on the
> multivariate Behrems Fisher problems, please I need your help with a manual
> that I can use to analyse the data using R. Thanks so much.
>
> 	[[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From wjm1 @end|ng |rom c@@@co|umb|@@edu  Mon Oct 28 06:00:47 2019
From: wjm1 @end|ng |rom c@@@co|umb|@@edu (William Michels)
Date: Sun, 27 Oct 2019 22:00:47 -0700
Subject: [R] If Loop I Think
In-Reply-To: <CAA99HCy-WEDFJoG+Yh6Pi-JX5kWuhgZ5HTOWg+JEoUG2EP+gjQ@mail.gmail.com>
References: <579C376B2C8742968B024D2E8B1EF79D@OWNERPC>
 <CA+8X3fWiTja7Qf0GMG9tFw91ujwWj-=XCbZwQr264RoNUhxA-Q@mail.gmail.com>
 <93ec5c3b439141ff85f3a400afe618c9@SRVEXCHCM1302.precheza.cz>
 <CAA99HCy-WEDFJoG+Yh6Pi-JX5kWuhgZ5HTOWg+JEoUG2EP+gjQ@mail.gmail.com>
Message-ID: <CAA99HCxWT-1ys2zOjhaBiyHzTOtdLXPLgDvtC8jHj8bUnkT0zQ@mail.gmail.com>

Hi Phillip,

I wanted to follow up with you regarding your earlier post. Below is a
different way to work up your data than I posted earlier.

I took the baseball data you posted, stripped out
leading-and-following blank lines, removed all trailing spaces on each
line, and removed the "R1", "R2" and "R3" column names, since they're
blank columns anyway. I then read this text file ("diamond2.txt") into
R using the read.table() call below. Note the use of the sep=" "
parameter--it is very important to include this parameter when
analyzing your dataset in R, as it is not the default setting. I was
then able to generate the "R1", "R2", "R3" columns you sought, using
apply() with anonymous functions:

> testAD <- read.table("diamond2.txt", header=T, sep=" ", na.strings="", fill=T, row.names=NULL, stringsAsFactors=F)
> testAD$R1=rep(NA, 14)
> testAD$R2=rep(NA, 14)
> testAD$R3=rep(NA, 14)
> testAD[ ,c(6:8)] <- apply(testAD[ ,c(3:5)], 2, FUN=function(x) {ifelse(test=nchar(x), yes=1, no=0)} )
> testAD[ ,c(6:8)] <- apply(testAD[ ,c(6:8)], 2, FUN=function(x) {ifelse(test=!is.na(x), yes=x, no=0)} )
> testAD
   Row Outs RunnerFirst RunnerSecond RunnerThird R1 R2 R3
1    1    0        <NA>         <NA>        <NA>  0  0  0
2    2    1        <NA>         <NA>        <NA>  0  0  0
3    3    1        <NA>         <NA>        <NA>  0  0  0
4    4    1    arenn001         <NA>        <NA>  1  0  0
5    5    2    arenn001         <NA>        <NA>  1  0  0
6    6    0        <NA>         <NA>        <NA>  0  0  0
7    7    0    perad001         <NA>        <NA>  1  0  0
8    8    0    polla001     perad001        <NA>  1  1  0
9    9    0    goldp001     polla001    perad001  1  1  1
10  10    0        <NA>     lambj001    goldp001  0  1  1
11  11    1        <NA>     lambj001    goldp001  0  1  1
12  12    2        <NA>         <NA>    lambj001  0  0  1
13  13    0        <NA>         <NA>        <NA>  0  0  0
14  14    1        <NA>         <NA>        <NA>  0  0  0
>

HTH,

Bill.

W. Michels, Ph.D.


On Thu, Oct 24, 2019 at 12:44 PM William Michels <wjm1 at caa.columbia.edu> wrote:
>
> Hi Phillip,


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Mon Oct 28 20:06:25 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Mon, 28 Oct 2019 14:06:25 -0500
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
 <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>
Message-ID: <CAF9-5jNmXkq8hpvi68O6uhKt_Z0NsKg3FBeAWB1xkHkkd1nffQ@mail.gmail.com>

Hi Michael,

I tried what you proposed with my data frame q:

> head(q)
           ID                P             G              E
 wb          wg           we
1:  rs1029830 0.0979931 0.0054060 0.39160 580.6436 40.6325 35.39774
2:  rs1029832 0.1501820 0.0028140 0.39320 580.6436 40.6325 35.39774
3: rs11078374 0.1701250 0.0009805 0.49730 580.6436 40.6325 35.39774
4:  rs1124961 0.1710150 0.7252000 0.05737 580.6436 40.6325 35.39774
5:  rs1135237 0.1493650 0.6851000 0.06354 580.6436 40.6325 35.39774
6: rs11867934 0.0757972 0.0006140 0.00327 580.6436 40.6325 35.39774

so the solution of the first row would be this:
> sumz(c(0.0979931,0.0054060,0.39160), weights = c(580.6436,40.6325,35.39774), na.action = na.fail)
sumz =  1.481833 p =  0.06919239

I tried applying the function you wrote:
helper <- function(x) {
  p <- sumz(x[2:4], weights = x[5:7])$p
  p
}

With:

q$META <- apply(q, MARGIN = 1, helper)

# I want to make a new column in q named META with results
but I got this error:
 Error in sumz(x[2:4], weights = x[5:7]) :
  Must have at least two valid p values

Please advise,
Ana

On Sun, Oct 27, 2019 at 9:49 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
>
> Dear Ana
>
> There must be several ways of doing this but see below for an idea with
> comments in-line.
>
> On 26/10/2019 00:31, Ana Marija wrote:
> > Hello,
> >
> > I would like to use this package metap
> > to calculate multiple o values
> >
> > I have my data frame with 3 p values
> >> head(tt)
> >            RS            G           E          B
> > 1: rs2089177   0.9986   0.7153   0.604716
> > 2: rs4360974   0.9738   0.7838   0.430228
> > 3: rs6502526   0.9744   0.7839   0.429160
> > 4: rs8069906   0.7184   0.4918   0.521452
> > 5: rs9905280   0.7205   0.4861   0.465758
> > 6: rs4313843   0.9804   0.8522   0.474313
> >
> > and data frame with corresponding weights for each of the p values
> > from the tt data frame
> >
> >> head(df)
> >         wg       we             wb                RS
> > 1 40.6325 35.39774 580.6436 rs2089177
> > 2 40.6325 35.39774 580.6436 rs4360974
> > 3 40.6325 35.39774 580.6436 rs6502526
> > 4 40.6325 35.39774 580.6436 rs8069906
> > 5 40.6325 35.39774 580.6436 rs9905280
> > 6 40.6325 35.39774 580.6436 rs4313843
> >
> > RS column is the same in df and tt
> >
>
> So you can create a new data-frame with merge()
>
> newdata <- merge(tt, df)
>
> which will use RS as the key to merge them on.
>
> The write a function of one argument, a seven element vector, which
> picks out the p-values and the weights and feeds them to sumz().
> Something like
>
> helper <- function(x) {
>   p <- sumz(x[2:4], weights = x[5:7])$p
>   p
> }
> Note you need to check that 2:4 and 5:7 are actually where they are in
> the row of newdat.
>
> Then use apply() to apply that to the rows of newdat.
>
> I have not tested any of this but the general idea should be OK even if
> the details are wrong.
>
> Michael
>
>
> > How to use this sunz() function to create a new data frame which would
> > look the same as tt only it would have additional column, say named
> > "META" which has calculated meta p values for each row
> >
> > This i s example of how much would be p value in the first row:
> >
> >> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
> > p =  0.6940048
> >
> > Thanks
> > Ana
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
> --
> Michael
> http://www.dewey.myzen.co.uk/home.html


From ||nu@@|@chen @end|ng |rom gm@||@com  Mon Oct 28 21:47:35 2019
From: ||nu@@|@chen @end|ng |rom gm@||@com (Linus Chen)
Date: Mon, 28 Oct 2019 21:47:35 +0100
Subject: [R] how to use a matrix as an index to another matrix?
In-Reply-To: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>
References: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>
Message-ID: <CAPm+3sB9b3E=hPhYqsEbja7N1XOyTt9KdhjctRP8Y=HHC+hjgA@mail.gmail.com>

Hi Jinsong,

In such a case I think explicit loop IS the most elegant solution.
for(i in 1:2) A[,i] <- A[,i][B[,i]]

Linus

On Fri, 11 Oct 2019 at 11:44, Jinsong Zhao <jszhao at yeah.net> wrote:
>
> Hi there,
>
> I have two matrices, A and B. The columns of B is the index of the
> corresponding columns of A. I hope to rearrange of A by B. A minimal
> example is following:
>
>  > set.seed(123)
>  > A <- matrix(sample(1:10), nrow = 5)
>  > B <- matrix(c(sample(1:5), sample(1:5)), nrow =5, byrow = FALSE)
>  > A
>       [,1] [,2]
> [1,]    3    9
> [2,]   10    1
> [3,]    2    7
> [4,]    8    5
> [5,]    6    4
>  > B
>       [,1] [,2]
> [1,]    2    1
> [2,]    3    4
> [3,]    1    5
> [4,]    4    3
> [5,]    5    2
>  > A[,1] <- A[,1][B[,1]]
>  > A[,2] <- A[,2][B[,2]]
>  > A
>       [,1] [,2]
> [1,]   10    9
> [2,]    2    5
> [3,]    3    4
> [4,]    8    7
> [5,]    6    1
>
> My question is whether there is any elegant or generalized way to replace:
>
>  > A[,1] <- A[,1][B[,1]]
>  > A[,2] <- A[,2][B[,2]]
>
> Thanks in advance.
>
> PS., I know how to do the above thing by loop.
>
> Best,
> Jinsong
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From v@r|n@@ch@ @end|ng |rom y@hoo@|r  Mon Oct 28 22:17:47 2019
From: v@r|n@@ch@ @end|ng |rom y@hoo@|r (varin sacha)
Date: Mon, 28 Oct 2019 21:17:47 +0000 (UTC)
Subject: [R] Vector memory exhausted (limit reached?)
References: <858269368.2462727.1572297467599.ref@mail.yahoo.com>
Message-ID: <858269368.2462727.1572297467599@mail.yahoo.com>

Dear R-experts,

My reproducible example here below is not working because of an error message : Erreur : vecteurs de m?moire ?puis?s (limite atteinte ?)
My code perfectly works when n=3000 or n=5000 but as soon as n=10000 my code does not work anymore. By the way, my code takes a very long time to run.
How can I solve my 2 problems :
- Is there a way to make my code run much faster ? 
- Is there a way to make my code work for n=10000 ?


Here is my sessionInfo

sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS Sierra 10.12.6

Matrix products: default
BLAS:?? /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib

Random number generation:
?RNG:???? Mersenne-Twister 
?Normal:? Inversion 
?Sample:? Rounding 
?
locale:
[1] fr_CH.UTF-8/fr_CH.UTF-8/fr_CH.UTF-8/C/fr_CH.UTF-8/fr_CH.UTF-8

attached base packages:
[1] splines?? stats???? graphics? grDevices utils???? datasets? methods?? base??? ?

other attached packages:
?[1] remotes_2.1.0???? RobStatTM_1.0.1?? fit.models_0.5-14 hbrfit_0.02?????? Rfit_0.23.0?????? RobPer_1.2.2????? rgenoud_5.8-3.0 ?
?[8] BB_2019.10-1????? quantreg_5.51???? SparseM_1.77????? MASS_7.3-51.4???? robustbase_0.93-5

loaded via a namespace (and not attached):
[1] quadprog_1.5-7???? lattice_0.20-38??? grid_3.6.1???????? MatrixModels_0.4-1 curl_4.0?????????? Matrix_1.2-17????? tools_3.6.1????? ?
[8] DEoptimR_1.0-8???? compiler_3.6.1??? 


#??#??#??#??#??#??#?? #??#??#??#??#??# 
install.packages( "robustbase",dependencies=TRUE )
install.packages( "MASS" ,dependencies=TRUE )
install.packages( "quantreg" ,dependencies=TRUE )
install.packages( "RobPer",dependencies=TRUE ?)
install.packages("remotes") remotes::install_github("kloke/hbrfit")
install.packages( "RobStatTM",dependencies=TRUE ?)

library(robustbase)
library(MASS)
library(quantreg)
library(RobPer)
library(hbrfit)
library(RobStatTM)
library("remotes") 
?

my.experiment <- function() {

n<-10000

b<-runif(n, 0, 5)

z <- rnorm(n, 2, 3)

a <- runif(n, 0, 5)

?
y_model<- 0.1*b - 0.5 * z - a + 10

y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )

HBR<-hbrfit(y_obs ~ b+z+a)? 

x<-model.matrix(~b+z+a)
y<-y_obs
fastTau <- FastTau(x=x, y=y)
w<-as.vector(x %*% fastTau$beta)

MSE_fastTau<-mean((w - y_model)^2)
MSE_HBR<-mean((HBR$fitted.values - y_model)^2)

return( c(MSE_fastTau,MSE_HBR) )

}

my.data = t(replicate( 10, my.experiment() ))
colnames(my.data) <- c("MSE_fastTau","MSE_HBR")
summary(my.data) 

#??#??#??#??#??#??#?? #??#??#??#??#??# 


From bgunter@4567 @end|ng |rom gm@||@com  Mon Oct 28 22:22:23 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Mon, 28 Oct 2019 14:22:23 -0700
Subject: [R] how to use a matrix as an index to another matrix?
In-Reply-To: <CAPm+3sB9b3E=hPhYqsEbja7N1XOyTt9KdhjctRP8Y=HHC+hjgA@mail.gmail.com>
References: <0809abd1-731d-559c-ae5a-222bd6366619@yeah.net>
 <CAPm+3sB9b3E=hPhYqsEbja7N1XOyTt9KdhjctRP8Y=HHC+hjgA@mail.gmail.com>
Message-ID: <CAGxFJbSD-WSCAOQ-7zzS68k50Mh9AxoDOmjKEmumPQboEficDQ@mail.gmail.com>

No loops necessary. Use array indexing (see ?"[", of course -- the section
on matrices and arrays)

set.seed(123)
 A <- matrix(sample(1:10), nrow = 5)
 B <- matrix(c(sample(1:5), sample(1:5)), nrow =5, byrow = FALSE)
## The following could be a 1-liner, but I broke it out for clarity.
 ix <- cbind(as.vector(B), rep(1:2, e=5))
 ix
matrix(A[ix], ncol =2)

Cheers,
Bert


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Mon, Oct 28, 2019 at 1:48 PM Linus Chen <linus.l.chen at gmail.com> wrote:

> Hi Jinsong,
>
> In such a case I think explicit loop IS the most elegant solution.
> for(i in 1:2) A[,i] <- A[,i][B[,i]]
>
> Linus
>
> On Fri, 11 Oct 2019 at 11:44, Jinsong Zhao <jszhao at yeah.net> wrote:
> >
> > Hi there,
> >
> > I have two matrices, A and B. The columns of B is the index of the
> > corresponding columns of A. I hope to rearrange of A by B. A minimal
> > example is following:
> >
> >  > set.seed(123)
> >  > A <- matrix(sample(1:10), nrow = 5)
> >  > B <- matrix(c(sample(1:5), sample(1:5)), nrow =5, byrow = FALSE)
> >  > A
> >       [,1] [,2]
> > [1,]    3    9
> > [2,]   10    1
> > [3,]    2    7
> > [4,]    8    5
> > [5,]    6    4
> >  > B
> >       [,1] [,2]
> > [1,]    2    1
> > [2,]    3    4
> > [3,]    1    5
> > [4,]    4    3
> > [5,]    5    2
> >  > A[,1] <- A[,1][B[,1]]
> >  > A[,2] <- A[,2][B[,2]]
> >  > A
> >       [,1] [,2]
> > [1,]   10    9
> > [2,]    2    5
> > [3,]    3    4
> > [4,]    8    7
> > [5,]    6    1
> >
> > My question is whether there is any elegant or generalized way to
> replace:
> >
> >  > A[,1] <- A[,1][B[,1]]
> >  > A[,2] <- A[,2][B[,2]]
> >
> > Thanks in advance.
> >
> > PS., I know how to do the above thing by loop.
> >
> > Best,
> > Jinsong
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Mon Oct 28 22:37:47 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Mon, 28 Oct 2019 16:37:47 -0500
Subject: [R] Error when using qvalue function
Message-ID: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>

Hello,

I am trying to calculate True Positive Rate, TPR with this procedure:

    pvals=q$METAge
    qval_obj=qvalue(pvals) #is false discovery rate
    pi1=1-qval_obj$pi0 #TPR
    pi1  #TPR

But I am getting this error:

    Error in smooth.spline(lambda, pi0, df = smooth.df) :
       missing or infinite values in inputs are not allowed

I have 91 p values and they look like this:

> pvals
     [1] 6.919239e-02 1.073784e-01 1.218613e-01 1.586202e-01
1.370340e-01 3.452574e-02 2.545619e-01 1.676715e-02 8.571197e-01
    [10] 8.649025e-01 1.777414e-02 6.801867e-01 6.873085e-01
1.276566e-01 5.907002e-02 2.343207e-02 2.078125e-02 6.404511e-02
    [19] 3.306593e-02 9.411259e-04 1.038989e-03 4.734674e-05
3.422489e-05 5.606264e-05 6.322817e-02 1.291268e-02 3.452596e-03
    [28] 1.770753e-01 3.285821e-01 2.292055e-02 5.503168e-02
6.940048e-01 3.638889e-03 6.799640e-01 1.301045e-02 6.794010e-01
    [37] 2.339327e-02 1.038529e-01 3.137687e-04 2.148050e-02
1.783068e-01 1.764518e-01 6.386686e-03 1.670062e-02 3.220291e-01
    [46] 5.568613e-01 8.886102e-01 5.031040e-01 3.760079e-01
6.638034e-02 9.419648e-03 5.885266e-03 1.539809e-02 5.296551e-03
    [55] 2.425230e-02 5.023091e-01 4.547284e-03 1.850796e-01
9.389289e-02 6.544873e-03 3.031956e-03 7.772671e-03 9.073974e-03
    [64] 9.118352e-02 4.075408e-04 6.902206e-01 6.929767e-02
1.897121e-02 6.693074e-02 1.111308e-02 1.286147e-02 4.515834e-02
    [73] 8.886941e-01 8.891051e-01 3.792846e-01 5.368898e-01
2.323894e-01 3.220141e-01 7.320883e-02 9.642521e-03 6.024415e-01
    [82] 2.459322e-02 2.873351e-01 8.477168e-01 1.351068e-02
1.053550e-01 4.812686e-01 1.404957e-01 9.835912e-02 4.373995e-01
    [91] 8.803856e-02

Please advise,
Ana


From drj|m|emon @end|ng |rom gm@||@com  Mon Oct 28 23:12:42 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Tue, 29 Oct 2019 09:12:42 +1100
Subject: [R] Error when using qvalue function
In-Reply-To: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
Message-ID: <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>

Hi Ana,
Seems to work without error for me:

# installed qvalue_1.26.0 from CRAN archive
library(qvalue)
 pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
 1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
 8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
 1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
 3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
 3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
 1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
 6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
 2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
 1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
 5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
 6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
 2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
 9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
 9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
 1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
 8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
 2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
 2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
 1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
 8.803856e-02)
qval_obj=qvalue(pvals)
qval_obj$pi0
[1] 0.1981095
pi1=1-qval_obj$pi0
pi1
[1] 0.8018905

Jiim

On Tue, Oct 29, 2019 at 8:45 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hello,
>
> I am trying to calculate True Positive Rate, TPR with this procedure:
>
>     pvals=q$METAge
>     qval_obj=qvalue(pvals) #is false discovery rate
>     pi1=1-qval_obj$pi0 #TPR
>     pi1  #TPR
>
> But I am getting this error:
>
>     Error in smooth.spline(lambda, pi0, df = smooth.df) :
>        missing or infinite values in inputs are not allowed
>
> I have 91 p values and they look like this:


From dw|n@em|u@ @end|ng |rom comc@@t@net  Mon Oct 28 23:15:36 2019
From: dw|n@em|u@ @end|ng |rom comc@@t@net (David Winsemius)
Date: Mon, 28 Oct 2019 15:15:36 -0700
Subject: [R] Vector memory exhausted (limit reached?)
In-Reply-To: <858269368.2462727.1572297467599@mail.yahoo.com>
References: <858269368.2462727.1572297467599.ref@mail.yahoo.com>
 <858269368.2462727.1572297467599@mail.yahoo.com>
Message-ID: <65cbdc1e-a51f-e944-a39a-bc084573013d@comcast.net>


On 10/28/19 2:17 PM, varin sacha via R-help wrote:
> Dear R-experts,
>
> My reproducible example here below is not working because of an error message : Erreur : vecteurs de m?moire ?puis?s (limite atteinte ?)
> My code perfectly works when n=3000 or n=5000 but as soon as n=10000 my code does not work anymore. By the way, my code takes a very long time to run.
> How can I solve my 2 problems :
> - Is there a way to make my code run much faster ?
> - Is there a way to make my code work for n=10000 ?

Improve your algorithm?

Buy more memory?

Switch to a cloud-based server?


-- 

David

>
>
> Here is my sessionInfo
>
> sessionInfo()
> R version 3.6.1 (2019-07-05)
> Platform: x86_64-apple-darwin15.6.0 (64-bit)
> Running under: macOS Sierra 10.12.6
>
> Matrix products: default
> BLAS:?? /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRblas.0.dylib
> LAPACK: /Library/Frameworks/R.framework/Versions/3.6/Resources/lib/libRlapack.dylib
>
> Random number generation:
>  ?RNG:???? Mersenne-Twister
>  ?Normal:? Inversion
>  ?Sample:? Rounding
>   
> locale:
> [1] fr_CH.UTF-8/fr_CH.UTF-8/fr_CH.UTF-8/C/fr_CH.UTF-8/fr_CH.UTF-8
>
> attached base packages:
> [1] splines?? stats???? graphics? grDevices utils???? datasets? methods?? base
>
> other attached packages:
>  ?[1] remotes_2.1.0???? RobStatTM_1.0.1?? fit.models_0.5-14 hbrfit_0.02?????? Rfit_0.23.0?????? RobPer_1.2.2????? rgenoud_5.8-3.0
>  ?[8] BB_2019.10-1????? quantreg_5.51???? SparseM_1.77????? MASS_7.3-51.4???? robustbase_0.93-5
>
> loaded via a namespace (and not attached):
> [1] quadprog_1.5-7???? lattice_0.20-38??? grid_3.6.1???????? MatrixModels_0.4-1 curl_4.0?????????? Matrix_1.2-17????? tools_3.6.1
> [8] DEoptimR_1.0-8???? compiler_3.6.1
>
>
> #??#??#??#??#??#??#?? #??#??#??#??#??#
> install.packages( "robustbase",dependencies=TRUE )
> install.packages( "MASS" ,dependencies=TRUE )
> install.packages( "quantreg" ,dependencies=TRUE )
> install.packages( "RobPer",dependencies=TRUE ?)
> install.packages("remotes") remotes::install_github("kloke/hbrfit")
> install.packages( "RobStatTM",dependencies=TRUE ?)
>
> library(robustbase)
> library(MASS)
> library(quantreg)
> library(RobPer)
> library(hbrfit)
> library(RobStatTM)
> library("remotes")
>   
>
> my.experiment <- function() {
>
> n<-10000
>
> b<-runif(n, 0, 5)
>
> z <- rnorm(n, 2, 3)
>
> a <- runif(n, 0, 5)
>
>   
> y_model<- 0.1*b - 0.5 * z - a + 10
>
> y_obs <- y_model +c( rnorm(n*0.9, 0, 0.1), rnorm(n*0.1, 0, 0.5) )
>
> HBR<-hbrfit(y_obs ~ b+z+a)
>
> x<-model.matrix(~b+z+a)
> y<-y_obs
> fastTau <- FastTau(x=x, y=y)
> w<-as.vector(x %*% fastTau$beta)
>
> MSE_fastTau<-mean((w - y_model)^2)
> MSE_HBR<-mean((HBR$fitted.values - y_model)^2)
>
> return( c(MSE_fastTau,MSE_HBR) )
>
> }
>
> my.data = t(replicate( 10, my.experiment() ))
> colnames(my.data) <- c("MSE_fastTau","MSE_HBR")
> summary(my.data)
>
> #??#??#??#??#??#??#?? #??#??#??#??#??#
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Tue Oct 29 00:02:27 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Mon, 28 Oct 2019 18:02:27 -0500
Subject: [R] Error when using qvalue function
In-Reply-To: <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
 <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
Message-ID: <CAF9-5jN_dYgJ2qBoFMpo-+HXt4TpOLWXzTxwN2fa5fkqd-HdtQ@mail.gmail.com>

can you please send me command you used to install it?

On Mon, Oct 28, 2019 at 5:12 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>
> Hi Ana,
> Seems to work without error for me:
>
> # installed qvalue_1.26.0 from CRAN archive
> library(qvalue)
>  pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
>  1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
>  8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
>  1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
>  3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
>  3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
>  1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
>  6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
>  2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
>  1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
>  5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
>  6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
>  2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
>  9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
>  9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
>  1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
>  8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
>  2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
>  2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
>  1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
>  8.803856e-02)
> qval_obj=qvalue(pvals)
> qval_obj$pi0
> [1] 0.1981095
> pi1=1-qval_obj$pi0
> pi1
> [1] 0.8018905
>
> Jiim
>
> On Tue, Oct 29, 2019 at 8:45 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >
> > Hello,
> >
> > I am trying to calculate True Positive Rate, TPR with this procedure:
> >
> >     pvals=q$METAge
> >     qval_obj=qvalue(pvals) #is false discovery rate
> >     pi1=1-qval_obj$pi0 #TPR
> >     pi1  #TPR
> >
> > But I am getting this error:
> >
> >     Error in smooth.spline(lambda, pi0, df = smooth.df) :
> >        missing or infinite values in inputs are not allowed
> >
> > I have 91 p values and they look like this:


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Tue Oct 29 00:08:03 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Mon, 28 Oct 2019 18:08:03 -0500
Subject: [R] Error when using qvalue function
In-Reply-To: <CAF9-5jN_dYgJ2qBoFMpo-+HXt4TpOLWXzTxwN2fa5fkqd-HdtQ@mail.gmail.com>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
 <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
 <CAF9-5jN_dYgJ2qBoFMpo-+HXt4TpOLWXzTxwN2fa5fkqd-HdtQ@mail.gmail.com>
Message-ID: <CAF9-5jOCESsXh98kWz4OMmztUMjMwsDS8LcfGczSMJyda1F9mA@mail.gmail.com>

I did

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("qvalue")

and after entering that p value I am still getting:

> qval_obj=qvalue(pvals)
Error in smooth.spline(lambda, pi0, df = smooth.df) :
  missing or infinite values in inputs are not allowed

On Mon, Oct 28, 2019 at 6:02 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> can you please send me command you used to install it?
>
> On Mon, Oct 28, 2019 at 5:12 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> >
> > Hi Ana,
> > Seems to work without error for me:
> >
> > # installed qvalue_1.26.0 from CRAN archive
> > library(qvalue)
> >  pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
> >  1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
> >  8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
> >  1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
> >  3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
> >  3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
> >  1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
> >  6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
> >  2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
> >  1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
> >  5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
> >  6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
> >  2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
> >  9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
> >  9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
> >  1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
> >  8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
> >  2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
> >  2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
> >  1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
> >  8.803856e-02)
> > qval_obj=qvalue(pvals)
> > qval_obj$pi0
> > [1] 0.1981095
> > pi1=1-qval_obj$pi0
> > pi1
> > [1] 0.8018905
> >
> > Jiim
> >
> > On Tue, Oct 29, 2019 at 8:45 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> > >
> > > Hello,
> > >
> > > I am trying to calculate True Positive Rate, TPR with this procedure:
> > >
> > >     pvals=q$METAge
> > >     qval_obj=qvalue(pvals) #is false discovery rate
> > >     pi1=1-qval_obj$pi0 #TPR
> > >     pi1  #TPR
> > >
> > > But I am getting this error:
> > >
> > >     Error in smooth.spline(lambda, pi0, df = smooth.df) :
> > >        missing or infinite values in inputs are not allowed
> > >
> > > I have 91 p values and they look like this:


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Tue Oct 29 00:30:59 2019
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 28 Oct 2019 16:30:59 -0700
Subject: [R] Error when using qvalue function
In-Reply-To: <CAF9-5jOCESsXh98kWz4OMmztUMjMwsDS8LcfGczSMJyda1F9mA@mail.gmail.com>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
 <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
 <CAF9-5jN_dYgJ2qBoFMpo-+HXt4TpOLWXzTxwN2fa5fkqd-HdtQ@mail.gmail.com>
 <CAF9-5jOCESsXh98kWz4OMmztUMjMwsDS8LcfGczSMJyda1F9mA@mail.gmail.com>
Message-ID: <10F5C02E-6EDF-4842-B7DC-2ABA0A42D42C@dcn.davis.ca.us>

... which only loads the package after you run it once. You use `require`, which fails if the package is not loaded, at which point it installs it but never runs `require` or `library` before proceeding.

YMMV but I am not a fan of using `require`... getting packages installed often requires human intervention, so I prefer not to install packages in my script but just to use `library` and manually get each of the packages that `library` complains about onto my machine. Once done, the script runs just fine after that.

On October 28, 2019 4:08:03 PM PDT, Ana Marija <sokovic.anamarija at gmail.com> wrote:
>I did
>
>if (!requireNamespace("BiocManager", quietly = TRUE))
>    install.packages("BiocManager")
>
>BiocManager::install("qvalue")
>
>and after entering that p value I am still getting:
>
>> qval_obj=qvalue(pvals)
>Error in smooth.spline(lambda, pi0, df = smooth.df) :
>  missing or infinite values in inputs are not allowed
>
>On Mon, Oct 28, 2019 at 6:02 PM Ana Marija
><sokovic.anamarija at gmail.com> wrote:
>>
>> can you please send me command you used to install it?
>>
>> On Mon, Oct 28, 2019 at 5:12 PM Jim Lemon <drjimlemon at gmail.com>
>wrote:
>> >
>> > Hi Ana,
>> > Seems to work without error for me:
>> >
>> > # installed qvalue_1.26.0 from CRAN archive
>> > library(qvalue)
>> >  pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
>> >  1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
>> >  8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
>> >  1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
>> >  3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
>> >  3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
>> >  1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
>> >  6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
>> >  2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
>> >  1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
>> >  5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
>> >  6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
>> >  2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
>> >  9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
>> >  9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
>> >  1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
>> >  8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
>> >  2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
>> >  2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
>> >  1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
>> >  8.803856e-02)
>> > qval_obj=qvalue(pvals)
>> > qval_obj$pi0
>> > [1] 0.1981095
>> > pi1=1-qval_obj$pi0
>> > pi1
>> > [1] 0.8018905
>> >
>> > Jiim
>> >
>> > On Tue, Oct 29, 2019 at 8:45 AM Ana Marija
><sokovic.anamarija at gmail.com> wrote:
>> > >
>> > > Hello,
>> > >
>> > > I am trying to calculate True Positive Rate, TPR with this
>procedure:
>> > >
>> > >     pvals=q$METAge
>> > >     qval_obj=qvalue(pvals) #is false discovery rate
>> > >     pi1=1-qval_obj$pi0 #TPR
>> > >     pi1  #TPR
>> > >
>> > > But I am getting this error:
>> > >
>> > >     Error in smooth.spline(lambda, pi0, df = smooth.df) :
>> > >        missing or infinite values in inputs are not allowed
>> > >
>> > > I have 91 p values and they look like this:
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide
>http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Tue Oct 29 00:41:13 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Mon, 28 Oct 2019 18:41:13 -0500
Subject: [R] Error when using qvalue function
In-Reply-To: <10F5C02E-6EDF-4842-B7DC-2ABA0A42D42C@dcn.davis.ca.us>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
 <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
 <CAF9-5jN_dYgJ2qBoFMpo-+HXt4TpOLWXzTxwN2fa5fkqd-HdtQ@mail.gmail.com>
 <CAF9-5jOCESsXh98kWz4OMmztUMjMwsDS8LcfGczSMJyda1F9mA@mail.gmail.com>
 <10F5C02E-6EDF-4842-B7DC-2ABA0A42D42C@dcn.davis.ca.us>
Message-ID: <CAF9-5jPT4pQRBsdagAV+e_bA7LEGhp=Jap5UoaJHNP0SnQ6ObA@mail.gmail.com>

Again the same thing:

> require(qvalue)
> qval_obj=qvalue(pvals)
Error in smooth.spline(lambda, pi0, df = smooth.df) :
  missing or infinite values in inputs are not allowed

On Mon, Oct 28, 2019 at 6:31 PM Jeff Newmiller <jdnewmil at dcn.davis.ca.us> wrote:
>
> ... which only loads the package after you run it once. You use `require`, which fails if the package is not loaded, at which point it installs it but never runs `require` or `library` before proceeding.
>
> YMMV but I am not a fan of using `require`... getting packages installed often requires human intervention, so I prefer not to install packages in my script but just to use `library` and manually get each of the packages that `library` complains about onto my machine. Once done, the script runs just fine after that.
>
> On October 28, 2019 4:08:03 PM PDT, Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >I did
> >
> >if (!requireNamespace("BiocManager", quietly = TRUE))
> >    install.packages("BiocManager")
> >
> >BiocManager::install("qvalue")
> >
> >and after entering that p value I am still getting:
> >
> >> qval_obj=qvalue(pvals)
> >Error in smooth.spline(lambda, pi0, df = smooth.df) :
> >  missing or infinite values in inputs are not allowed
> >
> >On Mon, Oct 28, 2019 at 6:02 PM Ana Marija
> ><sokovic.anamarija at gmail.com> wrote:
> >>
> >> can you please send me command you used to install it?
> >>
> >> On Mon, Oct 28, 2019 at 5:12 PM Jim Lemon <drjimlemon at gmail.com>
> >wrote:
> >> >
> >> > Hi Ana,
> >> > Seems to work without error for me:
> >> >
> >> > # installed qvalue_1.26.0 from CRAN archive
> >> > library(qvalue)
> >> >  pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
> >> >  1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
> >> >  8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
> >> >  1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
> >> >  3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
> >> >  3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
> >> >  1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
> >> >  6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
> >> >  2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
> >> >  1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
> >> >  5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
> >> >  6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
> >> >  2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
> >> >  9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
> >> >  9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
> >> >  1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
> >> >  8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
> >> >  2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
> >> >  2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
> >> >  1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
> >> >  8.803856e-02)
> >> > qval_obj=qvalue(pvals)
> >> > qval_obj$pi0
> >> > [1] 0.1981095
> >> > pi1=1-qval_obj$pi0
> >> > pi1
> >> > [1] 0.8018905
> >> >
> >> > Jiim
> >> >
> >> > On Tue, Oct 29, 2019 at 8:45 AM Ana Marija
> ><sokovic.anamarija at gmail.com> wrote:
> >> > >
> >> > > Hello,
> >> > >
> >> > > I am trying to calculate True Positive Rate, TPR with this
> >procedure:
> >> > >
> >> > >     pvals=q$METAge
> >> > >     qval_obj=qvalue(pvals) #is false discovery rate
> >> > >     pi1=1-qval_obj$pi0 #TPR
> >> > >     pi1  #TPR
> >> > >
> >> > > But I am getting this error:
> >> > >
> >> > >     Error in smooth.spline(lambda, pi0, df = smooth.df) :
> >> > >        missing or infinite values in inputs are not allowed
> >> > >
> >> > > I have 91 p values and they look like this:
> >
> >______________________________________________
> >R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >https://stat.ethz.ch/mailman/listinfo/r-help
> >PLEASE do read the posting guide
> >http://www.R-project.org/posting-guide.html
> >and provide commented, minimal, self-contained, reproducible code.
>
> --
> Sent from my phone. Please excuse my brevity.


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Tue Oct 29 03:28:57 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Mon, 28 Oct 2019 21:28:57 -0500
Subject: [R] negative vector length when merging data frames
In-Reply-To: <9679f0e4-5241-0ee6-8e16-feb79ea763ad@sapo.pt>
References: <CAF9-5jNiXDjZ9Jh6-1OyWVKUbJZLH_+VA4tqkzqMgdK0UJaRKA@mail.gmail.com>
 <CA+8X3fVp-8d_GEA4APnSOiZqKSz6=fRr=1z8qPcgzD9kRz+n-Q@mail.gmail.com>
 <CAF9-5jNHNVf-C0NNXkRzO=LsdceBQ4z=zzfBnd+8=mN4dLYddg@mail.gmail.com>
 <9679f0e4-5241-0ee6-8e16-feb79ea763ad@sapo.pt>
Message-ID: <CAF9-5jPwKcUs60We1nopbcmRg_T+94vP6vd_cBbs1boO1v2YCw@mail.gmail.com>

HI Rui,

thank you so much for this. I tried with the sqldf but it didn't help.
Next I tried your 2nd method and I was following your steps until:

> res2 <- asign[i2, setdiff(names(asign), names(l4))]
> m=merge(res, res2, by.x = c("chr", "pos"), by.y = c("chr", "pos"))
Error in merge.data.table(res, res2, by.x = c("chr", "pos"), by.y = c("chr",  :
  Elements listed in `by.y` must be valid column names in y.
> head(res)
    chr   pos a1 a2  a3         variant_id pval_nominal           gene_id
1: chr1 54490  G  A b38 chr1_54490_G_A_b38     0.608495 ENSG00000227232.5
2: chr1 58814  G  A b38 chr1_58814_G_A_b38     0.295211 ENSG00000227232.5
3: chr1 60351  A  G b38 chr1_60351_A_G_b38     0.439788 ENSG00000227232.5
4: chr1 61920  G  A b38 chr1_61920_G_A_b38     0.319528 ENSG00000227232.5
5: chr1 63671  G  A b38 chr1_63671_G_A_b38     0.237739 ENSG00000227232.5
6: chr1 64931  G  A b38 chr1_64931_G_A_b38     0.276679 ENSG00000227232.5
> head(res2)
[1] "gene"         "chr_pos"      "p.val.Retina"
> dim(res)
[1] 111478253         8
> head(l4)
    chr   pos a1 a2  a3         variant_id pval_nominal           gene_id
1: chr1 13550  G  A b38 chr1_13550_G_A_b38     0.375614 ENSG00000227232.5
2: chr1 14671  G  C b38 chr1_14671_G_C_b38     0.474708 ENSG00000227232.5
3: chr1 14677  G  A b38 chr1_14677_G_A_b38     0.699887 ENSG00000227232.5
4: chr1 16841  G  T b38 chr1_16841_G_T_b38     0.127895 ENSG00000227232.5
5: chr1 16856  A  G b38 chr1_16856_A_G_b38     0.627822 ENSG00000227232.5
6: chr1 17005  A  G b38 chr1_17005_A_G_b38     0.802803 ENSG00000227232.5
> head(asign)
              gene  chr                chr_pos   pos p.val.Retina
1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> length(i2)
[1] 107371528

Everything is the same as I stated initially in the problem, except
that as you can see in l4 I renamed columns so now
instead of X1 and X2 I have "chr", "pos"

Do you know why this command didn't return anything?
res2 <- asign[i2, setdiff(names(asign), names(l4))]

On Thu, Oct 24, 2019 at 2:17 PM Rui Barradas <ruipbarradas at sapo.pt> wrote:
>
> Hello,
>
> Sometimes sqldf::sqldf tends to save memory. Maybe if you try
>
> library(sqldf)
>
> sqldf('select l4.*, asign.gene, asign.chr_pos, asign.`p.val.Retina`
>        from l4
>        inner join asign
>        on X1 = asign.chr and X2 = asign.pos')
>
> Or you can filter the rows that match first, then merge the results.
> Something along the lines of
>
> # read in only the columns needed with fread, it's fast
> l4join <- data.table::fread(l4_file, select = c("X1", "X2"))
> ajoin <- data.table::fread(asign_file, select = c("chr", "pos"))
>
> # create indices with the matches on both sides
> i1 <- (l4join$X1 %in% ajoin$chr) & (l4join$X2 %in% ajoin$pos)
> i2 <- (ajoin$chr %in% l4join$X1) & (ajoin$pos %in% l4join$X2)
>
> rm(l4join, ajoin)   # don't need this any more, remove them
>
> # now the real fread's
> l4 <- data.table::fread(l4_file)
> asign <- data.table::fread(asign_file)
>
> # extract the relevant rows and merge
> res <- l4[i1, ]
> res2 <- asign[i2, setdiff(names(asign), names(l4))]
> merge(res, res2, by.x = c("X1", "X2"), by.y = c("chr", "pos"))
>
>
> Hope this helps,
>
> Rui Barradas
>
>
>
>
>
>
> ?s 00:08 de 24/10/19, Ana Marija escreveu:
> > Hi Jim,
> >
> > I think one of the issue is that data frames are so big,
> >> dim(l4)
> > [1] 166941635         8
> >> dim(asign)
> > [1] 107371528         5
> >
> > so my example would not reproduce the error
> >
> > On Wed, Oct 23, 2019 at 6:05 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> >>
> >> Hi Ana,
> >> When I run this example taken from your email:
> >>
> >> l4<-read.table(text="X1 X2 X3 X4  X5 variant_id pval_nominal gene_id.LCL
> >> chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> >> chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> >> chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> >> chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> >> chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> >> chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232",
> >> header=TRUE,stringsAsFactors=FALSE)
> >> asign<-read.table(text="gene  chr  chr_pos   pos p.val.Retina
> >> ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> >> ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> >> ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> >> ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> >> ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> >> ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572",
> >> header=TRUE,stringsAsFactors=FALSE)
> >> merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> >>   [1] X1           X2           X3           X4           X5
> >> [6] variant_id   pval_nominal gene_id.LCL  gene         chr_pos
> >> [11] p.val.Retina
> >> <0 rows> (or 0-length row.names)
> >>
> >> It works okay, but there are no matches in the join. So I can't even
> >> guess what the problem is.
> >>
> >> Jim
> >>
> >> On Thu, Oct 24, 2019 at 9:33 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >>>
> >>> Hello,
> >>>
> >>> I have two data frames like this:
> >>>
> >>>> head(l4)
> >>>      X1    X2 X3 X4  X5  variant_id pval_nominal     gene_id.LCL
> >>> 1 chr1 13550  G  A b38 1:13550:G:A     0.375614 ENSG00000227232
> >>> 2 chr1 14671  G  C b38 1:14671:G:C     0.474708 ENSG00000227232
> >>> 3 chr1 14677  G  A b38 1:14677:G:A     0.699887 ENSG00000227232
> >>> 4 chr1 16841  G  T b38 1:16841:G:T     0.127895 ENSG00000227232
> >>> 5 chr1 16856  A  G b38 1:16856:A:G     0.627822 ENSG00000227232
> >>> 6 chr1 17005  A  G b38 1:17005:A:G     0.802803 ENSG00000227232
> >>>> head(asign)
> >>>                gene  chr                chr_pos   pos p.val.Retina
> >>> 1: ENSG00000227232 chr1           1:10177:A:AC 10177     0.381708
> >>> 2: ENSG00000227232 chr1 rs145072688:10352:T:TA 10352     0.959523
> >>> 3: ENSG00000227232 chr1            1:11008:C:G 11008     0.218132
> >>> 4: ENSG00000227232 chr1            1:11012:C:G 11012     0.218132
> >>> 5: ENSG00000227232 chr1            1:13110:G:A 13110     0.998262
> >>> 6: ENSG00000227232 chr1  rs201725126:13116:T:G 13116     0.438572
> >>>> m = merge(l4, asign, by.x=c("X1", "X2"), by.y=c("chr", "pos"))
> >>> Error in merge.data.frame(l4, asign, by.x = c("X1", "X2"), by.y = c("chr",  :
> >>>    negative length vectors are not allowed
> >>>> sapply(l4,class)
> >>>            X1           X2           X3           X4           X5   variant_id
> >>>   "character"  "character"  "character"  "character"  "character"  "character"
> >>> pval_nominal  gene_id.LCL
> >>>     "numeric"  "character"
> >>>> sapply(asign,class)
> >>>          gene          chr      chr_pos          pos p.val.Retina
> >>>   "character"  "character"  "character"  "character"  "character"
> >>>
> >>> Please advise as to why I am getting this error when merging?
> >>>
> >>> Thanks
> >>> Ana
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >


From wdun|@p @end|ng |rom t|bco@com  Tue Oct 29 03:36:44 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Mon, 28 Oct 2019 19:36:44 -0700
Subject: [R] Error when using qvalue function
In-Reply-To: <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
 <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
Message-ID: <CAF8bMcZDL+TpGAM_oViTomNByWdaQZLN7WvU+kdFqSmzVhdqwg@mail.gmail.com>

With qvalue-2.16.0 and R-3.6.1 many calls to qvalue::qvalue die in its call
to qvalue::pi0est.  E.g.,

> trace(smooth.spline, quote(cat("y=", deparse(y), "\n")))
Tracing function "smooth.spline" in package "stats"
[1] "smooth.spline"
> qvalue::pi0est(c(.01, .01, .06))
Tracing smooth.spline(lambda, pi0, df = smooth.df) on entry
y= c(NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_,  NA_real_,
NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_,  NA_real_,
NA_real_, NA_real_, NA_real_, NA_real_, NA_real_)
Error in smooth.spline(lambda, pi0, df = smooth.df) :
  missing or infinite values in inputs are not allowed

You should submit a bug report to
> packageDescription("qvalue")$URL
[1] "http://github.com/jdstorey/qvalue"

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Mon, Oct 28, 2019 at 3:13 PM Jim Lemon <drjimlemon at gmail.com> wrote:

> Hi Ana,
> Seems to work without error for me:
>
> # installed qvalue_1.26.0 from CRAN archive
> library(qvalue)
>  pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
>  1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
>  8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
>  1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
>  3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
>  3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
>  1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
>  6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
>  2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
>  1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
>  5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
>  6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
>  2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
>  9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
>  9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
>  1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
>  8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
>  2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
>  2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
>  1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
>  8.803856e-02)
> qval_obj=qvalue(pvals)
> qval_obj$pi0
> [1] 0.1981095
> pi1=1-qval_obj$pi0
> pi1
> [1] 0.8018905
>
> Jiim
>
> On Tue, Oct 29, 2019 at 8:45 AM Ana Marija <sokovic.anamarija at gmail.com>
> wrote:
> >
> > Hello,
> >
> > I am trying to calculate True Positive Rate, TPR with this procedure:
> >
> >     pvals=q$METAge
> >     qval_obj=qvalue(pvals) #is false discovery rate
> >     pi1=1-qval_obj$pi0 #TPR
> >     pi1  #TPR
> >
> > But I am getting this error:
> >
> >     Error in smooth.spline(lambda, pi0, df = smooth.df) :
> >        missing or infinite values in inputs are not allowed
> >
> > I have 91 p values and they look like this:
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From wewo|@k| @end|ng |rom gm@||@com  Tue Oct 29 13:55:27 2019
From: wewo|@k| @end|ng |rom gm@||@com (Witold E Wolski)
Date: Tue, 29 Oct 2019 13:55:27 +0100
Subject: [R] decomposing a string representing a valid mathematical
 expression?
Message-ID: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>

Hello,

I would like to decompose a string i.e.

"a - b"
or "a +b"

into an array or list
["a","-","b"]

Since R knows how to parse expressions these type of expressions I
would like to reuse some existing functions and not to use gsub or
strsplit etc.

Thank you
Witek

-- 
Witold Eryk Wolski


From bgunter@4567 @end|ng |rom gm@||@com  Tue Oct 29 15:37:50 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Tue, 29 Oct 2019 07:37:50 -0700
Subject: [R] decomposing a string representing a valid mathematical
 expression?
In-Reply-To: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
References: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
Message-ID: <CAGxFJbQUF+9o929=F0+KLtF=jV_KAAGs5CYy-kPmXuRggcDvgQ@mail.gmail.com>

Not sure what you're looking for, but see ?deparse for deparsing
**expressions.**

-- Bert
Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Tue, Oct 29, 2019 at 5:56 AM Witold E Wolski <wewolski at gmail.com> wrote:

> Hello,
>
> I would like to decompose a string i.e.
>
> "a - b"
> or "a +b"
>
> into an array or list
> ["a","-","b"]
>
> Since R knows how to parse expressions these type of expressions I
> would like to reuse some existing functions and not to use gsub or
> strsplit etc.
>
> Thank you
> Witek
>
> --
> Witold Eryk Wolski
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Tue Oct 29 17:22:47 2019
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Tue, 29 Oct 2019 19:22:47 +0300
Subject: [R] decomposing a string representing a valid mathematical
 expression?
In-Reply-To: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
References: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
Message-ID: <20191029192247.1e213057@trisector>

On Tue, 29 Oct 2019 13:55:27 +0100
Witold E Wolski <wewolski at gmail.com> wrote:

> Since R knows how to parse expressions these type of expressions I
> would like to reuse some existing functions and not to use gsub or
> strsplit etc.

You might be interested in the `parse` function:

x <- "(a+b) * c/(d * (e - f))"
str(parse(text = x))
# length 1 expression((a + b) * c/(d * (e - f)))
#  - attr(*, "srcref")=List of 1
#   ..$ : 'srcref' int [1:8] 1 1 1 23 1 23 1 1
#   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x55ebecdac210>
#  - attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment:0x55ebecdac210>
#  - attr(*, "wholeSrcref")= 'srcref' int [1:8] 1 0 2 0 0 0 1 2
#   ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'<environment:0x55ebecdac210>
parse(text = x)[[1]]
# (a + b) * c/(d * (e - f))
parse(text = x)[[1]][1]
# `/`()
parse(text = x)[[1]][2]
# ((a + b) * c)()
parse(text = x)[[1]][3]
# (d * (e - f))()

Quoting ?expression,

>> As an object of mode ?"expression"? is a list, it can be subsetted
>> by ?[?, ?[[? or ?$?, the latter two extracting individual calls etc.

-- 
Best regards,
Ivan


From bgunter@4567 @end|ng |rom gm@||@com  Tue Oct 29 17:46:18 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Tue, 29 Oct 2019 09:46:18 -0700
Subject: [R] decomposing a string representing a valid mathematical
 expression?
In-Reply-To: <20191029192247.1e213057@trisector>
References: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
 <20191029192247.1e213057@trisector>
Message-ID: <CAGxFJbS3KLVxx1VsW3zZLwpW=Zd+Q-yRUZ9HjyBnRJ-Y9zpivQ@mail.gmail.com>

Does something like the following make any sense for your context?

> z <- "(xy+ s)/ (ab +log(4.13))"
>
> lapply(parse(text = z), FUN = function(x)strsplit(deparse(x), split =
"[[:space:]]+"))
[[1]]
[[1]][[1]]
[1] "(xy"        "+"          "s)/(ab"     "+"          "log(4.13))"


Cheers,
Bert


Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Tue, Oct 29, 2019 at 9:23 AM Ivan Krylov <krylov.r00t at gmail.com> wrote:

> On Tue, 29 Oct 2019 13:55:27 +0100
> Witold E Wolski <wewolski at gmail.com> wrote:
>
> > Since R knows how to parse expressions these type of expressions I
> > would like to reuse some existing functions and not to use gsub or
> > strsplit etc.
>
> You might be interested in the `parse` function:
>
> x <- "(a+b) * c/(d * (e - f))"
> str(parse(text = x))
> # length 1 expression((a + b) * c/(d * (e - f)))
> #  - attr(*, "srcref")=List of 1
> #   ..$ : 'srcref' int [1:8] 1 1 1 23 1 23 1 1
> #   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'
> <environment: 0x55ebecdac210>
> #  - attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'
> <environment:0x55ebecdac210>
> #  - attr(*, "wholeSrcref")= 'srcref' int [1:8] 1 0 2 0 0 0 1 2
> #   ..- attr(*, "srcfile")=Classes 'srcfilecopy',
> 'srcfile'<environment:0x55ebecdac210>
> parse(text = x)[[1]]
> # (a + b) * c/(d * (e - f))
> parse(text = x)[[1]][1]
> # `/`()
> parse(text = x)[[1]][2]
> # ((a + b) * c)()
> parse(text = x)[[1]][3]
> # (d * (e - f))()
>
> Quoting ?expression,
>
> >> As an object of mode ?"expression"? is a list, it can be subsetted
> >> by ?[?, ?[[? or ?$?, the latter two extracting individual calls etc.
>
> --
> Best regards,
> Ivan
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Tue Oct 29 21:06:40 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Tue, 29 Oct 2019 15:06:40 -0500
Subject: [R] Error when using qvalue function
In-Reply-To: <CAF8bMcZDL+TpGAM_oViTomNByWdaQZLN7WvU+kdFqSmzVhdqwg@mail.gmail.com>
References: <CAF9-5jOYhkBOsqDXcCx=RsCPH2OQZDp0Zsf4xxWMrxteu39-QQ@mail.gmail.com>
 <CA+8X3fWRP9XCAaAByOg7-vL1F1+3ewQZUMyzs+tiQ=X-avjFwA@mail.gmail.com>
 <CAF8bMcZDL+TpGAM_oViTomNByWdaQZLN7WvU+kdFqSmzVhdqwg@mail.gmail.com>
Message-ID: <CAF9-5jN+B0mZL99H9uO8Svi23eQ09SfU+AxbG-LDoEAXfpw38w@mail.gmail.com>

Hello,

I am am correct to assume that here:

pvals=q$META
qval_obj=qvalue(pvals) #is false discovery rate
pi1=1-qval_obj$pi0 #TPR
pi1  #TPR

pi1 represents True Positive Rate?

Thanks
Ana

On Mon, Oct 28, 2019 at 9:36 PM William Dunlap <wdunlap at tibco.com> wrote:
>
> With qvalue-2.16.0 and R-3.6.1 many calls to qvalue::qvalue die in its call to qvalue::pi0est.  E.g.,
>
> > trace(smooth.spline, quote(cat("y=", deparse(y), "\n")))
> Tracing function "smooth.spline" in package "stats"
> [1] "smooth.spline"
> > qvalue::pi0est(c(.01, .01, .06))
> Tracing smooth.spline(lambda, pi0, df = smooth.df) on entry
> y= c(NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_,  NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_,  NA_real_, NA_real_, NA_real_, NA_real_, NA_real_, NA_real_)
> Error in smooth.spline(lambda, pi0, df = smooth.df) :
>   missing or infinite values in inputs are not allowed
>
> You should submit a bug report to
> > packageDescription("qvalue")$URL
> [1] "http://github.com/jdstorey/qvalue"
>
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com
>
>
> On Mon, Oct 28, 2019 at 3:13 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>>
>> Hi Ana,
>> Seems to work without error for me:
>>
>> # installed qvalue_1.26.0 from CRAN archive
>> library(qvalue)
>>  pvals<-c(6.919239e-02,1.073784e-01,1.218613e-01,1.586202e-01,
>>  1.370340e-01,3.452574e-02,2.545619e-01,1.676715e-02,8.571197e-01,
>>  8.649025e-01,1.777414e-02,6.801867e-01,6.873085e-01,
>>  1.276566e-01,5.907002e-02,2.343207e-02,2.078125e-02,6.404511e-02,
>>  3.306593e-02,9.411259e-04,1.038989e-03,4.734674e-05,
>>  3.422489e-05,5.606264e-05,6.322817e-02,1.291268e-02,3.452596e-03,
>>  1.770753e-01,3.285821e-01,2.292055e-02,5.503168e-02,
>>  6.940048e-01,3.638889e-03,6.799640e-01,1.301045e-02,6.794010e-01,
>>  2.339327e-02,1.038529e-01,3.137687e-04,2.148050e-02,
>>  1.783068e-01,1.764518e-01,6.386686e-03,1.670062e-02,3.220291e-01,
>>  5.568613e-01,8.886102e-01,5.031040e-01,3.760079e-01,
>>  6.638034e-02,9.419648e-03,5.885266e-03,1.539809e-02,5.296551e-03,
>>  2.425230e-02,5.023091e-01,4.547284e-03,1.850796e-01,
>>  9.389289e-02,6.544873e-03,3.031956e-03,7.772671e-03,9.073974e-03,
>>  9.118352e-02,4.075408e-04,6.902206e-01,6.929767e-02,
>>  1.897121e-02,6.693074e-02,1.111308e-02,1.286147e-02,4.515834e-02,
>>  8.886941e-01,8.891051e-01,3.792846e-01,5.368898e-01,
>>  2.323894e-01,3.220141e-01,7.320883e-02,9.642521e-03,6.024415e-01,
>>  2.459322e-02,2.873351e-01,8.477168e-01,1.351068e-02,
>>  1.053550e-01,4.812686e-01,1.404957e-01,9.835912e-02,4.373995e-01,
>>  8.803856e-02)
>> qval_obj=qvalue(pvals)
>> qval_obj$pi0
>> [1] 0.1981095
>> pi1=1-qval_obj$pi0
>> pi1
>> [1] 0.8018905
>>
>> Jiim
>>
>> On Tue, Oct 29, 2019 at 8:45 AM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>> >
>> > Hello,
>> >
>> > I am trying to calculate True Positive Rate, TPR with this procedure:
>> >
>> >     pvals=q$METAge
>> >     qval_obj=qvalue(pvals) #is false discovery rate
>> >     pi1=1-qval_obj$pi0 #TPR
>> >     pi1  #TPR
>> >
>> > But I am getting this error:
>> >
>> >     Error in smooth.spline(lambda, pi0, df = smooth.df) :
>> >        missing or infinite values in inputs are not allowed
>> >
>> > I have 91 p values and they look like this:
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.


From j@vedbtk111 @end|ng |rom gm@||@com  Tue Oct 29 21:48:00 2019
From: j@vedbtk111 @end|ng |rom gm@||@com (javed khan)
Date: Tue, 29 Oct 2019 21:48:00 +0100
Subject: [R] Parameters tuning in r
Message-ID: <CAJhui+tuuuiJc6C17FN2bOXZ7rpe1MUxa4cj76RrTqKBRmjk=w@mail.gmail.com>

For parameter tuning, in the trainControl function, instead of search
=random or grid, can we use meta heuristic algorithms such as pso or
genetic algorithm? What else we need to include meta heuristic algorithms
for parameter Tuning than the steps we follow for grid or random search?

Thanks

	[[alternative HTML version deleted]]


From murdoch@dunc@n @end|ng |rom gm@||@com  Wed Oct 30 01:22:17 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Tue, 29 Oct 2019 20:22:17 -0400
Subject: [R] decomposing a string representing a valid mathematical
 expression?
In-Reply-To: <CAGxFJbS3KLVxx1VsW3zZLwpW=Zd+Q-yRUZ9HjyBnRJ-Y9zpivQ@mail.gmail.com>
References: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
 <20191029192247.1e213057@trisector>
 <CAGxFJbS3KLVxx1VsW3zZLwpW=Zd+Q-yRUZ9HjyBnRJ-Y9zpivQ@mail.gmail.com>
Message-ID: <74be2c5a-5be8-aac6-61aa-a1022b8da1eb@gmail.com>

On 29/10/2019 12:46 p.m., Bert Gunter wrote:
> Does something like the following make any sense for your context?
> 
>> z <- "(xy+ s)/ (ab +log(4.13))"
>>
>> lapply(parse(text = z), FUN = function(x)strsplit(deparse(x), split =
> "[[:space:]]+"))
> [[1]]
> [[1]][[1]]
> [1] "(xy"        "+"          "s)/(ab"     "+"          "log(4.13))"

That's the wrong way to do it.  Notice the 3rd element,  "s)/(ab", which 
combines two partial operands and an operator.  Deparsing doesn't always 
introduce spaces, as your reprex assumes.

I think Witold's request is quite hard to do.  The right way to handle 
expressions is as hierachical objects, like those returned from 
parse(text = z).  Turning those into character vectors of lexical tokens 
doesn't make sense.

Perhaps if Witold explained the context of what he is trying to do 
someone could give a suggestion about a better approach.

Duncan Murdoch

> 
> 
> Cheers,
> Bert
> 
> 
> Bert Gunter
> 
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> 
> 
> On Tue, Oct 29, 2019 at 9:23 AM Ivan Krylov <krylov.r00t at gmail.com> wrote:
> 
>> On Tue, 29 Oct 2019 13:55:27 +0100
>> Witold E Wolski <wewolski at gmail.com> wrote:
>>
>>> Since R knows how to parse expressions these type of expressions I
>>> would like to reuse some existing functions and not to use gsub or
>>> strsplit etc.
>>
>> You might be interested in the `parse` function:
>>
>> x <- "(a+b) * c/(d * (e - f))"
>> str(parse(text = x))
>> # length 1 expression((a + b) * c/(d * (e - f)))
>> #  - attr(*, "srcref")=List of 1
>> #   ..$ : 'srcref' int [1:8] 1 1 1 23 1 23 1 1
>> #   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'
>> <environment: 0x55ebecdac210>
>> #  - attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'
>> <environment:0x55ebecdac210>
>> #  - attr(*, "wholeSrcref")= 'srcref' int [1:8] 1 0 2 0 0 0 1 2
>> #   ..- attr(*, "srcfile")=Classes 'srcfilecopy',
>> 'srcfile'<environment:0x55ebecdac210>
>> parse(text = x)[[1]]
>> # (a + b) * c/(d * (e - f))
>> parse(text = x)[[1]][1]
>> # `/`()
>> parse(text = x)[[1]][2]
>> # ((a + b) * c)()
>> parse(text = x)[[1]][3]
>> # (d * (e - f))()
>>
>> Quoting ?expression,
>>
>>>> As an object of mode ?"expression"? is a list, it can be subsetted
>>>> by ?[?, ?[[? or ?$?, the latter two extracting individual calls etc.
>>
>> --
>> Best regards,
>> Ivan
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From bgunter@4567 @end|ng |rom gm@||@com  Wed Oct 30 02:35:11 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Tue, 29 Oct 2019 18:35:11 -0700
Subject: [R] decomposing a string representing a valid mathematical
 expression?
In-Reply-To: <74be2c5a-5be8-aac6-61aa-a1022b8da1eb@gmail.com>
References: <CAAjnpdjeikZQ2uVGBPcy6P1R-8bhc_kWed0KAFi4i5oDraVzzg@mail.gmail.com>
 <20191029192247.1e213057@trisector>
 <CAGxFJbS3KLVxx1VsW3zZLwpW=Zd+Q-yRUZ9HjyBnRJ-Y9zpivQ@mail.gmail.com>
 <74be2c5a-5be8-aac6-61aa-a1022b8da1eb@gmail.com>
Message-ID: <CAGxFJbRoVjpkskaYdVB38h=hgFE2wqMgDKKvvVOWiroJwbNC8g@mail.gmail.com>

Yes, I agree. Maybe the clumsiness of my example might help clarify the
importance of clarifying the context/understanding the difficulty.

Cheers,
Bert


On Tue, Oct 29, 2019 at 5:22 PM Duncan Murdoch <murdoch.duncan at gmail.com>
wrote:

> On 29/10/2019 12:46 p.m., Bert Gunter wrote:
> > Does something like the following make any sense for your context?
> >
> >> z <- "(xy+ s)/ (ab +log(4.13))"
> >>
> >> lapply(parse(text = z), FUN = function(x)strsplit(deparse(x), split =
> > "[[:space:]]+"))
> > [[1]]
> > [[1]][[1]]
> > [1] "(xy"        "+"          "s)/(ab"     "+"          "log(4.13))"
>
> That's the wrong way to do it.  Notice the 3rd element,  "s)/(ab", which
> combines two partial operands and an operator.  Deparsing doesn't always
> introduce spaces, as your reprex assumes.
>
> I think Witold's request is quite hard to do.  The right way to handle
> expressions is as hierachical objects, like those returned from
> parse(text = z).  Turning those into character vectors of lexical tokens
> doesn't make sense.
>
> Perhaps if Witold explained the context of what he is trying to do
> someone could give a suggestion about a better approach.
>
> Duncan Murdoch
>
> >
> >
> > Cheers,
> > Bert
> >
> >
> > Bert Gunter
> >
> > "The trouble with having an open mind is that people keep coming along
> and
> > sticking things into it."
> > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> >
> >
> > On Tue, Oct 29, 2019 at 9:23 AM Ivan Krylov <krylov.r00t at gmail.com>
> wrote:
> >
> >> On Tue, 29 Oct 2019 13:55:27 +0100
> >> Witold E Wolski <wewolski at gmail.com> wrote:
> >>
> >>> Since R knows how to parse expressions these type of expressions I
> >>> would like to reuse some existing functions and not to use gsub or
> >>> strsplit etc.
> >>
> >> You might be interested in the `parse` function:
> >>
> >> x <- "(a+b) * c/(d * (e - f))"
> >> str(parse(text = x))
> >> # length 1 expression((a + b) * c/(d * (e - f)))
> >> #  - attr(*, "srcref")=List of 1
> >> #   ..$ : 'srcref' int [1:8] 1 1 1 23 1 23 1 1
> >> #   .. ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'
> >> <environment: 0x55ebecdac210>
> >> #  - attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile'
> >> <environment:0x55ebecdac210>
> >> #  - attr(*, "wholeSrcref")= 'srcref' int [1:8] 1 0 2 0 0 0 1 2
> >> #   ..- attr(*, "srcfile")=Classes 'srcfilecopy',
> >> 'srcfile'<environment:0x55ebecdac210>
> >> parse(text = x)[[1]]
> >> # (a + b) * c/(d * (e - f))
> >> parse(text = x)[[1]][1]
> >> # `/`()
> >> parse(text = x)[[1]][2]
> >> # ((a + b) * c)()
> >> parse(text = x)[[1]][3]
> >> # (d * (e - f))()
> >>
> >> Quoting ?expression,
> >>
> >>>> As an object of mode ?"expression"? is a list, it can be subsetted
> >>>> by ?[?, ?[[? or ?$?, the latter two extracting individual calls etc.
> >>
> >> --
> >> Best regards,
> >> Ivan
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >>
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>
>

	[[alternative HTML version deleted]]


From phii m@iii@g oii phiiipsmith@c@  Wed Oct 30 03:05:11 2019
From: phii m@iii@g oii phiiipsmith@c@ (phii m@iii@g oii phiiipsmith@c@)
Date: Tue, 29 Oct 2019 22:05:11 -0400
Subject: [R] " Error in firstnonmiss:lastnonmiss : argument of length 0 "
Message-ID: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>

I am having a problem that generates the error message: " Error in 
firstnonmiss:lastnonmiss : argument of length 0 ". There is an article 
on this in stackoverflow, but I have been unable to understand it well 
enough to solve my problem. Essentially, I have a data frame with 41 
indicator series and some of the series have missing values (NAs) at the 
beginning and/or the end. I want to fill in the missing values using 
ARIMA models, via the forecast() function. It works when I use my EXTEND 
function on a single series, but it fails when I try to loop through all 
41 series. Here is a reproducible example. Thanks for any advice.

# Reproducible example
# " Error in firstnonmiss:lastnonmiss : argument of length 0 "
# See also stackoverflow: 
https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement
library(forecast)
library(lubridate)
vseries <- dget("vseries.txt") # data frame containing REF_DATE and 41 
"indicator" vectors
dts <- dget("dts.txt") # data frame recording where NAs are in vseries - 
they will be replaced
testcase1 <- dget("testcase1.txt") # a vector for use in testing
# Function to fill in missing values (NAs) using ARIMA forecasts and 
backcasts
EXTEND <- function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
   if (!is.na(dt1)) {
     bfct = dt2-dt1+1 # number of months to backcast
     revx <- ts(rev(x),frequency=12)
     revx <- revx[1:(length(revx)-dt2)]
     fc <- forecast(auto.arima(revx),bfct)
     revx1 <- c(revx,fc$mean) # extend with forecasts (in fc$mean)
     m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
     y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
     x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
   }
   if (!is.na(dt3)) {
     ffct <- dt4-dt3+1 # number of months to forecast
     x <- x[1:(dt3-1)]
     fc <- forecast(auto.arima(x),ffct)
     x <- c(x,fc$mean)
   }
   return(x)
}
# Test EXTEND function with a single vector - apparently it works
(testcase1_extended <- EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
                               
vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
View(cbind(testcase1,testcase1_extended))
# Now use EXTEND to fill in the missing values in all 41 indicators in 
vseries
# Data frame dts has NAs where no extension is required, integer values 
showing where to start and
# where to end when extensions are required. Store extended series in 
vseries1.
vseries1 <- vseries
for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1 in 
vseries is REF_DATE
   if ( (!is.na(dts[1,j-1])) | (!is.na(dts[3,j-1])) ) {
     vseries1[,j] <- 
EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1],
                            
vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
   }
}
View(vseries)
View(vseries1)

dput() output for vseries:

structure(list(REF_DATE = c("2001-01-01", "2001-02-01", "2001-03-01",
"2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01", "2001-08-01",
"2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01", "2002-01-01",
"2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01", "2002-06-01",
"2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01", "2002-11-01",
"2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01", "2003-04-01",
"2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01", "2003-09-01",
"2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01", "2004-02-01",
"2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01", "2004-07-01",
"2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01", "2004-12-01",
"2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01", "2005-05-01",
"2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01", "2005-10-01",
"2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01", "2006-03-01",
"2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01", "2006-08-01",
"2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01", "2007-01-01",
"2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01", "2007-06-01",
"2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01", "2007-11-01",
"2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01", "2008-04-01",
"2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01", "2008-09-01",
"2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01", "2009-02-01",
"2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01", "2009-07-01",
"2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01", "2009-12-01",
"2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01", "2010-05-01",
"2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01", "2010-10-01",
"2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01", "2011-03-01",
"2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01", "2011-08-01",
"2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01", "2012-01-01",
"2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01", "2012-06-01",
"2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01", "2012-11-01",
"2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01", "2013-04-01",
"2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01", "2013-09-01",
"2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01", "2014-02-01",
"2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01", "2014-07-01",
"2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01", "2014-12-01",
"2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01", "2015-05-01",
"2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01", "2015-10-01",
"2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01", "2016-03-01",
"2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01", "2016-08-01",
"2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01", "2017-01-01",
"2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01", "2017-06-01",
"2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01", "2017-11-01",
"2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01", "2018-04-01",
"2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01", "2018-09-01",
"2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01", "2019-02-01",
"2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01", "2019-07-01"
), v1001816015 = c(17262087, 17014344, 20247169, 19144987, 19671015,
19189905, 14739759, 18235434, 16623028, 19087839, 18792227, 15362864,
16782525, 17523910, 19390559, 19783530, 20283113, 19318846, 16124593,
19250140, 18889900, 20916009, 19349004, 17140428, 17531326, 17559123,
19401870, 18748298, 18885310, 17982314, 14912147, 15835801, 17557392,
18431507, 17296519, 16050211, 15215468, 16939038, 19917657, 19027956,
19932323, 19921644, 16315362, 18862032, 19250137, 18862111, 18665646,
17710225, 16863860, 17594959, 20442499, 19721391, 20471368, 20466651,
16013264, 19545483, 19572010, 19837635, 19794191, 18282403, 17890774,
17694365, 21286043, 19339429, 20363518, 20802697, 16690141, 20060353,
19217265, 20687952, 20886199, 18925660, 19052279, 19444846, 23024759,
20960798, 21284786, 20601708, 17882780, 20226914, 19443713, 21213020,
19984134, 17515960, 17735035, 18639461, 19708496, 20218572, 20881111,
20967845, 20246946, 20205727, 20951905, 23040393, 21107926, 18556973,
15757698, 16235071, 18220863, 17502183, 16206875, 16664295, 16443231,
17309836, 18065805, 18425679, 18383119, 17930175, 16093108, 17853071,
20468225, 18944075, 19949187, 20940064, 18679964, 20517783, 21107272,
20935541, 20476625, 19111285, 18591785, 18648376, 22572654, 20878866,
21334626, 22356452, 19273175, 22959478, 22082938, 22830337, 22337136,
21205679, 20255195, 21009917, 23627267, 21570319, 23091288, 23252411,
21004135, 22349893, 20779032, 22622782, 22804069, 19504385, 20109262,
20720256, 22697357, 23405692, 23330003, 22617671, 21538128, 23130117,
22943596, 24431094, 23449486, 21320812, 20897790, 21679882, 25197042,
24941550, 25904330, 24960421, 23649466, 24701113, 25754289, 27899355,
25196278, 24819686, 23767512, 24169080, 28917366, 27068182, 27040475,
28384836, 26443178, 27799087, 28229589, 28740172, 27763129, 27108195,
25800631, 27411304, 29036170, 27999387, 27759231, 29219186, 25857724,
29127423, 28085258, 28804390, 28364963, 26162758, 26152772, 26468833,
31455559, 29035964, 31486857, 32048318, 26815735, 29868265, 28179157,
28333370, 29749364, 27253403, 25959199, 26900190, 31813939, 29778379,
31070923, 31387782, 28663047, 30679026, 29362553, 31046824, 29820781,
28263730, 28062692, 28162744, 32752923, 30838600, 32865423, 30947662,
29590180), v1001816392 = c(14810380, 14200859, 16756119, 15217622,
16152695, 15734143, 11943953, 15182087, 14144821, 15327643, 15666826,
12873678, 14082760, 15086691, 15833563, 15883991, 16045785, 15250640,
12445691, 15776653, 15481482, 16487072, 15489524, 12938416, 13984446,
14161079, 15530205, 14786496, 14588586, 13934508, 11387684, 12738958,
14653137, 15079013, 13731146, 13103385, 12270059, 14238311, 16669218,
15938279, 16007457, 17036074, 12355149, 15533794, 15448684, 15377076,
14589920, 13589694, 13549648, 14624327, 15706302, 15239530, 15633935,
15974885, 11803449, 15736297, 15611744, 16105812, 15964696, 14282888,
14526761, 14449653, 16434235, 14597318, 15435231, 15712547, 11808763,
14862181, 14503627, 15295540, 15261211, 14585813, 15410585, 14739285,
17582347, 16171120, 15931155, 15565709, 12619998, 14547113, 13908728,
14778066, 14423148, 11701775, 12670956, 13600996, 14284120, 14157825,
13998465, 14543121, 12774383, 13773610, 14353232, 14770313, 13084751,
11637597, 9588706, 10497657, 11879518, 10586090, 9367990, 9888218,
9223044, 9922735, 11365570, 11658665, 11111213, 10508361, 10292744,
10992491, 13210908, 11847469, 12344814, 12772222, 10359995, 12464327,
12473841, 13137908, 13140871, 12928499, 12412546, 11481365, 14066907,
12082611, 13050270, 12875573, 11009100, 13447116, 13903540, 13928150,
13858803, 13349287, 13017205, 13136581, 14629295, 13175174, 14259088,
14721292, 11943999, 13855276, 13219889, 14406322, 13976428, 12348507,
12795753, 12884766, 14475286, 14122036, 14061445, 14563402, 12114754,
13444547, 13827458, 14397852, 14401695, 13108404, 12684810, 13122736,
15857365, 14149173, 15132604, 15077002, 13674898, 14475121, 16407589,
16552843, 15367514, 15446201, 14885482, 13981302, 17023925, 15389386,
15181518, 17365931, 15884142, 16708039, 17481246, 17751529, 17312508,
17964853, 17635476, 17403932, 18117391, 16708266, 16449636, 17043771,
14607070, 17536121, 17562680, 17898917, 17882877, 16194251, 16292556,
15904704, 18550339, 16665634, 18563263, 17857082, 13863082, 16254963,
15516553, 16359112, 17351737, 16080636, 16136849, 15070366, 17819011,
16691318, 17603308, 18075717, 15809284, 16585137, 16279853, 18388536,
18103660, 15593270, 17027143, 15580767, 17959460, 17242596, 19056997,
17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077, 15407812,
14247486, 15080786, 14660425, 11002204, 14202820, 13271658, 14415174,
14508659, 11955671, 13146722, 14074199, 14791521, 14924080, 15044874,
14018888, 11578184, 14895437, 14496000, 15378756, 14347316, 11919494,
12767068, 13001096, 14151808, 13591747, 13337681, 12781326, 10377252,
11837321, 13499209, 13699497, 12521117, 11856721, 11166102, 12992845,
15124559, 14541534, 14645934, 15470071, 11120381, 14214588, 13924365,
13823149, 12964700, 12076947, 12095824, 13216048, 14025754, 13550102,
13914087, 14115722, 10160966, 14024121, 14022788, 14334153, 14102556,
12565384, 12839303, 12721934, 14366235, 12974063, 13389033, 13670648,
10141903, 12812065, 12299642, 13098258, 12851798, 12327714, 12847367,
12591336, 14825763, 13341600, 13237020, 12836974, 10203377, 12244381,
11765368, 12504709, 11956004, 9762716, 10401787, 11322046, 11770050,
11765753, 11284183, 11974342, 10123526, 11289637, 11723217, 12097708,
10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
11119562, 9746562, 10190889, 10039663, 8115021, 10083267, 10621244,
10939833, 10470646, 10082230, 10164563, 10122394, 11107394, 10523656,
11128673, 11656285, 8974980, 10923049, 10334113, 11053800, 11353041,
9446652, 9983629, 9791384, 11053091, 11219875, 11272210, 11132326,
9306880, 10917075, 10818430, 11628396, 11478765, 10251218, 10184002,
10281970, 12121307, 11862960, 12308111, 12096729, 10731262, 11590206,
12816366, 12961856, 11982666, 12058824, 11517780, 11085487, 13436617,
12553043, 12335153, 14275307, 12679415, 13737743, 14456727, 14243928,
14099287, 14174328, 14110113, 14426606, 14658088, 13508307, 13826213,
14372422, 11711022, 14076134, 13858027, 14416062, 14337693, 12754175,
13196514, 13101829, 14765626, 13632730, 14826133, 14505383, 10931400,
13195201, 12111306, 13091406, 14152405, 12544611, 12451609, 12366614,
13998036, 13374490, 13857587, 14176873, 12006484, 13497534, 12786433,
14622182, 13953516, 12187672, 12676560, 12261957, 14051828, 13274018,
14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
14782841, 13968637, 14630933, 14467257, 10134331, 13173103, 12173082,
13608236, 13678969, 11195227, 12282398, 12965165, 14472495, 14636326,
14869906, 14265366, 10942242, 14014202, 13616642, 15069966, 13877119,
11980443, 12667065, 12919482, 14273228, 13699916, 13856189, 13126548,
9946994, 11150401, 12469921, 12936259, 12054563, 11110027, 10695234,
12210008, 14226547, 13555826, 13976396, 14022407, 10640447, 12927490,
13216051, 12728488, 12215523, 11892094, 11408471, 11992608, 13925071,
13514739, 14058000, 13934254, 9995077, 13074057, 12947771, 13135370,
12911642, 12064102, 11668352, 12008392, 14377904, 13014856, 13492799,
13909599, 10372128, 13203866, 12301356, 12880238, 13158430, 12127888,
11990355, 12589435, 15029864, 13510353, 14063373, 13387185, 10548301,
12513166, 12253214, 13093732, 12154649, 10724007, 10974227, 11593154,
12167544, 12576271, 13252139, 13282088, 11986385, 12388363, 12622830,
13808547, 12412223, 10498437, 8868838, 9756446, 10918198, 10608854,
9635848, 10008018, 9262002, 10205239, 10773340, 10943384, 10612403,
10447653, 9446266, 10744663, 12072595, 11437008, 12055765, 12335679,
10375837, 11786080, 11836877, 11717685, 11050898, 10512867, 10507066,
10651956, 13301571, 11834961, 12194410, 12513463, 10330839, 12542127,
12113245, 12524548, 11821431, 11259600, 11364736, 11684179, 13279826,
12466423, 13651294, 13655882, 11400445, 12646589, 11701238, 12657427,
12432006, 10561389, 11303161, 11657370, 13166161, 13479612, 13452761,
13182454, 11606259, 13265594, 12954057, 13697290, 12957655, 11701079,
11521999, 12453497, 14751017, 14372295, 15060344, 14724363, 13341724,
14051091, 14306668, 15496758, 13943134, 13813528, 13107368, 13650455,
16239726, 15416259, 15520089, 16101026, 14490154, 15577891, 15646361,
15773300, 15292659, 15452107, 14554541, 15530759, 16579288, 16527074,
16377782, 17185264, 14518363, 16503262, 15763025, 15855797, 15281552,
14373491, 14894646, 15106333, 17847651, 16239885, 18225339, 18182041,
14161870, 16504649, 15462683, 15413283, 15693526, 14506023, 14000735,
15234901, 17994510, 16652601, 17250143, 17357528, 14854995, 16636582,
15856325, 16470266, 15502332, 14715205, 14804754, 15773203, 17997663,
16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780, 1264742,
1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232, 1380845,
1096564, 804996, 947642, 966950, 1016699, 918866, 849556, 1053348,
986012, 946487, 950837, 940777, 1201431, 1056492, 869576, 1029796,
791533, 1342575, 768689, 1129197, 888039, 1196702, 844473, 836908,
1000086, 948109, 955454, 905751, 1334532, 795432, 939875, 1055059,
1162267, 887897, 1054106, 1321348, 926182, 747960, 994037, 934344,
931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030, 959260,
880369, 1003863, 1100186, 1106088, 943878, 908737, 921558, 760214,
1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984, 942851,
1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
1424836, 1645926, 1684631, 940698, 828397, 856445, 841089, 828632,
840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486, 1096690,
1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
1052234, 1266479, 1297035, 962400, 940103, 811110, 772748, 665961,
734449, 784144, 758539, 894121, 1055843, 1236130, 1192797, 960006,
849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
1041938, 987341, 1054306, 1143262, 815543, 857805, 842812, 796604,
834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
864687, 789247, 1026369, 995372, 1041521, 959846, 1014128, 1084626,
957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
920577, 889896, 831708, 1027160, 1004141, 1053969, 978913, 1058493,
1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
858629, 828679, 785364, 1057204, 1035422, 1046472, 974958, 1091468,
1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
1070771, 1101986, 996189, 1007737, 846412, 739882, 983093, 971856,
1009164, 955152, 1042033, 1056119, 910781, 915331, 869120, 845165,
782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
960101, 944055, 1019181, 1128435, 995324, 1002176, 955042, 892834,
857278, 807727, 1035350, 992653, 1043240, 991543, 1012867, 1094743,
956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970, 72620,
72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
20429451, 20443702, 20442474, 20453171, 20494907, 20469899, 20426712,
20423088, 20431074, 20563595, 20608707, 20722376, 20729355, 20768807,
21040249, 21061442, 21072385, 21386395, 21361143, 21481726, 21596243,
21614432, 21702298, 21736376, 21736357, 21744928, 21848072, 21846894,
21947454, 21940721, 22017595, 22187732, 22226844, 22379231, 22554639,
22641673, 22744549, 22907620, 22980134, 23092919, 23181451, 23206767,
23425453, 23318773, 23348036, 23517288, 23482935, 23602818, 23784278,
23974850, 23921664, 24074395, 24223603, 24289526, 24427768, 24503153,
24606727, 24715635, 24661798, 24748394, 24847099, 24906920, 25035239,
25153096, 25225233, 25425738, 25594618, 25555772, 25803231, 25918644,
26050884, 26090730, 26304952, 26332475, 26592901, 26628543, 26691191,
26795716, 26761208, 26875873, 26972976, 26938528, 27101037, 27180711,
27241360, 27354111, 27442498, 27514060, 27466513, 27514474, 27386049,
27517692, 27313803, 27136562, 27069115, 26962612, 26955040, 26877705,
26886419, 26588008, 26677212, 26851356, 26953581, 27016460, 27155400,
27251087, 27253169, 27300593, 27342306, 27436290, 27580341, 27686074,
27860430, 27878998, 28147776, 28256507, 28354370, 28557974, 28716843,
28861177, 29057415, 28913944, 28887173, 29038232, 29065032, 29165480,
29222770, 29278705, 29304052, 29449805, 29488534, 29620041, 29795842,
29879786, 29839111, 30084067, 30096498, 30229968, 30298304, 30287625,
30389211, 30484631, 30628734, 30641277, 30932839, 30736619, 30970797,
30851107, 30920882, 31165786, 31066548, 31258395, 31403046, 31382224,
31477046, 31488824, 31587271, 31728896, 31880578, 32021255, 32294373,
32244815, 32415589, 32434552, 32436242, 32524750, 32735158, 33033517,
33172260, 33441230, 33246392, 33273322, 33847198, 33389255, 33687475,
34049329, 33935583, 33971885, 33781778, 33706550, 33873093, 33938988,
33985921, 34184776, 34057971, 34092996, 34084079, 34099494, 34350509,
34805403, 34785441, 34875075, 35152571, 35003861, 35186315, 35518127,
35361642, 35984437, 36321295, 36349916, 36944209, 36901171, 36971724,
37173621, 37152181, 37260262, 37492044, 37517038, 37471633, 37827498,
37872621, 38129314, 38213257, 38064353, 38230587, 38258308, 38560349,
38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926, 5937.3,
5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6, 6075.3,
6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3, 6379.3,
6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623, 6638.2,
6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5, 6461.2,
6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935, 6930.3,
6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
     v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
     62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
     62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
     63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1, 63.8,
     63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
     63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
     63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
     62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
     63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
     63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
     60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
     60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
     61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
     61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
     60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
     61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
     61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8, 60.7,
     60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8, 60.9,
     60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
     60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
     61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
     60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
     ), v382201 = c(212164, 193583, 215866, 211263, 222871, 215519,
     219942, 216251, 207703, 212013, 207781, 219596, 222977, 202836,
     225014, 217040, 223269, 212081, 211644, 208999, 200885, 207899,
     204091, 216573, 218997, 195583, 215113, 206360, 214884, 208636,
     214072, 211055, 206974, 211607, 205837, 215020, 216294, 201218,
     216097, 209029, 216690, 207829, 211911, 212123, 205356, 211083,
     205076, 212205, 212779, 191520, 213090, 209484, 215975, 205127,
     207085, 209844, 201884, 206749, 200246, 208719, 211380, 190749,
     209346, 200994, 207431, 198322, 201983, 200869, 196045, 199493,
     195149, 205332, 207126, 185698, 207850, 205701, 216965, 209296,
     215644, 214061, 205121, 209924, 204004, 213241, 217848, 203144,
     213848, 206368, 212813, 200362, 202502, 202339, 195491, 201314,
     196093, 206104, 208701, 190879, 213025, 208090, 217292, 210890,
     216526, 213092, 206553, 209884, 204042, 211314, 212389, 192037,
     213815, 208826, 216756, 207533, 210091, 212435, 204595, 209379,
     203827, 210218, 212451, 192470, 214095, 208717, 217913, 212215,
     217087, 218783, 209940, 214059, 208998, 220829, 223171, 208246,
     222458, 215499, 221694, 213553, 219458, 221757, 214203, 221003,
     214380, 221215, 220019, 197689, 218045, 210866, 218954, 209825,
     212145, 218399, 210138, 215187, 206605, 211504, 212024, 192311,
     212260, 207136, 215097, 210584, 218528, 220739, 214149, 218748,
     208968, 216712, 218399, 197318, 223819, 221927, 234903, 228622,
     233660, 231277, 221779, 227918, 220888, 231634, 235272, 220580,
     233970, 226381, 235613, 227998, 234353, 235796, 230542, 239605,
     233645, 245124, 248935, 226969, 252118, 245888, 253940, 242869,
     249518, 250305, 242427, 251666, 242906, 253645, 257586, 236425,
     262768, 252595, 262910, 254396, 254417, 252449, 241404, 246729,
     237361, 248692, 251752, 228933, 256286, 249336, 255692, 247109,
     251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
     97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
     99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
     104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7, 103.8,
     104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
     108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
     110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
     111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1, 112.6,
     112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
     113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
     125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
     130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7, 134.3,
     134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
     135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
     139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
     141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
     143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
     144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
     145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8, 141.5,
     147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
     141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
     145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
     147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
     149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
     152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
     ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
     108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
     101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
     100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8, 98.1,
     98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
     98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6, 97.5,
     101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
     103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
     101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5, 105.4,
     98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
     120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2, 137.7,
     140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
     138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
     130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
     143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4, 143.5,
     143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
     142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
     132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
     139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
     144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6, 141.5,
     141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7, 137.1,
     134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
     133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
     134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
     130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130), v41691919 = 
c(96.5,
     97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
     97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3, 100.9,
     101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2, 102.3,
     102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
     104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
     105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5, 108.2,
     107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5, 109.3,
     109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
     111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
     110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8, 115.1,
     113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
     113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1, 115.3,
     115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9, 117.8,
     118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
     121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
     121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
     123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
     124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7, 126.8,
     126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2, 128.4,
     128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
     130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
     131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
     132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
     135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
     138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8, 97.7,
     98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3, 100.2,
     100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
     102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
     100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8, 104.3,
     104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
     107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
     108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
     109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
     111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
     115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
     121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
     121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
     123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4, 127.1,
     128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4, 130.6,
     131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
     131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6, 133.5,
     133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
     136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
     140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
     142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
     142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
     143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
     146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
     148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
     ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
     99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
     99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
     102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
     104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
     106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
     108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
     112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
     112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4, 114.7,
     115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
     117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
     120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
     118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
     122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
     123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3, 124.3,
     124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5, 125.4,
     125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1, 127.2,
     127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9, 132.4,
     132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4, 133.5,
     133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
     135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
     138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7, 140.3,
     140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
     141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7, 143.9,
     144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3), v41691965 = 
c(96.9,
     97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
     98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
     100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
     101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5, 101.7,
     102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2, 101.2,
     101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5, 102.2,
     101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6, 101.7,
     100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
     103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4, 103.2,
     103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6, 106.1,
     105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
     106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3, 109.2,
     109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
     110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
     113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
     113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
     115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6, 115.6,
     115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
     119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
     121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3, 122.6,
     123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7, 123.5,
     123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5, 123.2,
     124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2, 125.2,
     125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3, 124.9,
     125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
     105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
     99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
     101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9, 95.6,
     96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
     96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
     97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
     92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
     90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
     95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
     93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
     89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
     92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
     93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6, 88.3,
     92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
     85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
     90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
     91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3, 91.5,
     91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
     93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
     91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
     87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
     92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988 = 
c(98.2,
     98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
     94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3, 101.2,
     101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2, 103.9,
     104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6, 106.8,
     107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
     109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
     113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8, 116.9,
     117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
     118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
     118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
     116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5, 116.7,
     114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119, 119.1,
     119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
     125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5, 129.5,
     130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
     130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3, 131.3,
     131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7, 132.3,
     133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8, 131.4,
     129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4, 130.6,
     128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6, 128.6,
     130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
     133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
     136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
     142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
     143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
     110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
     88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
     104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
     111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
     127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1, 114.8,
     117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
     127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9, 154.3,
     152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
     155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
     152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
     122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
     143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
     144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
     168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
     177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8, 182.4,
     187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6, 183.7,
     182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
     189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9, 181.1,
     167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
     163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2, 146.8,
     152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1, 163.9,
     156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8, 167.2,
     177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7, 194.8,
     192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
     186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260, 1172192,
     1173559, 1173865, 1163159, 1173230, 1168291, 1148136, 1135730,
     1176671, 1184706, 1186957, 1177962, 1194820, 1192486, 1204268,
     1196677, 1198166, 1192339, 1188059, 1189860, 1195524, 1179193,
     1160881, 1156255, 1154137, 1151079, 1223651, 1193786, 1187791,
     1185070, 1222101, 1233158, 1222271, 1205916, 1211049, 1237429,
     1221806, 1288146, 1268949, 1239192, 1259979, 1259944, 1257909,
     1229472, 1206627, 1245003, 1262388, 1269395, 1276432, 1277248,
     1261277, 1291593, 1298114, 1305550, 1267413, 1294688, 1295694,
     1317484, 1333362, 1330478, 1362024, 1326774, 1319396, 1318673,
     1334044, 1346594, 1339499, 1363158, 1404445, 1434255, 1396545,
     1355204, 1367796, 1352577, 1349119, 1374720, 1398253, 1369215,
     1413653, 1431392, 1421479, 1419408, 1487702, 1434740, 1434398,
     1472990, 1471028, 1460549, 1461166, 1482247, 1490620, 1486005,
     1467463, 1444413, 1469876, 1477567, 1460040, 1446679, 1452324,
     1456279, 1455826, 1472154, 1485169, 1464240, 1487456, 1518692,
     1516207, 1512158, 1535860, 1535652, 1538473, 1549310, 1517172,
     1511436, 1531246, 1558108, 1555668, 1566767, 1566882, 1580492,
     1566209, 1594096, 1600677, 1613907, 1619388, 1607791, 1602639,
     1612385, 1631814, 1643924, 1650496, 1659254, 1679545, 1674956,
     1675779, 1676020, 1676843, 1679625, 1694232, 1695255, 1720478,
     1741576, 1736856, 1722187, 1750359, 1728204, 1736587, 1752139,
     1752173, 1770304, 1762990, 1777806, 1787814, 1766222, 1771789,
     1806919, 1817679, 1826720, 1854228, 1850492, 1857490, 1892994,
     1890432, 1892879, 1890258, 1911380, 1915088, 1891501, 1922679,
     1947153, 1994578, 1970953, 1983867, 2014740, 2008756, 2030234,
     2032886, 2059674, 2068652, 2073047, 2083031, 2136894, 2115520,
     2130280, 2158663, 2134182, 2172927, 2173367, 2173553, 2156196,
     2218283, 2237749, 2206090, 2227664, 2221296, 2238127, 2265268,
     2262536, 2284770, 2309970, 2310161, 2307041, 2331779, 2369833,
     2388535, 2335561, 2373858, 2397911, 2392511, 2405673, 2410779,
     2411443, 2438862, 2483861, 2444050, 2429816, 2451814, 2464695,
     2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
     12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
     12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
     10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
     11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
     10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
     11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
     11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
     10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
     11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
     12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
     12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
     12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
     12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
     12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
     11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
     11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
     11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
     12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
     12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
     12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
     12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
     12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
     12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
     2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
     778862, 1138557, 1636203, 2233518, 2114752, 1974646, 1534387,
     998860, 559524, 447850, 393285, 402189, 651017, 1523288,
     2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
     452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
     2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
     425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
     1411442, 900073, 491461, 413880, 390364, 393934, 586734,
     1266299, 2202400, 2309033, 2164470, 2145389, 1328220, 736964,
     480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
     3283157, 3804876, 3244792, 2477267, 1569953, 1169971, 1121247,
     1218442, 1182862, 1409876, 2241749, 3274756, 3494706, 3615470,
     3455902, 2199773, 1647961, 1230718, 1125165, 1078839, 1099809,
     1539702, 2190793, 3126922, 3886115, 3290320, 2942615, 2110948,
     1405583, 1308947, 1014607, 1148503, 1066941, 1596998, 2039112,
     2798847, 3446040, 3255602, 2815621, 1839592, 1426302, 1177683,
     1090902, 1145557, 1140902, 1524916, 2145484, 3256107, 3775523,
     3559115, 3289994, 2219521, 1774688, 1291471, 1191457, 1170953,
     1159087, 1543907, 2159364, 2786142, 3447635, 3179625, 2751435,
     2152765, 1596927, 1290466, 1278246, 1247608, 1253886, 1622877,
     2433993, 2831938, 3565488, 3636268, 3253630, 2559152, 1626984,
     1251460, 1163841, 1130486, 1190063, 1491645, 2345181, 3346689,
     4165953, 3842336, 3682352, 2580288, 1731497, 1199181, 1098817,
     1113400, 1079822, 1464918, 2344949, 3006111, 3847035, 4007847,
     3550039, 2397284, 1457876, 1155121, 1115934, 1113953, 1185585,
     1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
     NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
     76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387, 77.807,
     74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
     87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041, 114.235,
     82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032, 108.011,
     79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
     83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143, 57.357,
     71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519, 70.549,
     64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906, 74.252,
     84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522, 74.888,
     52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3, 82.511,
     71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79, 72.919,
     92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501, 43.62,
     37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622, 57.833,
     72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712, 69.299,
     56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477, 50.752,
     66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846, 66.99,
     75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376, 76.071,
     70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346, 47.764,
     68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928, 60.752,
     71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44, 65.443,
     55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084, 61.375,
     41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148, 90.318,
     75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21, 72.047,
     88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135, 100.138,
     84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755, 77.894,
     59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223, 54.825,
     104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
     73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
     v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
     9584905, 9382415, 9482770, 9307864, 9492970, 9715825, 9940764,
     10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
     10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
     10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
     10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
     10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
     10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
     11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
     11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
     11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
     11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
     11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
     12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
     12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
     12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
     11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
     12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
     12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
     12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
     13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
     13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
     13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
     13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
     13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
     14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
     14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
     15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
     14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
     15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
     16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
     16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
     17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
     18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
     18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
     19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
     18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
     19635452), v52368043 = c(17055707, 16701281, 16786260, 16756166,
     16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
     16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
     18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
     19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
     18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
     19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
     19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
     19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
     20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
     20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
     21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
     20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
     22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
     22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
     22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
     21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
     20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
     22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
     22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
     22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
     23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
     23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
     23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
     24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
     23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
     24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
     25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
     25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
     27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
     28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
     28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
     29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
     31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
     32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
     31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
     32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
     32796030, 32840886, 33870331), v54027371 = c(5006719, 5067172,
     5060865, 5062576, 5083254, 5072377, 5031234, 5052979, 5027204,
     5043632, 5035454, 5044842, 5063238, 5093024, 5091640, 5102054,
     5133352, 5142226, 5165655, 5203037, 5186307, 5174704, 5194163,
     5190310, 5232432, 5210572, 5234726, 5235080, 5254050, 5245134,
     5245175, 5249094, 5235952, 5262268, 5263595, 5253813, 5274263,
     5265423, 5299891, 5327379, 5316191, 5331555, 5346574, 5307140,
     5337742, 5347287, 5348381, 5377210, 5374212, 5383470, 5366697,
     5392882, 5388985, 5416367, 5417477, 5433010, 5448853, 5441429,
     5458425, 5471520, 5489243, 5495727, 5511121, 5512216, 5526438,
     5537303, 5522426, 5518461, 5536277, 5501749, 5564018, 5570599,
     5584461, 5593844, 5590604, 5602700, 5608632, 5616521, 5608951,
     5623657, 5616005, 5645595, 5647305, 5647451, 5693895, 5691488,
     5700220, 5707445, 5725799, 5728509, 5717031, 5723853, 5711995,
     5719339, 5681740, 5663311, 5643435, 5611268, 5590716, 5570704,
     5557739, 5536962, 5560436, 5529977, 5551949, 5574728, 5563493,
     5575590, 5577965, 5587020, 5596086, 5612563, 5609016, 5626466,
     5654424, 5633372, 5661574, 5667386, 5669274, 5689694, 5681104,
     5701730, 5706973, 5707289, 5692449, 5724435, 5730464, 5731650,
     5750310, 5739110, 5745413, 5742657, 5748606, 5744911, 5767140,
     5785313, 5808618, 5816135, 5806957, 5825860, 5814678, 5800046,
     5822757, 5809772, 5808239, 5818814, 5833898, 5829771, 5825801,
     5833676, 5847351, 5886288, 5872335, 5876134, 5878844, 5883709,
     5891947, 5885232, 5889681, 5891564, 5921837, 5931270, 5952834,
     5959543, 5957751, 5970395, 5962589, 5958983, 5996099, 5997162,
     5997791, 6025616, 6046802, 6043966, 6072665, 6063075, 6065666,
     6115610, 6091893, 6118988, 6119637, 6126261, 6136886, 6169330,
     6172147, 6198848, 6202387, 6197097, 6228521, 6219420, 6240999,
     6266000, 6254684, 6277414, 6289899, 6290412, 6302735, 6343442,
     6341087, 6359345, 6383177, 6364995, 6373585, 6394318, 6396556,
     6406482, 6430135, 6428086, 6458862, 6470913, 6480563, 6509009,
     6514678, 6545545, 6547838, 6538390, 6566127, 6566755, 6578311,
     6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
     692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69, 699.31,
     697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05, 708.58,
     709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96, 716.06,
     724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
     736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98, 752.13,
     745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22, 763.57,
     770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65, 789.71,
     784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76, 783.53,
     781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6, 806.36,
     802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27, 821.08,
     823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26, 838.09,
     840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65, 840.76,
     843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04, 853.68,
     852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13, 873.52,
     875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37, 897.82,
     894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08, 888.93,
     901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11, 902.56,
     909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03, 911.93,
     913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35, 920.2,
     924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
     938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82, 950.06,
     956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15, 966.48,
     968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64, 974.42,
     978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
     982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24, 1002.93,
     1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01, 1012.58,
     1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26, 1034.06,
     1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
     1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
     31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
     31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
     31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
     31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
     31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
     31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
     31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1, 30.8,
     30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
     30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3, 30.4,
     30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
     30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
     30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
     30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
     30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
     30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
     30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
     30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
     30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
     30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
     30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4, 30.4,
     30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
     29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
     22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406, 20917,
     21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253, 22542,
     23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269, 23088,
     21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371, 23691,
     25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459, 20867,
     21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359, 21206,
     23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132, 22893,
     22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387, 25378,
     24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948, 23937,
     27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165, 27903,
     30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645, 28820,
     26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664, 29056,
     28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457, 25821,
     29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086, 31843,
     33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727, 34795,
     33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568, 36096,
     35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920, 33633,
     33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653, 35486,
     35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129, 37903,
     37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617, 38777,
     38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330, 39600,
     40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405, 41141,
     41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908, 44375,
     43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686, 45193,
     44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
     85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
     92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
     100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
     96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9, 95.7,
     94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
     93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
     88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
     101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
     104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
     112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
     115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4,
     114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8,
     113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2,
     129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3,
     121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
     142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
     117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
     132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7,
     128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
     130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
     131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
     135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
     136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
     135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
     100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
     98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
     89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
     86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
     96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
     97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
     97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
     97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
     102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
     103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107, 107.5,
     106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7, 102.7,
     104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
     104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
     119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2, 117.2,
     115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3, 117.4,
     120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
     123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
     140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
     136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7, 128.4,
     130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
     118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4, 132.6,
     128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
     120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5, 121.1,
     122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837, 23571783,
     24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
     23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
     24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
     25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
     25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
     24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
     25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
     25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
     24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
     25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
     24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
     24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
     25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
     23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
     22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
     22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
     17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
     19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
     19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
     20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
     20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
     21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
     22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
     22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
     22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
     22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
     23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
     23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
     23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
     24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
     24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
     25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
     25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
     24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
     26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
     26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
     26637112, 26198157, 26778716, 26846047, 26409309)), row.names = 
c(NA,
-223L), class = c("tbl_df", "tbl", "data.frame"))

dput() output for dts:


structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
     X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 = c(NA_real_,
     NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
     NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
     X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
     120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
     NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
     ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
     NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
     ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 = 
c(NA_real_,
     NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
     NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
     ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 = 
c(NA_real_,
     NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
     NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
     ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 = 
c(NA_real_,
     NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
     NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_, NA_real_
     ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 = 
c(NA_real_,
     NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
     NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
     NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
     ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 = c(NA,
     NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
     NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L), class = 
"data.frame")

dput() output for testcase1:

c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6, 104.3,
102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
135.1, NA, NA)


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Oct 30 10:17:21 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 30 Oct 2019 09:17:21 +0000
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
Message-ID: <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>

Hello,

Is this as simple as


if ( (!is.na(dts[1,j-1])) & (!is.na(dts[3,j-1])) ) {


(change the logical operator from '|' to '&')?
The result vseries1 still has some NA's at the end of some of its series.

Hope this helps,

Rui Barradas

?s 02:05 de 30/10/19, phil at philipsmith.ca escreveu:
> I am having a problem that generates the error message: " Error in 
> firstnonmiss:lastnonmiss : argument of length 0 ". There is an article 
> on this in stackoverflow, but I have been unable to understand it well 
> enough to solve my problem. Essentially, I have a data frame with 41 
> indicator series and some of the series have missing values (NAs) at the 
> beginning and/or the end. I want to fill in the missing values using 
> ARIMA models, via the forecast() function. It works when I use my EXTEND 
> function on a single series, but it fails when I try to loop through all 
> 41 series. Here is a reproducible example. Thanks for any advice.
> 
> # Reproducible example
> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
> # See also stackoverflow: 
> https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement 
> 
> library(forecast)
> library(lubridate)
> vseries <- dget("vseries.txt") # data frame containing REF_DATE and 41 
> "indicator" vectors
> dts <- dget("dts.txt") # data frame recording where NAs are in vseries - 
> they will be replaced
> testcase1 <- dget("testcase1.txt") # a vector for use in testing
> # Function to fill in missing values (NAs) using ARIMA forecasts and 
> backcasts
> EXTEND <- function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
>  ? if (!is.na(dt1)) {
>  ??? bfct = dt2-dt1+1 # number of months to backcast
>  ??? revx <- ts(rev(x),frequency=12)
>  ??? revx <- revx[1:(length(revx)-dt2)]
>  ??? fc <- forecast(auto.arima(revx),bfct)
>  ??? revx1 <- c(revx,fc$mean) # extend with forecasts (in fc$mean)
>  ??? m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
>  ??? y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
>  ??? x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
>  ? }
>  ? if (!is.na(dt3)) {
>  ??? ffct <- dt4-dt3+1 # number of months to forecast
>  ??? x <- x[1:(dt3-1)]
>  ??? fc <- forecast(auto.arima(x),ffct)
>  ??? x <- c(x,fc$mean)
>  ? }
>  ? return(x)
> }
> # Test EXTEND function with a single vector - apparently it works
> (testcase1_extended <- EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
> View(cbind(testcase1,testcase1_extended))
> # Now use EXTEND to fill in the missing values in all 41 indicators in 
> vseries
> # Data frame dts has NAs where no extension is required, integer values 
> showing where to start and
> # where to end when extensions are required. Store extended series in 
> vseries1.
> vseries1 <- vseries
> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1 in 
> vseries is REF_DATE
>  ? if ( (!is.na(dts[1,j-1])) | (!is.na(dts[3,j-1])) ) {
>  ??? vseries1[,j] <- 
> EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1], 
> 
> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
>  ? }
> }
> View(vseries)
> View(vseries1)
> 
> dput() output for vseries:
> 
> structure(list(REF_DATE = c("2001-01-01", "2001-02-01", "2001-03-01",
> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01", "2001-08-01",
> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01", "2002-01-01",
> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01", "2002-06-01",
> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01", "2002-11-01",
> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01", "2003-04-01",
> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01", "2003-09-01",
> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01", "2004-02-01",
> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01", "2004-07-01",
> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01", "2004-12-01",
> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01", "2005-05-01",
> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01", "2005-10-01",
> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01", "2006-03-01",
> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01", "2006-08-01",
> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01", "2007-01-01",
> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01", "2007-06-01",
> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01", "2007-11-01",
> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01", "2008-04-01",
> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01", "2008-09-01",
> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01", "2009-02-01",
> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01", "2009-07-01",
> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01", "2009-12-01",
> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01", "2010-05-01",
> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01", "2010-10-01",
> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01", "2011-03-01",
> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01", "2011-08-01",
> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01", "2012-01-01",
> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01", "2012-06-01",
> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01", "2012-11-01",
> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01", "2013-04-01",
> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01", "2013-09-01",
> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01", "2014-02-01",
> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01", "2014-07-01",
> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01", "2014-12-01",
> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01", "2015-05-01",
> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01", "2015-10-01",
> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01", "2016-03-01",
> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01", "2016-08-01",
> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01", "2017-01-01",
> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01", "2017-06-01",
> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01", "2017-11-01",
> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01", "2018-04-01",
> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01", "2018-09-01",
> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01", "2019-02-01",
> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01", "2019-07-01"
> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987, 19671015,
> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227, 15362864,
> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846, 16124593,
> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326, 17559123,
> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801, 17557392,
> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657, 19027956,
> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111, 18665646,
> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368, 20466651,
> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403, 17890774,
> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141, 20060353,
> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846, 23024759,
> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713, 21213020,
> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572, 20881111,
> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926, 18556973,
> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295, 16443231,
> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108, 17853071,
> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783, 21107272,
> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654, 20878866,
> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337, 22337136,
> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288, 23252411,
> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385, 20109262,
> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128, 23130117,
> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882, 25197042,
> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289, 27899355,
> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182, 27040475,
> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129, 27108195,
> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186, 25857724,
> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772, 26468833,
> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265, 28179157,
> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939, 29778379,
> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824, 29820781,
> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423, 30947662,
> 29590180), v1001816392 = c(14810380, 14200859, 16756119, 15217622,
> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643, 15666826,
> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785, 15250640,
> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416, 13984446,
> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684, 12738958,
> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311, 16669218,
> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684, 15377076,
> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530, 15633935,
> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696, 14282888,
> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547, 11808763,
> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585, 14739285,
> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113, 13908728,
> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120, 14157825,
> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313, 13084751,
> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990, 9888218,
> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361, 10292744,
> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995, 12464327,
> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365, 14066907,
> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540, 13928150,
> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174, 14259088,
> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428, 12348507,
> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402, 12114754,
> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810, 13122736,
> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121, 16407589,
> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925, 15389386,
> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529, 17312508,
> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636, 17043771,
> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251, 16292556,
> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082, 16254963,
> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366, 17819011,
> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853, 18388536,
> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596, 19056997,
> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077, 15407812,
> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658, 14415174,
> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080, 15044874,
> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316, 11919494,
> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326, 10377252,
> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102, 12992845,
> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588, 13924365,
> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754, 13550102,
> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153, 14102556,
> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033, 13670648,
> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714, 12847367,
> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377, 12244381,
> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046, 11770050,
> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217, 12097708,
> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267, 10621244,
> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394, 10523656,
> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800, 11353041,
> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210, 11132326,
> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218, 10184002,
> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262, 11590206,
> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487, 13436617,
> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727, 14243928,
> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307, 13826213,
> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693, 12754175,
> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383, 10931400,
> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609, 12366614,
> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534, 12786433,
> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828, 13274018,
> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103, 12173082,
> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495, 14636326,
> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966, 13877119,
> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189, 13126548,
> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027, 10695234,
> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447, 12927490,
> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608, 13925071,
> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771, 13135370,
> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856, 13492799,
> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430, 12127888,
> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185, 10548301,
> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227, 11593154,
> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363, 12622830,
> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198, 10608854,
> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384, 10612403,
> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765, 12335679,
> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867, 10507066,
> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839, 12542127,
> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179, 13279826,
> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238, 12657427,
> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612, 13452761,
> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655, 11701079,
> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363, 13341724,
> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368, 13650455,
> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891, 15646361,
> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288, 16527074,
> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797, 15281552,
> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339, 18182041,
> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023, 14000735,
> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995, 16636582,
> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203, 17997663,
> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780, 1264742,
> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232, 1380845,
> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556, 1053348,
> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576, 1029796,
> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473, 836908,
> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875, 1055059,
> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037, 934344,
> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030, 959260,
> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558, 760214,
> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984, 942851,
> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089, 828632,
> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486, 1096690,
> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748, 665961,
> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797, 960006,
> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812, 796604,
> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128, 1084626,
> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913, 1058493,
> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958, 1091468,
> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093, 971856,
> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120, 845165,
> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042, 892834,
> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867, 1094743,
> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970, 72620,
> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899, 20426712,
> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355, 20768807,
> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726, 21596243,
> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072, 21846894,
> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231, 22554639,
> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451, 23206767,
> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818, 23784278,
> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768, 24503153,
> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920, 25035239,
> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231, 25918644,
> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543, 26691191,
> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037, 27180711,
> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474, 27386049,
> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040, 26877705,
> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460, 27155400,
> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341, 27686074,
> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974, 28716843,
> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032, 29165480,
> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041, 29795842,
> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304, 30287625,
> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619, 30970797,
> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046, 31382224,
> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255, 32294373,
> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158, 33033517,
> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255, 33687475,
> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093, 33938988,
> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494, 34350509,
> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315, 35518127,
> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171, 36971724,
> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633, 37827498,
> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308, 38560349,
> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926, 5937.3,
> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6, 6075.3,
> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3, 6379.3,
> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623, 6638.2,
> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5, 6461.2,
> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935, 6930.3,
> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
>  ??? v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
>  ??? 62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
>  ??? 62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
>  ??? 63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1, 63.8,
>  ??? 63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
>  ??? 63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
>  ??? 63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
>  ??? 62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
>  ??? 63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
>  ??? 63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
>  ??? 60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
>  ??? 60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
>  ??? 61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
>  ??? 61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
>  ??? 60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
>  ??? 61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
>  ??? 61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8, 60.7,
>  ??? 60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8, 60.9,
>  ??? 60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
>  ??? 60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
>  ??? 61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
>  ??? 60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
>  ??? ), v382201 = c(212164, 193583, 215866, 211263, 222871, 215519,
>  ??? 219942, 216251, 207703, 212013, 207781, 219596, 222977, 202836,
>  ??? 225014, 217040, 223269, 212081, 211644, 208999, 200885, 207899,
>  ??? 204091, 216573, 218997, 195583, 215113, 206360, 214884, 208636,
>  ??? 214072, 211055, 206974, 211607, 205837, 215020, 216294, 201218,
>  ??? 216097, 209029, 216690, 207829, 211911, 212123, 205356, 211083,
>  ??? 205076, 212205, 212779, 191520, 213090, 209484, 215975, 205127,
>  ??? 207085, 209844, 201884, 206749, 200246, 208719, 211380, 190749,
>  ??? 209346, 200994, 207431, 198322, 201983, 200869, 196045, 199493,
>  ??? 195149, 205332, 207126, 185698, 207850, 205701, 216965, 209296,
>  ??? 215644, 214061, 205121, 209924, 204004, 213241, 217848, 203144,
>  ??? 213848, 206368, 212813, 200362, 202502, 202339, 195491, 201314,
>  ??? 196093, 206104, 208701, 190879, 213025, 208090, 217292, 210890,
>  ??? 216526, 213092, 206553, 209884, 204042, 211314, 212389, 192037,
>  ??? 213815, 208826, 216756, 207533, 210091, 212435, 204595, 209379,
>  ??? 203827, 210218, 212451, 192470, 214095, 208717, 217913, 212215,
>  ??? 217087, 218783, 209940, 214059, 208998, 220829, 223171, 208246,
>  ??? 222458, 215499, 221694, 213553, 219458, 221757, 214203, 221003,
>  ??? 214380, 221215, 220019, 197689, 218045, 210866, 218954, 209825,
>  ??? 212145, 218399, 210138, 215187, 206605, 211504, 212024, 192311,
>  ??? 212260, 207136, 215097, 210584, 218528, 220739, 214149, 218748,
>  ??? 208968, 216712, 218399, 197318, 223819, 221927, 234903, 228622,
>  ??? 233660, 231277, 221779, 227918, 220888, 231634, 235272, 220580,
>  ??? 233970, 226381, 235613, 227998, 234353, 235796, 230542, 239605,
>  ??? 233645, 245124, 248935, 226969, 252118, 245888, 253940, 242869,
>  ??? 249518, 250305, 242427, 251666, 242906, 253645, 257586, 236425,
>  ??? 262768, 252595, 262910, 254396, 254417, 252449, 241404, 246729,
>  ??? 237361, 248692, 251752, 228933, 256286, 249336, 255692, 247109,
>  ??? 251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
>  ??? 97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
>  ??? 99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
>  ??? 104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7, 103.8,
>  ??? 104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
>  ??? 108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
>  ??? 110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
>  ??? 111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1, 112.6,
>  ??? 112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
>  ??? 113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
>  ??? 125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
>  ??? 130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7, 134.3,
>  ??? 134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
>  ??? 135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
>  ??? 139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
>  ??? 141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
>  ??? 143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
>  ??? 144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
>  ??? 145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8, 141.5,
>  ??? 147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
>  ??? 141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
>  ??? 145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
>  ??? 147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
>  ??? 149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
>  ??? 152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
>  ??? ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
>  ??? 108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
>  ??? 101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
>  ??? 100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8, 98.1,
>  ??? 98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
>  ??? 98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6, 97.5,
>  ??? 101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
>  ??? 103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
>  ??? 101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5, 105.4,
>  ??? 98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
>  ??? 120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2, 137.7,
>  ??? 140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
>  ??? 138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
>  ??? 130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
>  ??? 143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4, 143.5,
>  ??? 143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
>  ??? 142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
>  ??? 132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
>  ??? 139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
>  ??? 144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6, 141.5,
>  ??? 141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7, 137.1,
>  ??? 134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
>  ??? 133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
>  ??? 134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
>  ??? 130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130), v41691919 = 
> c(96.5,
>  ??? 97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
>  ??? 97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3, 100.9,
>  ??? 101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2, 102.3,
>  ??? 102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
>  ??? 104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
>  ??? 105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5, 108.2,
>  ??? 107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5, 109.3,
>  ??? 109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
>  ??? 111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
>  ??? 110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8, 115.1,
>  ??? 113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
>  ??? 113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1, 115.3,
>  ??? 115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9, 117.8,
>  ??? 118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
>  ??? 121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
>  ??? 121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
>  ??? 123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
>  ??? 124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7, 126.8,
>  ??? 126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2, 128.4,
>  ??? 128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
>  ??? 130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
>  ??? 131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
>  ??? 132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
>  ??? 135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
>  ??? 138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8, 97.7,
>  ??? 98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3, 100.2,
>  ??? 100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
>  ??? 102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
>  ??? 100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8, 104.3,
>  ??? 104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
>  ??? 107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
>  ??? 108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
>  ??? 109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
>  ??? 111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
>  ??? 115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
>  ??? 121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
>  ??? 121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
>  ??? 123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4, 127.1,
>  ??? 128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4, 130.6,
>  ??? 131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
>  ??? 131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6, 133.5,
>  ??? 133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
>  ??? 136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
>  ??? 140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
>  ??? 142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
>  ??? 142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
>  ??? 143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
>  ??? 146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
>  ??? 148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
>  ??? ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
>  ??? 99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
>  ??? 99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
>  ??? 102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
>  ??? 104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
>  ??? 106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
>  ??? 108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
>  ??? 112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
>  ??? 112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4, 114.7,
>  ??? 115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
>  ??? 117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
>  ??? 120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
>  ??? 118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
>  ??? 122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
>  ??? 123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3, 124.3,
>  ??? 124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5, 125.4,
>  ??? 125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1, 127.2,
>  ??? 127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9, 132.4,
>  ??? 132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4, 133.5,
>  ??? 133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
>  ??? 135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
>  ??? 138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7, 140.3,
>  ??? 140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
>  ??? 141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7, 143.9,
>  ??? 144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3), v41691965 = 
> c(96.9,
>  ??? 97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
>  ??? 98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
>  ??? 100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
>  ??? 101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5, 101.7,
>  ??? 102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2, 101.2,
>  ??? 101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5, 102.2,
>  ??? 101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6, 101.7,
>  ??? 100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
>  ??? 103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4, 103.2,
>  ??? 103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6, 106.1,
>  ??? 105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
>  ??? 106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3, 109.2,
>  ??? 109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
>  ??? 110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
>  ??? 113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
>  ??? 113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
>  ??? 115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6, 115.6,
>  ??? 115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
>  ??? 119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
>  ??? 121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3, 122.6,
>  ??? 123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7, 123.5,
>  ??? 123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5, 123.2,
>  ??? 124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2, 125.2,
>  ??? 125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3, 124.9,
>  ??? 125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
>  ??? 105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
>  ??? 99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
>  ??? 101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9, 95.6,
>  ??? 96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
>  ??? 96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
>  ??? 97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
>  ??? 92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
>  ??? 90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
>  ??? 95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
>  ??? 93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
>  ??? 89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
>  ??? 92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
>  ??? 93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6, 88.3,
>  ??? 92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
>  ??? 85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
>  ??? 90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
>  ??? 91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3, 91.5,
>  ??? 91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
>  ??? 93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
>  ??? 91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
>  ??? 87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
>  ??? 92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988 = c(98.2,
>  ??? 98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
>  ??? 94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3, 101.2,
>  ??? 101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2, 103.9,
>  ??? 104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6, 106.8,
>  ??? 107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
>  ??? 109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
>  ??? 113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8, 116.9,
>  ??? 117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
>  ??? 118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
>  ??? 118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
>  ??? 116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5, 116.7,
>  ??? 114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119, 119.1,
>  ??? 119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
>  ??? 125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5, 129.5,
>  ??? 130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
>  ??? 130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3, 131.3,
>  ??? 131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7, 132.3,
>  ??? 133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8, 131.4,
>  ??? 129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4, 130.6,
>  ??? 128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6, 128.6,
>  ??? 130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
>  ??? 133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
>  ??? 136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
>  ??? 142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
>  ??? 143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
>  ??? 110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
>  ??? 88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
>  ??? 104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
>  ??? 111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
>  ??? 127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1, 114.8,
>  ??? 117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
>  ??? 127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9, 154.3,
>  ??? 152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
>  ??? 155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
>  ??? 152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
>  ??? 122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
>  ??? 143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
>  ??? 144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
>  ??? 168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
>  ??? 177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8, 182.4,
>  ??? 187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6, 183.7,
>  ??? 182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
>  ??? 189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9, 181.1,
>  ??? 167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
>  ??? 163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2, 146.8,
>  ??? 152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1, 163.9,
>  ??? 156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8, 167.2,
>  ??? 177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7, 194.8,
>  ??? 192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
>  ??? 186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260, 1172192,
>  ??? 1173559, 1173865, 1163159, 1173230, 1168291, 1148136, 1135730,
>  ??? 1176671, 1184706, 1186957, 1177962, 1194820, 1192486, 1204268,
>  ??? 1196677, 1198166, 1192339, 1188059, 1189860, 1195524, 1179193,
>  ??? 1160881, 1156255, 1154137, 1151079, 1223651, 1193786, 1187791,
>  ??? 1185070, 1222101, 1233158, 1222271, 1205916, 1211049, 1237429,
>  ??? 1221806, 1288146, 1268949, 1239192, 1259979, 1259944, 1257909,
>  ??? 1229472, 1206627, 1245003, 1262388, 1269395, 1276432, 1277248,
>  ??? 1261277, 1291593, 1298114, 1305550, 1267413, 1294688, 1295694,
>  ??? 1317484, 1333362, 1330478, 1362024, 1326774, 1319396, 1318673,
>  ??? 1334044, 1346594, 1339499, 1363158, 1404445, 1434255, 1396545,
>  ??? 1355204, 1367796, 1352577, 1349119, 1374720, 1398253, 1369215,
>  ??? 1413653, 1431392, 1421479, 1419408, 1487702, 1434740, 1434398,
>  ??? 1472990, 1471028, 1460549, 1461166, 1482247, 1490620, 1486005,
>  ??? 1467463, 1444413, 1469876, 1477567, 1460040, 1446679, 1452324,
>  ??? 1456279, 1455826, 1472154, 1485169, 1464240, 1487456, 1518692,
>  ??? 1516207, 1512158, 1535860, 1535652, 1538473, 1549310, 1517172,
>  ??? 1511436, 1531246, 1558108, 1555668, 1566767, 1566882, 1580492,
>  ??? 1566209, 1594096, 1600677, 1613907, 1619388, 1607791, 1602639,
>  ??? 1612385, 1631814, 1643924, 1650496, 1659254, 1679545, 1674956,
>  ??? 1675779, 1676020, 1676843, 1679625, 1694232, 1695255, 1720478,
>  ??? 1741576, 1736856, 1722187, 1750359, 1728204, 1736587, 1752139,
>  ??? 1752173, 1770304, 1762990, 1777806, 1787814, 1766222, 1771789,
>  ??? 1806919, 1817679, 1826720, 1854228, 1850492, 1857490, 1892994,
>  ??? 1890432, 1892879, 1890258, 1911380, 1915088, 1891501, 1922679,
>  ??? 1947153, 1994578, 1970953, 1983867, 2014740, 2008756, 2030234,
>  ??? 2032886, 2059674, 2068652, 2073047, 2083031, 2136894, 2115520,
>  ??? 2130280, 2158663, 2134182, 2172927, 2173367, 2173553, 2156196,
>  ??? 2218283, 2237749, 2206090, 2227664, 2221296, 2238127, 2265268,
>  ??? 2262536, 2284770, 2309970, 2310161, 2307041, 2331779, 2369833,
>  ??? 2388535, 2335561, 2373858, 2397911, 2392511, 2405673, 2410779,
>  ??? 2411443, 2438862, 2483861, 2444050, 2429816, 2451814, 2464695,
>  ??? 2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
>  ??? 12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
>  ??? 12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
>  ??? 10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
>  ??? 11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
>  ??? 10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
>  ??? 11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
>  ??? 11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
>  ??? 10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
>  ??? 11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
>  ??? 12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
>  ??? 12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
>  ??? 12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
>  ??? 12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
>  ??? 12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
>  ??? 11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
>  ??? 11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
>  ??? 11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
>  ??? 12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
>  ??? 12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
>  ??? 12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
>  ??? 12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
>  ??? 12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
>  ??? 12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
>  ??? 2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
>  ??? 778862, 1138557, 1636203, 2233518, 2114752, 1974646, 1534387,
>  ??? 998860, 559524, 447850, 393285, 402189, 651017, 1523288,
>  ??? 2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
>  ??? 452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
>  ??? 2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
>  ??? 425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
>  ??? 1411442, 900073, 491461, 413880, 390364, 393934, 586734,
>  ??? 1266299, 2202400, 2309033, 2164470, 2145389, 1328220, 736964,
>  ??? 480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
>  ??? 3283157, 3804876, 3244792, 2477267, 1569953, 1169971, 1121247,
>  ??? 1218442, 1182862, 1409876, 2241749, 3274756, 3494706, 3615470,
>  ??? 3455902, 2199773, 1647961, 1230718, 1125165, 1078839, 1099809,
>  ??? 1539702, 2190793, 3126922, 3886115, 3290320, 2942615, 2110948,
>  ??? 1405583, 1308947, 1014607, 1148503, 1066941, 1596998, 2039112,
>  ??? 2798847, 3446040, 3255602, 2815621, 1839592, 1426302, 1177683,
>  ??? 1090902, 1145557, 1140902, 1524916, 2145484, 3256107, 3775523,
>  ??? 3559115, 3289994, 2219521, 1774688, 1291471, 1191457, 1170953,
>  ??? 1159087, 1543907, 2159364, 2786142, 3447635, 3179625, 2751435,
>  ??? 2152765, 1596927, 1290466, 1278246, 1247608, 1253886, 1622877,
>  ??? 2433993, 2831938, 3565488, 3636268, 3253630, 2559152, 1626984,
>  ??? 1251460, 1163841, 1130486, 1190063, 1491645, 2345181, 3346689,
>  ??? 4165953, 3842336, 3682352, 2580288, 1731497, 1199181, 1098817,
>  ??? 1113400, 1079822, 1464918, 2344949, 3006111, 3847035, 4007847,
>  ??? 3550039, 2397284, 1457876, 1155121, 1115934, 1113953, 1185585,
>  ??? 1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>  ??? NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
>  ??? 76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387, 77.807,
>  ??? 74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
>  ??? 87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041, 114.235,
>  ??? 82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032, 108.011,
>  ??? 79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
>  ??? 83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143, 57.357,
>  ??? 71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519, 70.549,
>  ??? 64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906, 74.252,
>  ??? 84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522, 74.888,
>  ??? 52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3, 82.511,
>  ??? 71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79, 72.919,
>  ??? 92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501, 43.62,
>  ??? 37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622, 57.833,
>  ??? 72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712, 69.299,
>  ??? 56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477, 50.752,
>  ??? 66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846, 66.99,
>  ??? 75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376, 76.071,
>  ??? 70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346, 47.764,
>  ??? 68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928, 60.752,
>  ??? 71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44, 65.443,
>  ??? 55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084, 61.375,
>  ??? 41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148, 90.318,
>  ??? 75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21, 72.047,
>  ??? 88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135, 100.138,
>  ??? 84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755, 77.894,
>  ??? 59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223, 54.825,
>  ??? 104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
>  ??? 73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
>  ??? v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
>  ??? 9584905, 9382415, 9482770, 9307864, 9492970, 9715825, 9940764,
>  ??? 10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
>  ??? 10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
>  ??? 10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
>  ??? 10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
>  ??? 10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
>  ??? 10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
>  ??? 11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
>  ??? 11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
>  ??? 11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
>  ??? 11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
>  ??? 11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
>  ??? 12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
>  ??? 12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
>  ??? 12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
>  ??? 11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
>  ??? 12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
>  ??? 12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
>  ??? 12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
>  ??? 13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
>  ??? 13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
>  ??? 13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
>  ??? 13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
>  ??? 13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
>  ??? 14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
>  ??? 14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
>  ??? 15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
>  ??? 14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
>  ??? 15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
>  ??? 16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
>  ??? 16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
>  ??? 17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
>  ??? 18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
>  ??? 18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
>  ??? 19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
>  ??? 18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
>  ??? 19635452), v52368043 = c(17055707, 16701281, 16786260, 16756166,
>  ??? 16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
>  ??? 16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
>  ??? 18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
>  ??? 19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
>  ??? 18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
>  ??? 19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
>  ??? 19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
>  ??? 19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
>  ??? 20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
>  ??? 20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
>  ??? 21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
>  ??? 20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
>  ??? 22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
>  ??? 22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
>  ??? 22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
>  ??? 21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
>  ??? 20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
>  ??? 22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
>  ??? 22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
>  ??? 22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
>  ??? 23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
>  ??? 23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
>  ??? 23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
>  ??? 24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
>  ??? 23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
>  ??? 24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
>  ??? 25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
>  ??? 25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
>  ??? 27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
>  ??? 28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
>  ??? 28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
>  ??? 29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
>  ??? 31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
>  ??? 32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
>  ??? 31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
>  ??? 32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
>  ??? 32796030, 32840886, 33870331), v54027371 = c(5006719, 5067172,
>  ??? 5060865, 5062576, 5083254, 5072377, 5031234, 5052979, 5027204,
>  ??? 5043632, 5035454, 5044842, 5063238, 5093024, 5091640, 5102054,
>  ??? 5133352, 5142226, 5165655, 5203037, 5186307, 5174704, 5194163,
>  ??? 5190310, 5232432, 5210572, 5234726, 5235080, 5254050, 5245134,
>  ??? 5245175, 5249094, 5235952, 5262268, 5263595, 5253813, 5274263,
>  ??? 5265423, 5299891, 5327379, 5316191, 5331555, 5346574, 5307140,
>  ??? 5337742, 5347287, 5348381, 5377210, 5374212, 5383470, 5366697,
>  ??? 5392882, 5388985, 5416367, 5417477, 5433010, 5448853, 5441429,
>  ??? 5458425, 5471520, 5489243, 5495727, 5511121, 5512216, 5526438,
>  ??? 5537303, 5522426, 5518461, 5536277, 5501749, 5564018, 5570599,
>  ??? 5584461, 5593844, 5590604, 5602700, 5608632, 5616521, 5608951,
>  ??? 5623657, 5616005, 5645595, 5647305, 5647451, 5693895, 5691488,
>  ??? 5700220, 5707445, 5725799, 5728509, 5717031, 5723853, 5711995,
>  ??? 5719339, 5681740, 5663311, 5643435, 5611268, 5590716, 5570704,
>  ??? 5557739, 5536962, 5560436, 5529977, 5551949, 5574728, 5563493,
>  ??? 5575590, 5577965, 5587020, 5596086, 5612563, 5609016, 5626466,
>  ??? 5654424, 5633372, 5661574, 5667386, 5669274, 5689694, 5681104,
>  ??? 5701730, 5706973, 5707289, 5692449, 5724435, 5730464, 5731650,
>  ??? 5750310, 5739110, 5745413, 5742657, 5748606, 5744911, 5767140,
>  ??? 5785313, 5808618, 5816135, 5806957, 5825860, 5814678, 5800046,
>  ??? 5822757, 5809772, 5808239, 5818814, 5833898, 5829771, 5825801,
>  ??? 5833676, 5847351, 5886288, 5872335, 5876134, 5878844, 5883709,
>  ??? 5891947, 5885232, 5889681, 5891564, 5921837, 5931270, 5952834,
>  ??? 5959543, 5957751, 5970395, 5962589, 5958983, 5996099, 5997162,
>  ??? 5997791, 6025616, 6046802, 6043966, 6072665, 6063075, 6065666,
>  ??? 6115610, 6091893, 6118988, 6119637, 6126261, 6136886, 6169330,
>  ??? 6172147, 6198848, 6202387, 6197097, 6228521, 6219420, 6240999,
>  ??? 6266000, 6254684, 6277414, 6289899, 6290412, 6302735, 6343442,
>  ??? 6341087, 6359345, 6383177, 6364995, 6373585, 6394318, 6396556,
>  ??? 6406482, 6430135, 6428086, 6458862, 6470913, 6480563, 6509009,
>  ??? 6514678, 6545545, 6547838, 6538390, 6566127, 6566755, 6578311,
>  ??? 6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
>  ??? 692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69, 699.31,
>  ??? 697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05, 708.58,
>  ??? 709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96, 716.06,
>  ??? 724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
>  ??? 736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98, 752.13,
>  ??? 745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22, 763.57,
>  ??? 770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65, 789.71,
>  ??? 784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76, 783.53,
>  ??? 781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6, 806.36,
>  ??? 802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27, 821.08,
>  ??? 823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26, 838.09,
>  ??? 840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65, 840.76,
>  ??? 843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04, 853.68,
>  ??? 852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13, 873.52,
>  ??? 875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37, 897.82,
>  ??? 894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08, 888.93,
>  ??? 901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11, 902.56,
>  ??? 909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03, 911.93,
>  ??? 913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35, 920.2,
>  ??? 924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
>  ??? 938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82, 950.06,
>  ??? 956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15, 966.48,
>  ??? 968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64, 974.42,
>  ??? 978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
>  ??? 982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24, 1002.93,
>  ??? 1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01, 1012.58,
>  ??? 1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26, 1034.06,
>  ??? 1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
>  ??? 1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
>  ??? 31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
>  ??? 31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
>  ??? 31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
>  ??? 31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
>  ??? 31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
>  ??? 31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
>  ??? 31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1, 30.8,
>  ??? 30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
>  ??? 30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3, 30.4,
>  ??? 30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
>  ??? 30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
>  ??? 30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
>  ??? 30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
>  ??? 30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
>  ??? 30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
>  ??? 30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
>  ??? 30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
>  ??? 30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
>  ??? 30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
>  ??? 30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4, 30.4,
>  ??? 30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
>  ??? 29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
>  ??? 22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406, 20917,
>  ??? 21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253, 22542,
>  ??? 23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269, 23088,
>  ??? 21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371, 23691,
>  ??? 25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459, 20867,
>  ??? 21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359, 21206,
>  ??? 23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132, 22893,
>  ??? 22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387, 25378,
>  ??? 24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948, 23937,
>  ??? 27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165, 27903,
>  ??? 30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645, 28820,
>  ??? 26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664, 29056,
>  ??? 28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457, 25821,
>  ??? 29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086, 31843,
>  ??? 33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727, 34795,
>  ??? 33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568, 36096,
>  ??? 35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920, 33633,
>  ??? 33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653, 35486,
>  ??? 35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129, 37903,
>  ??? 37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617, 38777,
>  ??? 38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330, 39600,
>  ??? 40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405, 41141,
>  ??? 41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908, 44375,
>  ??? 43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686, 45193,
>  ??? 44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
>  ??? 85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
>  ??? 92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
>  ??? 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
>  ??? 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9, 95.7,
>  ??? 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
>  ??? 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
>  ??? 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
>  ??? 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
>  ??? 104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
>  ??? 112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
>  ??? 115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4,
>  ??? 114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8,
>  ??? 113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2,
>  ??? 129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3,
>  ??? 121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
>  ??? 142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
>  ??? 117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
>  ??? 132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7,
>  ??? 128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
>  ??? 130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
>  ??? 131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
>  ??? 135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
>  ??? 136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
>  ??? 135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
>  ??? 100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
>  ??? 98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
>  ??? 89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
>  ??? 86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
>  ??? 96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
>  ??? 97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
>  ??? 97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
>  ??? 97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
>  ??? 102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
>  ??? 103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107, 107.5,
>  ??? 106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7, 102.7,
>  ??? 104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
>  ??? 104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
>  ??? 119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2, 117.2,
>  ??? 115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3, 117.4,
>  ??? 120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
>  ??? 123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
>  ??? 140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
>  ??? 136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7, 128.4,
>  ??? 130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
>  ??? 118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4, 132.6,
>  ??? 128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
>  ??? 120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5, 121.1,
>  ??? 122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837, 23571783,
>  ??? 24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
>  ??? 23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
>  ??? 24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
>  ??? 25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
>  ??? 25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
>  ??? 24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
>  ??? 25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
>  ??? 25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
>  ??? 24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
>  ??? 25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
>  ??? 24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
>  ??? 24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
>  ??? 25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
>  ??? 23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
>  ??? 22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
>  ??? 22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
>  ??? 17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
>  ??? 19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
>  ??? 19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
>  ??? 20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
>  ??? 20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
>  ??? 21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
>  ??? 22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
>  ??? 22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
>  ??? 22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
>  ??? 22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
>  ??? 23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
>  ??? 23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
>  ??? 23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
>  ??? 24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
>  ??? 24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
>  ??? 25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
>  ??? 25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
>  ??? 24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
>  ??? 26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
>  ??? 26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
>  ??? 26637112, 26198157, 26778716, 26846047, 26409309)), row.names = c(NA,
> -223L), class = c("tbl_df", "tbl", "data.frame"))
> 
> dput() output for dts:
> 
> 
> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>  ??? X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 = c(NA_real_,
>  ??? NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
>  ??? NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>  ??? X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
>  ??? 120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
>  ??? NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
>  ??? ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
>  ??? NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
>  ??? ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 = c(NA_real_,
>  ??? NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
>  ??? NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
>  ??? ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 = c(NA_real_,
>  ??? NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
>  ??? NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
>  ??? ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 = c(NA_real_,
>  ??? NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
>  ??? NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_, NA_real_
>  ??? ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 = c(NA_real_,
>  ??? NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
>  ??? NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
>  ??? NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
>  ??? ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 = c(NA,
>  ??? NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
>  ??? NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L), class = 
> "data.frame")
> 
> dput() output for testcase1:
> 
> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6, 104.3,
> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
> 135.1, NA, NA)
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide 
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From ||@t@ @end|ng |rom dewey@myzen@co@uk  Wed Oct 30 11:01:59 2019
From: ||@t@ @end|ng |rom dewey@myzen@co@uk (Michael Dewey)
Date: Wed, 30 Oct 2019 10:01:59 +0000
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <CAF9-5jNmXkq8hpvi68O6uhKt_Z0NsKg3FBeAWB1xkHkkd1nffQ@mail.gmail.com>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
 <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>
 <CAF9-5jNmXkq8hpvi68O6uhKt_Z0NsKg3FBeAWB1xkHkkd1nffQ@mail.gmail.com>
Message-ID: <4f6d97d3-b3b6-47a8-15c7-4159d09bead8@dewey.myzen.co.uk>

Dear Ana

Yes, when apply coerces q to a matrix it does so as a character matrix 
because of the values in the first column. So you need to wrap the 
references to x in helper in as.numeric() tat is to day like 
as.numeric(x[2:4]) and similarly for the other one. Sorry about that, I 
should have thought of it before.

When I next update metap I will try to get it to degrade more gracefully 
when it finds an error.

Michael

On 28/10/2019 19:06, Ana Marija wrote:
> Hi Michael,
> 
> I tried what you proposed with my data frame q:
> 
>> head(q)
>             ID                P             G              E
>   wb          wg           we
> 1:  rs1029830 0.0979931 0.0054060 0.39160 580.6436 40.6325 35.39774
> 2:  rs1029832 0.1501820 0.0028140 0.39320 580.6436 40.6325 35.39774
> 3: rs11078374 0.1701250 0.0009805 0.49730 580.6436 40.6325 35.39774
> 4:  rs1124961 0.1710150 0.7252000 0.05737 580.6436 40.6325 35.39774
> 5:  rs1135237 0.1493650 0.6851000 0.06354 580.6436 40.6325 35.39774
> 6: rs11867934 0.0757972 0.0006140 0.00327 580.6436 40.6325 35.39774
> 
> so the solution of the first row would be this:
>> sumz(c(0.0979931,0.0054060,0.39160), weights = c(580.6436,40.6325,35.39774), na.action = na.fail)
> sumz =  1.481833 p =  0.06919239
> 
> I tried applying the function you wrote:
> helper <- function(x) {
>    p <- sumz(x[2:4], weights = x[5:7])$p
>    p
> }
> 
> With:
> 
> q$META <- apply(q, MARGIN = 1, helper)
> 
> # I want to make a new column in q named META with results
> but I got this error:
>   Error in sumz(x[2:4], weights = x[5:7]) :
>    Must have at least two valid p values
> 
> Please advise,
> Ana
> 
> On Sun, Oct 27, 2019 at 9:49 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
>>
>> Dear Ana
>>
>> There must be several ways of doing this but see below for an idea with
>> comments in-line.
>>
>> On 26/10/2019 00:31, Ana Marija wrote:
>>> Hello,
>>>
>>> I would like to use this package metap
>>> to calculate multiple o values
>>>
>>> I have my data frame with 3 p values
>>>> head(tt)
>>>             RS            G           E          B
>>> 1: rs2089177   0.9986   0.7153   0.604716
>>> 2: rs4360974   0.9738   0.7838   0.430228
>>> 3: rs6502526   0.9744   0.7839   0.429160
>>> 4: rs8069906   0.7184   0.4918   0.521452
>>> 5: rs9905280   0.7205   0.4861   0.465758
>>> 6: rs4313843   0.9804   0.8522   0.474313
>>>
>>> and data frame with corresponding weights for each of the p values
>>> from the tt data frame
>>>
>>>> head(df)
>>>          wg       we             wb                RS
>>> 1 40.6325 35.39774 580.6436 rs2089177
>>> 2 40.6325 35.39774 580.6436 rs4360974
>>> 3 40.6325 35.39774 580.6436 rs6502526
>>> 4 40.6325 35.39774 580.6436 rs8069906
>>> 5 40.6325 35.39774 580.6436 rs9905280
>>> 6 40.6325 35.39774 580.6436 rs4313843
>>>
>>> RS column is the same in df and tt
>>>
>>
>> So you can create a new data-frame with merge()
>>
>> newdata <- merge(tt, df)
>>
>> which will use RS as the key to merge them on.
>>
>> The write a function of one argument, a seven element vector, which
>> picks out the p-values and the weights and feeds them to sumz().
>> Something like
>>
>> helper <- function(x) {
>>    p <- sumz(x[2:4], weights = x[5:7])$p
>>    p
>> }
>> Note you need to check that 2:4 and 5:7 are actually where they are in
>> the row of newdat.
>>
>> Then use apply() to apply that to the rows of newdat.
>>
>> I have not tested any of this but the general idea should be OK even if
>> the details are wrong.
>>
>> Michael
>>
>>
>>> How to use this sunz() function to create a new data frame which would
>>> look the same as tt only it would have additional column, say named
>>> "META" which has calculated meta p values for each row
>>>
>>> This i s example of how much would be p value in the first row:
>>>
>>>> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
>>> p =  0.6940048
>>>
>>> Thanks
>>> Ana
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
>>>
>>
>> --
>> Michael
>> http://www.dewey.myzen.co.uk/home.html
> 

-- 
Michael
http://www.dewey.myzen.co.uk/home.html


From phii m@iii@g oii phiiipsmith@c@  Wed Oct 30 13:24:42 2019
From: phii m@iii@g oii phiiipsmith@c@ (phii m@iii@g oii phiiipsmith@c@)
Date: Wed, 30 Oct 2019 08:24:42 -0400
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
 <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
Message-ID: <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>

Thanks for the suggestion Rui, but no, this will not remove the error. 
In fact, if I drop the second term entirely as in:

if ( (!is.na(dts[1,j-1])) ) {

then I still get the error. I have been unable to find a work-around.

Philip


On 2019-10-30 05:17, Rui Barradas wrote:
> Hello,
> 
> Is this as simple as
> 
> 
> if ( (!is.na(dts[1,j-1])) & (!is.na(dts[3,j-1])) ) {
> 
> 
> (change the logical operator from '|' to '&')?
> The result vseries1 still has some NA's at the end of some of its 
> series.
> 
> Hope this helps,
> 
> Rui Barradas
> 
> ?s 02:05 de 30/10/19, phil at philipsmith.ca escreveu:
>> I am having a problem that generates the error message: " Error in 
>> firstnonmiss:lastnonmiss : argument of length 0 ". There is an article 
>> on this in stackoverflow, but I have been unable to understand it well 
>> enough to solve my problem. Essentially, I have a data frame with 41 
>> indicator series and some of the series have missing values (NAs) at 
>> the beginning and/or the end. I want to fill in the missing values 
>> using ARIMA models, via the forecast() function. It works when I use 
>> my EXTEND function on a single series, but it fails when I try to loop 
>> through all 41 series. Here is a reproducible example. Thanks for any 
>> advice.
>> 
>> # Reproducible example
>> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
>> # See also stackoverflow: 
>> https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement 
>> library(forecast)
>> library(lubridate)
>> vseries <- dget("vseries.txt") # data frame containing REF_DATE and 41 
>> "indicator" vectors
>> dts <- dget("dts.txt") # data frame recording where NAs are in vseries 
>> - they will be replaced
>> testcase1 <- dget("testcase1.txt") # a vector for use in testing
>> # Function to fill in missing values (NAs) using ARIMA forecasts and 
>> backcasts
>> EXTEND <- function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
>>  ? if (!is.na(dt1)) {
>>  ??? bfct = dt2-dt1+1 # number of months to backcast
>>  ??? revx <- ts(rev(x),frequency=12)
>>  ??? revx <- revx[1:(length(revx)-dt2)]
>>  ??? fc <- forecast(auto.arima(revx),bfct)
>>  ??? revx1 <- c(revx,fc$mean) # extend with forecasts (in fc$mean)
>>  ??? m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
>>  ??? y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
>>  ??? x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
>>  ? }
>>  ? if (!is.na(dt3)) {
>>  ??? ffct <- dt4-dt3+1 # number of months to forecast
>>  ??? x <- x[1:(dt3-1)]
>>  ??? fc <- forecast(auto.arima(x),ffct)
>>  ??? x <- c(x,fc$mean)
>>  ? }
>>  ? return(x)
>> }
>> # Test EXTEND function with a single vector - apparently it works
>> (testcase1_extended <- EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
>> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
>> View(cbind(testcase1,testcase1_extended))
>> # Now use EXTEND to fill in the missing values in all 41 indicators in 
>> vseries
>> # Data frame dts has NAs where no extension is required, integer 
>> values showing where to start and
>> # where to end when extensions are required. Store extended series in 
>> vseries1.
>> vseries1 <- vseries
>> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1 in 
>> vseries is REF_DATE
>>  ? if ( (!is.na(dts[1,j-1])) | (!is.na(dts[3,j-1])) ) {
>>  ??? vseries1[,j] <- 
>> EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1], 
>> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
>>  ? }
>> }
>> View(vseries)
>> View(vseries1)
>> 
>> dput() output for vseries:
>> 
>> structure(list(REF_DATE = c("2001-01-01", "2001-02-01", "2001-03-01",
>> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01", "2001-08-01",
>> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01", "2002-01-01",
>> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01", "2002-06-01",
>> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01", "2002-11-01",
>> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01", "2003-04-01",
>> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01", "2003-09-01",
>> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01", "2004-02-01",
>> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01", "2004-07-01",
>> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01", "2004-12-01",
>> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01", "2005-05-01",
>> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01", "2005-10-01",
>> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01", "2006-03-01",
>> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01", "2006-08-01",
>> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01", "2007-01-01",
>> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01", "2007-06-01",
>> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01", "2007-11-01",
>> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01", "2008-04-01",
>> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01", "2008-09-01",
>> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01", "2009-02-01",
>> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01", "2009-07-01",
>> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01", "2009-12-01",
>> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01", "2010-05-01",
>> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01", "2010-10-01",
>> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01", "2011-03-01",
>> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01", "2011-08-01",
>> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01", "2012-01-01",
>> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01", "2012-06-01",
>> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01", "2012-11-01",
>> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01", "2013-04-01",
>> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01", "2013-09-01",
>> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01", "2014-02-01",
>> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01", "2014-07-01",
>> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01", "2014-12-01",
>> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01", "2015-05-01",
>> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01", "2015-10-01",
>> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01", "2016-03-01",
>> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01", "2016-08-01",
>> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01", "2017-01-01",
>> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01", "2017-06-01",
>> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01", "2017-11-01",
>> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01", "2018-04-01",
>> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01", "2018-09-01",
>> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01", "2019-02-01",
>> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01", "2019-07-01"
>> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987, 19671015,
>> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227, 15362864,
>> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846, 16124593,
>> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326, 17559123,
>> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801, 17557392,
>> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657, 19027956,
>> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111, 18665646,
>> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368, 20466651,
>> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403, 17890774,
>> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141, 20060353,
>> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846, 23024759,
>> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713, 21213020,
>> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572, 20881111,
>> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926, 18556973,
>> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295, 16443231,
>> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108, 17853071,
>> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783, 21107272,
>> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654, 20878866,
>> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337, 22337136,
>> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288, 23252411,
>> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385, 20109262,
>> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128, 23130117,
>> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882, 25197042,
>> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289, 27899355,
>> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182, 27040475,
>> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129, 27108195,
>> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186, 25857724,
>> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772, 26468833,
>> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265, 28179157,
>> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939, 29778379,
>> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824, 29820781,
>> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423, 30947662,
>> 29590180), v1001816392 = c(14810380, 14200859, 16756119, 15217622,
>> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643, 15666826,
>> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785, 15250640,
>> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416, 13984446,
>> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684, 12738958,
>> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311, 16669218,
>> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684, 15377076,
>> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530, 15633935,
>> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696, 14282888,
>> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547, 11808763,
>> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585, 14739285,
>> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113, 13908728,
>> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120, 14157825,
>> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313, 13084751,
>> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990, 9888218,
>> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361, 10292744,
>> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995, 12464327,
>> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365, 14066907,
>> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540, 13928150,
>> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174, 14259088,
>> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428, 12348507,
>> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402, 12114754,
>> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810, 13122736,
>> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121, 16407589,
>> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925, 15389386,
>> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529, 17312508,
>> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636, 17043771,
>> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251, 16292556,
>> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082, 16254963,
>> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366, 17819011,
>> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853, 18388536,
>> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596, 19056997,
>> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
>> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
>> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
>> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
>> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
>> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
>> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
>> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
>> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
>> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
>> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
>> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
>> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
>> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
>> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
>> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
>> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
>> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
>> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
>> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
>> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
>> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
>> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
>> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
>> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
>> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
>> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
>> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
>> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
>> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
>> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
>> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
>> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
>> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
>> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
>> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
>> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
>> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
>> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
>> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
>> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
>> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
>> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
>> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
>> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
>> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
>> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
>> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
>> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
>> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
>> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
>> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
>> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
>> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
>> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
>> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
>> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
>> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
>> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
>> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
>> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
>> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
>> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
>> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
>> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
>> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077, 15407812,
>> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658, 14415174,
>> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080, 15044874,
>> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316, 11919494,
>> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326, 10377252,
>> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102, 12992845,
>> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588, 13924365,
>> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754, 13550102,
>> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153, 14102556,
>> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033, 13670648,
>> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714, 12847367,
>> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377, 12244381,
>> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046, 11770050,
>> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217, 12097708,
>> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
>> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
>> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
>> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
>> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267, 10621244,
>> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394, 10523656,
>> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800, 11353041,
>> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210, 11132326,
>> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218, 10184002,
>> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262, 11590206,
>> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487, 13436617,
>> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727, 14243928,
>> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307, 13826213,
>> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693, 12754175,
>> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383, 10931400,
>> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609, 12366614,
>> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534, 12786433,
>> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828, 13274018,
>> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
>> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103, 12173082,
>> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495, 14636326,
>> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966, 13877119,
>> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189, 13126548,
>> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027, 10695234,
>> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447, 12927490,
>> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608, 13925071,
>> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771, 13135370,
>> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856, 13492799,
>> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430, 12127888,
>> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185, 10548301,
>> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227, 11593154,
>> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363, 12622830,
>> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198, 10608854,
>> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384, 10612403,
>> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765, 12335679,
>> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867, 10507066,
>> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839, 12542127,
>> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179, 13279826,
>> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238, 12657427,
>> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612, 13452761,
>> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655, 11701079,
>> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363, 13341724,
>> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368, 13650455,
>> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891, 15646361,
>> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288, 16527074,
>> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797, 15281552,
>> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339, 18182041,
>> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023, 14000735,
>> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995, 16636582,
>> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203, 17997663,
>> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780, 1264742,
>> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
>> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
>> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
>> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
>> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
>> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
>> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
>> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
>> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
>> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
>> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
>> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
>> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
>> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
>> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232, 1380845,
>> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556, 1053348,
>> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576, 1029796,
>> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473, 836908,
>> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875, 1055059,
>> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037, 934344,
>> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
>> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030, 959260,
>> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558, 760214,
>> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984, 942851,
>> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
>> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
>> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
>> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
>> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
>> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089, 828632,
>> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486, 1096690,
>> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
>> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748, 665961,
>> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797, 960006,
>> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
>> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
>> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
>> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
>> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
>> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
>> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
>> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
>> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
>> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
>> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
>> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
>> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
>> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
>> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
>> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
>> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
>> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
>> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
>> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
>> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
>> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
>> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
>> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812, 796604,
>> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
>> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
>> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
>> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
>> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
>> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
>> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128, 1084626,
>> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
>> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
>> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913, 1058493,
>> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
>> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
>> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958, 1091468,
>> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
>> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
>> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
>> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
>> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
>> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
>> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
>> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093, 971856,
>> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120, 845165,
>> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
>> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
>> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042, 892834,
>> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867, 1094743,
>> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
>> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970, 72620,
>> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
>> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
>> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
>> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
>> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
>> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
>> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
>> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
>> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
>> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
>> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
>> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
>> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
>> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
>> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
>> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
>> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
>> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
>> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
>> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
>> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
>> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
>> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
>> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
>> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
>> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899, 20426712,
>> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355, 20768807,
>> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726, 21596243,
>> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072, 21846894,
>> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231, 22554639,
>> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451, 23206767,
>> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818, 23784278,
>> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768, 24503153,
>> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920, 25035239,
>> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231, 25918644,
>> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543, 26691191,
>> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037, 27180711,
>> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474, 27386049,
>> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040, 26877705,
>> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460, 27155400,
>> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341, 27686074,
>> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974, 28716843,
>> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032, 29165480,
>> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041, 29795842,
>> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304, 30287625,
>> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619, 30970797,
>> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046, 31382224,
>> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255, 32294373,
>> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158, 33033517,
>> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255, 33687475,
>> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093, 33938988,
>> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494, 34350509,
>> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315, 35518127,
>> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171, 36971724,
>> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633, 37827498,
>> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308, 38560349,
>> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
>> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926, 5937.3,
>> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6, 6075.3,
>> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
>> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
>> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
>> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3, 6379.3,
>> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
>> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
>> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
>> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623, 6638.2,
>> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5, 6461.2,
>> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
>> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
>> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
>> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
>> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
>> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
>> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
>> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
>> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
>> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935, 6930.3,
>> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
>> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
>> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
>> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
>> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
>> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
>> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
>> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
>> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
>> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
>> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
>> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
>> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
>> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
>> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
>> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
>> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
>> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
>> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
>> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
>> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
>> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
>> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
>> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
>> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
>> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
>> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
>> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
>> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
>> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
>> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
>> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
>> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
>> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
>> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
>> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
>> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
>> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
>> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
>> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
>> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
>> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
>> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
>> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
>> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
>> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
>> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
>> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
>> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
>> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
>> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
>> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
>> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
>> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
>> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
>> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
>> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
>> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
>> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
>> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
>> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
>> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
>> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
>> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
>> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
>> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
>> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
>>  ??? v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
>>  ??? 62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
>>  ??? 62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
>>  ??? 63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1, 63.8,
>>  ??? 63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
>>  ??? 63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
>>  ??? 63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
>>  ??? 62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
>>  ??? 63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
>>  ??? 63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
>>  ??? 60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
>>  ??? 60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
>>  ??? 61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
>>  ??? 61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
>>  ??? 60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
>>  ??? 61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
>>  ??? 61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8, 60.7,
>>  ??? 60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8, 60.9,
>>  ??? 60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
>>  ??? 60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
>>  ??? 61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
>>  ??? 60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
>>  ??? ), v382201 = c(212164, 193583, 215866, 211263, 222871, 215519,
>>  ??? 219942, 216251, 207703, 212013, 207781, 219596, 222977, 202836,
>>  ??? 225014, 217040, 223269, 212081, 211644, 208999, 200885, 207899,
>>  ??? 204091, 216573, 218997, 195583, 215113, 206360, 214884, 208636,
>>  ??? 214072, 211055, 206974, 211607, 205837, 215020, 216294, 201218,
>>  ??? 216097, 209029, 216690, 207829, 211911, 212123, 205356, 211083,
>>  ??? 205076, 212205, 212779, 191520, 213090, 209484, 215975, 205127,
>>  ??? 207085, 209844, 201884, 206749, 200246, 208719, 211380, 190749,
>>  ??? 209346, 200994, 207431, 198322, 201983, 200869, 196045, 199493,
>>  ??? 195149, 205332, 207126, 185698, 207850, 205701, 216965, 209296,
>>  ??? 215644, 214061, 205121, 209924, 204004, 213241, 217848, 203144,
>>  ??? 213848, 206368, 212813, 200362, 202502, 202339, 195491, 201314,
>>  ??? 196093, 206104, 208701, 190879, 213025, 208090, 217292, 210890,
>>  ??? 216526, 213092, 206553, 209884, 204042, 211314, 212389, 192037,
>>  ??? 213815, 208826, 216756, 207533, 210091, 212435, 204595, 209379,
>>  ??? 203827, 210218, 212451, 192470, 214095, 208717, 217913, 212215,
>>  ??? 217087, 218783, 209940, 214059, 208998, 220829, 223171, 208246,
>>  ??? 222458, 215499, 221694, 213553, 219458, 221757, 214203, 221003,
>>  ??? 214380, 221215, 220019, 197689, 218045, 210866, 218954, 209825,
>>  ??? 212145, 218399, 210138, 215187, 206605, 211504, 212024, 192311,
>>  ??? 212260, 207136, 215097, 210584, 218528, 220739, 214149, 218748,
>>  ??? 208968, 216712, 218399, 197318, 223819, 221927, 234903, 228622,
>>  ??? 233660, 231277, 221779, 227918, 220888, 231634, 235272, 220580,
>>  ??? 233970, 226381, 235613, 227998, 234353, 235796, 230542, 239605,
>>  ??? 233645, 245124, 248935, 226969, 252118, 245888, 253940, 242869,
>>  ??? 249518, 250305, 242427, 251666, 242906, 253645, 257586, 236425,
>>  ??? 262768, 252595, 262910, 254396, 254417, 252449, 241404, 246729,
>>  ??? 237361, 248692, 251752, 228933, 256286, 249336, 255692, 247109,
>>  ??? 251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
>>  ??? 97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
>>  ??? 99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
>>  ??? 104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7, 103.8,
>>  ??? 104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
>>  ??? 108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
>>  ??? 110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
>>  ??? 111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1, 112.6,
>>  ??? 112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
>>  ??? 113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
>>  ??? 125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
>>  ??? 130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7, 134.3,
>>  ??? 134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
>>  ??? 135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
>>  ??? 139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
>>  ??? 141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
>>  ??? 143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
>>  ??? 144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
>>  ??? 145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8, 141.5,
>>  ??? 147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
>>  ??? 141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
>>  ??? 145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
>>  ??? 147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
>>  ??? 149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
>>  ??? 152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
>>  ??? ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
>>  ??? 108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
>>  ??? 101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
>>  ??? 100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8, 98.1,
>>  ??? 98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
>>  ??? 98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6, 97.5,
>>  ??? 101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
>>  ??? 103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
>>  ??? 101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5, 105.4,
>>  ??? 98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
>>  ??? 120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2, 137.7,
>>  ??? 140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
>>  ??? 138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
>>  ??? 130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
>>  ??? 143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4, 143.5,
>>  ??? 143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
>>  ??? 142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
>>  ??? 132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
>>  ??? 139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
>>  ??? 144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6, 141.5,
>>  ??? 141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7, 137.1,
>>  ??? 134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
>>  ??? 133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
>>  ??? 134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
>>  ??? 130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130), v41691919 
>> = c(96.5,
>>  ??? 97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
>>  ??? 97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3, 100.9,
>>  ??? 101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2, 102.3,
>>  ??? 102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
>>  ??? 104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
>>  ??? 105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5, 108.2,
>>  ??? 107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5, 109.3,
>>  ??? 109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
>>  ??? 111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
>>  ??? 110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8, 115.1,
>>  ??? 113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
>>  ??? 113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1, 115.3,
>>  ??? 115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9, 117.8,
>>  ??? 118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
>>  ??? 121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
>>  ??? 121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
>>  ??? 123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
>>  ??? 124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7, 126.8,
>>  ??? 126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2, 128.4,
>>  ??? 128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
>>  ??? 130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
>>  ??? 131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
>>  ??? 132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
>>  ??? 135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
>>  ??? 138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8, 97.7,
>>  ??? 98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3, 100.2,
>>  ??? 100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
>>  ??? 102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
>>  ??? 100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8, 104.3,
>>  ??? 104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
>>  ??? 107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
>>  ??? 108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
>>  ??? 109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
>>  ??? 111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
>>  ??? 115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
>>  ??? 121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
>>  ??? 121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
>>  ??? 123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4, 127.1,
>>  ??? 128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4, 130.6,
>>  ??? 131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
>>  ??? 131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6, 133.5,
>>  ??? 133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
>>  ??? 136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
>>  ??? 140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
>>  ??? 142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
>>  ??? 142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
>>  ??? 143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
>>  ??? 146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
>>  ??? 148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
>>  ??? ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
>>  ??? 99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
>>  ??? 99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
>>  ??? 102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
>>  ??? 104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
>>  ??? 106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
>>  ??? 108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
>>  ??? 112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
>>  ??? 112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4, 114.7,
>>  ??? 115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
>>  ??? 117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
>>  ??? 120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
>>  ??? 118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
>>  ??? 122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
>>  ??? 123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3, 124.3,
>>  ??? 124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5, 125.4,
>>  ??? 125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1, 127.2,
>>  ??? 127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9, 132.4,
>>  ??? 132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4, 133.5,
>>  ??? 133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
>>  ??? 135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
>>  ??? 138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7, 140.3,
>>  ??? 140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
>>  ??? 141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7, 143.9,
>>  ??? 144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3), v41691965 
>> = c(96.9,
>>  ??? 97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
>>  ??? 98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
>>  ??? 100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
>>  ??? 101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5, 101.7,
>>  ??? 102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2, 101.2,
>>  ??? 101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5, 102.2,
>>  ??? 101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6, 101.7,
>>  ??? 100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
>>  ??? 103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4, 103.2,
>>  ??? 103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6, 106.1,
>>  ??? 105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
>>  ??? 106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3, 109.2,
>>  ??? 109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
>>  ??? 110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
>>  ??? 113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
>>  ??? 113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
>>  ??? 115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6, 115.6,
>>  ??? 115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
>>  ??? 119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
>>  ??? 121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3, 122.6,
>>  ??? 123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7, 123.5,
>>  ??? 123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5, 123.2,
>>  ??? 124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2, 125.2,
>>  ??? 125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3, 124.9,
>>  ??? 125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
>>  ??? 105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
>>  ??? 99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
>>  ??? 101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9, 95.6,
>>  ??? 96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
>>  ??? 96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
>>  ??? 97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
>>  ??? 92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
>>  ??? 90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
>>  ??? 95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
>>  ??? 93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
>>  ??? 89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
>>  ??? 92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
>>  ??? 93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6, 88.3,
>>  ??? 92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
>>  ??? 85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
>>  ??? 90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
>>  ??? 91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3, 91.5,
>>  ??? 91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
>>  ??? 93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
>>  ??? 91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
>>  ??? 87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
>>  ??? 92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988 = 
>> c(98.2,
>>  ??? 98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
>>  ??? 94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3, 101.2,
>>  ??? 101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2, 103.9,
>>  ??? 104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6, 106.8,
>>  ??? 107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
>>  ??? 109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
>>  ??? 113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8, 116.9,
>>  ??? 117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
>>  ??? 118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
>>  ??? 118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
>>  ??? 116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5, 116.7,
>>  ??? 114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119, 119.1,
>>  ??? 119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
>>  ??? 125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5, 129.5,
>>  ??? 130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
>>  ??? 130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3, 131.3,
>>  ??? 131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7, 132.3,
>>  ??? 133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8, 131.4,
>>  ??? 129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4, 130.6,
>>  ??? 128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6, 128.6,
>>  ??? 130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
>>  ??? 133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
>>  ??? 136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
>>  ??? 142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
>>  ??? 143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
>>  ??? 110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
>>  ??? 88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
>>  ??? 104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
>>  ??? 111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
>>  ??? 127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1, 114.8,
>>  ??? 117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
>>  ??? 127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9, 154.3,
>>  ??? 152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
>>  ??? 155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
>>  ??? 152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
>>  ??? 122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
>>  ??? 143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
>>  ??? 144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
>>  ??? 168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
>>  ??? 177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8, 182.4,
>>  ??? 187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6, 183.7,
>>  ??? 182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
>>  ??? 189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9, 181.1,
>>  ??? 167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
>>  ??? 163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2, 146.8,
>>  ??? 152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1, 163.9,
>>  ??? 156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8, 167.2,
>>  ??? 177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7, 194.8,
>>  ??? 192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
>>  ??? 186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260, 1172192,
>>  ??? 1173559, 1173865, 1163159, 1173230, 1168291, 1148136, 1135730,
>>  ??? 1176671, 1184706, 1186957, 1177962, 1194820, 1192486, 1204268,
>>  ??? 1196677, 1198166, 1192339, 1188059, 1189860, 1195524, 1179193,
>>  ??? 1160881, 1156255, 1154137, 1151079, 1223651, 1193786, 1187791,
>>  ??? 1185070, 1222101, 1233158, 1222271, 1205916, 1211049, 1237429,
>>  ??? 1221806, 1288146, 1268949, 1239192, 1259979, 1259944, 1257909,
>>  ??? 1229472, 1206627, 1245003, 1262388, 1269395, 1276432, 1277248,
>>  ??? 1261277, 1291593, 1298114, 1305550, 1267413, 1294688, 1295694,
>>  ??? 1317484, 1333362, 1330478, 1362024, 1326774, 1319396, 1318673,
>>  ??? 1334044, 1346594, 1339499, 1363158, 1404445, 1434255, 1396545,
>>  ??? 1355204, 1367796, 1352577, 1349119, 1374720, 1398253, 1369215,
>>  ??? 1413653, 1431392, 1421479, 1419408, 1487702, 1434740, 1434398,
>>  ??? 1472990, 1471028, 1460549, 1461166, 1482247, 1490620, 1486005,
>>  ??? 1467463, 1444413, 1469876, 1477567, 1460040, 1446679, 1452324,
>>  ??? 1456279, 1455826, 1472154, 1485169, 1464240, 1487456, 1518692,
>>  ??? 1516207, 1512158, 1535860, 1535652, 1538473, 1549310, 1517172,
>>  ??? 1511436, 1531246, 1558108, 1555668, 1566767, 1566882, 1580492,
>>  ??? 1566209, 1594096, 1600677, 1613907, 1619388, 1607791, 1602639,
>>  ??? 1612385, 1631814, 1643924, 1650496, 1659254, 1679545, 1674956,
>>  ??? 1675779, 1676020, 1676843, 1679625, 1694232, 1695255, 1720478,
>>  ??? 1741576, 1736856, 1722187, 1750359, 1728204, 1736587, 1752139,
>>  ??? 1752173, 1770304, 1762990, 1777806, 1787814, 1766222, 1771789,
>>  ??? 1806919, 1817679, 1826720, 1854228, 1850492, 1857490, 1892994,
>>  ??? 1890432, 1892879, 1890258, 1911380, 1915088, 1891501, 1922679,
>>  ??? 1947153, 1994578, 1970953, 1983867, 2014740, 2008756, 2030234,
>>  ??? 2032886, 2059674, 2068652, 2073047, 2083031, 2136894, 2115520,
>>  ??? 2130280, 2158663, 2134182, 2172927, 2173367, 2173553, 2156196,
>>  ??? 2218283, 2237749, 2206090, 2227664, 2221296, 2238127, 2265268,
>>  ??? 2262536, 2284770, 2309970, 2310161, 2307041, 2331779, 2369833,
>>  ??? 2388535, 2335561, 2373858, 2397911, 2392511, 2405673, 2410779,
>>  ??? 2411443, 2438862, 2483861, 2444050, 2429816, 2451814, 2464695,
>>  ??? 2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
>>  ??? 12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
>>  ??? 12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
>>  ??? 10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
>>  ??? 11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
>>  ??? 10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
>>  ??? 11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
>>  ??? 11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
>>  ??? 10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
>>  ??? 11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
>>  ??? 12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
>>  ??? 12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
>>  ??? 12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
>>  ??? 12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
>>  ??? 12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
>>  ??? 11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
>>  ??? 11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
>>  ??? 11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
>>  ??? 12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
>>  ??? 12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
>>  ??? 12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
>>  ??? 12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
>>  ??? 12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
>>  ??? 12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
>>  ??? 2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
>>  ??? 778862, 1138557, 1636203, 2233518, 2114752, 1974646, 1534387,
>>  ??? 998860, 559524, 447850, 393285, 402189, 651017, 1523288,
>>  ??? 2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
>>  ??? 452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
>>  ??? 2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
>>  ??? 425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
>>  ??? 1411442, 900073, 491461, 413880, 390364, 393934, 586734,
>>  ??? 1266299, 2202400, 2309033, 2164470, 2145389, 1328220, 736964,
>>  ??? 480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
>>  ??? 3283157, 3804876, 3244792, 2477267, 1569953, 1169971, 1121247,
>>  ??? 1218442, 1182862, 1409876, 2241749, 3274756, 3494706, 3615470,
>>  ??? 3455902, 2199773, 1647961, 1230718, 1125165, 1078839, 1099809,
>>  ??? 1539702, 2190793, 3126922, 3886115, 3290320, 2942615, 2110948,
>>  ??? 1405583, 1308947, 1014607, 1148503, 1066941, 1596998, 2039112,
>>  ??? 2798847, 3446040, 3255602, 2815621, 1839592, 1426302, 1177683,
>>  ??? 1090902, 1145557, 1140902, 1524916, 2145484, 3256107, 3775523,
>>  ??? 3559115, 3289994, 2219521, 1774688, 1291471, 1191457, 1170953,
>>  ??? 1159087, 1543907, 2159364, 2786142, 3447635, 3179625, 2751435,
>>  ??? 2152765, 1596927, 1290466, 1278246, 1247608, 1253886, 1622877,
>>  ??? 2433993, 2831938, 3565488, 3636268, 3253630, 2559152, 1626984,
>>  ??? 1251460, 1163841, 1130486, 1190063, 1491645, 2345181, 3346689,
>>  ??? 4165953, 3842336, 3682352, 2580288, 1731497, 1199181, 1098817,
>>  ??? 1113400, 1079822, 1464918, 2344949, 3006111, 3847035, 4007847,
>>  ??? 3550039, 2397284, 1457876, 1155121, 1115934, 1113953, 1185585,
>>  ??? 1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>  ??? NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
>>  ??? 76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387, 77.807,
>>  ??? 74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
>>  ??? 87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041, 114.235,
>>  ??? 82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032, 108.011,
>>  ??? 79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
>>  ??? 83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143, 57.357,
>>  ??? 71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519, 70.549,
>>  ??? 64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906, 74.252,
>>  ??? 84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522, 74.888,
>>  ??? 52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3, 82.511,
>>  ??? 71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79, 72.919,
>>  ??? 92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501, 43.62,
>>  ??? 37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622, 57.833,
>>  ??? 72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712, 69.299,
>>  ??? 56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477, 50.752,
>>  ??? 66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846, 66.99,
>>  ??? 75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376, 76.071,
>>  ??? 70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346, 47.764,
>>  ??? 68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928, 60.752,
>>  ??? 71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44, 65.443,
>>  ??? 55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084, 61.375,
>>  ??? 41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148, 90.318,
>>  ??? 75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21, 72.047,
>>  ??? 88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135, 100.138,
>>  ??? 84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755, 77.894,
>>  ??? 59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223, 54.825,
>>  ??? 104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
>>  ??? 73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
>>  ??? v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
>>  ??? 9584905, 9382415, 9482770, 9307864, 9492970, 9715825, 9940764,
>>  ??? 10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
>>  ??? 10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
>>  ??? 10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
>>  ??? 10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
>>  ??? 10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
>>  ??? 10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
>>  ??? 11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
>>  ??? 11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
>>  ??? 11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
>>  ??? 11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
>>  ??? 11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
>>  ??? 12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
>>  ??? 12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
>>  ??? 12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
>>  ??? 11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
>>  ??? 12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
>>  ??? 12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
>>  ??? 12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
>>  ??? 13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
>>  ??? 13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
>>  ??? 13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
>>  ??? 13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
>>  ??? 13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
>>  ??? 14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
>>  ??? 14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
>>  ??? 15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
>>  ??? 14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
>>  ??? 15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
>>  ??? 16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
>>  ??? 16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
>>  ??? 17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
>>  ??? 18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
>>  ??? 18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
>>  ??? 19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
>>  ??? 18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
>>  ??? 19635452), v52368043 = c(17055707, 16701281, 16786260, 16756166,
>>  ??? 16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
>>  ??? 16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
>>  ??? 18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
>>  ??? 19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
>>  ??? 18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
>>  ??? 19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
>>  ??? 19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
>>  ??? 19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
>>  ??? 20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
>>  ??? 20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
>>  ??? 21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
>>  ??? 20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
>>  ??? 22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
>>  ??? 22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
>>  ??? 22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
>>  ??? 21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
>>  ??? 20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
>>  ??? 22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
>>  ??? 22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
>>  ??? 22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
>>  ??? 23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
>>  ??? 23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
>>  ??? 23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
>>  ??? 24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
>>  ??? 23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
>>  ??? 24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
>>  ??? 25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
>>  ??? 25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
>>  ??? 27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
>>  ??? 28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
>>  ??? 28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
>>  ??? 29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
>>  ??? 31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
>>  ??? 32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
>>  ??? 31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
>>  ??? 32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
>>  ??? 32796030, 32840886, 33870331), v54027371 = c(5006719, 5067172,
>>  ??? 5060865, 5062576, 5083254, 5072377, 5031234, 5052979, 5027204,
>>  ??? 5043632, 5035454, 5044842, 5063238, 5093024, 5091640, 5102054,
>>  ??? 5133352, 5142226, 5165655, 5203037, 5186307, 5174704, 5194163,
>>  ??? 5190310, 5232432, 5210572, 5234726, 5235080, 5254050, 5245134,
>>  ??? 5245175, 5249094, 5235952, 5262268, 5263595, 5253813, 5274263,
>>  ??? 5265423, 5299891, 5327379, 5316191, 5331555, 5346574, 5307140,
>>  ??? 5337742, 5347287, 5348381, 5377210, 5374212, 5383470, 5366697,
>>  ??? 5392882, 5388985, 5416367, 5417477, 5433010, 5448853, 5441429,
>>  ??? 5458425, 5471520, 5489243, 5495727, 5511121, 5512216, 5526438,
>>  ??? 5537303, 5522426, 5518461, 5536277, 5501749, 5564018, 5570599,
>>  ??? 5584461, 5593844, 5590604, 5602700, 5608632, 5616521, 5608951,
>>  ??? 5623657, 5616005, 5645595, 5647305, 5647451, 5693895, 5691488,
>>  ??? 5700220, 5707445, 5725799, 5728509, 5717031, 5723853, 5711995,
>>  ??? 5719339, 5681740, 5663311, 5643435, 5611268, 5590716, 5570704,
>>  ??? 5557739, 5536962, 5560436, 5529977, 5551949, 5574728, 5563493,
>>  ??? 5575590, 5577965, 5587020, 5596086, 5612563, 5609016, 5626466,
>>  ??? 5654424, 5633372, 5661574, 5667386, 5669274, 5689694, 5681104,
>>  ??? 5701730, 5706973, 5707289, 5692449, 5724435, 5730464, 5731650,
>>  ??? 5750310, 5739110, 5745413, 5742657, 5748606, 5744911, 5767140,
>>  ??? 5785313, 5808618, 5816135, 5806957, 5825860, 5814678, 5800046,
>>  ??? 5822757, 5809772, 5808239, 5818814, 5833898, 5829771, 5825801,
>>  ??? 5833676, 5847351, 5886288, 5872335, 5876134, 5878844, 5883709,
>>  ??? 5891947, 5885232, 5889681, 5891564, 5921837, 5931270, 5952834,
>>  ??? 5959543, 5957751, 5970395, 5962589, 5958983, 5996099, 5997162,
>>  ??? 5997791, 6025616, 6046802, 6043966, 6072665, 6063075, 6065666,
>>  ??? 6115610, 6091893, 6118988, 6119637, 6126261, 6136886, 6169330,
>>  ??? 6172147, 6198848, 6202387, 6197097, 6228521, 6219420, 6240999,
>>  ??? 6266000, 6254684, 6277414, 6289899, 6290412, 6302735, 6343442,
>>  ??? 6341087, 6359345, 6383177, 6364995, 6373585, 6394318, 6396556,
>>  ??? 6406482, 6430135, 6428086, 6458862, 6470913, 6480563, 6509009,
>>  ??? 6514678, 6545545, 6547838, 6538390, 6566127, 6566755, 6578311,
>>  ??? 6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
>>  ??? 692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69, 699.31,
>>  ??? 697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05, 708.58,
>>  ??? 709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96, 716.06,
>>  ??? 724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
>>  ??? 736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98, 752.13,
>>  ??? 745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22, 763.57,
>>  ??? 770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65, 789.71,
>>  ??? 784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76, 783.53,
>>  ??? 781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6, 806.36,
>>  ??? 802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27, 821.08,
>>  ??? 823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26, 838.09,
>>  ??? 840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65, 840.76,
>>  ??? 843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04, 853.68,
>>  ??? 852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13, 873.52,
>>  ??? 875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37, 897.82,
>>  ??? 894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08, 888.93,
>>  ??? 901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11, 902.56,
>>  ??? 909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03, 911.93,
>>  ??? 913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35, 920.2,
>>  ??? 924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
>>  ??? 938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82, 950.06,
>>  ??? 956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15, 966.48,
>>  ??? 968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64, 974.42,
>>  ??? 978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
>>  ??? 982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24, 1002.93,
>>  ??? 1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01, 1012.58,
>>  ??? 1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26, 1034.06,
>>  ??? 1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
>>  ??? 1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
>>  ??? 31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
>>  ??? 31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
>>  ??? 31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
>>  ??? 31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
>>  ??? 31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
>>  ??? 31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
>>  ??? 31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1, 30.8,
>>  ??? 30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
>>  ??? 30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3, 30.4,
>>  ??? 30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
>>  ??? 30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
>>  ??? 30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
>>  ??? 30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
>>  ??? 30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
>>  ??? 30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
>>  ??? 30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
>>  ??? 30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
>>  ??? 30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
>>  ??? 30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
>>  ??? 30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4, 30.4,
>>  ??? 30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
>>  ??? 29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
>>  ??? 22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406, 20917,
>>  ??? 21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253, 22542,
>>  ??? 23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269, 23088,
>>  ??? 21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371, 23691,
>>  ??? 25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459, 20867,
>>  ??? 21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359, 21206,
>>  ??? 23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132, 22893,
>>  ??? 22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387, 25378,
>>  ??? 24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948, 23937,
>>  ??? 27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165, 27903,
>>  ??? 30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645, 28820,
>>  ??? 26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664, 29056,
>>  ??? 28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457, 25821,
>>  ??? 29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086, 31843,
>>  ??? 33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727, 34795,
>>  ??? 33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568, 36096,
>>  ??? 35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920, 33633,
>>  ??? 33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653, 35486,
>>  ??? 35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129, 37903,
>>  ??? 37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617, 38777,
>>  ??? 38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330, 39600,
>>  ??? 40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405, 41141,
>>  ??? 41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908, 44375,
>>  ??? 43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686, 45193,
>>  ??? 44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
>>  ??? 85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
>>  ??? 92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
>>  ??? 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
>>  ??? 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9, 95.7,
>>  ??? 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
>>  ??? 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
>>  ??? 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
>>  ??? 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
>>  ??? 104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
>>  ??? 112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
>>  ??? 115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4,
>>  ??? 114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8,
>>  ??? 113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2,
>>  ??? 129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3,
>>  ??? 121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
>>  ??? 142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
>>  ??? 117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
>>  ??? 132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7,
>>  ??? 128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
>>  ??? 130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
>>  ??? 131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
>>  ??? 135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
>>  ??? 136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
>>  ??? 135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
>>  ??? 100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
>>  ??? 98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
>>  ??? 89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
>>  ??? 86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
>>  ??? 96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
>>  ??? 97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
>>  ??? 97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
>>  ??? 97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
>>  ??? 102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
>>  ??? 103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107, 107.5,
>>  ??? 106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7, 102.7,
>>  ??? 104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
>>  ??? 104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
>>  ??? 119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2, 117.2,
>>  ??? 115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3, 117.4,
>>  ??? 120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
>>  ??? 123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
>>  ??? 140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
>>  ??? 136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7, 128.4,
>>  ??? 130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
>>  ??? 118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4, 132.6,
>>  ??? 128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
>>  ??? 120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5, 121.1,
>>  ??? 122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837, 23571783,
>>  ??? 24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
>>  ??? 23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
>>  ??? 24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
>>  ??? 25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
>>  ??? 25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
>>  ??? 24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
>>  ??? 25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
>>  ??? 25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
>>  ??? 24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
>>  ??? 25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
>>  ??? 24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
>>  ??? 24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
>>  ??? 25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
>>  ??? 23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
>>  ??? 22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
>>  ??? 22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
>>  ??? 17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
>>  ??? 19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
>>  ??? 19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
>>  ??? 20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
>>  ??? 20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
>>  ??? 21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
>>  ??? 22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
>>  ??? 22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
>>  ??? 22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
>>  ??? 22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
>>  ??? 23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
>>  ??? 23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
>>  ??? 23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
>>  ??? 24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
>>  ??? 24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
>>  ??? 25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
>>  ??? 25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
>>  ??? 24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
>>  ??? 26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
>>  ??? 26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
>>  ??? 26637112, 26198157, 26778716, 26846047, 26409309)), row.names = 
>> c(NA,
>> -223L), class = c("tbl_df", "tbl", "data.frame"))
>> 
>> dput() output for dts:
>> 
>> 
>> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>>  ??? X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 = c(NA_real_,
>>  ??? NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
>>  ??? NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>>  ??? X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
>>  ??? 120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
>>  ??? NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>  ??? ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
>>  ??? NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>  ??? ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 = 
>> c(NA_real_,
>>  ??? NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
>>  ??? NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>  ??? ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 = 
>> c(NA_real_,
>>  ??? NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
>>  ??? NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>  ??? ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 = 
>> c(NA_real_,
>>  ??? NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
>>  ??? NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>  ??? ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 = 
>> c(NA_real_,
>>  ??? NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
>>  ??? NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
>>  ??? NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>  ??? ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 = c(NA,
>>  ??? NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
>>  ??? NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L), class = 
>> "data.frame")
>> 
>> dput() output for testcase1:
>> 
>> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
>> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
>> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
>> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
>> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
>> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
>> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
>> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6, 104.3,
>> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
>> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
>> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
>> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
>> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
>> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
>> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
>> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
>> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
>> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
>> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
>> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
>> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
>> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
>> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
>> 135.1, NA, NA)
>> 
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide 
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.


From wdun|@p @end|ng |rom t|bco@com  Wed Oct 30 17:58:08 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 30 Oct 2019 09:58:08 -0700
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
 <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
 <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>
Message-ID: <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>

Your EXTEND() function appears to expect that its 'x' argument will be a
numeric vector, but you pass it a one-column tibble.  Hence length(x) is 1
and things go downhill from there.

I like to start such functions with a long stopifnot() statement that does
a quick check of inputs.  E.g.,

stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)

Use vseries1[,j,drop=TRUE] or vseries1[[j]] to extract a single column from
the tibble 'vseries1'.  vseries1[,1] will return a one-column tibble.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Oct 30, 2019 at 5:25 AM <phil at philipsmith.ca> wrote:

> Thanks for the suggestion Rui, but no, this will not remove the error.
> In fact, if I drop the second term entirely as in:
>
> if ( (!is.na(dts[1,j-1])) ) {
>
> then I still get the error. I have been unable to find a work-around.
>
> Philip
>
>
> On 2019-10-30 05:17, Rui Barradas wrote:
> > Hello,
> >
> > Is this as simple as
> >
> >
> > if ( (!is.na(dts[1,j-1])) & (!is.na(dts[3,j-1])) ) {
> >
> >
> > (change the logical operator from '|' to '&')?
> > The result vseries1 still has some NA's at the end of some of its
> > series.
> >
> > Hope this helps,
> >
> > Rui Barradas
> >
> > ?s 02:05 de 30/10/19, phil at philipsmith.ca escreveu:
> >> I am having a problem that generates the error message: " Error in
> >> firstnonmiss:lastnonmiss : argument of length 0 ". There is an article
> >> on this in stackoverflow, but I have been unable to understand it well
> >> enough to solve my problem. Essentially, I have a data frame with 41
> >> indicator series and some of the series have missing values (NAs) at
> >> the beginning and/or the end. I want to fill in the missing values
> >> using ARIMA models, via the forecast() function. It works when I use
> >> my EXTEND function on a single series, but it fails when I try to loop
> >> through all 41 series. Here is a reproducible example. Thanks for any
> >> advice.
> >>
> >> # Reproducible example
> >> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
> >> # See also stackoverflow:
> >>
> https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement
> >> library(forecast)
> >> library(lubridate)
> >> vseries <- dget("vseries.txt") # data frame containing REF_DATE and 41
> >> "indicator" vectors
> >> dts <- dget("dts.txt") # data frame recording where NAs are in vseries
> >> - they will be replaced
> >> testcase1 <- dget("testcase1.txt") # a vector for use in testing
> >> # Function to fill in missing values (NAs) using ARIMA forecasts and
> >> backcasts
> >> EXTEND <- function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
> >>    if (!is.na(dt1)) {
> >>      bfct = dt2-dt1+1 # number of months to backcast
> >>      revx <- ts(rev(x),frequency=12)
> >>      revx <- revx[1:(length(revx)-dt2)]
> >>      fc <- forecast(auto.arima(revx),bfct)
> >>      revx1 <- c(revx,fc$mean) # extend with forecasts (in fc$mean)
> >>      m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
> >>      y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
> >>      x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
> >>    }
> >>    if (!is.na(dt3)) {
> >>      ffct <- dt4-dt3+1 # number of months to forecast
> >>      x <- x[1:(dt3-1)]
> >>      fc <- forecast(auto.arima(x),ffct)
> >>      x <- c(x,fc$mean)
> >>    }
> >>    return(x)
> >> }
> >> # Test EXTEND function with a single vector - apparently it works
> >> (testcase1_extended <- EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
> >> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
> >> View(cbind(testcase1,testcase1_extended))
> >> # Now use EXTEND to fill in the missing values in all 41 indicators in
> >> vseries
> >> # Data frame dts has NAs where no extension is required, integer
> >> values showing where to start and
> >> # where to end when extensions are required. Store extended series in
> >> vseries1.
> >> vseries1 <- vseries
> >> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1 in
> >> vseries is REF_DATE
> >>    if ( (!is.na(dts[1,j-1])) | (!is.na(dts[3,j-1])) ) {
> >>      vseries1[,j] <-
> >>
> EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1],
>
> >> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
> >>    }
> >> }
> >> View(vseries)
> >> View(vseries1)
> >>
> >> dput() output for vseries:
> >>
> >> structure(list(REF_DATE = c("2001-01-01", "2001-02-01", "2001-03-01",
> >> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01", "2001-08-01",
> >> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01", "2002-01-01",
> >> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01", "2002-06-01",
> >> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01", "2002-11-01",
> >> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01", "2003-04-01",
> >> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01", "2003-09-01",
> >> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01", "2004-02-01",
> >> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01", "2004-07-01",
> >> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01", "2004-12-01",
> >> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01", "2005-05-01",
> >> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01", "2005-10-01",
> >> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01", "2006-03-01",
> >> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01", "2006-08-01",
> >> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01", "2007-01-01",
> >> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01", "2007-06-01",
> >> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01", "2007-11-01",
> >> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01", "2008-04-01",
> >> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01", "2008-09-01",
> >> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01", "2009-02-01",
> >> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01", "2009-07-01",
> >> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01", "2009-12-01",
> >> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01", "2010-05-01",
> >> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01", "2010-10-01",
> >> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01", "2011-03-01",
> >> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01", "2011-08-01",
> >> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01", "2012-01-01",
> >> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01", "2012-06-01",
> >> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01", "2012-11-01",
> >> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01", "2013-04-01",
> >> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01", "2013-09-01",
> >> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01", "2014-02-01",
> >> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01", "2014-07-01",
> >> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01", "2014-12-01",
> >> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01", "2015-05-01",
> >> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01", "2015-10-01",
> >> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01", "2016-03-01",
> >> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01", "2016-08-01",
> >> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01", "2017-01-01",
> >> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01", "2017-06-01",
> >> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01", "2017-11-01",
> >> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01", "2018-04-01",
> >> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01", "2018-09-01",
> >> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01", "2019-02-01",
> >> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01", "2019-07-01"
> >> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987, 19671015,
> >> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227, 15362864,
> >> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846, 16124593,
> >> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326, 17559123,
> >> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801, 17557392,
> >> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657, 19027956,
> >> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111, 18665646,
> >> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368, 20466651,
> >> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403, 17890774,
> >> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141, 20060353,
> >> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846, 23024759,
> >> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713, 21213020,
> >> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572, 20881111,
> >> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926, 18556973,
> >> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295, 16443231,
> >> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108, 17853071,
> >> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783, 21107272,
> >> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654, 20878866,
> >> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337, 22337136,
> >> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288, 23252411,
> >> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385, 20109262,
> >> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128, 23130117,
> >> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882, 25197042,
> >> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289, 27899355,
> >> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182, 27040475,
> >> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129, 27108195,
> >> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186, 25857724,
> >> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772, 26468833,
> >> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265, 28179157,
> >> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939, 29778379,
> >> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824, 29820781,
> >> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423, 30947662,
> >> 29590180), v1001816392 = c(14810380, 14200859, 16756119, 15217622,
> >> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643, 15666826,
> >> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785, 15250640,
> >> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416, 13984446,
> >> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684, 12738958,
> >> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311, 16669218,
> >> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684, 15377076,
> >> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530, 15633935,
> >> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696, 14282888,
> >> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547, 11808763,
> >> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585, 14739285,
> >> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113, 13908728,
> >> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120, 14157825,
> >> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313, 13084751,
> >> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990, 9888218,
> >> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361, 10292744,
> >> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995, 12464327,
> >> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365, 14066907,
> >> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540, 13928150,
> >> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174, 14259088,
> >> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428, 12348507,
> >> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402, 12114754,
> >> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810, 13122736,
> >> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121, 16407589,
> >> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925, 15389386,
> >> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529, 17312508,
> >> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636, 17043771,
> >> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251, 16292556,
> >> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082, 16254963,
> >> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366, 17819011,
> >> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853, 18388536,
> >> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596, 19056997,
> >> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
> >> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
> >> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
> >> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
> >> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
> >> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
> >> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
> >> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
> >> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
> >> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
> >> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
> >> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
> >> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
> >> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
> >> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
> >> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
> >> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
> >> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
> >> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
> >> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
> >> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
> >> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
> >> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
> >> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
> >> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
> >> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
> >> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
> >> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
> >> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
> >> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
> >> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
> >> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
> >> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
> >> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
> >> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
> >> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
> >> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
> >> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
> >> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
> >> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
> >> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
> >> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
> >> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
> >> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
> >> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
> >> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
> >> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
> >> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
> >> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
> >> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
> >> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
> >> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
> >> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
> >> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
> >> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
> >> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
> >> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
> >> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
> >> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
> >> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
> >> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
> >> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
> >> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
> >> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
> >> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
> >> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077, 15407812,
> >> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658, 14415174,
> >> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080, 15044874,
> >> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316, 11919494,
> >> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326, 10377252,
> >> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102, 12992845,
> >> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588, 13924365,
> >> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754, 13550102,
> >> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153, 14102556,
> >> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033, 13670648,
> >> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714, 12847367,
> >> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377, 12244381,
> >> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046, 11770050,
> >> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217, 12097708,
> >> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
> >> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
> >> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
> >> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
> >> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267, 10621244,
> >> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394, 10523656,
> >> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800, 11353041,
> >> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210, 11132326,
> >> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218, 10184002,
> >> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262, 11590206,
> >> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487, 13436617,
> >> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727, 14243928,
> >> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307, 13826213,
> >> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693, 12754175,
> >> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383, 10931400,
> >> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609, 12366614,
> >> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534, 12786433,
> >> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828, 13274018,
> >> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
> >> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103, 12173082,
> >> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495, 14636326,
> >> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966, 13877119,
> >> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189, 13126548,
> >> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027, 10695234,
> >> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447, 12927490,
> >> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608, 13925071,
> >> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771, 13135370,
> >> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856, 13492799,
> >> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430, 12127888,
> >> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185, 10548301,
> >> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227, 11593154,
> >> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363, 12622830,
> >> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198, 10608854,
> >> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384, 10612403,
> >> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765, 12335679,
> >> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867, 10507066,
> >> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839, 12542127,
> >> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179, 13279826,
> >> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238, 12657427,
> >> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612, 13452761,
> >> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655, 11701079,
> >> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363, 13341724,
> >> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368, 13650455,
> >> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891, 15646361,
> >> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288, 16527074,
> >> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797, 15281552,
> >> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339, 18182041,
> >> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023, 14000735,
> >> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995, 16636582,
> >> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203, 17997663,
> >> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780, 1264742,
> >> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
> >> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
> >> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
> >> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
> >> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
> >> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
> >> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
> >> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
> >> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
> >> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
> >> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
> >> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
> >> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
> >> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
> >> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232, 1380845,
> >> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556, 1053348,
> >> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576, 1029796,
> >> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473, 836908,
> >> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875, 1055059,
> >> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037, 934344,
> >> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
> >> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030, 959260,
> >> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558, 760214,
> >> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984, 942851,
> >> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
> >> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
> >> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
> >> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
> >> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
> >> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089, 828632,
> >> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486, 1096690,
> >> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
> >> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748, 665961,
> >> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797, 960006,
> >> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
> >> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
> >> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
> >> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
> >> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
> >> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
> >> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
> >> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
> >> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
> >> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
> >> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
> >> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
> >> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
> >> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
> >> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
> >> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
> >> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
> >> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
> >> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
> >> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
> >> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
> >> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
> >> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
> >> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812, 796604,
> >> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
> >> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
> >> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
> >> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
> >> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
> >> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
> >> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128, 1084626,
> >> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
> >> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
> >> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913, 1058493,
> >> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
> >> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
> >> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958, 1091468,
> >> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
> >> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
> >> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
> >> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
> >> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
> >> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
> >> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
> >> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093, 971856,
> >> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120, 845165,
> >> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
> >> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
> >> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042, 892834,
> >> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867, 1094743,
> >> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
> >> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970, 72620,
> >> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
> >> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
> >> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
> >> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
> >> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
> >> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
> >> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
> >> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
> >> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
> >> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
> >> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
> >> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
> >> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
> >> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
> >> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
> >> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
> >> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
> >> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
> >> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
> >> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
> >> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
> >> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
> >> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
> >> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
> >> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
> >> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899, 20426712,
> >> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355, 20768807,
> >> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726, 21596243,
> >> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072, 21846894,
> >> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231, 22554639,
> >> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451, 23206767,
> >> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818, 23784278,
> >> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768, 24503153,
> >> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920, 25035239,
> >> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231, 25918644,
> >> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543, 26691191,
> >> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037, 27180711,
> >> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474, 27386049,
> >> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040, 26877705,
> >> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460, 27155400,
> >> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341, 27686074,
> >> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974, 28716843,
> >> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032, 29165480,
> >> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041, 29795842,
> >> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304, 30287625,
> >> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619, 30970797,
> >> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046, 31382224,
> >> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255, 32294373,
> >> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158, 33033517,
> >> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255, 33687475,
> >> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093, 33938988,
> >> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494, 34350509,
> >> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315, 35518127,
> >> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171, 36971724,
> >> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633, 37827498,
> >> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308, 38560349,
> >> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
> >> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926, 5937.3,
> >> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6, 6075.3,
> >> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
> >> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
> >> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
> >> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3, 6379.3,
> >> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
> >> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
> >> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
> >> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623, 6638.2,
> >> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5, 6461.2,
> >> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
> >> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
> >> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
> >> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
> >> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
> >> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
> >> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
> >> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
> >> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
> >> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935, 6930.3,
> >> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
> >> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
> >> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
> >> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
> >> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
> >> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
> >> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
> >> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
> >> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
> >> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
> >> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
> >> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
> >> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
> >> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
> >> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
> >> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
> >> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
> >> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
> >> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
> >> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
> >> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
> >> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
> >> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
> >> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
> >> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
> >> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
> >> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
> >> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
> >> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
> >> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
> >> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
> >> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
> >> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
> >> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
> >> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
> >> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
> >> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
> >> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
> >> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
> >> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
> >> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
> >> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
> >> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
> >> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
> >> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
> >> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
> >> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
> >> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
> >> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
> >> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
> >> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
> >> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
> >> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
> >> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
> >> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
> >> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
> >> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
> >> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
> >> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
> >> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
> >> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
> >> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
> >> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
> >> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
> >> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
> >> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
> >> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
> >>      v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
> >>      62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
> >>      62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
> >>      63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1, 63.8,
> >>      63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
> >>      63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
> >>      63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
> >>      62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
> >>      63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
> >>      63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
> >>      60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
> >>      60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
> >>      61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
> >>      61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
> >>      60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
> >>      61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
> >>      61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8, 60.7,
> >>      60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8, 60.9,
> >>      60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
> >>      60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
> >>      61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
> >>      60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
> >>      ), v382201 = c(212164, 193583, 215866, 211263, 222871, 215519,
> >>      219942, 216251, 207703, 212013, 207781, 219596, 222977, 202836,
> >>      225014, 217040, 223269, 212081, 211644, 208999, 200885, 207899,
> >>      204091, 216573, 218997, 195583, 215113, 206360, 214884, 208636,
> >>      214072, 211055, 206974, 211607, 205837, 215020, 216294, 201218,
> >>      216097, 209029, 216690, 207829, 211911, 212123, 205356, 211083,
> >>      205076, 212205, 212779, 191520, 213090, 209484, 215975, 205127,
> >>      207085, 209844, 201884, 206749, 200246, 208719, 211380, 190749,
> >>      209346, 200994, 207431, 198322, 201983, 200869, 196045, 199493,
> >>      195149, 205332, 207126, 185698, 207850, 205701, 216965, 209296,
> >>      215644, 214061, 205121, 209924, 204004, 213241, 217848, 203144,
> >>      213848, 206368, 212813, 200362, 202502, 202339, 195491, 201314,
> >>      196093, 206104, 208701, 190879, 213025, 208090, 217292, 210890,
> >>      216526, 213092, 206553, 209884, 204042, 211314, 212389, 192037,
> >>      213815, 208826, 216756, 207533, 210091, 212435, 204595, 209379,
> >>      203827, 210218, 212451, 192470, 214095, 208717, 217913, 212215,
> >>      217087, 218783, 209940, 214059, 208998, 220829, 223171, 208246,
> >>      222458, 215499, 221694, 213553, 219458, 221757, 214203, 221003,
> >>      214380, 221215, 220019, 197689, 218045, 210866, 218954, 209825,
> >>      212145, 218399, 210138, 215187, 206605, 211504, 212024, 192311,
> >>      212260, 207136, 215097, 210584, 218528, 220739, 214149, 218748,
> >>      208968, 216712, 218399, 197318, 223819, 221927, 234903, 228622,
> >>      233660, 231277, 221779, 227918, 220888, 231634, 235272, 220580,
> >>      233970, 226381, 235613, 227998, 234353, 235796, 230542, 239605,
> >>      233645, 245124, 248935, 226969, 252118, 245888, 253940, 242869,
> >>      249518, 250305, 242427, 251666, 242906, 253645, 257586, 236425,
> >>      262768, 252595, 262910, 254396, 254417, 252449, 241404, 246729,
> >>      237361, 248692, 251752, 228933, 256286, 249336, 255692, 247109,
> >>      251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
> >>      97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
> >>      99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
> >>      104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7, 103.8,
> >>      104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
> >>      108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
> >>      110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
> >>      111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1, 112.6,
> >>      112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
> >>      113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
> >>      125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
> >>      130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7, 134.3,
> >>      134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
> >>      135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
> >>      139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
> >>      141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
> >>      143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
> >>      144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
> >>      145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8, 141.5,
> >>      147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
> >>      141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
> >>      145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
> >>      147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
> >>      149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
> >>      152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
> >>      ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
> >>      108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
> >>      101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
> >>      100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8, 98.1,
> >>      98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
> >>      98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6, 97.5,
> >>      101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
> >>      103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
> >>      101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5, 105.4,
> >>      98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
> >>      120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2, 137.7,
> >>      140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
> >>      138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
> >>      130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
> >>      143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4, 143.5,
> >>      143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
> >>      142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
> >>      132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
> >>      139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
> >>      144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6, 141.5,
> >>      141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7, 137.1,
> >>      134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
> >>      133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
> >>      134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
> >>      130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130), v41691919
> >> = c(96.5,
> >>      97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
> >>      97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3, 100.9,
> >>      101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2, 102.3,
> >>      102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
> >>      104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
> >>      105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5, 108.2,
> >>      107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5, 109.3,
> >>      109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
> >>      111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
> >>      110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8, 115.1,
> >>      113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
> >>      113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1, 115.3,
> >>      115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9, 117.8,
> >>      118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
> >>      121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
> >>      121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
> >>      123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
> >>      124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7, 126.8,
> >>      126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2, 128.4,
> >>      128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
> >>      130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
> >>      131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
> >>      132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
> >>      135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
> >>      138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8, 97.7,
> >>      98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3, 100.2,
> >>      100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
> >>      102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
> >>      100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8, 104.3,
> >>      104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
> >>      107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
> >>      108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
> >>      109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
> >>      111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
> >>      115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
> >>      121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
> >>      121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
> >>      123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4, 127.1,
> >>      128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4, 130.6,
> >>      131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
> >>      131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6, 133.5,
> >>      133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
> >>      136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
> >>      140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
> >>      142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
> >>      142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
> >>      143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
> >>      146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
> >>      148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
> >>      ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
> >>      99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
> >>      99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
> >>      102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
> >>      104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
> >>      106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
> >>      108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
> >>      112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
> >>      112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4, 114.7,
> >>      115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
> >>      117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
> >>      120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
> >>      118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
> >>      122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
> >>      123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3, 124.3,
> >>      124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5, 125.4,
> >>      125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1, 127.2,
> >>      127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9, 132.4,
> >>      132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4, 133.5,
> >>      133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
> >>      135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
> >>      138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7, 140.3,
> >>      140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
> >>      141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7, 143.9,
> >>      144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3), v41691965
> >> = c(96.9,
> >>      97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
> >>      98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
> >>      100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
> >>      101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5, 101.7,
> >>      102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2, 101.2,
> >>      101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5, 102.2,
> >>      101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6, 101.7,
> >>      100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
> >>      103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4, 103.2,
> >>      103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6, 106.1,
> >>      105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
> >>      106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3, 109.2,
> >>      109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
> >>      110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
> >>      113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
> >>      113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
> >>      115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6, 115.6,
> >>      115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
> >>      119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
> >>      121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3, 122.6,
> >>      123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7, 123.5,
> >>      123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5, 123.2,
> >>      124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2, 125.2,
> >>      125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3, 124.9,
> >>      125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
> >>      105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
> >>      99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
> >>      101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9, 95.6,
> >>      96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
> >>      96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
> >>      97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
> >>      92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
> >>      90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
> >>      95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
> >>      93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
> >>      89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
> >>      92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
> >>      93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6, 88.3,
> >>      92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
> >>      85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
> >>      90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
> >>      91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3, 91.5,
> >>      91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
> >>      93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
> >>      91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
> >>      87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
> >>      92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988 =
> >> c(98.2,
> >>      98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
> >>      94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3, 101.2,
> >>      101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2, 103.9,
> >>      104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6, 106.8,
> >>      107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
> >>      109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
> >>      113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8, 116.9,
> >>      117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
> >>      118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
> >>      118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
> >>      116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5, 116.7,
> >>      114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119, 119.1,
> >>      119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
> >>      125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5, 129.5,
> >>      130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
> >>      130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3, 131.3,
> >>      131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7, 132.3,
> >>      133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8, 131.4,
> >>      129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4, 130.6,
> >>      128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6, 128.6,
> >>      130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
> >>      133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
> >>      136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
> >>      142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
> >>      143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
> >>      110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
> >>      88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
> >>      104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
> >>      111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
> >>      127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1, 114.8,
> >>      117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
> >>      127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9, 154.3,
> >>      152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
> >>      155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
> >>      152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
> >>      122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
> >>      143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
> >>      144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
> >>      168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
> >>      177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8, 182.4,
> >>      187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6, 183.7,
> >>      182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
> >>      189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9, 181.1,
> >>      167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
> >>      163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2, 146.8,
> >>      152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1, 163.9,
> >>      156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8, 167.2,
> >>      177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7, 194.8,
> >>      192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
> >>      186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260, 1172192,
> >>      1173559, 1173865, 1163159, 1173230, 1168291, 1148136, 1135730,
> >>      1176671, 1184706, 1186957, 1177962, 1194820, 1192486, 1204268,
> >>      1196677, 1198166, 1192339, 1188059, 1189860, 1195524, 1179193,
> >>      1160881, 1156255, 1154137, 1151079, 1223651, 1193786, 1187791,
> >>      1185070, 1222101, 1233158, 1222271, 1205916, 1211049, 1237429,
> >>      1221806, 1288146, 1268949, 1239192, 1259979, 1259944, 1257909,
> >>      1229472, 1206627, 1245003, 1262388, 1269395, 1276432, 1277248,
> >>      1261277, 1291593, 1298114, 1305550, 1267413, 1294688, 1295694,
> >>      1317484, 1333362, 1330478, 1362024, 1326774, 1319396, 1318673,
> >>      1334044, 1346594, 1339499, 1363158, 1404445, 1434255, 1396545,
> >>      1355204, 1367796, 1352577, 1349119, 1374720, 1398253, 1369215,
> >>      1413653, 1431392, 1421479, 1419408, 1487702, 1434740, 1434398,
> >>      1472990, 1471028, 1460549, 1461166, 1482247, 1490620, 1486005,
> >>      1467463, 1444413, 1469876, 1477567, 1460040, 1446679, 1452324,
> >>      1456279, 1455826, 1472154, 1485169, 1464240, 1487456, 1518692,
> >>      1516207, 1512158, 1535860, 1535652, 1538473, 1549310, 1517172,
> >>      1511436, 1531246, 1558108, 1555668, 1566767, 1566882, 1580492,
> >>      1566209, 1594096, 1600677, 1613907, 1619388, 1607791, 1602639,
> >>      1612385, 1631814, 1643924, 1650496, 1659254, 1679545, 1674956,
> >>      1675779, 1676020, 1676843, 1679625, 1694232, 1695255, 1720478,
> >>      1741576, 1736856, 1722187, 1750359, 1728204, 1736587, 1752139,
> >>      1752173, 1770304, 1762990, 1777806, 1787814, 1766222, 1771789,
> >>      1806919, 1817679, 1826720, 1854228, 1850492, 1857490, 1892994,
> >>      1890432, 1892879, 1890258, 1911380, 1915088, 1891501, 1922679,
> >>      1947153, 1994578, 1970953, 1983867, 2014740, 2008756, 2030234,
> >>      2032886, 2059674, 2068652, 2073047, 2083031, 2136894, 2115520,
> >>      2130280, 2158663, 2134182, 2172927, 2173367, 2173553, 2156196,
> >>      2218283, 2237749, 2206090, 2227664, 2221296, 2238127, 2265268,
> >>      2262536, 2284770, 2309970, 2310161, 2307041, 2331779, 2369833,
> >>      2388535, 2335561, 2373858, 2397911, 2392511, 2405673, 2410779,
> >>      2411443, 2438862, 2483861, 2444050, 2429816, 2451814, 2464695,
> >>      2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
> >>      12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
> >>      12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
> >>      10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
> >>      11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
> >>      10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
> >>      11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
> >>      11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
> >>      10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
> >>      11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
> >>      12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
> >>      12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
> >>      12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
> >>      12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
> >>      12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
> >>      11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
> >>      11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
> >>      11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
> >>      12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
> >>      12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
> >>      12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
> >>      12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
> >>      12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
> >>      12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
> >>      2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
> >>      778862, 1138557, 1636203, 2233518, 2114752, 1974646, 1534387,
> >>      998860, 559524, 447850, 393285, 402189, 651017, 1523288,
> >>      2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
> >>      452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
> >>      2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
> >>      425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
> >>      1411442, 900073, 491461, 413880, 390364, 393934, 586734,
> >>      1266299, 2202400, 2309033, 2164470, 2145389, 1328220, 736964,
> >>      480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
> >>      3283157, 3804876, 3244792, 2477267, 1569953, 1169971, 1121247,
> >>      1218442, 1182862, 1409876, 2241749, 3274756, 3494706, 3615470,
> >>      3455902, 2199773, 1647961, 1230718, 1125165, 1078839, 1099809,
> >>      1539702, 2190793, 3126922, 3886115, 3290320, 2942615, 2110948,
> >>      1405583, 1308947, 1014607, 1148503, 1066941, 1596998, 2039112,
> >>      2798847, 3446040, 3255602, 2815621, 1839592, 1426302, 1177683,
> >>      1090902, 1145557, 1140902, 1524916, 2145484, 3256107, 3775523,
> >>      3559115, 3289994, 2219521, 1774688, 1291471, 1191457, 1170953,
> >>      1159087, 1543907, 2159364, 2786142, 3447635, 3179625, 2751435,
> >>      2152765, 1596927, 1290466, 1278246, 1247608, 1253886, 1622877,
> >>      2433993, 2831938, 3565488, 3636268, 3253630, 2559152, 1626984,
> >>      1251460, 1163841, 1130486, 1190063, 1491645, 2345181, 3346689,
> >>      4165953, 3842336, 3682352, 2580288, 1731497, 1199181, 1098817,
> >>      1113400, 1079822, 1464918, 2344949, 3006111, 3847035, 4007847,
> >>      3550039, 2397284, 1457876, 1155121, 1115934, 1113953, 1185585,
> >>      1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>      NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
> >>      76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387, 77.807,
> >>      74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
> >>      87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041, 114.235,
> >>      82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032, 108.011,
> >>      79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
> >>      83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143, 57.357,
> >>      71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519, 70.549,
> >>      64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906, 74.252,
> >>      84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522, 74.888,
> >>      52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3, 82.511,
> >>      71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79, 72.919,
> >>      92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501, 43.62,
> >>      37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622, 57.833,
> >>      72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712, 69.299,
> >>      56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477, 50.752,
> >>      66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846, 66.99,
> >>      75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376, 76.071,
> >>      70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346, 47.764,
> >>      68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928, 60.752,
> >>      71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44, 65.443,
> >>      55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084, 61.375,
> >>      41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148, 90.318,
> >>      75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21, 72.047,
> >>      88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135, 100.138,
> >>      84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755, 77.894,
> >>      59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223, 54.825,
> >>      104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
> >>      73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
> >>      v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
> >>      9584905, 9382415, 9482770, 9307864, 9492970, 9715825, 9940764,
> >>      10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
> >>      10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
> >>      10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
> >>      10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
> >>      10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
> >>      10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
> >>      11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
> >>      11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
> >>      11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
> >>      11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
> >>      11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
> >>      12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
> >>      12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
> >>      12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
> >>      11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
> >>      12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
> >>      12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
> >>      12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
> >>      13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
> >>      13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
> >>      13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
> >>      13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
> >>      13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
> >>      14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
> >>      14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
> >>      15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
> >>      14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
> >>      15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
> >>      16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
> >>      16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
> >>      17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
> >>      18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
> >>      18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
> >>      19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
> >>      18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
> >>      19635452), v52368043 = c(17055707, 16701281, 16786260, 16756166,
> >>      16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
> >>      16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
> >>      18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
> >>      19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
> >>      18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
> >>      19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
> >>      19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
> >>      19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
> >>      20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
> >>      20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
> >>      21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
> >>      20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
> >>      22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
> >>      22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
> >>      22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
> >>      21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
> >>      20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
> >>      22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
> >>      22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
> >>      22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
> >>      23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
> >>      23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
> >>      23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
> >>      24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
> >>      23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
> >>      24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
> >>      25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
> >>      25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
> >>      27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
> >>      28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
> >>      28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
> >>      29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
> >>      31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
> >>      32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
> >>      31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
> >>      32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
> >>      32796030, 32840886, 33870331), v54027371 = c(5006719, 5067172,
> >>      5060865, 5062576, 5083254, 5072377, 5031234, 5052979, 5027204,
> >>      5043632, 5035454, 5044842, 5063238, 5093024, 5091640, 5102054,
> >>      5133352, 5142226, 5165655, 5203037, 5186307, 5174704, 5194163,
> >>      5190310, 5232432, 5210572, 5234726, 5235080, 5254050, 5245134,
> >>      5245175, 5249094, 5235952, 5262268, 5263595, 5253813, 5274263,
> >>      5265423, 5299891, 5327379, 5316191, 5331555, 5346574, 5307140,
> >>      5337742, 5347287, 5348381, 5377210, 5374212, 5383470, 5366697,
> >>      5392882, 5388985, 5416367, 5417477, 5433010, 5448853, 5441429,
> >>      5458425, 5471520, 5489243, 5495727, 5511121, 5512216, 5526438,
> >>      5537303, 5522426, 5518461, 5536277, 5501749, 5564018, 5570599,
> >>      5584461, 5593844, 5590604, 5602700, 5608632, 5616521, 5608951,
> >>      5623657, 5616005, 5645595, 5647305, 5647451, 5693895, 5691488,
> >>      5700220, 5707445, 5725799, 5728509, 5717031, 5723853, 5711995,
> >>      5719339, 5681740, 5663311, 5643435, 5611268, 5590716, 5570704,
> >>      5557739, 5536962, 5560436, 5529977, 5551949, 5574728, 5563493,
> >>      5575590, 5577965, 5587020, 5596086, 5612563, 5609016, 5626466,
> >>      5654424, 5633372, 5661574, 5667386, 5669274, 5689694, 5681104,
> >>      5701730, 5706973, 5707289, 5692449, 5724435, 5730464, 5731650,
> >>      5750310, 5739110, 5745413, 5742657, 5748606, 5744911, 5767140,
> >>      5785313, 5808618, 5816135, 5806957, 5825860, 5814678, 5800046,
> >>      5822757, 5809772, 5808239, 5818814, 5833898, 5829771, 5825801,
> >>      5833676, 5847351, 5886288, 5872335, 5876134, 5878844, 5883709,
> >>      5891947, 5885232, 5889681, 5891564, 5921837, 5931270, 5952834,
> >>      5959543, 5957751, 5970395, 5962589, 5958983, 5996099, 5997162,
> >>      5997791, 6025616, 6046802, 6043966, 6072665, 6063075, 6065666,
> >>      6115610, 6091893, 6118988, 6119637, 6126261, 6136886, 6169330,
> >>      6172147, 6198848, 6202387, 6197097, 6228521, 6219420, 6240999,
> >>      6266000, 6254684, 6277414, 6289899, 6290412, 6302735, 6343442,
> >>      6341087, 6359345, 6383177, 6364995, 6373585, 6394318, 6396556,
> >>      6406482, 6430135, 6428086, 6458862, 6470913, 6480563, 6509009,
> >>      6514678, 6545545, 6547838, 6538390, 6566127, 6566755, 6578311,
> >>      6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
> >>      692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69, 699.31,
> >>      697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05, 708.58,
> >>      709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96, 716.06,
> >>      724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
> >>      736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98, 752.13,
> >>      745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22, 763.57,
> >>      770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65, 789.71,
> >>      784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76, 783.53,
> >>      781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6, 806.36,
> >>      802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27, 821.08,
> >>      823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26, 838.09,
> >>      840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65, 840.76,
> >>      843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04, 853.68,
> >>      852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13, 873.52,
> >>      875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37, 897.82,
> >>      894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08, 888.93,
> >>      901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11, 902.56,
> >>      909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03, 911.93,
> >>      913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35, 920.2,
> >>      924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
> >>      938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82, 950.06,
> >>      956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15, 966.48,
> >>      968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64, 974.42,
> >>      978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
> >>      982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24, 1002.93,
> >>      1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01, 1012.58,
> >>      1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26, 1034.06,
> >>      1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
> >>      1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
> >>      31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
> >>      31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
> >>      31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
> >>      31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
> >>      31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
> >>      31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
> >>      31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1, 30.8,
> >>      30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
> >>      30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3, 30.4,
> >>      30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
> >>      30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
> >>      30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
> >>      30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
> >>      30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
> >>      30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
> >>      30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
> >>      30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
> >>      30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
> >>      30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
> >>      30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4, 30.4,
> >>      30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
> >>      29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
> >>      22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406, 20917,
> >>      21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253, 22542,
> >>      23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269, 23088,
> >>      21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371, 23691,
> >>      25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459, 20867,
> >>      21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359, 21206,
> >>      23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132, 22893,
> >>      22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387, 25378,
> >>      24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948, 23937,
> >>      27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165, 27903,
> >>      30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645, 28820,
> >>      26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664, 29056,
> >>      28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457, 25821,
> >>      29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086, 31843,
> >>      33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727, 34795,
> >>      33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568, 36096,
> >>      35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920, 33633,
> >>      33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653, 35486,
> >>      35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129, 37903,
> >>      37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617, 38777,
> >>      38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330, 39600,
> >>      40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405, 41141,
> >>      41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908, 44375,
> >>      43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686, 45193,
> >>      44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
> >>      85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
> >>      92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
> >>      100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
> >>      96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9, 95.7,
> >>      94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
> >>      93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
> >>      88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
> >>      101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
> >>      104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
> >>      112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
> >>      115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4,
> >>      114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8,
> >>      113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2,
> >>      129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3,
> >>      121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
> >>      142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
> >>      117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
> >>      132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7,
> >>      128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
> >>      130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
> >>      131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
> >>      135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
> >>      136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
> >>      135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
> >>      100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
> >>      98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
> >>      89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
> >>      86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
> >>      96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
> >>      97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
> >>      97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
> >>      97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
> >>      102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
> >>      103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107, 107.5,
> >>      106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7, 102.7,
> >>      104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
> >>      104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
> >>      119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2, 117.2,
> >>      115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3, 117.4,
> >>      120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
> >>      123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
> >>      140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
> >>      136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7, 128.4,
> >>      130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
> >>      118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4, 132.6,
> >>      128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
> >>      120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5, 121.1,
> >>      122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837, 23571783,
> >>      24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
> >>      23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
> >>      24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
> >>      25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
> >>      25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
> >>      24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
> >>      25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
> >>      25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
> >>      24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
> >>      25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
> >>      24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
> >>      24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
> >>      25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
> >>      23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
> >>      22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
> >>      22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
> >>      17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
> >>      19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
> >>      19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
> >>      20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
> >>      20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
> >>      21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
> >>      22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
> >>      22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
> >>      22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
> >>      22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
> >>      23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
> >>      23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
> >>      23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
> >>      24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
> >>      24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
> >>      25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
> >>      25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
> >>      24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
> >>      26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
> >>      26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
> >>      26637112, 26198157, 26778716, 26846047, 26409309)), row.names =
> >> c(NA,
> >> -223L), class = c("tbl_df", "tbl", "data.frame"))
> >>
> >> dput() output for dts:
> >>
> >>
> >> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
> >>      X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 = c(NA_real_,
> >>      NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
> >>      NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
> >>      X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
> >>      120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
> >>      NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>      ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
> >>      NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>      ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 =
> >> c(NA_real_,
> >>      NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
> >>      NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>      ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 =
> >> c(NA_real_,
> >>      NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
> >>      NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>      ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 =
> >> c(NA_real_,
> >>      NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
> >>      NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>      ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 =
> >> c(NA_real_,
> >>      NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
> >>      NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
> >>      NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>      ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 = c(NA,
> >>      NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
> >>      NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L), class =
> >> "data.frame")
> >>
> >> dput() output for testcase1:
> >>
> >> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
> >> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
> >> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
> >> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
> >> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
> >> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
> >> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
> >> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6, 104.3,
> >> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
> >> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
> >> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
> >> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
> >> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
> >> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
> >> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
> >> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
> >> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
> >> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
> >> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
> >> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
> >> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
> >> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
> >> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
> >> 135.1, NA, NA)
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>
>

	[[alternative HTML version deleted]]


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Oct 30 18:31:31 2019
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 30 Oct 2019 17:31:31 +0000
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
 <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
 <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>
 <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>
Message-ID: <a8192512-4acb-1df4-d497-e664255ef211@sapo.pt>

Hello,

Another option that prevents

length(x) == 1

is to use NROW(x) instead of length(x).

Hope this helps,

Rui Barradas

?s 16:58 de 30/10/19, William Dunlap escreveu:
> Your EXTEND() function appears to expect that its 'x' argument will be a 
> numeric vector, but you pass it a one-column tibble.? Hence length(x) is 
> 1 and things go downhill from there.
> 
> I like to start such functions with a long stopifnot() statement that 
> does a quick check of inputs.? E.g.,
> 
> stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)
> 
> Use vseries1[,j,drop=TRUE] or vseries1[[j]] to extract a single column 
> from the tibble 'vseries1'.? vseries1[,1] will return a one-column tibble.
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com <http://tibco.com>
> 
> 
> On Wed, Oct 30, 2019 at 5:25 AM <phil at philipsmith.ca 
> <mailto:phil at philipsmith.ca>> wrote:
> 
>     Thanks for the suggestion Rui, but no, this will not remove the error.
>     In fact, if I drop the second term entirely as in:
> 
>     if ( (!is.na <http://is.na>(dts[1,j-1])) ) {
> 
>     then I still get the error. I have been unable to find a work-around.
> 
>     Philip
> 
> 
>     On 2019-10-30 05:17, Rui Barradas wrote:
>      > Hello,
>      >
>      > Is this as simple as
>      >
>      >
>      > if ( (!is.na <http://is.na>(dts[1,j-1])) & (!is.na
>     <http://is.na>(dts[3,j-1])) ) {
>      >
>      >
>      > (change the logical operator from '|' to '&')?
>      > The result vseries1 still has some NA's at the end of some of its
>      > series.
>      >
>      > Hope this helps,
>      >
>      > Rui Barradas
>      >
>      > ?s 02:05 de 30/10/19, phil at philipsmith.ca
>     <mailto:phil at philipsmith.ca> escreveu:
>      >> I am having a problem that generates the error message: " Error in
>      >> firstnonmiss:lastnonmiss : argument of length 0 ". There is an
>     article
>      >> on this in stackoverflow, but I have been unable to understand
>     it well
>      >> enough to solve my problem. Essentially, I have a data frame
>     with 41
>      >> indicator series and some of the series have missing values
>     (NAs) at
>      >> the beginning and/or the end. I want to fill in the missing values
>      >> using ARIMA models, via the forecast() function. It works when I
>     use
>      >> my EXTEND function on a single series, but it fails when I try
>     to loop
>      >> through all 41 series. Here is a reproducible example. Thanks
>     for any
>      >> advice.
>      >>
>      >> # Reproducible example
>      >> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
>      >> # See also stackoverflow:
>      >>
>     https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement
> 
>      >> library(forecast)
>      >> library(lubridate)
>      >> vseries <- dget("vseries.txt") # data frame containing REF_DATE
>     and 41
>      >> "indicator" vectors
>      >> dts <- dget("dts.txt") # data frame recording where NAs are in
>     vseries
>      >> - they will be replaced
>      >> testcase1 <- dget("testcase1.txt") # a vector for use in testing
>      >> # Function to fill in missing values (NAs) using ARIMA forecasts
>     and
>      >> backcasts
>      >> EXTEND <-
>     function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
>      >>? ? if (!is.na <http://is.na>(dt1)) {
>      >>? ??? bfct = dt2-dt1+1 # number of months to backcast
>      >>? ??? revx <- ts(rev(x),frequency=12)
>      >>? ??? revx <- revx[1:(length(revx)-dt2)]
>      >>? ??? fc <- forecast(auto.arima(revx),bfct)
>      >>? ??? revx1 <- c(revx,fc$mean) # extend with forecasts (in fc$mean)
>      >>? ??? m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
>      >>? ??? y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
>      >>? ??? x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
>      >>? ? }
>      >>? ? if (!is.na <http://is.na>(dt3)) {
>      >>? ??? ffct <- dt4-dt3+1 # number of months to forecast
>      >>? ??? x <- x[1:(dt3-1)]
>      >>? ??? fc <- forecast(auto.arima(x),ffct)
>      >>? ??? x <- c(x,fc$mean)
>      >>? ? }
>      >>? ? return(x)
>      >> }
>      >> # Test EXTEND function with a single vector - apparently it works
>      >> (testcase1_extended <-
>     EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
>      >> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
>      >> View(cbind(testcase1,testcase1_extended))
>      >> # Now use EXTEND to fill in the missing values in all 41
>     indicators in
>      >> vseries
>      >> # Data frame dts has NAs where no extension is required, integer
>      >> values showing where to start and
>      >> # where to end when extensions are required. Store extended
>     series in
>      >> vseries1.
>      >> vseries1 <- vseries
>      >> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1 in
>      >> vseries is REF_DATE
>      >>? ? if ( (!is.na <http://is.na>(dts[1,j-1])) | (!is.na
>     <http://is.na>(dts[3,j-1])) ) {
>      >>? ??? vseries1[,j] <-
>      >>
>     EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1],
> 
>      >> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
>      >>? ? }
>      >> }
>      >> View(vseries)
>      >> View(vseries1)
>      >>
>      >> dput() output for vseries:
>      >>
>      >> structure(list(REF_DATE = c("2001-01-01", "2001-02-01",
>     "2001-03-01",
>      >> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01",
>     "2001-08-01",
>      >> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01",
>     "2002-01-01",
>      >> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01",
>     "2002-06-01",
>      >> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01",
>     "2002-11-01",
>      >> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01",
>     "2003-04-01",
>      >> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01",
>     "2003-09-01",
>      >> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01",
>     "2004-02-01",
>      >> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01",
>     "2004-07-01",
>      >> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01",
>     "2004-12-01",
>      >> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01",
>     "2005-05-01",
>      >> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01",
>     "2005-10-01",
>      >> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01",
>     "2006-03-01",
>      >> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01",
>     "2006-08-01",
>      >> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01",
>     "2007-01-01",
>      >> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01",
>     "2007-06-01",
>      >> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01",
>     "2007-11-01",
>      >> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01",
>     "2008-04-01",
>      >> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01",
>     "2008-09-01",
>      >> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01",
>     "2009-02-01",
>      >> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01",
>     "2009-07-01",
>      >> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01",
>     "2009-12-01",
>      >> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01",
>     "2010-05-01",
>      >> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01",
>     "2010-10-01",
>      >> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01",
>     "2011-03-01",
>      >> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01",
>     "2011-08-01",
>      >> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01",
>     "2012-01-01",
>      >> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01",
>     "2012-06-01",
>      >> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01",
>     "2012-11-01",
>      >> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01",
>     "2013-04-01",
>      >> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01",
>     "2013-09-01",
>      >> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01",
>     "2014-02-01",
>      >> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01",
>     "2014-07-01",
>      >> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01",
>     "2014-12-01",
>      >> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01",
>     "2015-05-01",
>      >> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01",
>     "2015-10-01",
>      >> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01",
>     "2016-03-01",
>      >> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01",
>     "2016-08-01",
>      >> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01",
>     "2017-01-01",
>      >> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01",
>     "2017-06-01",
>      >> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01",
>     "2017-11-01",
>      >> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01",
>     "2018-04-01",
>      >> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01",
>     "2018-09-01",
>      >> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01",
>     "2019-02-01",
>      >> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01", "2019-07-01"
>      >> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987, 19671015,
>      >> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227,
>     15362864,
>      >> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846,
>     16124593,
>      >> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326,
>     17559123,
>      >> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801,
>     17557392,
>      >> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657,
>     19027956,
>      >> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111,
>     18665646,
>      >> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368,
>     20466651,
>      >> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403,
>     17890774,
>      >> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141,
>     20060353,
>      >> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846,
>     23024759,
>      >> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713,
>     21213020,
>      >> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572,
>     20881111,
>      >> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926,
>     18556973,
>      >> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295,
>     16443231,
>      >> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108,
>     17853071,
>      >> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783,
>     21107272,
>      >> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654,
>     20878866,
>      >> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337,
>     22337136,
>      >> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288,
>     23252411,
>      >> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385,
>     20109262,
>      >> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128,
>     23130117,
>      >> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882,
>     25197042,
>      >> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289,
>     27899355,
>      >> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182,
>     27040475,
>      >> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129,
>     27108195,
>      >> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186,
>     25857724,
>      >> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772,
>     26468833,
>      >> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265,
>     28179157,
>      >> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939,
>     29778379,
>      >> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824,
>     29820781,
>      >> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423,
>     30947662,
>      >> 29590180), v1001816392 = c(14810380, 14200859, 16756119, 15217622,
>      >> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643,
>     15666826,
>      >> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785,
>     15250640,
>      >> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416,
>     13984446,
>      >> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684,
>     12738958,
>      >> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311,
>     16669218,
>      >> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684,
>     15377076,
>      >> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530,
>     15633935,
>      >> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696,
>     14282888,
>      >> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547,
>     11808763,
>      >> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585,
>     14739285,
>      >> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113,
>     13908728,
>      >> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120,
>     14157825,
>      >> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313,
>     13084751,
>      >> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990, 9888218,
>      >> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361, 10292744,
>      >> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995,
>     12464327,
>      >> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365,
>     14066907,
>      >> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540,
>     13928150,
>      >> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174,
>     14259088,
>      >> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428,
>     12348507,
>      >> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402,
>     12114754,
>      >> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810,
>     13122736,
>      >> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121,
>     16407589,
>      >> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925,
>     15389386,
>      >> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529,
>     17312508,
>      >> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636,
>     17043771,
>      >> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251,
>     16292556,
>      >> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082,
>     16254963,
>      >> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366,
>     17819011,
>      >> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853,
>     18388536,
>      >> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596,
>     19056997,
>      >> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
>      >> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
>      >> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
>      >> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
>      >> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
>      >> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
>      >> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
>      >> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
>      >> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
>      >> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
>      >> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
>      >> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
>      >> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
>      >> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
>      >> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
>      >> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
>      >> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
>      >> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
>      >> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
>      >> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
>      >> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
>      >> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
>      >> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
>      >> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
>      >> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
>      >> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
>      >> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
>      >> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
>      >> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
>      >> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
>      >> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
>      >> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
>      >> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
>      >> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
>      >> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
>      >> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
>      >> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
>      >> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
>      >> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
>      >> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
>      >> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
>      >> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
>      >> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
>      >> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
>      >> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
>      >> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
>      >> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
>      >> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
>      >> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
>      >> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
>      >> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
>      >> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
>      >> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
>      >> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
>      >> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
>      >> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
>      >> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
>      >> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
>      >> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
>      >> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
>      >> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
>      >> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
>      >> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
>      >> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
>      >> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
>      >> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077, 15407812,
>      >> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658,
>     14415174,
>      >> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080,
>     15044874,
>      >> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316,
>     11919494,
>      >> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326,
>     10377252,
>      >> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102,
>     12992845,
>      >> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588,
>     13924365,
>      >> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754,
>     13550102,
>      >> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153,
>     14102556,
>      >> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033,
>     13670648,
>      >> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714,
>     12847367,
>      >> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377,
>     12244381,
>      >> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046, 11770050,
>      >> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217,
>     12097708,
>      >> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
>      >> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
>      >> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
>      >> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
>      >> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267, 10621244,
>      >> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394,
>     10523656,
>      >> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800, 11353041,
>      >> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210, 11132326,
>      >> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218, 10184002,
>      >> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262,
>     11590206,
>      >> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487,
>     13436617,
>      >> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727,
>     14243928,
>      >> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307,
>     13826213,
>      >> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693,
>     12754175,
>      >> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383,
>     10931400,
>      >> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609,
>     12366614,
>      >> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534,
>     12786433,
>      >> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828,
>     13274018,
>      >> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
>      >> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103,
>     12173082,
>      >> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495,
>     14636326,
>      >> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966,
>     13877119,
>      >> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189,
>     13126548,
>      >> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027, 10695234,
>      >> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447,
>     12927490,
>      >> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608,
>     13925071,
>      >> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771, 13135370,
>      >> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856,
>     13492799,
>      >> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430,
>     12127888,
>      >> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185,
>     10548301,
>      >> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227,
>     11593154,
>      >> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363,
>     12622830,
>      >> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198, 10608854,
>      >> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384, 10612403,
>      >> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765, 12335679,
>      >> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867,
>     10507066,
>      >> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839,
>     12542127,
>      >> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179,
>     13279826,
>      >> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238,
>     12657427,
>      >> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612,
>     13452761,
>      >> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655,
>     11701079,
>      >> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363,
>     13341724,
>      >> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368,
>     13650455,
>      >> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891,
>     15646361,
>      >> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288,
>     16527074,
>      >> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797,
>     15281552,
>      >> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339,
>     18182041,
>      >> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023,
>     14000735,
>      >> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995,
>     16636582,
>      >> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203,
>     17997663,
>      >> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780, 1264742,
>      >> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
>      >> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
>      >> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
>      >> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
>      >> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
>      >> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
>      >> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
>      >> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
>      >> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
>      >> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
>      >> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
>      >> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
>      >> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
>      >> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
>      >> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232, 1380845,
>      >> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556, 1053348,
>      >> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576, 1029796,
>      >> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473, 836908,
>      >> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875, 1055059,
>      >> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037, 934344,
>      >> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
>      >> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030, 959260,
>      >> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558, 760214,
>      >> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984, 942851,
>      >> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
>      >> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
>      >> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
>      >> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
>      >> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
>      >> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089, 828632,
>      >> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486, 1096690,
>      >> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
>      >> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748, 665961,
>      >> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797, 960006,
>      >> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
>      >> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
>      >> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
>      >> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
>      >> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
>      >> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
>      >> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
>      >> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
>      >> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
>      >> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
>      >> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
>      >> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
>      >> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
>      >> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
>      >> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
>      >> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
>      >> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
>      >> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
>      >> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
>      >> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
>      >> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
>      >> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
>      >> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
>      >> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812, 796604,
>      >> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
>      >> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
>      >> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
>      >> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
>      >> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
>      >> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
>      >> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128, 1084626,
>      >> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
>      >> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
>      >> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913, 1058493,
>      >> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
>      >> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
>      >> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958, 1091468,
>      >> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
>      >> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
>      >> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
>      >> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
>      >> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
>      >> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
>      >> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
>      >> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093, 971856,
>      >> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120, 845165,
>      >> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
>      >> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
>      >> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042, 892834,
>      >> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867, 1094743,
>      >> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
>      >> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970, 72620,
>      >> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
>      >> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
>      >> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
>      >> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
>      >> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
>      >> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
>      >> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
>      >> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
>      >> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
>      >> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
>      >> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
>      >> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
>      >> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
>      >> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
>      >> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
>      >> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
>      >> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
>      >> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
>      >> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
>      >> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
>      >> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
>      >> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
>      >> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
>      >> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
>      >> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
>      >> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899,
>     20426712,
>      >> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355,
>     20768807,
>      >> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726,
>     21596243,
>      >> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072,
>     21846894,
>      >> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231,
>     22554639,
>      >> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451,
>     23206767,
>      >> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818,
>     23784278,
>      >> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768,
>     24503153,
>      >> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920,
>     25035239,
>      >> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231,
>     25918644,
>      >> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543,
>     26691191,
>      >> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037,
>     27180711,
>      >> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474,
>     27386049,
>      >> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040,
>     26877705,
>      >> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460,
>     27155400,
>      >> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341,
>     27686074,
>      >> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974,
>     28716843,
>      >> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032,
>     29165480,
>      >> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041,
>     29795842,
>      >> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304,
>     30287625,
>      >> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619,
>     30970797,
>      >> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046,
>     31382224,
>      >> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255,
>     32294373,
>      >> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158,
>     33033517,
>      >> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255,
>     33687475,
>      >> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093,
>     33938988,
>      >> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494,
>     34350509,
>      >> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315,
>     35518127,
>      >> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171,
>     36971724,
>      >> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633,
>     37827498,
>      >> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308,
>     38560349,
>      >> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
>      >> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926, 5937.3,
>      >> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6, 6075.3,
>      >> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
>      >> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
>      >> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
>      >> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3, 6379.3,
>      >> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
>      >> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
>      >> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
>      >> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623, 6638.2,
>      >> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5, 6461.2,
>      >> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
>      >> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
>      >> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
>      >> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
>      >> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
>      >> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
>      >> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
>      >> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
>      >> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
>      >> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935, 6930.3,
>      >> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
>      >> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
>      >> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
>      >> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
>      >> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
>      >> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
>      >> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
>      >> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
>      >> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
>      >> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
>      >> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
>      >> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
>      >> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
>      >> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
>      >> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
>      >> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
>      >> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
>      >> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
>      >> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
>      >> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
>      >> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
>      >> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
>      >> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
>      >> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
>      >> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
>      >> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
>      >> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
>      >> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
>      >> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
>      >> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
>      >> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
>      >> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
>      >> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
>      >> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
>      >> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
>      >> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
>      >> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
>      >> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
>      >> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
>      >> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
>      >> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
>      >> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
>      >> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
>      >> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
>      >> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
>      >> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
>      >> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
>      >> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
>      >> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
>      >> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
>      >> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
>      >> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
>      >> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
>      >> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
>      >> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
>      >> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
>      >> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
>      >> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
>      >> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
>      >> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
>      >> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
>      >> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
>      >> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
>      >> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
>      >> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
>      >> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
>      >> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
>      >>? ??? v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
>      >>? ??? 62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
>      >>? ??? 62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
>      >>? ??? 63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1, 63.8,
>      >>? ??? 63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
>      >>? ??? 63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
>      >>? ??? 63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
>      >>? ??? 62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
>      >>? ??? 63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
>      >>? ??? 63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
>      >>? ??? 60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
>      >>? ??? 60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
>      >>? ??? 61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
>      >>? ??? 61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
>      >>? ??? 60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
>      >>? ??? 61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
>      >>? ??? 61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8, 60.7,
>      >>? ??? 60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8, 60.9,
>      >>? ??? 60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
>      >>? ??? 60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
>      >>? ??? 61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
>      >>? ??? 60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
>      >>? ??? ), v382201 = c(212164, 193583, 215866, 211263, 222871, 215519,
>      >>? ??? 219942, 216251, 207703, 212013, 207781, 219596, 222977, 202836,
>      >>? ??? 225014, 217040, 223269, 212081, 211644, 208999, 200885, 207899,
>      >>? ??? 204091, 216573, 218997, 195583, 215113, 206360, 214884, 208636,
>      >>? ??? 214072, 211055, 206974, 211607, 205837, 215020, 216294, 201218,
>      >>? ??? 216097, 209029, 216690, 207829, 211911, 212123, 205356, 211083,
>      >>? ??? 205076, 212205, 212779, 191520, 213090, 209484, 215975, 205127,
>      >>? ??? 207085, 209844, 201884, 206749, 200246, 208719, 211380, 190749,
>      >>? ??? 209346, 200994, 207431, 198322, 201983, 200869, 196045, 199493,
>      >>? ??? 195149, 205332, 207126, 185698, 207850, 205701, 216965, 209296,
>      >>? ??? 215644, 214061, 205121, 209924, 204004, 213241, 217848, 203144,
>      >>? ??? 213848, 206368, 212813, 200362, 202502, 202339, 195491, 201314,
>      >>? ??? 196093, 206104, 208701, 190879, 213025, 208090, 217292, 210890,
>      >>? ??? 216526, 213092, 206553, 209884, 204042, 211314, 212389, 192037,
>      >>? ??? 213815, 208826, 216756, 207533, 210091, 212435, 204595, 209379,
>      >>? ??? 203827, 210218, 212451, 192470, 214095, 208717, 217913, 212215,
>      >>? ??? 217087, 218783, 209940, 214059, 208998, 220829, 223171, 208246,
>      >>? ??? 222458, 215499, 221694, 213553, 219458, 221757, 214203, 221003,
>      >>? ??? 214380, 221215, 220019, 197689, 218045, 210866, 218954, 209825,
>      >>? ??? 212145, 218399, 210138, 215187, 206605, 211504, 212024, 192311,
>      >>? ??? 212260, 207136, 215097, 210584, 218528, 220739, 214149, 218748,
>      >>? ??? 208968, 216712, 218399, 197318, 223819, 221927, 234903, 228622,
>      >>? ??? 233660, 231277, 221779, 227918, 220888, 231634, 235272, 220580,
>      >>? ??? 233970, 226381, 235613, 227998, 234353, 235796, 230542, 239605,
>      >>? ??? 233645, 245124, 248935, 226969, 252118, 245888, 253940, 242869,
>      >>? ??? 249518, 250305, 242427, 251666, 242906, 253645, 257586, 236425,
>      >>? ??? 262768, 252595, 262910, 254396, 254417, 252449, 241404, 246729,
>      >>? ??? 237361, 248692, 251752, 228933, 256286, 249336, 255692, 247109,
>      >>? ??? 251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
>      >>? ??? 97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
>      >>? ??? 99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
>      >>? ??? 104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7, 103.8,
>      >>? ??? 104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
>      >>? ??? 108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
>      >>? ??? 110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
>      >>? ??? 111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1, 112.6,
>      >>? ??? 112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
>      >>? ??? 113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
>      >>? ??? 125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
>      >>? ??? 130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7, 134.3,
>      >>? ??? 134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
>      >>? ??? 135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
>      >>? ??? 139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
>      >>? ??? 141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
>      >>? ??? 143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
>      >>? ??? 144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
>      >>? ??? 145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8, 141.5,
>      >>? ??? 147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
>      >>? ??? 141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
>      >>? ??? 145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
>      >>? ??? 147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
>      >>? ??? 149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
>      >>? ??? 152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
>      >>? ??? ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
>      >>? ??? 108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
>      >>? ??? 101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
>      >>? ??? 100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8, 98.1,
>      >>? ??? 98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
>      >>? ??? 98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6, 97.5,
>      >>? ??? 101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
>      >>? ??? 103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
>      >>? ??? 101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5, 105.4,
>      >>? ??? 98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
>      >>? ??? 120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2, 137.7,
>      >>? ??? 140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
>      >>? ??? 138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
>      >>? ??? 130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
>      >>? ??? 143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4, 143.5,
>      >>? ??? 143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
>      >>? ??? 142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
>      >>? ??? 132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
>      >>? ??? 139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
>      >>? ??? 144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6, 141.5,
>      >>? ??? 141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7, 137.1,
>      >>? ??? 134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
>      >>? ??? 133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
>      >>? ??? 134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
>      >>? ??? 130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130),
>     v41691919
>      >> = c(96.5,
>      >>? ??? 97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
>      >>? ??? 97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3, 100.9,
>      >>? ??? 101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2, 102.3,
>      >>? ??? 102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
>      >>? ??? 104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
>      >>? ??? 105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5, 108.2,
>      >>? ??? 107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5, 109.3,
>      >>? ??? 109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
>      >>? ??? 111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
>      >>? ??? 110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8, 115.1,
>      >>? ??? 113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
>      >>? ??? 113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1, 115.3,
>      >>? ??? 115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9, 117.8,
>      >>? ??? 118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
>      >>? ??? 121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
>      >>? ??? 121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
>      >>? ??? 123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
>      >>? ??? 124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7, 126.8,
>      >>? ??? 126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2, 128.4,
>      >>? ??? 128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
>      >>? ??? 130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
>      >>? ??? 131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
>      >>? ??? 132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
>      >>? ??? 135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
>      >>? ??? 138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8, 97.7,
>      >>? ??? 98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3, 100.2,
>      >>? ??? 100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
>      >>? ??? 102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
>      >>? ??? 100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8, 104.3,
>      >>? ??? 104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
>      >>? ??? 107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
>      >>? ??? 108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
>      >>? ??? 109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
>      >>? ??? 111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
>      >>? ??? 115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
>      >>? ??? 121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
>      >>? ??? 121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
>      >>? ??? 123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4, 127.1,
>      >>? ??? 128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4, 130.6,
>      >>? ??? 131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
>      >>? ??? 131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6, 133.5,
>      >>? ??? 133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
>      >>? ??? 136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
>      >>? ??? 140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
>      >>? ??? 142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
>      >>? ??? 142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
>      >>? ??? 143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
>      >>? ??? 146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
>      >>? ??? 148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
>      >>? ??? ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
>      >>? ??? 99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
>      >>? ??? 99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
>      >>? ??? 102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
>      >>? ??? 104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
>      >>? ??? 106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
>      >>? ??? 108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
>      >>? ??? 112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
>      >>? ??? 112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4, 114.7,
>      >>? ??? 115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
>      >>? ??? 117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
>      >>? ??? 120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
>      >>? ??? 118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
>      >>? ??? 122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
>      >>? ??? 123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3, 124.3,
>      >>? ??? 124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5, 125.4,
>      >>? ??? 125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1, 127.2,
>      >>? ??? 127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9, 132.4,
>      >>? ??? 132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4, 133.5,
>      >>? ??? 133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
>      >>? ??? 135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
>      >>? ??? 138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7, 140.3,
>      >>? ??? 140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
>      >>? ??? 141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7, 143.9,
>      >>? ??? 144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3),
>     v41691965
>      >> = c(96.9,
>      >>? ??? 97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
>      >>? ??? 98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
>      >>? ??? 100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
>      >>? ??? 101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5, 101.7,
>      >>? ??? 102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2, 101.2,
>      >>? ??? 101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5, 102.2,
>      >>? ??? 101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6, 101.7,
>      >>? ??? 100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
>      >>? ??? 103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4, 103.2,
>      >>? ??? 103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6, 106.1,
>      >>? ??? 105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
>      >>? ??? 106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3, 109.2,
>      >>? ??? 109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
>      >>? ??? 110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
>      >>? ??? 113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
>      >>? ??? 113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
>      >>? ??? 115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6, 115.6,
>      >>? ??? 115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
>      >>? ??? 119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
>      >>? ??? 121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3, 122.6,
>      >>? ??? 123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7, 123.5,
>      >>? ??? 123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5, 123.2,
>      >>? ??? 124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2, 125.2,
>      >>? ??? 125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3, 124.9,
>      >>? ??? 125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
>      >>? ??? 105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
>      >>? ??? 99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
>      >>? ??? 101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9, 95.6,
>      >>? ??? 96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
>      >>? ??? 96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
>      >>? ??? 97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
>      >>? ??? 92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
>      >>? ??? 90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
>      >>? ??? 95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
>      >>? ??? 93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
>      >>? ??? 89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
>      >>? ??? 92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
>      >>? ??? 93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6, 88.3,
>      >>? ??? 92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
>      >>? ??? 85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
>      >>? ??? 90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
>      >>? ??? 91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3, 91.5,
>      >>? ??? 91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
>      >>? ??? 93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
>      >>? ??? 91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
>      >>? ??? 87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
>      >>? ??? 92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988 =
>      >> c(98.2,
>      >>? ??? 98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
>      >>? ??? 94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3, 101.2,
>      >>? ??? 101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2, 103.9,
>      >>? ??? 104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6, 106.8,
>      >>? ??? 107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
>      >>? ??? 109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
>      >>? ??? 113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8, 116.9,
>      >>? ??? 117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
>      >>? ??? 118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
>      >>? ??? 118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
>      >>? ??? 116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5, 116.7,
>      >>? ??? 114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119, 119.1,
>      >>? ??? 119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
>      >>? ??? 125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5, 129.5,
>      >>? ??? 130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
>      >>? ??? 130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3, 131.3,
>      >>? ??? 131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7, 132.3,
>      >>? ??? 133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8, 131.4,
>      >>? ??? 129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4, 130.6,
>      >>? ??? 128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6, 128.6,
>      >>? ??? 130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
>      >>? ??? 133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
>      >>? ??? 136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
>      >>? ??? 142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
>      >>? ??? 143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
>      >>? ??? 110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
>      >>? ??? 88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
>      >>? ??? 104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
>      >>? ??? 111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
>      >>? ??? 127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1, 114.8,
>      >>? ??? 117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
>      >>? ??? 127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9, 154.3,
>      >>? ??? 152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
>      >>? ??? 155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
>      >>? ??? 152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
>      >>? ??? 122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
>      >>? ??? 143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
>      >>? ??? 144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
>      >>? ??? 168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
>      >>? ??? 177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8, 182.4,
>      >>? ??? 187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6, 183.7,
>      >>? ??? 182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
>      >>? ??? 189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9, 181.1,
>      >>? ??? 167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
>      >>? ??? 163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2, 146.8,
>      >>? ??? 152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1, 163.9,
>      >>? ??? 156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8, 167.2,
>      >>? ??? 177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7, 194.8,
>      >>? ??? 192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
>      >>? ??? 186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260, 1172192,
>      >>? ??? 1173559, 1173865, 1163159, 1173230, 1168291, 1148136, 1135730,
>      >>? ??? 1176671, 1184706, 1186957, 1177962, 1194820, 1192486, 1204268,
>      >>? ??? 1196677, 1198166, 1192339, 1188059, 1189860, 1195524, 1179193,
>      >>? ??? 1160881, 1156255, 1154137, 1151079, 1223651, 1193786, 1187791,
>      >>? ??? 1185070, 1222101, 1233158, 1222271, 1205916, 1211049, 1237429,
>      >>? ??? 1221806, 1288146, 1268949, 1239192, 1259979, 1259944, 1257909,
>      >>? ??? 1229472, 1206627, 1245003, 1262388, 1269395, 1276432, 1277248,
>      >>? ??? 1261277, 1291593, 1298114, 1305550, 1267413, 1294688, 1295694,
>      >>? ??? 1317484, 1333362, 1330478, 1362024, 1326774, 1319396, 1318673,
>      >>? ??? 1334044, 1346594, 1339499, 1363158, 1404445, 1434255, 1396545,
>      >>? ??? 1355204, 1367796, 1352577, 1349119, 1374720, 1398253, 1369215,
>      >>? ??? 1413653, 1431392, 1421479, 1419408, 1487702, 1434740, 1434398,
>      >>? ??? 1472990, 1471028, 1460549, 1461166, 1482247, 1490620, 1486005,
>      >>? ??? 1467463, 1444413, 1469876, 1477567, 1460040, 1446679, 1452324,
>      >>? ??? 1456279, 1455826, 1472154, 1485169, 1464240, 1487456, 1518692,
>      >>? ??? 1516207, 1512158, 1535860, 1535652, 1538473, 1549310, 1517172,
>      >>? ??? 1511436, 1531246, 1558108, 1555668, 1566767, 1566882, 1580492,
>      >>? ??? 1566209, 1594096, 1600677, 1613907, 1619388, 1607791, 1602639,
>      >>? ??? 1612385, 1631814, 1643924, 1650496, 1659254, 1679545, 1674956,
>      >>? ??? 1675779, 1676020, 1676843, 1679625, 1694232, 1695255, 1720478,
>      >>? ??? 1741576, 1736856, 1722187, 1750359, 1728204, 1736587, 1752139,
>      >>? ??? 1752173, 1770304, 1762990, 1777806, 1787814, 1766222, 1771789,
>      >>? ??? 1806919, 1817679, 1826720, 1854228, 1850492, 1857490, 1892994,
>      >>? ??? 1890432, 1892879, 1890258, 1911380, 1915088, 1891501, 1922679,
>      >>? ??? 1947153, 1994578, 1970953, 1983867, 2014740, 2008756, 2030234,
>      >>? ??? 2032886, 2059674, 2068652, 2073047, 2083031, 2136894, 2115520,
>      >>? ??? 2130280, 2158663, 2134182, 2172927, 2173367, 2173553, 2156196,
>      >>? ??? 2218283, 2237749, 2206090, 2227664, 2221296, 2238127, 2265268,
>      >>? ??? 2262536, 2284770, 2309970, 2310161, 2307041, 2331779, 2369833,
>      >>? ??? 2388535, 2335561, 2373858, 2397911, 2392511, 2405673, 2410779,
>      >>? ??? 2411443, 2438862, 2483861, 2444050, 2429816, 2451814, 2464695,
>      >>? ??? 2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
>      >>? ??? 12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
>      >>? ??? 12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
>      >>? ??? 10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
>      >>? ??? 11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
>      >>? ??? 10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
>      >>? ??? 11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
>      >>? ??? 11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
>      >>? ??? 10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
>      >>? ??? 11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
>      >>? ??? 12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
>      >>? ??? 12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
>      >>? ??? 12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
>      >>? ??? 12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
>      >>? ??? 12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
>      >>? ??? 11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
>      >>? ??? 11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
>      >>? ??? 11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
>      >>? ??? 12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
>      >>? ??? 12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
>      >>? ??? 12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
>      >>? ??? 12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
>      >>? ??? 12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
>      >>? ??? 12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
>      >>? ??? 2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
>      >>? ??? 778862, 1138557, 1636203, 2233518, 2114752, 1974646, 1534387,
>      >>? ??? 998860, 559524, 447850, 393285, 402189, 651017, 1523288,
>      >>? ??? 2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
>      >>? ??? 452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
>      >>? ??? 2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
>      >>? ??? 425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
>      >>? ??? 1411442, 900073, 491461, 413880, 390364, 393934, 586734,
>      >>? ??? 1266299, 2202400, 2309033, 2164470, 2145389, 1328220, 736964,
>      >>? ??? 480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
>      >>? ??? 3283157, 3804876, 3244792, 2477267, 1569953, 1169971, 1121247,
>      >>? ??? 1218442, 1182862, 1409876, 2241749, 3274756, 3494706, 3615470,
>      >>? ??? 3455902, 2199773, 1647961, 1230718, 1125165, 1078839, 1099809,
>      >>? ??? 1539702, 2190793, 3126922, 3886115, 3290320, 2942615, 2110948,
>      >>? ??? 1405583, 1308947, 1014607, 1148503, 1066941, 1596998, 2039112,
>      >>? ??? 2798847, 3446040, 3255602, 2815621, 1839592, 1426302, 1177683,
>      >>? ??? 1090902, 1145557, 1140902, 1524916, 2145484, 3256107, 3775523,
>      >>? ??? 3559115, 3289994, 2219521, 1774688, 1291471, 1191457, 1170953,
>      >>? ??? 1159087, 1543907, 2159364, 2786142, 3447635, 3179625, 2751435,
>      >>? ??? 2152765, 1596927, 1290466, 1278246, 1247608, 1253886, 1622877,
>      >>? ??? 2433993, 2831938, 3565488, 3636268, 3253630, 2559152, 1626984,
>      >>? ??? 1251460, 1163841, 1130486, 1190063, 1491645, 2345181, 3346689,
>      >>? ??? 4165953, 3842336, 3682352, 2580288, 1731497, 1199181, 1098817,
>      >>? ??? 1113400, 1079822, 1464918, 2344949, 3006111, 3847035, 4007847,
>      >>? ??? 3550039, 2397284, 1457876, 1155121, 1115934, 1113953, 1185585,
>      >>? ??? 1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>      >>? ??? NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
>      >>? ??? 76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387, 77.807,
>      >>? ??? 74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
>      >>? ??? 87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041, 114.235,
>      >>? ??? 82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032, 108.011,
>      >>? ??? 79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
>      >>? ??? 83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143, 57.357,
>      >>? ??? 71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519, 70.549,
>      >>? ??? 64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906, 74.252,
>      >>? ??? 84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522, 74.888,
>      >>? ??? 52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3, 82.511,
>      >>? ??? 71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79, 72.919,
>      >>? ??? 92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501, 43.62,
>      >>? ??? 37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622, 57.833,
>      >>? ??? 72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712, 69.299,
>      >>? ??? 56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477, 50.752,
>      >>? ??? 66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846, 66.99,
>      >>? ??? 75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376, 76.071,
>      >>? ??? 70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346, 47.764,
>      >>? ??? 68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928, 60.752,
>      >>? ??? 71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44, 65.443,
>      >>? ??? 55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084, 61.375,
>      >>? ??? 41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148, 90.318,
>      >>? ??? 75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21, 72.047,
>      >>? ??? 88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135, 100.138,
>      >>? ??? 84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755, 77.894,
>      >>? ??? 59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223, 54.825,
>      >>? ??? 104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
>      >>? ??? 73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
>      >>? ??? v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
>      >>? ??? 9584905, 9382415, 9482770, 9307864, 9492970, 9715825, 9940764,
>      >>? ??? 10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
>      >>? ??? 10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
>      >>? ??? 10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
>      >>? ??? 10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
>      >>? ??? 10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
>      >>? ??? 10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
>      >>? ??? 11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
>      >>? ??? 11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
>      >>? ??? 11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
>      >>? ??? 11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
>      >>? ??? 11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
>      >>? ??? 12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
>      >>? ??? 12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
>      >>? ??? 12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
>      >>? ??? 11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
>      >>? ??? 12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
>      >>? ??? 12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
>      >>? ??? 12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
>      >>? ??? 13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
>      >>? ??? 13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
>      >>? ??? 13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
>      >>? ??? 13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
>      >>? ??? 13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
>      >>? ??? 14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
>      >>? ??? 14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
>      >>? ??? 15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
>      >>? ??? 14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
>      >>? ??? 15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
>      >>? ??? 16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
>      >>? ??? 16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
>      >>? ??? 17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
>      >>? ??? 18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
>      >>? ??? 18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
>      >>? ??? 19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
>      >>? ??? 18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
>      >>? ??? 19635452), v52368043 = c(17055707, 16701281, 16786260,
>     16756166,
>      >>? ??? 16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
>      >>? ??? 16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
>      >>? ??? 18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
>      >>? ??? 19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
>      >>? ??? 18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
>      >>? ??? 19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
>      >>? ??? 19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
>      >>? ??? 19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
>      >>? ??? 20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
>      >>? ??? 20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
>      >>? ??? 21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
>      >>? ??? 20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
>      >>? ??? 22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
>      >>? ??? 22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
>      >>? ??? 22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
>      >>? ??? 21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
>      >>? ??? 20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
>      >>? ??? 22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
>      >>? ??? 22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
>      >>? ??? 22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
>      >>? ??? 23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
>      >>? ??? 23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
>      >>? ??? 23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
>      >>? ??? 24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
>      >>? ??? 23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
>      >>? ??? 24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
>      >>? ??? 25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
>      >>? ??? 25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
>      >>? ??? 27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
>      >>? ??? 28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
>      >>? ??? 28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
>      >>? ??? 29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
>      >>? ??? 31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
>      >>? ??? 32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
>      >>? ??? 31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
>      >>? ??? 32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
>      >>? ??? 32796030, 32840886, 33870331), v54027371 = c(5006719, 5067172,
>      >>? ??? 5060865, 5062576, 5083254, 5072377, 5031234, 5052979, 5027204,
>      >>? ??? 5043632, 5035454, 5044842, 5063238, 5093024, 5091640, 5102054,
>      >>? ??? 5133352, 5142226, 5165655, 5203037, 5186307, 5174704, 5194163,
>      >>? ??? 5190310, 5232432, 5210572, 5234726, 5235080, 5254050, 5245134,
>      >>? ??? 5245175, 5249094, 5235952, 5262268, 5263595, 5253813, 5274263,
>      >>? ??? 5265423, 5299891, 5327379, 5316191, 5331555, 5346574, 5307140,
>      >>? ??? 5337742, 5347287, 5348381, 5377210, 5374212, 5383470, 5366697,
>      >>? ??? 5392882, 5388985, 5416367, 5417477, 5433010, 5448853, 5441429,
>      >>? ??? 5458425, 5471520, 5489243, 5495727, 5511121, 5512216, 5526438,
>      >>? ??? 5537303, 5522426, 5518461, 5536277, 5501749, 5564018, 5570599,
>      >>? ??? 5584461, 5593844, 5590604, 5602700, 5608632, 5616521, 5608951,
>      >>? ??? 5623657, 5616005, 5645595, 5647305, 5647451, 5693895, 5691488,
>      >>? ??? 5700220, 5707445, 5725799, 5728509, 5717031, 5723853, 5711995,
>      >>? ??? 5719339, 5681740, 5663311, 5643435, 5611268, 5590716, 5570704,
>      >>? ??? 5557739, 5536962, 5560436, 5529977, 5551949, 5574728, 5563493,
>      >>? ??? 5575590, 5577965, 5587020, 5596086, 5612563, 5609016, 5626466,
>      >>? ??? 5654424, 5633372, 5661574, 5667386, 5669274, 5689694, 5681104,
>      >>? ??? 5701730, 5706973, 5707289, 5692449, 5724435, 5730464, 5731650,
>      >>? ??? 5750310, 5739110, 5745413, 5742657, 5748606, 5744911, 5767140,
>      >>? ??? 5785313, 5808618, 5816135, 5806957, 5825860, 5814678, 5800046,
>      >>? ??? 5822757, 5809772, 5808239, 5818814, 5833898, 5829771, 5825801,
>      >>? ??? 5833676, 5847351, 5886288, 5872335, 5876134, 5878844, 5883709,
>      >>? ??? 5891947, 5885232, 5889681, 5891564, 5921837, 5931270, 5952834,
>      >>? ??? 5959543, 5957751, 5970395, 5962589, 5958983, 5996099, 5997162,
>      >>? ??? 5997791, 6025616, 6046802, 6043966, 6072665, 6063075, 6065666,
>      >>? ??? 6115610, 6091893, 6118988, 6119637, 6126261, 6136886, 6169330,
>      >>? ??? 6172147, 6198848, 6202387, 6197097, 6228521, 6219420, 6240999,
>      >>? ??? 6266000, 6254684, 6277414, 6289899, 6290412, 6302735, 6343442,
>      >>? ??? 6341087, 6359345, 6383177, 6364995, 6373585, 6394318, 6396556,
>      >>? ??? 6406482, 6430135, 6428086, 6458862, 6470913, 6480563, 6509009,
>      >>? ??? 6514678, 6545545, 6547838, 6538390, 6566127, 6566755, 6578311,
>      >>? ??? 6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
>      >>? ??? 692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69, 699.31,
>      >>? ??? 697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05, 708.58,
>      >>? ??? 709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96, 716.06,
>      >>? ??? 724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
>      >>? ??? 736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98, 752.13,
>      >>? ??? 745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22, 763.57,
>      >>? ??? 770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65, 789.71,
>      >>? ??? 784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76, 783.53,
>      >>? ??? 781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6, 806.36,
>      >>? ??? 802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27, 821.08,
>      >>? ??? 823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26, 838.09,
>      >>? ??? 840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65, 840.76,
>      >>? ??? 843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04, 853.68,
>      >>? ??? 852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13, 873.52,
>      >>? ??? 875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37, 897.82,
>      >>? ??? 894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08, 888.93,
>      >>? ??? 901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11, 902.56,
>      >>? ??? 909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03, 911.93,
>      >>? ??? 913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35, 920.2,
>      >>? ??? 924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
>      >>? ??? 938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82, 950.06,
>      >>? ??? 956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15, 966.48,
>      >>? ??? 968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64, 974.42,
>      >>? ??? 978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
>      >>? ??? 982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24, 1002.93,
>      >>? ??? 1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01, 1012.58,
>      >>? ??? 1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26, 1034.06,
>      >>? ??? 1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
>      >>? ??? 1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
>      >>? ??? 31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
>      >>? ??? 31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
>      >>? ??? 31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
>      >>? ??? 31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
>      >>? ??? 31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
>      >>? ??? 31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
>      >>? ??? 31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1, 30.8,
>      >>? ??? 30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
>      >>? ??? 30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3, 30.4,
>      >>? ??? 30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
>      >>? ??? 30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
>      >>? ??? 30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
>      >>? ??? 30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
>      >>? ??? 30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
>      >>? ??? 30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
>      >>? ??? 30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
>      >>? ??? 30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
>      >>? ??? 30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
>      >>? ??? 30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
>      >>? ??? 30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4, 30.4,
>      >>? ??? 30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
>      >>? ??? 29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
>      >>? ??? 22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406, 20917,
>      >>? ??? 21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253, 22542,
>      >>? ??? 23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269, 23088,
>      >>? ??? 21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371, 23691,
>      >>? ??? 25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459, 20867,
>      >>? ??? 21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359, 21206,
>      >>? ??? 23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132, 22893,
>      >>? ??? 22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387, 25378,
>      >>? ??? 24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948, 23937,
>      >>? ??? 27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165, 27903,
>      >>? ??? 30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645, 28820,
>      >>? ??? 26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664, 29056,
>      >>? ??? 28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457, 25821,
>      >>? ??? 29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086, 31843,
>      >>? ??? 33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727, 34795,
>      >>? ??? 33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568, 36096,
>      >>? ??? 35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920, 33633,
>      >>? ??? 33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653, 35486,
>      >>? ??? 35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129, 37903,
>      >>? ??? 37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617, 38777,
>      >>? ??? 38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330, 39600,
>      >>? ??? 40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405, 41141,
>      >>? ??? 41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908, 44375,
>      >>? ??? 43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686, 45193,
>      >>? ??? 44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
>      >>? ??? 85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
>      >>? ??? 92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
>      >>? ??? 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
>      >>? ??? 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9, 95.7,
>      >>? ??? 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
>      >>? ??? 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
>      >>? ??? 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
>      >>? ??? 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
>      >>? ??? 104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
>      >>? ??? 112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
>      >>? ??? 115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4,
>      >>? ??? 114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8,
>      >>? ??? 113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2,
>      >>? ??? 129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3,
>      >>? ??? 121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
>      >>? ??? 142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
>      >>? ??? 117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
>      >>? ??? 132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7,
>      >>? ??? 128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
>      >>? ??? 130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
>      >>? ??? 131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
>      >>? ??? 135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
>      >>? ??? 136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
>      >>? ??? 135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
>      >>? ??? 100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
>      >>? ??? 98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
>      >>? ??? 89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
>      >>? ??? 86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
>      >>? ??? 96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
>      >>? ??? 97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
>      >>? ??? 97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
>      >>? ??? 97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
>      >>? ??? 102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
>      >>? ??? 103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107, 107.5,
>      >>? ??? 106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7, 102.7,
>      >>? ??? 104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
>      >>? ??? 104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
>      >>? ??? 119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2, 117.2,
>      >>? ??? 115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3, 117.4,
>      >>? ??? 120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
>      >>? ??? 123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
>      >>? ??? 140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
>      >>? ??? 136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7, 128.4,
>      >>? ??? 130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
>      >>? ??? 118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4, 132.6,
>      >>? ??? 128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
>      >>? ??? 120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5, 121.1,
>      >>? ??? 122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837,
>     23571783,
>      >>? ??? 24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
>      >>? ??? 23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
>      >>? ??? 24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
>      >>? ??? 25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
>      >>? ??? 25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
>      >>? ??? 24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
>      >>? ??? 25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
>      >>? ??? 25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
>      >>? ??? 24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
>      >>? ??? 25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
>      >>? ??? 24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
>      >>? ??? 24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
>      >>? ??? 25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
>      >>? ??? 23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
>      >>? ??? 22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
>      >>? ??? 22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
>      >>? ??? 17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
>      >>? ??? 19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
>      >>? ??? 19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
>      >>? ??? 20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
>      >>? ??? 20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
>      >>? ??? 21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
>      >>? ??? 22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
>      >>? ??? 22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
>      >>? ??? 22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
>      >>? ??? 22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
>      >>? ??? 23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
>      >>? ??? 23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
>      >>? ??? 23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
>      >>? ??? 24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
>      >>? ??? 24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
>      >>? ??? 25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
>      >>? ??? 25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
>      >>? ??? 24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
>      >>? ??? 26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
>      >>? ??? 26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
>      >>? ??? 26637112, 26198157, 26778716, 26846047, 26409309)),
>     row.names =
>      >> c(NA,
>      >> -223L), class = c("tbl_df", "tbl", "data.frame"))
>      >>
>      >> dput() output for dts:
>      >>
>      >>
>      >> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>      >>? ??? X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 =
>     c(NA_real_,
>      >>? ??? NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
>      >>? ??? NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
>      >>? ??? NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>      >>? ??? X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
>      >>? ??? 120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_,
>     NA_real_,
>      >>? ??? NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
>      >>? ??? NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
>      >>? ??? ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
>      >>? ??? NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
>      >>? ??? NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
>      >>? ??? ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 =
>      >> c(NA_real_,
>      >>? ??? NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
>      >>? ??? NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
>      >>? ??? NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
>      >>? ??? ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 =
>      >> c(NA_real_,
>      >>? ??? NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
>      >>? ??? NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
>      >>? ??? NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
>      >>? ??? ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 =
>      >> c(NA_real_,
>      >>? ??? NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
>      >>? ??? NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
>      >>? ??? NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_, NA_real_
>      >>? ??? ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 =
>      >> c(NA_real_,
>      >>? ??? NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
>      >>? ??? NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
>      >>? ??? NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
>      >>? ??? ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 = c(NA,
>      >>? ??? NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
>      >>? ??? NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L),
>     class =
>      >> "data.frame")
>      >>
>      >> dput() output for testcase1:
>      >>
>      >> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
>      >> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
>      >> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
>      >> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
>      >> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
>      >> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
>      >> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
>      >> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6, 104.3,
>      >> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
>      >> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
>      >> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
>      >> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
>      >> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
>      >> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
>      >> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
>      >> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
>      >> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
>      >> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
>      >> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
>      >> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
>      >> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
>      >> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
>      >> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
>      >> 135.1, NA, NA)
>      >>
>      >> ______________________________________________
>      >> R-help at r-project.org <mailto:R-help at r-project.org> mailing list
>     -- To UNSUBSCRIBE and more, see
>      >> https://stat.ethz.ch/mailman/listinfo/r-help
>      >> PLEASE do read the posting guide
>      >> http://www.R-project.org/posting-guide.html
>      >> and provide commented, minimal, self-contained, reproducible code.
> 
>     ______________________________________________
>     R-help at r-project.org <mailto:R-help at r-project.org> mailing list --
>     To UNSUBSCRIBE and more, see
>     https://stat.ethz.ch/mailman/listinfo/r-help
>     PLEASE do read the posting guide
>     http://www.R-project.org/posting-guide.html
>     and provide commented, minimal, self-contained, reproducible code.
>


From wdun|@p @end|ng |rom t|bco@com  Wed Oct 30 18:41:57 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 30 Oct 2019 10:41:57 -0700
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <a8192512-4acb-1df4-d497-e664255ef211@sapo.pt>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
 <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
 <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>
 <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>
 <a8192512-4acb-1df4-d497-e664255ef211@sapo.pt>
Message-ID: <CAF8bMcZTg-JwqFpO3Ag8gj1sZ1D5RUPoepG6Akm5zStm7z6SiQ@mail.gmail.com>

Using NROW(x) instead of length(x) is fine, but it won't fix the problem
that this function won't work if given a tibble.  E.g., for a tibble t,
rev(t) is identical to t.

     revx <- ts(rev(x),frequency=12)
     revx <- revx[1:(NRngt$(revx)-dt2)]
     fc <- forecast(auto.arima(revx),bfct)

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Oct 30, 2019 at 10:31 AM Rui Barradas <ruipbarradas at sapo.pt> wrote:

> Hello,
>
> Another option that prevents
>
> length(x) == 1
>
> is to use NROW(x) instead of length(x).
>
> Hope this helps,
>
> Rui Barradas
>
> ?s 16:58 de 30/10/19, William Dunlap escreveu:
> > Your EXTEND() function appears to expect that its 'x' argument will be a
> > numeric vector, but you pass it a one-column tibble.  Hence length(x) is
> > 1 and things go downhill from there.
> >
> > I like to start such functions with a long stopifnot() statement that
> > does a quick check of inputs.  E.g.,
> >
> > stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)
> >
> > Use vseries1[,j,drop=TRUE] or vseries1[[j]] to extract a single column
> > from the tibble 'vseries1'.  vseries1[,1] will return a one-column
> tibble.
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com <http://tibco.com>
> >
> >
> > On Wed, Oct 30, 2019 at 5:25 AM <phil at philipsmith.ca
> > <mailto:phil at philipsmith.ca>> wrote:
> >
> >     Thanks for the suggestion Rui, but no, this will not remove the
> error.
> >     In fact, if I drop the second term entirely as in:
> >
> >     if ( (!is.na <http://is.na>(dts[1,j-1])) ) {
> >
> >     then I still get the error. I have been unable to find a work-around.
> >
> >     Philip
> >
> >
> >     On 2019-10-30 05:17, Rui Barradas wrote:
> >      > Hello,
> >      >
> >      > Is this as simple as
> >      >
> >      >
> >      > if ( (!is.na <http://is.na>(dts[1,j-1])) & (!is.na
> >     <http://is.na>(dts[3,j-1])) ) {
> >      >
> >      >
> >      > (change the logical operator from '|' to '&')?
> >      > The result vseries1 still has some NA's at the end of some of its
> >      > series.
> >      >
> >      > Hope this helps,
> >      >
> >      > Rui Barradas
> >      >
> >      > ?s 02:05 de 30/10/19, phil at philipsmith.ca
> >     <mailto:phil at philipsmith.ca> escreveu:
> >      >> I am having a problem that generates the error message: " Error
> in
> >      >> firstnonmiss:lastnonmiss : argument of length 0 ". There is an
> >     article
> >      >> on this in stackoverflow, but I have been unable to understand
> >     it well
> >      >> enough to solve my problem. Essentially, I have a data frame
> >     with 41
> >      >> indicator series and some of the series have missing values
> >     (NAs) at
> >      >> the beginning and/or the end. I want to fill in the missing
> values
> >      >> using ARIMA models, via the forecast() function. It works when I
> >     use
> >      >> my EXTEND function on a single series, but it fails when I try
> >     to loop
> >      >> through all 41 series. Here is a reproducible example. Thanks
> >     for any
> >      >> advice.
> >      >>
> >      >> # Reproducible example
> >      >> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
> >      >> # See also stackoverflow:
> >      >>
> >
> https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement
> >
> >      >> library(forecast)
> >      >> library(lubridate)
> >      >> vseries <- dget("vseries.txt") # data frame containing REF_DATE
> >     and 41
> >      >> "indicator" vectors
> >      >> dts <- dget("dts.txt") # data frame recording where NAs are in
> >     vseries
> >      >> - they will be replaced
> >      >> testcase1 <- dget("testcase1.txt") # a vector for use in testing
> >      >> # Function to fill in missing values (NAs) using ARIMA forecasts
> >     and
> >      >> backcasts
> >      >> EXTEND <-
> >     function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
> >      >>    if (!is.na <http://is.na>(dt1)) {
> >      >>      bfct = dt2-dt1+1 # number of months to backcast
> >      >>      revx <- ts(rev(x),frequency=12)
> >      >>      revx <- revx[1:(length(revx)-dt2)]
> >      >>      fc <- forecast(auto.arima(revx),bfct)
> >      >>      revx1 <- c(revx,fc$mean) # extend with forecasts (in
> fc$mean)
> >      >>      m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
> >      >>      y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
> >      >>      x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
> >      >>    }
> >      >>    if (!is.na <http://is.na>(dt3)) {
> >      >>      ffct <- dt4-dt3+1 # number of months to forecast
> >      >>      x <- x[1:(dt3-1)]
> >      >>      fc <- forecast(auto.arima(x),ffct)
> >      >>      x <- c(x,fc$mean)
> >      >>    }
> >      >>    return(x)
> >      >> }
> >      >> # Test EXTEND function with a single vector - apparently it works
> >      >> (testcase1_extended <-
> >     EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
> >      >> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
> >      >> View(cbind(testcase1,testcase1_extended))
> >      >> # Now use EXTEND to fill in the missing values in all 41
> >     indicators in
> >      >> vseries
> >      >> # Data frame dts has NAs where no extension is required, integer
> >      >> values showing where to start and
> >      >> # where to end when extensions are required. Store extended
> >     series in
> >      >> vseries1.
> >      >> vseries1 <- vseries
> >      >> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1
> in
> >      >> vseries is REF_DATE
> >      >>    if ( (!is.na <http://is.na>(dts[1,j-1])) | (!is.na
> >     <http://is.na>(dts[3,j-1])) ) {
> >      >>      vseries1[,j] <-
> >      >>
> >
>  EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1],
> >
> >      >> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
> >      >>    }
> >      >> }
> >      >> View(vseries)
> >      >> View(vseries1)
> >      >>
> >      >> dput() output for vseries:
> >      >>
> >      >> structure(list(REF_DATE = c("2001-01-01", "2001-02-01",
> >     "2001-03-01",
> >      >> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01",
> >     "2001-08-01",
> >      >> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01",
> >     "2002-01-01",
> >      >> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01",
> >     "2002-06-01",
> >      >> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01",
> >     "2002-11-01",
> >      >> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01",
> >     "2003-04-01",
> >      >> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01",
> >     "2003-09-01",
> >      >> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01",
> >     "2004-02-01",
> >      >> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01",
> >     "2004-07-01",
> >      >> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01",
> >     "2004-12-01",
> >      >> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01",
> >     "2005-05-01",
> >      >> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01",
> >     "2005-10-01",
> >      >> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01",
> >     "2006-03-01",
> >      >> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01",
> >     "2006-08-01",
> >      >> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01",
> >     "2007-01-01",
> >      >> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01",
> >     "2007-06-01",
> >      >> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01",
> >     "2007-11-01",
> >      >> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01",
> >     "2008-04-01",
> >      >> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01",
> >     "2008-09-01",
> >      >> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01",
> >     "2009-02-01",
> >      >> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01",
> >     "2009-07-01",
> >      >> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01",
> >     "2009-12-01",
> >      >> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01",
> >     "2010-05-01",
> >      >> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01",
> >     "2010-10-01",
> >      >> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01",
> >     "2011-03-01",
> >      >> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01",
> >     "2011-08-01",
> >      >> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01",
> >     "2012-01-01",
> >      >> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01",
> >     "2012-06-01",
> >      >> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01",
> >     "2012-11-01",
> >      >> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01",
> >     "2013-04-01",
> >      >> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01",
> >     "2013-09-01",
> >      >> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01",
> >     "2014-02-01",
> >      >> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01",
> >     "2014-07-01",
> >      >> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01",
> >     "2014-12-01",
> >      >> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01",
> >     "2015-05-01",
> >      >> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01",
> >     "2015-10-01",
> >      >> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01",
> >     "2016-03-01",
> >      >> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01",
> >     "2016-08-01",
> >      >> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01",
> >     "2017-01-01",
> >      >> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01",
> >     "2017-06-01",
> >      >> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01",
> >     "2017-11-01",
> >      >> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01",
> >     "2018-04-01",
> >      >> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01",
> >     "2018-09-01",
> >      >> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01",
> >     "2019-02-01",
> >      >> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01",
> "2019-07-01"
> >      >> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987,
> 19671015,
> >      >> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227,
> >     15362864,
> >      >> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846,
> >     16124593,
> >      >> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326,
> >     17559123,
> >      >> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801,
> >     17557392,
> >      >> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657,
> >     19027956,
> >      >> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111,
> >     18665646,
> >      >> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368,
> >     20466651,
> >      >> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403,
> >     17890774,
> >      >> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141,
> >     20060353,
> >      >> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846,
> >     23024759,
> >      >> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713,
> >     21213020,
> >      >> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572,
> >     20881111,
> >      >> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926,
> >     18556973,
> >      >> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295,
> >     16443231,
> >      >> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108,
> >     17853071,
> >      >> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783,
> >     21107272,
> >      >> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654,
> >     20878866,
> >      >> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337,
> >     22337136,
> >      >> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288,
> >     23252411,
> >      >> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385,
> >     20109262,
> >      >> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128,
> >     23130117,
> >      >> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882,
> >     25197042,
> >      >> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289,
> >     27899355,
> >      >> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182,
> >     27040475,
> >      >> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129,
> >     27108195,
> >      >> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186,
> >     25857724,
> >      >> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772,
> >     26468833,
> >      >> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265,
> >     28179157,
> >      >> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939,
> >     29778379,
> >      >> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824,
> >     29820781,
> >      >> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423,
> >     30947662,
> >      >> 29590180), v1001816392 = c(14810380, 14200859, 16756119,
> 15217622,
> >      >> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643,
> >     15666826,
> >      >> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785,
> >     15250640,
> >      >> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416,
> >     13984446,
> >      >> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684,
> >     12738958,
> >      >> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311,
> >     16669218,
> >      >> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684,
> >     15377076,
> >      >> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530,
> >     15633935,
> >      >> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696,
> >     14282888,
> >      >> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547,
> >     11808763,
> >      >> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585,
> >     14739285,
> >      >> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113,
> >     13908728,
> >      >> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120,
> >     14157825,
> >      >> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313,
> >     13084751,
> >      >> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990,
> 9888218,
> >      >> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361,
> 10292744,
> >      >> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995,
> >     12464327,
> >      >> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365,
> >     14066907,
> >      >> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540,
> >     13928150,
> >      >> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174,
> >     14259088,
> >      >> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428,
> >     12348507,
> >      >> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402,
> >     12114754,
> >      >> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810,
> >     13122736,
> >      >> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121,
> >     16407589,
> >      >> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925,
> >     15389386,
> >      >> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529,
> >     17312508,
> >      >> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636,
> >     17043771,
> >      >> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251,
> >     16292556,
> >      >> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082,
> >     16254963,
> >      >> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366,
> >     17819011,
> >      >> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853,
> >     18388536,
> >      >> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596,
> >     19056997,
> >      >> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
> >      >> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
> >      >> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
> >      >> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
> >      >> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
> >      >> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
> >      >> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
> >      >> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
> >      >> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
> >      >> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
> >      >> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
> >      >> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
> >      >> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
> >      >> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
> >      >> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
> >      >> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
> >      >> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
> >      >> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
> >      >> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
> >      >> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
> >      >> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
> >      >> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
> >      >> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
> >      >> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
> >      >> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
> >      >> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
> >      >> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
> >      >> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
> >      >> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
> >      >> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
> >      >> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
> >      >> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
> >      >> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
> >      >> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
> >      >> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
> >      >> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
> >      >> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
> >      >> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
> >      >> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
> >      >> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
> >      >> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
> >      >> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
> >      >> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
> >      >> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
> >      >> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
> >      >> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
> >      >> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
> >      >> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
> >      >> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
> >      >> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
> >      >> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
> >      >> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
> >      >> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
> >      >> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
> >      >> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
> >      >> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
> >      >> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
> >      >> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
> >      >> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
> >      >> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
> >      >> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
> >      >> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
> >      >> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
> >      >> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
> >      >> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
> >      >> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077,
> 15407812,
> >      >> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658,
> >     14415174,
> >      >> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080,
> >     15044874,
> >      >> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316,
> >     11919494,
> >      >> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326,
> >     10377252,
> >      >> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102,
> >     12992845,
> >      >> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588,
> >     13924365,
> >      >> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754,
> >     13550102,
> >      >> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153,
> >     14102556,
> >      >> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033,
> >     13670648,
> >      >> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714,
> >     12847367,
> >      >> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377,
> >     12244381,
> >      >> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046,
> 11770050,
> >      >> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217,
> >     12097708,
> >      >> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
> >      >> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
> >      >> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
> >      >> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
> >      >> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267,
> 10621244,
> >      >> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394,
> >     10523656,
> >      >> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800,
> 11353041,
> >      >> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210,
> 11132326,
> >      >> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218,
> 10184002,
> >      >> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262,
> >     11590206,
> >      >> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487,
> >     13436617,
> >      >> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727,
> >     14243928,
> >      >> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307,
> >     13826213,
> >      >> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693,
> >     12754175,
> >      >> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383,
> >     10931400,
> >      >> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609,
> >     12366614,
> >      >> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534,
> >     12786433,
> >      >> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828,
> >     13274018,
> >      >> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
> >      >> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103,
> >     12173082,
> >      >> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495,
> >     14636326,
> >      >> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966,
> >     13877119,
> >      >> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189,
> >     13126548,
> >      >> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027,
> 10695234,
> >      >> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447,
> >     12927490,
> >      >> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608,
> >     13925071,
> >      >> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771,
> 13135370,
> >      >> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856,
> >     13492799,
> >      >> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430,
> >     12127888,
> >      >> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185,
> >     10548301,
> >      >> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227,
> >     11593154,
> >      >> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363,
> >     12622830,
> >      >> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198,
> 10608854,
> >      >> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384,
> 10612403,
> >      >> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765,
> 12335679,
> >      >> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867,
> >     10507066,
> >      >> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839,
> >     12542127,
> >      >> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179,
> >     13279826,
> >      >> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238,
> >     12657427,
> >      >> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612,
> >     13452761,
> >      >> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655,
> >     11701079,
> >      >> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363,
> >     13341724,
> >      >> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368,
> >     13650455,
> >      >> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891,
> >     15646361,
> >      >> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288,
> >     16527074,
> >      >> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797,
> >     15281552,
> >      >> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339,
> >     18182041,
> >      >> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023,
> >     14000735,
> >      >> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995,
> >     16636582,
> >      >> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203,
> >     17997663,
> >      >> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780,
> 1264742,
> >      >> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
> >      >> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
> >      >> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
> >      >> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
> >      >> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
> >      >> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
> >      >> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
> >      >> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
> >      >> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
> >      >> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
> >      >> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
> >      >> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
> >      >> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
> >      >> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
> >      >> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232,
> 1380845,
> >      >> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556,
> 1053348,
> >      >> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576,
> 1029796,
> >      >> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473,
> 836908,
> >      >> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875,
> 1055059,
> >      >> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037,
> 934344,
> >      >> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
> >      >> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030,
> 959260,
> >      >> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558,
> 760214,
> >      >> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984,
> 942851,
> >      >> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
> >      >> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
> >      >> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
> >      >> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
> >      >> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
> >      >> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089,
> 828632,
> >      >> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486,
> 1096690,
> >      >> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
> >      >> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748,
> 665961,
> >      >> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797,
> 960006,
> >      >> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
> >      >> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
> >      >> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
> >      >> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
> >      >> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
> >      >> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
> >      >> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
> >      >> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
> >      >> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
> >      >> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
> >      >> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
> >      >> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
> >      >> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
> >      >> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
> >      >> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
> >      >> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
> >      >> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
> >      >> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
> >      >> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
> >      >> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
> >      >> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
> >      >> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
> >      >> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
> >      >> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812,
> 796604,
> >      >> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
> >      >> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
> >      >> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
> >      >> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
> >      >> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
> >      >> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
> >      >> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128,
> 1084626,
> >      >> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
> >      >> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
> >      >> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913,
> 1058493,
> >      >> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
> >      >> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
> >      >> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958,
> 1091468,
> >      >> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
> >      >> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
> >      >> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
> >      >> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
> >      >> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
> >      >> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
> >      >> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
> >      >> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093,
> 971856,
> >      >> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120,
> 845165,
> >      >> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
> >      >> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
> >      >> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042,
> 892834,
> >      >> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867,
> 1094743,
> >      >> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
> >      >> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970,
> 72620,
> >      >> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
> >      >> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
> >      >> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
> >      >> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
> >      >> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
> >      >> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
> >      >> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
> >      >> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
> >      >> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
> >      >> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
> >      >> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
> >      >> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
> >      >> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
> >      >> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
> >      >> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
> >      >> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
> >      >> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
> >      >> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
> >      >> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
> >      >> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
> >      >> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
> >      >> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
> >      >> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
> >      >> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
> >      >> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
> >      >> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899,
> >     20426712,
> >      >> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355,
> >     20768807,
> >      >> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726,
> >     21596243,
> >      >> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072,
> >     21846894,
> >      >> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231,
> >     22554639,
> >      >> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451,
> >     23206767,
> >      >> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818,
> >     23784278,
> >      >> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768,
> >     24503153,
> >      >> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920,
> >     25035239,
> >      >> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231,
> >     25918644,
> >      >> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543,
> >     26691191,
> >      >> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037,
> >     27180711,
> >      >> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474,
> >     27386049,
> >      >> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040,
> >     26877705,
> >      >> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460,
> >     27155400,
> >      >> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341,
> >     27686074,
> >      >> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974,
> >     28716843,
> >      >> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032,
> >     29165480,
> >      >> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041,
> >     29795842,
> >      >> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304,
> >     30287625,
> >      >> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619,
> >     30970797,
> >      >> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046,
> >     31382224,
> >      >> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255,
> >     32294373,
> >      >> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158,
> >     33033517,
> >      >> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255,
> >     33687475,
> >      >> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093,
> >     33938988,
> >      >> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494,
> >     34350509,
> >      >> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315,
> >     35518127,
> >      >> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171,
> >     36971724,
> >      >> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633,
> >     37827498,
> >      >> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308,
> >     38560349,
> >      >> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
> >      >> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926,
> 5937.3,
> >      >> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6,
> 6075.3,
> >      >> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
> >      >> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
> >      >> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
> >      >> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3,
> 6379.3,
> >      >> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
> >      >> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
> >      >> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
> >      >> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623,
> 6638.2,
> >      >> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5,
> 6461.2,
> >      >> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
> >      >> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
> >      >> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
> >      >> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
> >      >> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
> >      >> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
> >      >> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
> >      >> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
> >      >> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
> >      >> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935,
> 6930.3,
> >      >> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
> >      >> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
> >      >> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
> >      >> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
> >      >> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
> >      >> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
> >      >> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
> >      >> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
> >      >> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
> >      >> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
> >      >> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
> >      >> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
> >      >> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
> >      >> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
> >      >> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
> >      >> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
> >      >> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
> >      >> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
> >      >> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
> >      >> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
> >      >> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
> >      >> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
> >      >> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
> >      >> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
> >      >> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
> >      >> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
> >      >> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
> >      >> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
> >      >> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
> >      >> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
> >      >> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
> >      >> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
> >      >> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
> >      >> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
> >      >> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
> >      >> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
> >      >> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
> >      >> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
> >      >> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
> >      >> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
> >      >> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
> >      >> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
> >      >> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
> >      >> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
> >      >> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
> >      >> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
> >      >> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
> >      >> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
> >      >> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
> >      >> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
> >      >> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
> >      >> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
> >      >> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
> >      >> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
> >      >> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
> >      >> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
> >      >> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
> >      >> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
> >      >> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
> >      >> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
> >      >> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
> >      >> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
> >      >> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
> >      >> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
> >      >> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
> >      >> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
> >      >> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
> >      >>      v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
> >      >>      62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
> >      >>      62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
> >      >>      63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1,
> 63.8,
> >      >>      63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
> >      >>      63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
> >      >>      63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
> >      >>      62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
> >      >>      63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
> >      >>      63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
> >      >>      60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
> >      >>      60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
> >      >>      61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
> >      >>      61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
> >      >>      60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
> >      >>      61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
> >      >>      61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8,
> 60.7,
> >      >>      60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8,
> 60.9,
> >      >>      60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
> >      >>      60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
> >      >>      61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
> >      >>      60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
> >      >>      ), v382201 = c(212164, 193583, 215866, 211263, 222871,
> 215519,
> >      >>      219942, 216251, 207703, 212013, 207781, 219596, 222977,
> 202836,
> >      >>      225014, 217040, 223269, 212081, 211644, 208999, 200885,
> 207899,
> >      >>      204091, 216573, 218997, 195583, 215113, 206360, 214884,
> 208636,
> >      >>      214072, 211055, 206974, 211607, 205837, 215020, 216294,
> 201218,
> >      >>      216097, 209029, 216690, 207829, 211911, 212123, 205356,
> 211083,
> >      >>      205076, 212205, 212779, 191520, 213090, 209484, 215975,
> 205127,
> >      >>      207085, 209844, 201884, 206749, 200246, 208719, 211380,
> 190749,
> >      >>      209346, 200994, 207431, 198322, 201983, 200869, 196045,
> 199493,
> >      >>      195149, 205332, 207126, 185698, 207850, 205701, 216965,
> 209296,
> >      >>      215644, 214061, 205121, 209924, 204004, 213241, 217848,
> 203144,
> >      >>      213848, 206368, 212813, 200362, 202502, 202339, 195491,
> 201314,
> >      >>      196093, 206104, 208701, 190879, 213025, 208090, 217292,
> 210890,
> >      >>      216526, 213092, 206553, 209884, 204042, 211314, 212389,
> 192037,
> >      >>      213815, 208826, 216756, 207533, 210091, 212435, 204595,
> 209379,
> >      >>      203827, 210218, 212451, 192470, 214095, 208717, 217913,
> 212215,
> >      >>      217087, 218783, 209940, 214059, 208998, 220829, 223171,
> 208246,
> >      >>      222458, 215499, 221694, 213553, 219458, 221757, 214203,
> 221003,
> >      >>      214380, 221215, 220019, 197689, 218045, 210866, 218954,
> 209825,
> >      >>      212145, 218399, 210138, 215187, 206605, 211504, 212024,
> 192311,
> >      >>      212260, 207136, 215097, 210584, 218528, 220739, 214149,
> 218748,
> >      >>      208968, 216712, 218399, 197318, 223819, 221927, 234903,
> 228622,
> >      >>      233660, 231277, 221779, 227918, 220888, 231634, 235272,
> 220580,
> >      >>      233970, 226381, 235613, 227998, 234353, 235796, 230542,
> 239605,
> >      >>      233645, 245124, 248935, 226969, 252118, 245888, 253940,
> 242869,
> >      >>      249518, 250305, 242427, 251666, 242906, 253645, 257586,
> 236425,
> >      >>      262768, 252595, 262910, 254396, 254417, 252449, 241404,
> 246729,
> >      >>      237361, 248692, 251752, 228933, 256286, 249336, 255692,
> 247109,
> >      >>      251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
> >      >>      97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
> >      >>      99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
> >      >>      104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7,
> 103.8,
> >      >>      104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
> >      >>      108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
> >      >>      110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
> >      >>      111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1,
> 112.6,
> >      >>      112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
> >      >>      113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
> >      >>      125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
> >      >>      130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7,
> 134.3,
> >      >>      134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
> >      >>      135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
> >      >>      139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
> >      >>      141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
> >      >>      143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
> >      >>      144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
> >      >>      145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8,
> 141.5,
> >      >>      147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
> >      >>      141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
> >      >>      145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
> >      >>      147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
> >      >>      149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
> >      >>      152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
> >      >>      ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
> >      >>      108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
> >      >>      101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
> >      >>      100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8,
> 98.1,
> >      >>      98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
> >      >>      98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6,
> 97.5,
> >      >>      101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
> >      >>      103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
> >      >>      101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5,
> 105.4,
> >      >>      98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
> >      >>      120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2,
> 137.7,
> >      >>      140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
> >      >>      138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
> >      >>      130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
> >      >>      143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4,
> 143.5,
> >      >>      143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
> >      >>      142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
> >      >>      132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
> >      >>      139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
> >      >>      144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6,
> 141.5,
> >      >>      141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7,
> 137.1,
> >      >>      134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
> >      >>      133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
> >      >>      134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
> >      >>      130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130),
> >     v41691919
> >      >> = c(96.5,
> >      >>      97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
> >      >>      97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3,
> 100.9,
> >      >>      101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2,
> 102.3,
> >      >>      102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
> >      >>      104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
> >      >>      105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5,
> 108.2,
> >      >>      107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5,
> 109.3,
> >      >>      109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
> >      >>      111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
> >      >>      110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8,
> 115.1,
> >      >>      113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
> >      >>      113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1,
> 115.3,
> >      >>      115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9,
> 117.8,
> >      >>      118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
> >      >>      121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
> >      >>      121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
> >      >>      123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
> >      >>      124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7,
> 126.8,
> >      >>      126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2,
> 128.4,
> >      >>      128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
> >      >>      130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
> >      >>      131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
> >      >>      132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
> >      >>      135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
> >      >>      138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8,
> 97.7,
> >      >>      98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3,
> 100.2,
> >      >>      100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
> >      >>      102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
> >      >>      100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8,
> 104.3,
> >      >>      104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
> >      >>      107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
> >      >>      108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
> >      >>      109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
> >      >>      111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
> >      >>      115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
> >      >>      121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
> >      >>      121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
> >      >>      123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4,
> 127.1,
> >      >>      128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4,
> 130.6,
> >      >>      131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
> >      >>      131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6,
> 133.5,
> >      >>      133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
> >      >>      136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
> >      >>      140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
> >      >>      142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
> >      >>      142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
> >      >>      143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
> >      >>      146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
> >      >>      148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
> >      >>      ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
> >      >>      99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
> >      >>      99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
> >      >>      102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
> >      >>      104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
> >      >>      106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
> >      >>      108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
> >      >>      112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
> >      >>      112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4,
> 114.7,
> >      >>      115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
> >      >>      117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
> >      >>      120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
> >      >>      118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
> >      >>      122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
> >      >>      123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3,
> 124.3,
> >      >>      124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5,
> 125.4,
> >      >>      125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1,
> 127.2,
> >      >>      127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9,
> 132.4,
> >      >>      132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4,
> 133.5,
> >      >>      133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
> >      >>      135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
> >      >>      138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7,
> 140.3,
> >      >>      140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
> >      >>      141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7,
> 143.9,
> >      >>      144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3),
> >     v41691965
> >      >> = c(96.9,
> >      >>      97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
> >      >>      98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
> >      >>      100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
> >      >>      101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5,
> 101.7,
> >      >>      102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2,
> 101.2,
> >      >>      101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5,
> 102.2,
> >      >>      101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6,
> 101.7,
> >      >>      100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
> >      >>      103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4,
> 103.2,
> >      >>      103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6,
> 106.1,
> >      >>      105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
> >      >>      106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3,
> 109.2,
> >      >>      109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
> >      >>      110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
> >      >>      113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
> >      >>      113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
> >      >>      115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6,
> 115.6,
> >      >>      115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
> >      >>      119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
> >      >>      121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3,
> 122.6,
> >      >>      123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7,
> 123.5,
> >      >>      123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5,
> 123.2,
> >      >>      124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2,
> 125.2,
> >      >>      125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3,
> 124.9,
> >      >>      125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
> >      >>      105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
> >      >>      99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
> >      >>      101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9,
> 95.6,
> >      >>      96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
> >      >>      96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
> >      >>      97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
> >      >>      92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
> >      >>      90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
> >      >>      95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
> >      >>      93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
> >      >>      89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
> >      >>      92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
> >      >>      93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6,
> 88.3,
> >      >>      92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
> >      >>      85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
> >      >>      90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
> >      >>      91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3,
> 91.5,
> >      >>      91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
> >      >>      93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
> >      >>      91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
> >      >>      87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
> >      >>      92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2),
> v41691988 =
> >      >> c(98.2,
> >      >>      98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
> >      >>      94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3,
> 101.2,
> >      >>      101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2,
> 103.9,
> >      >>      104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6,
> 106.8,
> >      >>      107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
> >      >>      109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
> >      >>      113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8,
> 116.9,
> >      >>      117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
> >      >>      118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
> >      >>      118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
> >      >>      116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5,
> 116.7,
> >      >>      114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119,
> 119.1,
> >      >>      119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
> >      >>      125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5,
> 129.5,
> >      >>      130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
> >      >>      130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3,
> 131.3,
> >      >>      131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7,
> 132.3,
> >      >>      133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8,
> 131.4,
> >      >>      129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4,
> 130.6,
> >      >>      128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6,
> 128.6,
> >      >>      130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
> >      >>      133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
> >      >>      136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
> >      >>      142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
> >      >>      143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
> >      >>      110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
> >      >>      88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
> >      >>      104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
> >      >>      111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
> >      >>      127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1,
> 114.8,
> >      >>      117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
> >      >>      127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9,
> 154.3,
> >      >>      152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
> >      >>      155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
> >      >>      152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
> >      >>      122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
> >      >>      143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
> >      >>      144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
> >      >>      168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
> >      >>      177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8,
> 182.4,
> >      >>      187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6,
> 183.7,
> >      >>      182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
> >      >>      189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9,
> 181.1,
> >      >>      167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
> >      >>      163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2,
> 146.8,
> >      >>      152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1,
> 163.9,
> >      >>      156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8,
> 167.2,
> >      >>      177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7,
> 194.8,
> >      >>      192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
> >      >>      186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260,
> 1172192,
> >      >>      1173559, 1173865, 1163159, 1173230, 1168291, 1148136,
> 1135730,
> >      >>      1176671, 1184706, 1186957, 1177962, 1194820, 1192486,
> 1204268,
> >      >>      1196677, 1198166, 1192339, 1188059, 1189860, 1195524,
> 1179193,
> >      >>      1160881, 1156255, 1154137, 1151079, 1223651, 1193786,
> 1187791,
> >      >>      1185070, 1222101, 1233158, 1222271, 1205916, 1211049,
> 1237429,
> >      >>      1221806, 1288146, 1268949, 1239192, 1259979, 1259944,
> 1257909,
> >      >>      1229472, 1206627, 1245003, 1262388, 1269395, 1276432,
> 1277248,
> >      >>      1261277, 1291593, 1298114, 1305550, 1267413, 1294688,
> 1295694,
> >      >>      1317484, 1333362, 1330478, 1362024, 1326774, 1319396,
> 1318673,
> >      >>      1334044, 1346594, 1339499, 1363158, 1404445, 1434255,
> 1396545,
> >      >>      1355204, 1367796, 1352577, 1349119, 1374720, 1398253,
> 1369215,
> >      >>      1413653, 1431392, 1421479, 1419408, 1487702, 1434740,
> 1434398,
> >      >>      1472990, 1471028, 1460549, 1461166, 1482247, 1490620,
> 1486005,
> >      >>      1467463, 1444413, 1469876, 1477567, 1460040, 1446679,
> 1452324,
> >      >>      1456279, 1455826, 1472154, 1485169, 1464240, 1487456,
> 1518692,
> >      >>      1516207, 1512158, 1535860, 1535652, 1538473, 1549310,
> 1517172,
> >      >>      1511436, 1531246, 1558108, 1555668, 1566767, 1566882,
> 1580492,
> >      >>      1566209, 1594096, 1600677, 1613907, 1619388, 1607791,
> 1602639,
> >      >>      1612385, 1631814, 1643924, 1650496, 1659254, 1679545,
> 1674956,
> >      >>      1675779, 1676020, 1676843, 1679625, 1694232, 1695255,
> 1720478,
> >      >>      1741576, 1736856, 1722187, 1750359, 1728204, 1736587,
> 1752139,
> >      >>      1752173, 1770304, 1762990, 1777806, 1787814, 1766222,
> 1771789,
> >      >>      1806919, 1817679, 1826720, 1854228, 1850492, 1857490,
> 1892994,
> >      >>      1890432, 1892879, 1890258, 1911380, 1915088, 1891501,
> 1922679,
> >      >>      1947153, 1994578, 1970953, 1983867, 2014740, 2008756,
> 2030234,
> >      >>      2032886, 2059674, 2068652, 2073047, 2083031, 2136894,
> 2115520,
> >      >>      2130280, 2158663, 2134182, 2172927, 2173367, 2173553,
> 2156196,
> >      >>      2218283, 2237749, 2206090, 2227664, 2221296, 2238127,
> 2265268,
> >      >>      2262536, 2284770, 2309970, 2310161, 2307041, 2331779,
> 2369833,
> >      >>      2388535, 2335561, 2373858, 2397911, 2392511, 2405673,
> 2410779,
> >      >>      2411443, 2438862, 2483861, 2444050, 2429816, 2451814,
> 2464695,
> >      >>      2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
> >      >>      12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
> >      >>      12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
> >      >>      10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
> >      >>      11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
> >      >>      10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
> >      >>      11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
> >      >>      11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
> >      >>      10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
> >      >>      11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
> >      >>      12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
> >      >>      12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
> >      >>      12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
> >      >>      12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
> >      >>      12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
> >      >>      11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
> >      >>      11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
> >      >>      11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
> >      >>      12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
> >      >>      12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
> >      >>      12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
> >      >>      12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
> >      >>      12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
> >      >>      12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
> >      >>      2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
> >      >>      778862, 1138557, 1636203, 2233518, 2114752, 1974646,
> 1534387,
> >      >>      998860, 559524, 447850, 393285, 402189, 651017, 1523288,
> >      >>      2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
> >      >>      452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
> >      >>      2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
> >      >>      425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
> >      >>      1411442, 900073, 491461, 413880, 390364, 393934, 586734,
> >      >>      1266299, 2202400, 2309033, 2164470, 2145389, 1328220,
> 736964,
> >      >>      480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
> >      >>      3283157, 3804876, 3244792, 2477267, 1569953, 1169971,
> 1121247,
> >      >>      1218442, 1182862, 1409876, 2241749, 3274756, 3494706,
> 3615470,
> >      >>      3455902, 2199773, 1647961, 1230718, 1125165, 1078839,
> 1099809,
> >      >>      1539702, 2190793, 3126922, 3886115, 3290320, 2942615,
> 2110948,
> >      >>      1405583, 1308947, 1014607, 1148503, 1066941, 1596998,
> 2039112,
> >      >>      2798847, 3446040, 3255602, 2815621, 1839592, 1426302,
> 1177683,
> >      >>      1090902, 1145557, 1140902, 1524916, 2145484, 3256107,
> 3775523,
> >      >>      3559115, 3289994, 2219521, 1774688, 1291471, 1191457,
> 1170953,
> >      >>      1159087, 1543907, 2159364, 2786142, 3447635, 3179625,
> 2751435,
> >      >>      2152765, 1596927, 1290466, 1278246, 1247608, 1253886,
> 1622877,
> >      >>      2433993, 2831938, 3565488, 3636268, 3253630, 2559152,
> 1626984,
> >      >>      1251460, 1163841, 1130486, 1190063, 1491645, 2345181,
> 3346689,
> >      >>      4165953, 3842336, 3682352, 2580288, 1731497, 1199181,
> 1098817,
> >      >>      1113400, 1079822, 1464918, 2344949, 3006111, 3847035,
> 4007847,
> >      >>      3550039, 2397284, 1457876, 1155121, 1115934, 1113953,
> 1185585,
> >      >>      1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >      >>      NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
> >      >>      76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387,
> 77.807,
> >      >>      74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
> >      >>      87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041,
> 114.235,
> >      >>      82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032,
> 108.011,
> >      >>      79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
> >      >>      83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143,
> 57.357,
> >      >>      71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519,
> 70.549,
> >      >>      64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906,
> 74.252,
> >      >>      84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522,
> 74.888,
> >      >>      52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3,
> 82.511,
> >      >>      71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79,
> 72.919,
> >      >>      92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501,
> 43.62,
> >      >>      37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622,
> 57.833,
> >      >>      72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712,
> 69.299,
> >      >>      56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477,
> 50.752,
> >      >>      66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846,
> 66.99,
> >      >>      75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376,
> 76.071,
> >      >>      70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346,
> 47.764,
> >      >>      68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928,
> 60.752,
> >      >>      71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44,
> 65.443,
> >      >>      55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084,
> 61.375,
> >      >>      41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148,
> 90.318,
> >      >>      75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21,
> 72.047,
> >      >>      88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135,
> 100.138,
> >      >>      84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755,
> 77.894,
> >      >>      59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223,
> 54.825,
> >      >>      104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
> >      >>      73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
> >      >>      v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
> >      >>      9584905, 9382415, 9482770, 9307864, 9492970, 9715825,
> 9940764,
> >      >>      10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
> >      >>      10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
> >      >>      10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
> >      >>      10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
> >      >>      10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
> >      >>      10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
> >      >>      11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
> >      >>      11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
> >      >>      11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
> >      >>      11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
> >      >>      11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
> >      >>      12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
> >      >>      12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
> >      >>      12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
> >      >>      11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
> >      >>      12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
> >      >>      12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
> >      >>      12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
> >      >>      13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
> >      >>      13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
> >      >>      13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
> >      >>      13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
> >      >>      13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
> >      >>      14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
> >      >>      14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
> >      >>      15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
> >      >>      14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
> >      >>      15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
> >      >>      16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
> >      >>      16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
> >      >>      17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
> >      >>      18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
> >      >>      18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
> >      >>      19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
> >      >>      18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
> >      >>      19635452), v52368043 = c(17055707, 16701281, 16786260,
> >     16756166,
> >      >>      16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
> >      >>      16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
> >      >>      18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
> >      >>      19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
> >      >>      18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
> >      >>      19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
> >      >>      19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
> >      >>      19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
> >      >>      20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
> >      >>      20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
> >      >>      21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
> >      >>      20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
> >      >>      22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
> >      >>      22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
> >      >>      22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
> >      >>      21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
> >      >>      20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
> >      >>      22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
> >      >>      22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
> >      >>      22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
> >      >>      23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
> >      >>      23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
> >      >>      23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
> >      >>      24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
> >      >>      23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
> >      >>      24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
> >      >>      25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
> >      >>      25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
> >      >>      27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
> >      >>      28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
> >      >>      28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
> >      >>      29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
> >      >>      31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
> >      >>      32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
> >      >>      31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
> >      >>      32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
> >      >>      32796030, 32840886, 33870331), v54027371 = c(5006719,
> 5067172,
> >      >>      5060865, 5062576, 5083254, 5072377, 5031234, 5052979,
> 5027204,
> >      >>      5043632, 5035454, 5044842, 5063238, 5093024, 5091640,
> 5102054,
> >      >>      5133352, 5142226, 5165655, 5203037, 5186307, 5174704,
> 5194163,
> >      >>      5190310, 5232432, 5210572, 5234726, 5235080, 5254050,
> 5245134,
> >      >>      5245175, 5249094, 5235952, 5262268, 5263595, 5253813,
> 5274263,
> >      >>      5265423, 5299891, 5327379, 5316191, 5331555, 5346574,
> 5307140,
> >      >>      5337742, 5347287, 5348381, 5377210, 5374212, 5383470,
> 5366697,
> >      >>      5392882, 5388985, 5416367, 5417477, 5433010, 5448853,
> 5441429,
> >      >>      5458425, 5471520, 5489243, 5495727, 5511121, 5512216,
> 5526438,
> >      >>      5537303, 5522426, 5518461, 5536277, 5501749, 5564018,
> 5570599,
> >      >>      5584461, 5593844, 5590604, 5602700, 5608632, 5616521,
> 5608951,
> >      >>      5623657, 5616005, 5645595, 5647305, 5647451, 5693895,
> 5691488,
> >      >>      5700220, 5707445, 5725799, 5728509, 5717031, 5723853,
> 5711995,
> >      >>      5719339, 5681740, 5663311, 5643435, 5611268, 5590716,
> 5570704,
> >      >>      5557739, 5536962, 5560436, 5529977, 5551949, 5574728,
> 5563493,
> >      >>      5575590, 5577965, 5587020, 5596086, 5612563, 5609016,
> 5626466,
> >      >>      5654424, 5633372, 5661574, 5667386, 5669274, 5689694,
> 5681104,
> >      >>      5701730, 5706973, 5707289, 5692449, 5724435, 5730464,
> 5731650,
> >      >>      5750310, 5739110, 5745413, 5742657, 5748606, 5744911,
> 5767140,
> >      >>      5785313, 5808618, 5816135, 5806957, 5825860, 5814678,
> 5800046,
> >      >>      5822757, 5809772, 5808239, 5818814, 5833898, 5829771,
> 5825801,
> >      >>      5833676, 5847351, 5886288, 5872335, 5876134, 5878844,
> 5883709,
> >      >>      5891947, 5885232, 5889681, 5891564, 5921837, 5931270,
> 5952834,
> >      >>      5959543, 5957751, 5970395, 5962589, 5958983, 5996099,
> 5997162,
> >      >>      5997791, 6025616, 6046802, 6043966, 6072665, 6063075,
> 6065666,
> >      >>      6115610, 6091893, 6118988, 6119637, 6126261, 6136886,
> 6169330,
> >      >>      6172147, 6198848, 6202387, 6197097, 6228521, 6219420,
> 6240999,
> >      >>      6266000, 6254684, 6277414, 6289899, 6290412, 6302735,
> 6343442,
> >      >>      6341087, 6359345, 6383177, 6364995, 6373585, 6394318,
> 6396556,
> >      >>      6406482, 6430135, 6428086, 6458862, 6470913, 6480563,
> 6509009,
> >      >>      6514678, 6545545, 6547838, 6538390, 6566127, 6566755,
> 6578311,
> >      >>      6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
> >      >>      692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69,
> 699.31,
> >      >>      697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05,
> 708.58,
> >      >>      709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96,
> 716.06,
> >      >>      724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
> >      >>      736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98,
> 752.13,
> >      >>      745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22,
> 763.57,
> >      >>      770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65,
> 789.71,
> >      >>      784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76,
> 783.53,
> >      >>      781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6,
> 806.36,
> >      >>      802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27,
> 821.08,
> >      >>      823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26,
> 838.09,
> >      >>      840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65,
> 840.76,
> >      >>      843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04,
> 853.68,
> >      >>      852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13,
> 873.52,
> >      >>      875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37,
> 897.82,
> >      >>      894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08,
> 888.93,
> >      >>      901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11,
> 902.56,
> >      >>      909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03,
> 911.93,
> >      >>      913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35,
> 920.2,
> >      >>      924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
> >      >>      938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82,
> 950.06,
> >      >>      956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15,
> 966.48,
> >      >>      968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64,
> 974.42,
> >      >>      978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
> >      >>      982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24,
> 1002.93,
> >      >>      1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01,
> 1012.58,
> >      >>      1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26,
> 1034.06,
> >      >>      1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
> >      >>      1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
> >      >>      31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
> >      >>      31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
> >      >>      31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
> >      >>      31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
> >      >>      31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
> >      >>      31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
> >      >>      31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1,
> 30.8,
> >      >>      30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
> >      >>      30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3,
> 30.4,
> >      >>      30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
> >      >>      30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
> >      >>      30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
> >      >>      30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
> >      >>      30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
> >      >>      30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
> >      >>      30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
> >      >>      30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
> >      >>      30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
> >      >>      30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
> >      >>      30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4,
> 30.4,
> >      >>      30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
> >      >>      29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
> >      >>      22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406,
> 20917,
> >      >>      21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253,
> 22542,
> >      >>      23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269,
> 23088,
> >      >>      21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371,
> 23691,
> >      >>      25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459,
> 20867,
> >      >>      21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359,
> 21206,
> >      >>      23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132,
> 22893,
> >      >>      22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387,
> 25378,
> >      >>      24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948,
> 23937,
> >      >>      27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165,
> 27903,
> >      >>      30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645,
> 28820,
> >      >>      26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664,
> 29056,
> >      >>      28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457,
> 25821,
> >      >>      29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086,
> 31843,
> >      >>      33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727,
> 34795,
> >      >>      33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568,
> 36096,
> >      >>      35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920,
> 33633,
> >      >>      33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653,
> 35486,
> >      >>      35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129,
> 37903,
> >      >>      37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617,
> 38777,
> >      >>      38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330,
> 39600,
> >      >>      40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405,
> 41141,
> >      >>      41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908,
> 44375,
> >      >>      43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686,
> 45193,
> >      >>      44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
> >      >>      85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
> >      >>      92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
> >      >>      100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
> >      >>      96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9,
> 95.7,
> >      >>      94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
> >      >>      93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
> >      >>      88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
> >      >>      101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
> >      >>      104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
> >      >>      112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
> >      >>      115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6,
> 115.4,
> >      >>      114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8,
> 110.8,
> >      >>      113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4,
> 124.2,
> >      >>      129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3,
> 126.3,
> >      >>      121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
> >      >>      142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
> >      >>      117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
> >      >>      132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2,
> 126.7,
> >      >>      128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
> >      >>      130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
> >      >>      131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
> >      >>      135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
> >      >>      136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
> >      >>      135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
> >      >>      100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
> >      >>      98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
> >      >>      89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
> >      >>      86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
> >      >>      96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
> >      >>      97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
> >      >>      97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
> >      >>      97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
> >      >>      102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
> >      >>      103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107,
> 107.5,
> >      >>      106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7,
> 102.7,
> >      >>      104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
> >      >>      104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
> >      >>      119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2,
> 117.2,
> >      >>      115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3,
> 117.4,
> >      >>      120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
> >      >>      123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
> >      >>      140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
> >      >>      136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7,
> 128.4,
> >      >>      130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
> >      >>      118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4,
> 132.6,
> >      >>      128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
> >      >>      120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5,
> 121.1,
> >      >>      122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837,
> >     23571783,
> >      >>      24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
> >      >>      23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
> >      >>      24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
> >      >>      25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
> >      >>      25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
> >      >>      24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
> >      >>      25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
> >      >>      25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
> >      >>      24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
> >      >>      25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
> >      >>      24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
> >      >>      24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
> >      >>      25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
> >      >>      23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
> >      >>      22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
> >      >>      22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
> >      >>      17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
> >      >>      19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
> >      >>      19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
> >      >>      20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
> >      >>      20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
> >      >>      21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
> >      >>      22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
> >      >>      22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
> >      >>      22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
> >      >>      22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
> >      >>      23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
> >      >>      23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
> >      >>      23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
> >      >>      24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
> >      >>      24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
> >      >>      25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
> >      >>      25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
> >      >>      24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
> >      >>      26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
> >      >>      26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
> >      >>      26637112, 26198157, 26778716, 26846047, 26409309)),
> >     row.names =
> >      >> c(NA,
> >      >> -223L), class = c("tbl_df", "tbl", "data.frame"))
> >      >>
> >      >> dput() output for dts:
> >      >>
> >      >>
> >      >> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
> >      >>      X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 =
> >     c(NA_real_,
> >      >>      NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
> >      >>      NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
> >      >>      NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
> >      >>      X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
> >      >>      120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_,
> >     NA_real_,
> >      >>      NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
> >      >>      NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >      >>      ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
> >      >>      NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
> >      >>      NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >      >>      ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 =
> >      >> c(NA_real_,
> >      >>      NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
> >      >>      NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
> >      >>      NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >      >>      ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 =
> >      >> c(NA_real_,
> >      >>      NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
> >      >>      NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
> >      >>      NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >      >>      ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 =
> >      >> c(NA_real_,
> >      >>      NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
> >      >>      NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
> >      >>      NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_,
> NA_real_
> >      >>      ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 =
> >      >> c(NA_real_,
> >      >>      NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
> >      >>      NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
> >      >>      NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >      >>      ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 =
> c(NA,
> >      >>      NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
> >      >>      NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L),
> >     class =
> >      >> "data.frame")
> >      >>
> >      >> dput() output for testcase1:
> >      >>
> >      >> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
> >      >> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
> >      >> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
> >      >> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
> >      >> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
> >      >> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
> >      >> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9,
> 101.2,
> >      >> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
> 104.3,
> >      >> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
> >      >> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
> >      >> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
> >      >> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
> >      >> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
> >      >> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
> >      >> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
> >      >> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
> >      >> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
> >      >> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
> >      >> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
> >      >> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
> >      >> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
> >      >> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
> >      >> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
> >      >> 135.1, NA, NA)
> >      >>
> >      >> ______________________________________________
> >      >> R-help at r-project.org <mailto:R-help at r-project.org> mailing list
> >     -- To UNSUBSCRIBE and more, see
> >      >> https://stat.ethz.ch/mailman/listinfo/r-help
> >      >> PLEASE do read the posting guide
> >      >> http://www.R-project.org/posting-guide.html
> >      >> and provide commented, minimal, self-contained, reproducible
> code.
> >
> >     ______________________________________________
> >     R-help at r-project.org <mailto:R-help at r-project.org> mailing list --
> >     To UNSUBSCRIBE and more, see
> >     https://stat.ethz.ch/mailman/listinfo/r-help
> >     PLEASE do read the posting guide
> >     http://www.R-project.org/posting-guide.html
> >     and provide commented, minimal, self-contained, reproducible code.
> >
>

	[[alternative HTML version deleted]]


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Wed Oct 30 22:52:52 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 30 Oct 2019 16:52:52 -0500
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <4f6d97d3-b3b6-47a8-15c7-4159d09bead8@dewey.myzen.co.uk>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
 <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>
 <CAF9-5jNmXkq8hpvi68O6uhKt_Z0NsKg3FBeAWB1xkHkkd1nffQ@mail.gmail.com>
 <4f6d97d3-b3b6-47a8-15c7-4159d09bead8@dewey.myzen.co.uk>
Message-ID: <CAF9-5jPj0zqjLhCw1vOVT+GbJQVXU60azb-8AHd5oz_wxjBN7w@mail.gmail.com>

Hi Michael,

this still doesn't work, by data frame has a few less columns now, but
the principle is still the same:

> head(d)
    chr    pos         gene_id                     LCL
Retina       wl           wr
1: chr1 775930 ENSG00000237094 0.3559520 9.72251e-05 31.62278 21.2838
2: chr1 815963 ENSG00000237094 0.2648080 3.85837e-06 31.62278 21.2838
3: chr1 816376 ENSG00000237094 0.3313120 3.85824e-06 31.62278 21.2838
4: chr1 817186 ENSG00000237094 0.0912854 3.75134e-06 31.62278 21.2838
5: chr1 817341 ENSG00000237094 0.1020520 3.75134e-06 31.62278 21.2838
6: chr1 817514 ENSG00000237094 0.0831412 3.82866e-06 31.62278 21.2838

so solution for the first row should be:
> sumz(c(0.3559520,9.72251e-05), weights = c(31.62278,21.2838), na.action = na.fail)
sumz =  2.386896 p =  0.008495647

when I run what you proposed in the last email:

helper <- function(x) {
  p <- sumz(as.numeric(x[4:5]), weights = as.numeric(x[6:7]))$p
  p
}

d$META <- apply(d, MARGIN = 1, helper)

I am getting:

Error in sumz(as.numeric(x[4:5]), weights = as.numeric(x[6:7])) :
  Must have at least two valid p values

Please advise,
Ana

On Wed, Oct 30, 2019 at 5:02 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
>
> Dear Ana
>
> Yes, when apply coerces q to a matrix it does so as a character matrix
> because of the values in the first column. So you need to wrap the
> references to x in helper in as.numeric() tat is to day like
> as.numeric(x[2:4]) and similarly for the other one. Sorry about that, I
> should have thought of it before.
>
> When I next update metap I will try to get it to degrade more gracefully
> when it finds an error.
>
> Michael
>
> On 28/10/2019 19:06, Ana Marija wrote:
> > Hi Michael,
> >
> > I tried what you proposed with my data frame q:
> >
> >> head(q)
> >             ID                P             G              E
> >   wb          wg           we
> > 1:  rs1029830 0.0979931 0.0054060 0.39160 580.6436 40.6325 35.39774
> > 2:  rs1029832 0.1501820 0.0028140 0.39320 580.6436 40.6325 35.39774
> > 3: rs11078374 0.1701250 0.0009805 0.49730 580.6436 40.6325 35.39774
> > 4:  rs1124961 0.1710150 0.7252000 0.05737 580.6436 40.6325 35.39774
> > 5:  rs1135237 0.1493650 0.6851000 0.06354 580.6436 40.6325 35.39774
> > 6: rs11867934 0.0757972 0.0006140 0.00327 580.6436 40.6325 35.39774
> >
> > so the solution of the first row would be this:
> >> sumz(c(0.0979931,0.0054060,0.39160), weights = c(580.6436,40.6325,35.39774), na.action = na.fail)
> > sumz =  1.481833 p =  0.06919239
> >
> > I tried applying the function you wrote:
> > helper <- function(x) {
> >    p <- sumz(x[2:4], weights = x[5:7])$p
> >    p
> > }
> >
> > With:
> >
> > q$META <- apply(q, MARGIN = 1, helper)
> >
> > # I want to make a new column in q named META with results
> > but I got this error:
> >   Error in sumz(x[2:4], weights = x[5:7]) :
> >    Must have at least two valid p values
> >
> > Please advise,
> > Ana
> >
> > On Sun, Oct 27, 2019 at 9:49 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> >>
> >> Dear Ana
> >>
> >> There must be several ways of doing this but see below for an idea with
> >> comments in-line.
> >>
> >> On 26/10/2019 00:31, Ana Marija wrote:
> >>> Hello,
> >>>
> >>> I would like to use this package metap
> >>> to calculate multiple o values
> >>>
> >>> I have my data frame with 3 p values
> >>>> head(tt)
> >>>             RS            G           E          B
> >>> 1: rs2089177   0.9986   0.7153   0.604716
> >>> 2: rs4360974   0.9738   0.7838   0.430228
> >>> 3: rs6502526   0.9744   0.7839   0.429160
> >>> 4: rs8069906   0.7184   0.4918   0.521452
> >>> 5: rs9905280   0.7205   0.4861   0.465758
> >>> 6: rs4313843   0.9804   0.8522   0.474313
> >>>
> >>> and data frame with corresponding weights for each of the p values
> >>> from the tt data frame
> >>>
> >>>> head(df)
> >>>          wg       we             wb                RS
> >>> 1 40.6325 35.39774 580.6436 rs2089177
> >>> 2 40.6325 35.39774 580.6436 rs4360974
> >>> 3 40.6325 35.39774 580.6436 rs6502526
> >>> 4 40.6325 35.39774 580.6436 rs8069906
> >>> 5 40.6325 35.39774 580.6436 rs9905280
> >>> 6 40.6325 35.39774 580.6436 rs4313843
> >>>
> >>> RS column is the same in df and tt
> >>>
> >>
> >> So you can create a new data-frame with merge()
> >>
> >> newdata <- merge(tt, df)
> >>
> >> which will use RS as the key to merge them on.
> >>
> >> The write a function of one argument, a seven element vector, which
> >> picks out the p-values and the weights and feeds them to sumz().
> >> Something like
> >>
> >> helper <- function(x) {
> >>    p <- sumz(x[2:4], weights = x[5:7])$p
> >>    p
> >> }
> >> Note you need to check that 2:4 and 5:7 are actually where they are in
> >> the row of newdat.
> >>
> >> Then use apply() to apply that to the rows of newdat.
> >>
> >> I have not tested any of this but the general idea should be OK even if
> >> the details are wrong.
> >>
> >> Michael
> >>
> >>
> >>> How to use this sunz() function to create a new data frame which would
> >>> look the same as tt only it would have additional column, say named
> >>> "META" which has calculated meta p values for each row
> >>>
> >>> This i s example of how much would be p value in the first row:
> >>>
> >>>> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
> >>> p =  0.6940048
> >>>
> >>> Thanks
> >>> Ana
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >>>
> >>
> >> --
> >> Michael
> >> http://www.dewey.myzen.co.uk/home.html
> >
>
> --
> Michael
> http://www.dewey.myzen.co.uk/home.html


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Wed Oct 30 23:35:43 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Wed, 30 Oct 2019 17:35:43 -0500
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <CAF9-5jPj0zqjLhCw1vOVT+GbJQVXU60azb-8AHd5oz_wxjBN7w@mail.gmail.com>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
 <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>
 <CAF9-5jNmXkq8hpvi68O6uhKt_Z0NsKg3FBeAWB1xkHkkd1nffQ@mail.gmail.com>
 <4f6d97d3-b3b6-47a8-15c7-4159d09bead8@dewey.myzen.co.uk>
 <CAF9-5jPj0zqjLhCw1vOVT+GbJQVXU60azb-8AHd5oz_wxjBN7w@mail.gmail.com>
Message-ID: <CAF9-5jNnhM=6mUu1TB41=yoBkVzZ_qdigi+UsjnnzBJ_KMwPGw@mail.gmail.com>

I also tried to do it this way:

d$META <- sapply(seq_len(nrow(d)), function(rn) {
  unlist(sumz(as.matrix(d[,.(LCL,Retina)])[rn,], weights =
as.vector(d[,.(wl,wr)])[rn,],
              na.action=na.fail)["p"])
})

but again I am getting error:
Error in sumz(as.matrix(d[, .(LCL, Retina)])[rn, ], weights = as.vector(d[,  :
  Must have at least two valid p values

for this reference these are details about my data frame:
> head(d)
    chr    pos         gene_id                     LCL          Retina
           wl           wr
1: chr1 775930 ENSG00000237094 0.3559520 9.72251e-05 31.62278 21.2838
2: chr1 815963 ENSG00000237094 0.2648080 3.85837e-06 31.62278 21.2838
3: chr1 816376 ENSG00000237094 0.3313120 3.85824e-06 31.62278 21.2838
4: chr1 817186 ENSG00000237094 0.0912854 3.75134e-06 31.62278 21.2838
5: chr1 817341 ENSG00000237094 0.1020520 3.75134e-06 31.62278 21.2838
6: chr1 817514 ENSG00000237094 0.0831412 3.82866e-06 31.62278 21.2838
> sapply(d,class)
        chr         pos     gene_id         LCL      Retina          wl
"character" "character" "character"   "numeric"   "numeric"   "numeric"
         wr
  "numeric"
> sum(is.na(d$LCL))
[1] 0
> sum(is.na(d$Retina))
[1] 0
> sum(is.na(d$wl))
[1] 0
> sum(is.na(d$wr))
[1] 0
> dim(d)
[1] 1668837       7

On Wed, Oct 30, 2019 at 4:52 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> Hi Michael,
>
> this still doesn't work, by data frame has a few less columns now, but
> the principle is still the same:
>
> > head(d)
>     chr    pos         gene_id                     LCL
> Retina       wl           wr
> 1: chr1 775930 ENSG00000237094 0.3559520 9.72251e-05 31.62278 21.2838
> 2: chr1 815963 ENSG00000237094 0.2648080 3.85837e-06 31.62278 21.2838
> 3: chr1 816376 ENSG00000237094 0.3313120 3.85824e-06 31.62278 21.2838
> 4: chr1 817186 ENSG00000237094 0.0912854 3.75134e-06 31.62278 21.2838
> 5: chr1 817341 ENSG00000237094 0.1020520 3.75134e-06 31.62278 21.2838
> 6: chr1 817514 ENSG00000237094 0.0831412 3.82866e-06 31.62278 21.2838
>
> so solution for the first row should be:
> > sumz(c(0.3559520,9.72251e-05), weights = c(31.62278,21.2838), na.action = na.fail)
> sumz =  2.386896 p =  0.008495647
>
> when I run what you proposed in the last email:
>
> helper <- function(x) {
>   p <- sumz(as.numeric(x[4:5]), weights = as.numeric(x[6:7]))$p
>   p
> }
>
> d$META <- apply(d, MARGIN = 1, helper)
>
> I am getting:
>
> Error in sumz(as.numeric(x[4:5]), weights = as.numeric(x[6:7])) :
>   Must have at least two valid p values
>
> Please advise,
> Ana
>
> On Wed, Oct 30, 2019 at 5:02 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> >
> > Dear Ana
> >
> > Yes, when apply coerces q to a matrix it does so as a character matrix
> > because of the values in the first column. So you need to wrap the
> > references to x in helper in as.numeric() tat is to day like
> > as.numeric(x[2:4]) and similarly for the other one. Sorry about that, I
> > should have thought of it before.
> >
> > When I next update metap I will try to get it to degrade more gracefully
> > when it finds an error.
> >
> > Michael
> >
> > On 28/10/2019 19:06, Ana Marija wrote:
> > > Hi Michael,
> > >
> > > I tried what you proposed with my data frame q:
> > >
> > >> head(q)
> > >             ID                P             G              E
> > >   wb          wg           we
> > > 1:  rs1029830 0.0979931 0.0054060 0.39160 580.6436 40.6325 35.39774
> > > 2:  rs1029832 0.1501820 0.0028140 0.39320 580.6436 40.6325 35.39774
> > > 3: rs11078374 0.1701250 0.0009805 0.49730 580.6436 40.6325 35.39774
> > > 4:  rs1124961 0.1710150 0.7252000 0.05737 580.6436 40.6325 35.39774
> > > 5:  rs1135237 0.1493650 0.6851000 0.06354 580.6436 40.6325 35.39774
> > > 6: rs11867934 0.0757972 0.0006140 0.00327 580.6436 40.6325 35.39774
> > >
> > > so the solution of the first row would be this:
> > >> sumz(c(0.0979931,0.0054060,0.39160), weights = c(580.6436,40.6325,35.39774), na.action = na.fail)
> > > sumz =  1.481833 p =  0.06919239
> > >
> > > I tried applying the function you wrote:
> > > helper <- function(x) {
> > >    p <- sumz(x[2:4], weights = x[5:7])$p
> > >    p
> > > }
> > >
> > > With:
> > >
> > > q$META <- apply(q, MARGIN = 1, helper)
> > >
> > > # I want to make a new column in q named META with results
> > > but I got this error:
> > >   Error in sumz(x[2:4], weights = x[5:7]) :
> > >    Must have at least two valid p values
> > >
> > > Please advise,
> > > Ana
> > >
> > > On Sun, Oct 27, 2019 at 9:49 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> > >>
> > >> Dear Ana
> > >>
> > >> There must be several ways of doing this but see below for an idea with
> > >> comments in-line.
> > >>
> > >> On 26/10/2019 00:31, Ana Marija wrote:
> > >>> Hello,
> > >>>
> > >>> I would like to use this package metap
> > >>> to calculate multiple o values
> > >>>
> > >>> I have my data frame with 3 p values
> > >>>> head(tt)
> > >>>             RS            G           E          B
> > >>> 1: rs2089177   0.9986   0.7153   0.604716
> > >>> 2: rs4360974   0.9738   0.7838   0.430228
> > >>> 3: rs6502526   0.9744   0.7839   0.429160
> > >>> 4: rs8069906   0.7184   0.4918   0.521452
> > >>> 5: rs9905280   0.7205   0.4861   0.465758
> > >>> 6: rs4313843   0.9804   0.8522   0.474313
> > >>>
> > >>> and data frame with corresponding weights for each of the p values
> > >>> from the tt data frame
> > >>>
> > >>>> head(df)
> > >>>          wg       we             wb                RS
> > >>> 1 40.6325 35.39774 580.6436 rs2089177
> > >>> 2 40.6325 35.39774 580.6436 rs4360974
> > >>> 3 40.6325 35.39774 580.6436 rs6502526
> > >>> 4 40.6325 35.39774 580.6436 rs8069906
> > >>> 5 40.6325 35.39774 580.6436 rs9905280
> > >>> 6 40.6325 35.39774 580.6436 rs4313843
> > >>>
> > >>> RS column is the same in df and tt
> > >>>
> > >>
> > >> So you can create a new data-frame with merge()
> > >>
> > >> newdata <- merge(tt, df)
> > >>
> > >> which will use RS as the key to merge them on.
> > >>
> > >> The write a function of one argument, a seven element vector, which
> > >> picks out the p-values and the weights and feeds them to sumz().
> > >> Something like
> > >>
> > >> helper <- function(x) {
> > >>    p <- sumz(x[2:4], weights = x[5:7])$p
> > >>    p
> > >> }
> > >> Note you need to check that 2:4 and 5:7 are actually where they are in
> > >> the row of newdat.
> > >>
> > >> Then use apply() to apply that to the rows of newdat.
> > >>
> > >> I have not tested any of this but the general idea should be OK even if
> > >> the details are wrong.
> > >>
> > >> Michael
> > >>
> > >>
> > >>> How to use this sunz() function to create a new data frame which would
> > >>> look the same as tt only it would have additional column, say named
> > >>> "META" which has calculated meta p values for each row
> > >>>
> > >>> This i s example of how much would be p value in the first row:
> > >>>
> > >>>> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
> > >>> p =  0.6940048
> > >>>
> > >>> Thanks
> > >>> Ana
> > >>>
> > >>> ______________________________________________
> > >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > >>> https://stat.ethz.ch/mailman/listinfo/r-help
> > >>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > >>> and provide commented, minimal, self-contained, reproducible code.
> > >>>
> > >>
> > >> --
> > >> Michael
> > >> http://www.dewey.myzen.co.uk/home.html
> > >
> >
> > --
> > Michael
> > http://www.dewey.myzen.co.uk/home.html


From phii m@iii@g oii phiiipsmith@c@  Thu Oct 31 01:12:59 2019
From: phii m@iii@g oii phiiipsmith@c@ (phii m@iii@g oii phiiipsmith@c@)
Date: Wed, 30 Oct 2019 20:12:59 -0400
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
 <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
 <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>
 <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>
Message-ID: <cf6fddcc20027206a0afca921ccb5059@philipsmith.ca>

Thanks for your suggestions. I have tried them all, with no success.

William's looked quite promising. I put in the
stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)
statement and it detected the problem:
length(x) > dt2 is not TRUE
Then I changed all the references to vseries to the [[j]]
notation:
vseries[,j] became vseries[[j]] and
vseries$REF_DATE became vseries[[1]]
But I still got the same error statement from stopifnot:
length(x) > dt2 is not TRUE

I am quite at a loss on this one. Any other suggestions? Maybe I should 
just take a completely different approach of some kind?

Philip

On 2019-10-30 12:58, William Dunlap wrote:
> Your EXTEND() function appears to expect that its 'x' argument will be
> a numeric vector, but you pass it a one-column tibble.  Hence
> length(x) is 1 and things go downhill from there.
> 
> I like to start such functions with a long stopifnot() statement that
> does a quick check of inputs.  E.g.,
> 
> stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)
> 
> Use vseries1[,j,drop=TRUE] or vseries1[[j]] to extract a single column
> from the tibble 'vseries1'.  vseries1[,1] will return a one-column
> tibble.
> 
> Bill Dunlap
> TIBCO Software
> wdunlap tibco.com [2]
> 
> On Wed, Oct 30, 2019 at 5:25 AM <phil at philipsmith.ca> wrote:
> 
>> Thanks for the suggestion Rui, but no, this will not remove the
>> error.
>> In fact, if I drop the second term entirely as in:
>> 
>> if ( (!is.na [1](dts[1,j-1])) ) {
>> 
>> then I still get the error. I have been unable to find a
>> work-around.
>> 
>> Philip
>> 
>> On 2019-10-30 05:17, Rui Barradas wrote:
>>> Hello,
>>> 
>>> Is this as simple as
>>> 
>>> 
>>> if ( (!is.na [1](dts[1,j-1])) & (!is.na [1](dts[3,j-1])) ) {
>>> 
>>> 
>>> (change the logical operator from '|' to '&')?
>>> The result vseries1 still has some NA's at the end of some of its
>>> series.
>>> 
>>> Hope this helps,
>>> 
>>> Rui Barradas
>>> 
>>> ?s 02:05 de 30/10/19, phil at philipsmith.ca escreveu:
>>>> I am having a problem that generates the error message: " Error
>> in
>>>> firstnonmiss:lastnonmiss : argument of length 0 ". There is an
>> article
>>>> on this in stackoverflow, but I have been unable to understand it
>> well
>>>> enough to solve my problem. Essentially, I have a data frame with
>> 41
>>>> indicator series and some of the series have missing values (NAs)
>> at
>>>> the beginning and/or the end. I want to fill in the missing
>> values
>>>> using ARIMA models, via the forecast() function. It works when I
>> use
>>>> my EXTEND function on a single series, but it fails when I try to
>> loop
>>>> through all 41 series. Here is a reproducible example. Thanks for
>> any
>>>> advice.
>>>> 
>>>> # Reproducible example
>>>> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
>>>> # See also stackoverflow:
>>>> 
>> 
> https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement
>> 
>>>> library(forecast)
>>>> library(lubridate)
>>>> vseries <- dget("vseries.txt") # data frame containing REF_DATE
>> and 41
>>>> "indicator" vectors
>>>> dts <- dget("dts.txt") # data frame recording where NAs are in
>> vseries
>>>> - they will be replaced
>>>> testcase1 <- dget("testcase1.txt") # a vector for use in testing
>>>> # Function to fill in missing values (NAs) using ARIMA forecasts
>> and
>>>> backcasts
>>>> EXTEND <-
>> function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
>>>> if (!is.na [1](dt1)) {
>>>> bfct = dt2-dt1+1 # number of months to backcast
>>>> revx <- ts(rev(x),frequency=12)
>>>> revx <- revx[1:(length(revx)-dt2)]
>>>> fc <- forecast(auto.arima(revx),bfct)
>>>> revx1 <- c(revx,fc$mean) # extend with forecasts (in
>> fc$mean)
>>>> m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
>>>> y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
>>>> x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
>>>> }
>>>> if (!is.na [1](dt3)) {
>>>> ffct <- dt4-dt3+1 # number of months to forecast
>>>> x <- x[1:(dt3-1)]
>>>> fc <- forecast(auto.arima(x),ffct)
>>>> x <- c(x,fc$mean)
>>>> }
>>>> return(x)
>>>> }
>>>> # Test EXTEND function with a single vector - apparently it works
>>>> (testcase1_extended <-
>> EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
>>>> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
>>>> View(cbind(testcase1,testcase1_extended))
>>>> # Now use EXTEND to fill in the missing values in all 41
>> indicators in
>>>> vseries
>>>> # Data frame dts has NAs where no extension is required, integer
>>>> values showing where to start and
>>>> # where to end when extensions are required. Store extended
>> series in
>>>> vseries1.
>>>> vseries1 <- vseries
>>>> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1
>> in
>>>> vseries is REF_DATE
>>>> if ( (!is.na [1](dts[1,j-1])) | (!is.na [1](dts[3,j-1])) ) {
>>>> vseries1[,j] <-
>>>> 
>> 
> EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1],
>> 
>>>> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
>>>> }
>>>> }
>>>> View(vseries)
>>>> View(vseries1)
>>>> 
>>>> dput() output for vseries:
>>>> 
>>>> structure(list(REF_DATE = c("2001-01-01", "2001-02-01",
>> "2001-03-01",
>>>> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01",
>> "2001-08-01",
>>>> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01",
>> "2002-01-01",
>>>> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01",
>> "2002-06-01",
>>>> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01",
>> "2002-11-01",
>>>> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01",
>> "2003-04-01",
>>>> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01",
>> "2003-09-01",
>>>> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01",
>> "2004-02-01",
>>>> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01",
>> "2004-07-01",
>>>> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01",
>> "2004-12-01",
>>>> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01",
>> "2005-05-01",
>>>> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01",
>> "2005-10-01",
>>>> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01",
>> "2006-03-01",
>>>> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01",
>> "2006-08-01",
>>>> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01",
>> "2007-01-01",
>>>> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01",
>> "2007-06-01",
>>>> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01",
>> "2007-11-01",
>>>> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01",
>> "2008-04-01",
>>>> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01",
>> "2008-09-01",
>>>> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01",
>> "2009-02-01",
>>>> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01",
>> "2009-07-01",
>>>> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01",
>> "2009-12-01",
>>>> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01",
>> "2010-05-01",
>>>> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01",
>> "2010-10-01",
>>>> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01",
>> "2011-03-01",
>>>> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01",
>> "2011-08-01",
>>>> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01",
>> "2012-01-01",
>>>> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01",
>> "2012-06-01",
>>>> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01",
>> "2012-11-01",
>>>> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01",
>> "2013-04-01",
>>>> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01",
>> "2013-09-01",
>>>> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01",
>> "2014-02-01",
>>>> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01",
>> "2014-07-01",
>>>> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01",
>> "2014-12-01",
>>>> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01",
>> "2015-05-01",
>>>> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01",
>> "2015-10-01",
>>>> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01",
>> "2016-03-01",
>>>> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01",
>> "2016-08-01",
>>>> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01",
>> "2017-01-01",
>>>> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01",
>> "2017-06-01",
>>>> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01",
>> "2017-11-01",
>>>> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01",
>> "2018-04-01",
>>>> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01",
>> "2018-09-01",
>>>> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01",
>> "2019-02-01",
>>>> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01",
>> "2019-07-01"
>>>> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987,
>> 19671015,
>>>> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227,
>> 15362864,
>>>> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846,
>> 16124593,
>>>> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326,
>> 17559123,
>>>> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801,
>> 17557392,
>>>> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657,
>> 19027956,
>>>> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111,
>> 18665646,
>>>> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368,
>> 20466651,
>>>> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403,
>> 17890774,
>>>> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141,
>> 20060353,
>>>> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846,
>> 23024759,
>>>> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713,
>> 21213020,
>>>> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572,
>> 20881111,
>>>> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926,
>> 18556973,
>>>> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295,
>> 16443231,
>>>> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108,
>> 17853071,
>>>> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783,
>> 21107272,
>>>> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654,
>> 20878866,
>>>> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337,
>> 22337136,
>>>> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288,
>> 23252411,
>>>> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385,
>> 20109262,
>>>> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128,
>> 23130117,
>>>> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882,
>> 25197042,
>>>> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289,
>> 27899355,
>>>> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182,
>> 27040475,
>>>> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129,
>> 27108195,
>>>> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186,
>> 25857724,
>>>> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772,
>> 26468833,
>>>> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265,
>> 28179157,
>>>> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939,
>> 29778379,
>>>> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824,
>> 29820781,
>>>> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423,
>> 30947662,
>>>> 29590180), v1001816392 = c(14810380, 14200859, 16756119,
>> 15217622,
>>>> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643,
>> 15666826,
>>>> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785,
>> 15250640,
>>>> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416,
>> 13984446,
>>>> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684,
>> 12738958,
>>>> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311,
>> 16669218,
>>>> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684,
>> 15377076,
>>>> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530,
>> 15633935,
>>>> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696,
>> 14282888,
>>>> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547,
>> 11808763,
>>>> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585,
>> 14739285,
>>>> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113,
>> 13908728,
>>>> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120,
>> 14157825,
>>>> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313,
>> 13084751,
>>>> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990,
>> 9888218,
>>>> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361,
>> 10292744,
>>>> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995,
>> 12464327,
>>>> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365,
>> 14066907,
>>>> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540,
>> 13928150,
>>>> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174,
>> 14259088,
>>>> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428,
>> 12348507,
>>>> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402,
>> 12114754,
>>>> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810,
>> 13122736,
>>>> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121,
>> 16407589,
>>>> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925,
>> 15389386,
>>>> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529,
>> 17312508,
>>>> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636,
>> 17043771,
>>>> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251,
>> 16292556,
>>>> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082,
>> 16254963,
>>>> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366,
>> 17819011,
>>>> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853,
>> 18388536,
>>>> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596,
>> 19056997,
>>>> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
>>>> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
>>>> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
>>>> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
>>>> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
>>>> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
>>>> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
>>>> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
>>>> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
>>>> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
>>>> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
>>>> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
>>>> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
>>>> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
>>>> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
>>>> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
>>>> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
>>>> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
>>>> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
>>>> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
>>>> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
>>>> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
>>>> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
>>>> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
>>>> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
>>>> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
>>>> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
>>>> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
>>>> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
>>>> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
>>>> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
>>>> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
>>>> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
>>>> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
>>>> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
>>>> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
>>>> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
>>>> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
>>>> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
>>>> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
>>>> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
>>>> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
>>>> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
>>>> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
>>>> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
>>>> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
>>>> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
>>>> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
>>>> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
>>>> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
>>>> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
>>>> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
>>>> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
>>>> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
>>>> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
>>>> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
>>>> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
>>>> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
>>>> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
>>>> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
>>>> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
>>>> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
>>>> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
>>>> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
>>>> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
>>>> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077,
>> 15407812,
>>>> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658,
>> 14415174,
>>>> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080,
>> 15044874,
>>>> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316,
>> 11919494,
>>>> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326,
>> 10377252,
>>>> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102,
>> 12992845,
>>>> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588,
>> 13924365,
>>>> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754,
>> 13550102,
>>>> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153,
>> 14102556,
>>>> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033,
>> 13670648,
>>>> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714,
>> 12847367,
>>>> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377,
>> 12244381,
>>>> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046,
>> 11770050,
>>>> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217,
>> 12097708,
>>>> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
>>>> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
>>>> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
>>>> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
>>>> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267,
>> 10621244,
>>>> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394,
>> 10523656,
>>>> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800,
>> 11353041,
>>>> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210,
>> 11132326,
>>>> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218,
>> 10184002,
>>>> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262,
>> 11590206,
>>>> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487,
>> 13436617,
>>>> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727,
>> 14243928,
>>>> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307,
>> 13826213,
>>>> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693,
>> 12754175,
>>>> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383,
>> 10931400,
>>>> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609,
>> 12366614,
>>>> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534,
>> 12786433,
>>>> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828,
>> 13274018,
>>>> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
>>>> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103,
>> 12173082,
>>>> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495,
>> 14636326,
>>>> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966,
>> 13877119,
>>>> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189,
>> 13126548,
>>>> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027,
>> 10695234,
>>>> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447,
>> 12927490,
>>>> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608,
>> 13925071,
>>>> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771,
>> 13135370,
>>>> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856,
>> 13492799,
>>>> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430,
>> 12127888,
>>>> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185,
>> 10548301,
>>>> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227,
>> 11593154,
>>>> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363,
>> 12622830,
>>>> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198,
>> 10608854,
>>>> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384,
>> 10612403,
>>>> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765,
>> 12335679,
>>>> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867,
>> 10507066,
>>>> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839,
>> 12542127,
>>>> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179,
>> 13279826,
>>>> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238,
>> 12657427,
>>>> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612,
>> 13452761,
>>>> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655,
>> 11701079,
>>>> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363,
>> 13341724,
>>>> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368,
>> 13650455,
>>>> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891,
>> 15646361,
>>>> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288,
>> 16527074,
>>>> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797,
>> 15281552,
>>>> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339,
>> 18182041,
>>>> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023,
>> 14000735,
>>>> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995,
>> 16636582,
>>>> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203,
>> 17997663,
>>>> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780,
>> 1264742,
>>>> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
>>>> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
>>>> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
>>>> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
>>>> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
>>>> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
>>>> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
>>>> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
>>>> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
>>>> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
>>>> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
>>>> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
>>>> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
>>>> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
>>>> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232,
>> 1380845,
>>>> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556,
>> 1053348,
>>>> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576,
>> 1029796,
>>>> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473,
>> 836908,
>>>> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875,
>> 1055059,
>>>> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037,
>> 934344,
>>>> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
>>>> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030,
>> 959260,
>>>> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558,
>> 760214,
>>>> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984,
>> 942851,
>>>> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
>>>> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
>>>> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
>>>> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
>>>> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
>>>> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089,
>> 828632,
>>>> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486,
>> 1096690,
>>>> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
>>>> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748,
>> 665961,
>>>> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797,
>> 960006,
>>>> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
>>>> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
>>>> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
>>>> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
>>>> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
>>>> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
>>>> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
>>>> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
>>>> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
>>>> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
>>>> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
>>>> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
>>>> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
>>>> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
>>>> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
>>>> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
>>>> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
>>>> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
>>>> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
>>>> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
>>>> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
>>>> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
>>>> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
>>>> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812,
>> 796604,
>>>> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
>>>> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
>>>> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
>>>> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
>>>> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
>>>> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
>>>> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128,
>> 1084626,
>>>> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
>>>> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
>>>> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913,
>> 1058493,
>>>> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
>>>> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
>>>> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958,
>> 1091468,
>>>> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
>>>> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
>>>> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
>>>> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
>>>> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
>>>> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
>>>> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
>>>> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093,
>> 971856,
>>>> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120,
>> 845165,
>>>> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
>>>> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
>>>> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042,
>> 892834,
>>>> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867,
>> 1094743,
>>>> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
>>>> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970,
>> 72620,
>>>> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
>>>> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
>>>> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
>>>> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
>>>> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
>>>> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
>>>> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
>>>> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
>>>> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
>>>> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
>>>> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
>>>> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
>>>> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
>>>> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
>>>> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
>>>> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
>>>> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
>>>> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
>>>> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
>>>> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
>>>> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
>>>> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
>>>> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
>>>> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
>>>> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
>>>> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899,
>> 20426712,
>>>> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355,
>> 20768807,
>>>> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726,
>> 21596243,
>>>> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072,
>> 21846894,
>>>> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231,
>> 22554639,
>>>> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451,
>> 23206767,
>>>> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818,
>> 23784278,
>>>> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768,
>> 24503153,
>>>> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920,
>> 25035239,
>>>> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231,
>> 25918644,
>>>> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543,
>> 26691191,
>>>> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037,
>> 27180711,
>>>> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474,
>> 27386049,
>>>> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040,
>> 26877705,
>>>> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460,
>> 27155400,
>>>> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341,
>> 27686074,
>>>> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974,
>> 28716843,
>>>> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032,
>> 29165480,
>>>> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041,
>> 29795842,
>>>> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304,
>> 30287625,
>>>> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619,
>> 30970797,
>>>> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046,
>> 31382224,
>>>> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255,
>> 32294373,
>>>> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158,
>> 33033517,
>>>> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255,
>> 33687475,
>>>> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093,
>> 33938988,
>>>> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494,
>> 34350509,
>>>> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315,
>> 35518127,
>>>> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171,
>> 36971724,
>>>> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633,
>> 37827498,
>>>> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308,
>> 38560349,
>>>> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
>>>> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926,
>> 5937.3,
>>>> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6,
>> 6075.3,
>>>> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
>>>> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
>>>> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
>>>> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3,
>> 6379.3,
>>>> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
>>>> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
>>>> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
>>>> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623,
>> 6638.2,
>>>> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5,
>> 6461.2,
>>>> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
>>>> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
>>>> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
>>>> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
>>>> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
>>>> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
>>>> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
>>>> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
>>>> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
>>>> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935,
>> 6930.3,
>>>> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
>>>> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
>>>> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
>>>> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
>>>> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
>>>> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
>>>> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
>>>> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
>>>> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
>>>> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
>>>> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
>>>> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
>>>> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
>>>> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
>>>> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
>>>> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
>>>> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
>>>> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
>>>> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
>>>> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
>>>> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
>>>> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
>>>> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
>>>> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
>>>> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
>>>> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
>>>> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
>>>> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
>>>> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
>>>> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
>>>> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
>>>> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
>>>> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
>>>> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
>>>> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
>>>> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
>>>> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
>>>> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
>>>> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
>>>> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
>>>> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
>>>> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
>>>> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
>>>> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
>>>> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
>>>> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
>>>> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
>>>> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
>>>> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
>>>> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
>>>> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
>>>> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
>>>> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
>>>> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
>>>> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
>>>> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
>>>> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
>>>> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
>>>> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
>>>> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
>>>> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
>>>> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
>>>> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
>>>> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
>>>> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
>>>> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
>>>> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
>>>> v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
>>>> 62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
>>>> 62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
>>>> 63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1,
>> 63.8,
>>>> 63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
>>>> 63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
>>>> 63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
>>>> 62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
>>>> 63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
>>>> 63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
>>>> 60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
>>>> 60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
>>>> 61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
>>>> 61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
>>>> 60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
>>>> 61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
>>>> 61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8,
>> 60.7,
>>>> 60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8,
>> 60.9,
>>>> 60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
>>>> 60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
>>>> 61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
>>>> 60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
>>>> ), v382201 = c(212164, 193583, 215866, 211263, 222871,
>> 215519,
>>>> 219942, 216251, 207703, 212013, 207781, 219596, 222977,
>> 202836,
>>>> 225014, 217040, 223269, 212081, 211644, 208999, 200885,
>> 207899,
>>>> 204091, 216573, 218997, 195583, 215113, 206360, 214884,
>> 208636,
>>>> 214072, 211055, 206974, 211607, 205837, 215020, 216294,
>> 201218,
>>>> 216097, 209029, 216690, 207829, 211911, 212123, 205356,
>> 211083,
>>>> 205076, 212205, 212779, 191520, 213090, 209484, 215975,
>> 205127,
>>>> 207085, 209844, 201884, 206749, 200246, 208719, 211380,
>> 190749,
>>>> 209346, 200994, 207431, 198322, 201983, 200869, 196045,
>> 199493,
>>>> 195149, 205332, 207126, 185698, 207850, 205701, 216965,
>> 209296,
>>>> 215644, 214061, 205121, 209924, 204004, 213241, 217848,
>> 203144,
>>>> 213848, 206368, 212813, 200362, 202502, 202339, 195491,
>> 201314,
>>>> 196093, 206104, 208701, 190879, 213025, 208090, 217292,
>> 210890,
>>>> 216526, 213092, 206553, 209884, 204042, 211314, 212389,
>> 192037,
>>>> 213815, 208826, 216756, 207533, 210091, 212435, 204595,
>> 209379,
>>>> 203827, 210218, 212451, 192470, 214095, 208717, 217913,
>> 212215,
>>>> 217087, 218783, 209940, 214059, 208998, 220829, 223171,
>> 208246,
>>>> 222458, 215499, 221694, 213553, 219458, 221757, 214203,
>> 221003,
>>>> 214380, 221215, 220019, 197689, 218045, 210866, 218954,
>> 209825,
>>>> 212145, 218399, 210138, 215187, 206605, 211504, 212024,
>> 192311,
>>>> 212260, 207136, 215097, 210584, 218528, 220739, 214149,
>> 218748,
>>>> 208968, 216712, 218399, 197318, 223819, 221927, 234903,
>> 228622,
>>>> 233660, 231277, 221779, 227918, 220888, 231634, 235272,
>> 220580,
>>>> 233970, 226381, 235613, 227998, 234353, 235796, 230542,
>> 239605,
>>>> 233645, 245124, 248935, 226969, 252118, 245888, 253940,
>> 242869,
>>>> 249518, 250305, 242427, 251666, 242906, 253645, 257586,
>> 236425,
>>>> 262768, 252595, 262910, 254396, 254417, 252449, 241404,
>> 246729,
>>>> 237361, 248692, 251752, 228933, 256286, 249336, 255692,
>> 247109,
>>>> 251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
>>>> 97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
>>>> 99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
>>>> 104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7,
>> 103.8,
>>>> 104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
>>>> 108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
>>>> 110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
>>>> 111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1,
>> 112.6,
>>>> 112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
>>>> 113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
>>>> 125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
>>>> 130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7,
>> 134.3,
>>>> 134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
>>>> 135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
>>>> 139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
>>>> 141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
>>>> 143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
>>>> 144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
>>>> 145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8,
>> 141.5,
>>>> 147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
>>>> 141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
>>>> 145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
>>>> 147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
>>>> 149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
>>>> 152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
>>>> ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
>>>> 108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
>>>> 101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
>>>> 100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8,
>> 98.1,
>>>> 98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
>>>> 98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6,
>> 97.5,
>>>> 101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
>>>> 103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
>>>> 101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5,
>> 105.4,
>>>> 98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
>>>> 120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2,
>> 137.7,
>>>> 140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
>>>> 138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
>>>> 130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
>>>> 143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4,
>> 143.5,
>>>> 143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
>>>> 142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
>>>> 132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
>>>> 139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
>>>> 144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6,
>> 141.5,
>>>> 141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7,
>> 137.1,
>>>> 134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
>>>> 133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
>>>> 134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
>>>> 130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130),
>> v41691919
>>>> = c(96.5,
>>>> 97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
>>>> 97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3,
>> 100.9,
>>>> 101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2,
>> 102.3,
>>>> 102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
>>>> 104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
>>>> 105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5,
>> 108.2,
>>>> 107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5,
>> 109.3,
>>>> 109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
>>>> 111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
>>>> 110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8,
>> 115.1,
>>>> 113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
>>>> 113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1,
>> 115.3,
>>>> 115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9,
>> 117.8,
>>>> 118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
>>>> 121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
>>>> 121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
>>>> 123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
>>>> 124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7,
>> 126.8,
>>>> 126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2,
>> 128.4,
>>>> 128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
>>>> 130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
>>>> 131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
>>>> 132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
>>>> 135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
>>>> 138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8,
>> 97.7,
>>>> 98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3,
>> 100.2,
>>>> 100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
>>>> 102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
>>>> 100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8,
>> 104.3,
>>>> 104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
>>>> 107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
>>>> 108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
>>>> 109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
>>>> 111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
>>>> 115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
>>>> 121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
>>>> 121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
>>>> 123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4,
>> 127.1,
>>>> 128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4,
>> 130.6,
>>>> 131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
>>>> 131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6,
>> 133.5,
>>>> 133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
>>>> 136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
>>>> 140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
>>>> 142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
>>>> 142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
>>>> 143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
>>>> 146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
>>>> 148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
>>>> ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
>>>> 99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
>>>> 99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
>>>> 102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
>>>> 104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
>>>> 106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
>>>> 108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
>>>> 112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
>>>> 112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4,
>> 114.7,
>>>> 115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
>>>> 117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
>>>> 120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
>>>> 118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
>>>> 122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
>>>> 123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3,
>> 124.3,
>>>> 124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5,
>> 125.4,
>>>> 125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1,
>> 127.2,
>>>> 127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9,
>> 132.4,
>>>> 132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4,
>> 133.5,
>>>> 133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
>>>> 135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
>>>> 138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7,
>> 140.3,
>>>> 140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
>>>> 141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7,
>> 143.9,
>>>> 144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3),
>> v41691965
>>>> = c(96.9,
>>>> 97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
>>>> 98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
>>>> 100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
>>>> 101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5,
>> 101.7,
>>>> 102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2,
>> 101.2,
>>>> 101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5,
>> 102.2,
>>>> 101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6,
>> 101.7,
>>>> 100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
>>>> 103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4,
>> 103.2,
>>>> 103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6,
>> 106.1,
>>>> 105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
>>>> 106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3,
>> 109.2,
>>>> 109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
>>>> 110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
>>>> 113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
>>>> 113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
>>>> 115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6,
>> 115.6,
>>>> 115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
>>>> 119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
>>>> 121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3,
>> 122.6,
>>>> 123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7,
>> 123.5,
>>>> 123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5,
>> 123.2,
>>>> 124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2,
>> 125.2,
>>>> 125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3,
>> 124.9,
>>>> 125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
>>>> 105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
>>>> 99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
>>>> 101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9,
>> 95.6,
>>>> 96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
>>>> 96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
>>>> 97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
>>>> 92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
>>>> 90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
>>>> 95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
>>>> 93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
>>>> 89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
>>>> 92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
>>>> 93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6,
>> 88.3,
>>>> 92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
>>>> 85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
>>>> 90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
>>>> 91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3,
>> 91.5,
>>>> 91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
>>>> 93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
>>>> 91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
>>>> 87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
>>>> 92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988
>> =
>>>> c(98.2,
>>>> 98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
>>>> 94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3,
>> 101.2,
>>>> 101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2,
>> 103.9,
>>>> 104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6,
>> 106.8,
>>>> 107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
>>>> 109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
>>>> 113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8,
>> 116.9,
>>>> 117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
>>>> 118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
>>>> 118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
>>>> 116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5,
>> 116.7,
>>>> 114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119,
>> 119.1,
>>>> 119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
>>>> 125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5,
>> 129.5,
>>>> 130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
>>>> 130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3,
>> 131.3,
>>>> 131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7,
>> 132.3,
>>>> 133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8,
>> 131.4,
>>>> 129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4,
>> 130.6,
>>>> 128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6,
>> 128.6,
>>>> 130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
>>>> 133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
>>>> 136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
>>>> 142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
>>>> 143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
>>>> 110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
>>>> 88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
>>>> 104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
>>>> 111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
>>>> 127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1,
>> 114.8,
>>>> 117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
>>>> 127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9,
>> 154.3,
>>>> 152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
>>>> 155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
>>>> 152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
>>>> 122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
>>>> 143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
>>>> 144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
>>>> 168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
>>>> 177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8,
>> 182.4,
>>>> 187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6,
>> 183.7,
>>>> 182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
>>>> 189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9,
>> 181.1,
>>>> 167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
>>>> 163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2,
>> 146.8,
>>>> 152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1,
>> 163.9,
>>>> 156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8,
>> 167.2,
>>>> 177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7,
>> 194.8,
>>>> 192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
>>>> 186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260,
>> 1172192,
>>>> 1173559, 1173865, 1163159, 1173230, 1168291, 1148136,
>> 1135730,
>>>> 1176671, 1184706, 1186957, 1177962, 1194820, 1192486,
>> 1204268,
>>>> 1196677, 1198166, 1192339, 1188059, 1189860, 1195524,
>> 1179193,
>>>> 1160881, 1156255, 1154137, 1151079, 1223651, 1193786,
>> 1187791,
>>>> 1185070, 1222101, 1233158, 1222271, 1205916, 1211049,
>> 1237429,
>>>> 1221806, 1288146, 1268949, 1239192, 1259979, 1259944,
>> 1257909,
>>>> 1229472, 1206627, 1245003, 1262388, 1269395, 1276432,
>> 1277248,
>>>> 1261277, 1291593, 1298114, 1305550, 1267413, 1294688,
>> 1295694,
>>>> 1317484, 1333362, 1330478, 1362024, 1326774, 1319396,
>> 1318673,
>>>> 1334044, 1346594, 1339499, 1363158, 1404445, 1434255,
>> 1396545,
>>>> 1355204, 1367796, 1352577, 1349119, 1374720, 1398253,
>> 1369215,
>>>> 1413653, 1431392, 1421479, 1419408, 1487702, 1434740,
>> 1434398,
>>>> 1472990, 1471028, 1460549, 1461166, 1482247, 1490620,
>> 1486005,
>>>> 1467463, 1444413, 1469876, 1477567, 1460040, 1446679,
>> 1452324,
>>>> 1456279, 1455826, 1472154, 1485169, 1464240, 1487456,
>> 1518692,
>>>> 1516207, 1512158, 1535860, 1535652, 1538473, 1549310,
>> 1517172,
>>>> 1511436, 1531246, 1558108, 1555668, 1566767, 1566882,
>> 1580492,
>>>> 1566209, 1594096, 1600677, 1613907, 1619388, 1607791,
>> 1602639,
>>>> 1612385, 1631814, 1643924, 1650496, 1659254, 1679545,
>> 1674956,
>>>> 1675779, 1676020, 1676843, 1679625, 1694232, 1695255,
>> 1720478,
>>>> 1741576, 1736856, 1722187, 1750359, 1728204, 1736587,
>> 1752139,
>>>> 1752173, 1770304, 1762990, 1777806, 1787814, 1766222,
>> 1771789,
>>>> 1806919, 1817679, 1826720, 1854228, 1850492, 1857490,
>> 1892994,
>>>> 1890432, 1892879, 1890258, 1911380, 1915088, 1891501,
>> 1922679,
>>>> 1947153, 1994578, 1970953, 1983867, 2014740, 2008756,
>> 2030234,
>>>> 2032886, 2059674, 2068652, 2073047, 2083031, 2136894,
>> 2115520,
>>>> 2130280, 2158663, 2134182, 2172927, 2173367, 2173553,
>> 2156196,
>>>> 2218283, 2237749, 2206090, 2227664, 2221296, 2238127,
>> 2265268,
>>>> 2262536, 2284770, 2309970, 2310161, 2307041, 2331779,
>> 2369833,
>>>> 2388535, 2335561, 2373858, 2397911, 2392511, 2405673,
>> 2410779,
>>>> 2411443, 2438862, 2483861, 2444050, 2429816, 2451814,
>> 2464695,
>>>> 2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
>>>> 12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
>>>> 12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
>>>> 10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
>>>> 11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
>>>> 10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
>>>> 11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
>>>> 11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
>>>> 10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
>>>> 11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
>>>> 12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
>>>> 12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
>>>> 12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
>>>> 12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
>>>> 12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
>>>> 11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
>>>> 11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
>>>> 11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
>>>> 12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
>>>> 12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
>>>> 12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
>>>> 12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
>>>> 12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
>>>> 12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
>>>> 2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
>>>> 778862, 1138557, 1636203, 2233518, 2114752, 1974646,
>> 1534387,
>>>> 998860, 559524, 447850, 393285, 402189, 651017, 1523288,
>>>> 2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
>>>> 452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
>>>> 2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
>>>> 425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
>>>> 1411442, 900073, 491461, 413880, 390364, 393934, 586734,
>>>> 1266299, 2202400, 2309033, 2164470, 2145389, 1328220,
>> 736964,
>>>> 480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
>>>> 3283157, 3804876, 3244792, 2477267, 1569953, 1169971,
>> 1121247,
>>>> 1218442, 1182862, 1409876, 2241749, 3274756, 3494706,
>> 3615470,
>>>> 3455902, 2199773, 1647961, 1230718, 1125165, 1078839,
>> 1099809,
>>>> 1539702, 2190793, 3126922, 3886115, 3290320, 2942615,
>> 2110948,
>>>> 1405583, 1308947, 1014607, 1148503, 1066941, 1596998,
>> 2039112,
>>>> 2798847, 3446040, 3255602, 2815621, 1839592, 1426302,
>> 1177683,
>>>> 1090902, 1145557, 1140902, 1524916, 2145484, 3256107,
>> 3775523,
>>>> 3559115, 3289994, 2219521, 1774688, 1291471, 1191457,
>> 1170953,
>>>> 1159087, 1543907, 2159364, 2786142, 3447635, 3179625,
>> 2751435,
>>>> 2152765, 1596927, 1290466, 1278246, 1247608, 1253886,
>> 1622877,
>>>> 2433993, 2831938, 3565488, 3636268, 3253630, 2559152,
>> 1626984,
>>>> 1251460, 1163841, 1130486, 1190063, 1491645, 2345181,
>> 3346689,
>>>> 4165953, 3842336, 3682352, 2580288, 1731497, 1199181,
>> 1098817,
>>>> 1113400, 1079822, 1464918, 2344949, 3006111, 3847035,
>> 4007847,
>>>> 3550039, 2397284, 1457876, 1155121, 1115934, 1113953,
>> 1185585,
>>>> 1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
>>>> NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
>>>> 76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387,
>> 77.807,
>>>> 74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
>>>> 87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041,
>> 114.235,
>>>> 82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032,
>> 108.011,
>>>> 79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
>>>> 83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143,
>> 57.357,
>>>> 71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519,
>> 70.549,
>>>> 64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906,
>> 74.252,
>>>> 84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522,
>> 74.888,
>>>> 52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3,
>> 82.511,
>>>> 71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79,
>> 72.919,
>>>> 92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501,
>> 43.62,
>>>> 37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622,
>> 57.833,
>>>> 72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712,
>> 69.299,
>>>> 56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477,
>> 50.752,
>>>> 66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846,
>> 66.99,
>>>> 75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376,
>> 76.071,
>>>> 70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346,
>> 47.764,
>>>> 68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928,
>> 60.752,
>>>> 71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44,
>> 65.443,
>>>> 55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084,
>> 61.375,
>>>> 41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148,
>> 90.318,
>>>> 75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21,
>> 72.047,
>>>> 88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135,
>> 100.138,
>>>> 84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755,
>> 77.894,
>>>> 59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223,
>> 54.825,
>>>> 104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
>>>> 73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
>>>> v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
>>>> 9584905, 9382415, 9482770, 9307864, 9492970, 9715825,
>> 9940764,
>>>> 10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
>>>> 10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
>>>> 10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
>>>> 10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
>>>> 10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
>>>> 10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
>>>> 11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
>>>> 11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
>>>> 11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
>>>> 11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
>>>> 11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
>>>> 12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
>>>> 12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
>>>> 12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
>>>> 11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
>>>> 12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
>>>> 12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
>>>> 12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
>>>> 13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
>>>> 13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
>>>> 13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
>>>> 13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
>>>> 13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
>>>> 14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
>>>> 14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
>>>> 15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
>>>> 14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
>>>> 15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
>>>> 16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
>>>> 16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
>>>> 17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
>>>> 18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
>>>> 18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
>>>> 19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
>>>> 18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
>>>> 19635452), v52368043 = c(17055707, 16701281, 16786260,
>> 16756166,
>>>> 16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
>>>> 16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
>>>> 18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
>>>> 19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
>>>> 18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
>>>> 19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
>>>> 19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
>>>> 19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
>>>> 20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
>>>> 20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
>>>> 21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
>>>> 20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
>>>> 22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
>>>> 22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
>>>> 22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
>>>> 21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
>>>> 20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
>>>> 22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
>>>> 22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
>>>> 22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
>>>> 23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
>>>> 23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
>>>> 23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
>>>> 24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
>>>> 23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
>>>> 24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
>>>> 25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
>>>> 25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
>>>> 27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
>>>> 28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
>>>> 28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
>>>> 29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
>>>> 31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
>>>> 32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
>>>> 31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
>>>> 32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
>>>> 32796030, 32840886, 33870331), v54027371 = c(5006719,
>> 5067172,
>>>> 5060865, 5062576, 5083254, 5072377, 5031234, 5052979,
>> 5027204,
>>>> 5043632, 5035454, 5044842, 5063238, 5093024, 5091640,
>> 5102054,
>>>> 5133352, 5142226, 5165655, 5203037, 5186307, 5174704,
>> 5194163,
>>>> 5190310, 5232432, 5210572, 5234726, 5235080, 5254050,
>> 5245134,
>>>> 5245175, 5249094, 5235952, 5262268, 5263595, 5253813,
>> 5274263,
>>>> 5265423, 5299891, 5327379, 5316191, 5331555, 5346574,
>> 5307140,
>>>> 5337742, 5347287, 5348381, 5377210, 5374212, 5383470,
>> 5366697,
>>>> 5392882, 5388985, 5416367, 5417477, 5433010, 5448853,
>> 5441429,
>>>> 5458425, 5471520, 5489243, 5495727, 5511121, 5512216,
>> 5526438,
>>>> 5537303, 5522426, 5518461, 5536277, 5501749, 5564018,
>> 5570599,
>>>> 5584461, 5593844, 5590604, 5602700, 5608632, 5616521,
>> 5608951,
>>>> 5623657, 5616005, 5645595, 5647305, 5647451, 5693895,
>> 5691488,
>>>> 5700220, 5707445, 5725799, 5728509, 5717031, 5723853,
>> 5711995,
>>>> 5719339, 5681740, 5663311, 5643435, 5611268, 5590716,
>> 5570704,
>>>> 5557739, 5536962, 5560436, 5529977, 5551949, 5574728,
>> 5563493,
>>>> 5575590, 5577965, 5587020, 5596086, 5612563, 5609016,
>> 5626466,
>>>> 5654424, 5633372, 5661574, 5667386, 5669274, 5689694,
>> 5681104,
>>>> 5701730, 5706973, 5707289, 5692449, 5724435, 5730464,
>> 5731650,
>>>> 5750310, 5739110, 5745413, 5742657, 5748606, 5744911,
>> 5767140,
>>>> 5785313, 5808618, 5816135, 5806957, 5825860, 5814678,
>> 5800046,
>>>> 5822757, 5809772, 5808239, 5818814, 5833898, 5829771,
>> 5825801,
>>>> 5833676, 5847351, 5886288, 5872335, 5876134, 5878844,
>> 5883709,
>>>> 5891947, 5885232, 5889681, 5891564, 5921837, 5931270,
>> 5952834,
>>>> 5959543, 5957751, 5970395, 5962589, 5958983, 5996099,
>> 5997162,
>>>> 5997791, 6025616, 6046802, 6043966, 6072665, 6063075,
>> 6065666,
>>>> 6115610, 6091893, 6118988, 6119637, 6126261, 6136886,
>> 6169330,
>>>> 6172147, 6198848, 6202387, 6197097, 6228521, 6219420,
>> 6240999,
>>>> 6266000, 6254684, 6277414, 6289899, 6290412, 6302735,
>> 6343442,
>>>> 6341087, 6359345, 6383177, 6364995, 6373585, 6394318,
>> 6396556,
>>>> 6406482, 6430135, 6428086, 6458862, 6470913, 6480563,
>> 6509009,
>>>> 6514678, 6545545, 6547838, 6538390, 6566127, 6566755,
>> 6578311,
>>>> 6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
>>>> 692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69,
>> 699.31,
>>>> 697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05,
>> 708.58,
>>>> 709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96,
>> 716.06,
>>>> 724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
>>>> 736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98,
>> 752.13,
>>>> 745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22,
>> 763.57,
>>>> 770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65,
>> 789.71,
>>>> 784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76,
>> 783.53,
>>>> 781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6,
>> 806.36,
>>>> 802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27,
>> 821.08,
>>>> 823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26,
>> 838.09,
>>>> 840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65,
>> 840.76,
>>>> 843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04,
>> 853.68,
>>>> 852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13,
>> 873.52,
>>>> 875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37,
>> 897.82,
>>>> 894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08,
>> 888.93,
>>>> 901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11,
>> 902.56,
>>>> 909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03,
>> 911.93,
>>>> 913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35,
>> 920.2,
>>>> 924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
>>>> 938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82,
>> 950.06,
>>>> 956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15,
>> 966.48,
>>>> 968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64,
>> 974.42,
>>>> 978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
>>>> 982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24,
>> 1002.93,
>>>> 1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01,
>> 1012.58,
>>>> 1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26,
>> 1034.06,
>>>> 1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
>>>> 1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
>>>> 31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
>>>> 31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
>>>> 31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
>>>> 31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
>>>> 31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
>>>> 31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
>>>> 31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1,
>> 30.8,
>>>> 30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
>>>> 30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3,
>> 30.4,
>>>> 30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
>>>> 30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
>>>> 30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
>>>> 30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
>>>> 30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
>>>> 30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
>>>> 30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
>>>> 30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
>>>> 30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
>>>> 30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
>>>> 30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4,
>> 30.4,
>>>> 30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
>>>> 29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
>>>> 22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406,
>> 20917,
>>>> 21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253,
>> 22542,
>>>> 23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269,
>> 23088,
>>>> 21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371,
>> 23691,
>>>> 25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459,
>> 20867,
>>>> 21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359,
>> 21206,
>>>> 23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132,
>> 22893,
>>>> 22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387,
>> 25378,
>>>> 24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948,
>> 23937,
>>>> 27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165,
>> 27903,
>>>> 30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645,
>> 28820,
>>>> 26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664,
>> 29056,
>>>> 28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457,
>> 25821,
>>>> 29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086,
>> 31843,
>>>> 33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727,
>> 34795,
>>>> 33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568,
>> 36096,
>>>> 35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920,
>> 33633,
>>>> 33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653,
>> 35486,
>>>> 35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129,
>> 37903,
>>>> 37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617,
>> 38777,
>>>> 38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330,
>> 39600,
>>>> 40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405,
>> 41141,
>>>> 41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908,
>> 44375,
>>>> 43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686,
>> 45193,
>>>> 44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
>>>> 85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
>>>> 92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
>>>> 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
>>>> 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9,
>> 95.7,
>>>> 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
>>>> 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
>>>> 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
>>>> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
>>>> 104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
>>>> 112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
>>>> 115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6,
>> 115.4,
>>>> 114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8,
>> 110.8,
>>>> 113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4,
>> 124.2,
>>>> 129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3,
>> 126.3,
>>>> 121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
>>>> 142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
>>>> 117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
>>>> 132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2,
>> 126.7,
>>>> 128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
>>>> 130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
>>>> 131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
>>>> 135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
>>>> 136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
>>>> 135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
>>>> 100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
>>>> 98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
>>>> 89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
>>>> 86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
>>>> 96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
>>>> 97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
>>>> 97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
>>>> 97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
>>>> 102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
>>>> 103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107,
>> 107.5,
>>>> 106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7,
>> 102.7,
>>>> 104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
>>>> 104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
>>>> 119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2,
>> 117.2,
>>>> 115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3,
>> 117.4,
>>>> 120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
>>>> 123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
>>>> 140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
>>>> 136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7,
>> 128.4,
>>>> 130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
>>>> 118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4,
>> 132.6,
>>>> 128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
>>>> 120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5,
>> 121.1,
>>>> 122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837,
>> 23571783,
>>>> 24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
>>>> 23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
>>>> 24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
>>>> 25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
>>>> 25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
>>>> 24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
>>>> 25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
>>>> 25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
>>>> 24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
>>>> 25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
>>>> 24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
>>>> 24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
>>>> 25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
>>>> 23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
>>>> 22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
>>>> 22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
>>>> 17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
>>>> 19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
>>>> 19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
>>>> 20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
>>>> 20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
>>>> 21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
>>>> 22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
>>>> 22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
>>>> 22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
>>>> 22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
>>>> 23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
>>>> 23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
>>>> 23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
>>>> 24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
>>>> 24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
>>>> 25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
>>>> 25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
>>>> 24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
>>>> 26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
>>>> 26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
>>>> 26637112, 26198157, 26778716, 26846047, 26409309)),
>> row.names =
>>>> c(NA,
>>>> -223L), class = c("tbl_df", "tbl", "data.frame"))
>>>> 
>>>> dput() output for dts:
>>>> 
>>>> 
>>>> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>>>> X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 =
>> c(NA_real_,
>>>> NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
>>>> NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
>>>> NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
>>>> X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
>>>> 120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_,
>> NA_real_,
>>>> NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
>>>> NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>>> ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
>>>> NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
>>>> NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>>> ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 =
>>>> c(NA_real_,
>>>> NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
>>>> NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
>>>> NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>>> ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 =
>>>> c(NA_real_,
>>>> NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
>>>> NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
>>>> NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>>> ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 =
>>>> c(NA_real_,
>>>> NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
>>>> NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
>>>> NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_,
>> NA_real_
>>>> ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 =
>>>> c(NA_real_,
>>>> NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
>>>> NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
>>>> NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
>>>> ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 =
>> c(NA,
>>>> NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
>>>> NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L),
>> class =
>>>> "data.frame")
>>>> 
>>>> dput() output for testcase1:
>>>> 
>>>> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
>>>> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
>>>> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
>>>> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
>>>> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
>>>> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
>>>> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9,
>> 101.2,
>>>> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
>> 104.3,
>>>> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
>>>> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
>>>> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
>>>> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
>>>> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
>>>> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
>>>> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
>>>> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
>>>> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
>>>> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
>>>> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
>>>> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
>>>> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
>>>> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
>>>> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
>>>> 135.1, NA, NA)
>>>> 
>>>> ______________________________________________
>>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>> PLEASE do read the posting guide
>>>> http://www.R-project.org/posting-guide.html
>>>> and provide commented, minimal, self-contained, reproducible
>> code.
>> 
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
> 
> 
> Links:
> ------
> [1] http://is.na
> [2] http://tibco.com


From wdun|@p @end|ng |rom t|bco@com  Thu Oct 31 02:55:02 2019
From: wdun|@p @end|ng |rom t|bco@com (William Dunlap)
Date: Wed, 30 Oct 2019 18:55:02 -0700
Subject: [R] 
 " Error in firstnonmiss:lastnonmiss : argument of length 0 "
In-Reply-To: <cf6fddcc20027206a0afca921ccb5059@philipsmith.ca>
References: <ba212904dba13d3b9ec51c2acee40482@philipsmith.ca>
 <c81d293a-764c-3d65-e625-2b0c89ef53a5@sapo.pt>
 <ed86cb587a9728244d73d1c7dcccad0a@philipsmith.ca>
 <CAF8bMcZ4OeCqHtz4+J=WbQJEbsNx8P9bKJdVT3fbWt3fwqusRA@mail.gmail.com>
 <cf6fddcc20027206a0afca921ccb5059@philipsmith.ca>
Message-ID: <CAF8bMcZouT=0uynhDDRSQgppygNi86JKTbC515=ZkkjmSh+q6Q@mail.gmail.com>

The length(x)>dt2 requirement is not quite right - it is only required for
one branch of your if statement.  Figure out the assumptions for each
branch of the code and put stopifnot calls in each branch.  Or leave them
out and debug later.

Bill Dunlap
TIBCO Software
wdunlap tibco.com


On Wed, Oct 30, 2019 at 5:13 PM <phil at philipsmith.ca> wrote:

> Thanks for your suggestions. I have tried them all, with no success.
>
> William's looked quite promising. I put in the
> stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)
> statement and it detected the problem:
> length(x) > dt2 is not TRUE
> Then I changed all the references to vseries to the [[j]]
> notation:
> vseries[,j] became vseries[[j]] and
> vseries$REF_DATE became vseries[[1]]
> But I still got the same error statement from stopifnot:
> length(x) > dt2 is not TRUE
>
> I am quite at a loss on this one. Any other suggestions? Maybe I should
> just take a completely different approach of some kind?
>
> Philip
>
> On 2019-10-30 12:58, William Dunlap wrote:
> > Your EXTEND() function appears to expect that its 'x' argument will be
> > a numeric vector, but you pass it a one-column tibble.  Hence
> > length(x) is 1 and things go downhill from there.
> >
> > I like to start such functions with a long stopifnot() statement that
> > does a quick check of inputs.  E.g.,
> >
> > stopifnot(is.numeric(x), NCOL(x)==1, length(x)>dt2)
> >
> > Use vseries1[,j,drop=TRUE] or vseries1[[j]] to extract a single column
> > from the tibble 'vseries1'.  vseries1[,1] will return a one-column
> > tibble.
> >
> > Bill Dunlap
> > TIBCO Software
> > wdunlap tibco.com [2]
> >
> > On Wed, Oct 30, 2019 at 5:25 AM <phil at philipsmith.ca> wrote:
> >
> >> Thanks for the suggestion Rui, but no, this will not remove the
> >> error.
> >> In fact, if I drop the second term entirely as in:
> >>
> >> if ( (!is.na [1](dts[1,j-1])) ) {
> >>
> >> then I still get the error. I have been unable to find a
> >> work-around.
> >>
> >> Philip
> >>
> >> On 2019-10-30 05:17, Rui Barradas wrote:
> >>> Hello,
> >>>
> >>> Is this as simple as
> >>>
> >>>
> >>> if ( (!is.na [1](dts[1,j-1])) & (!is.na [1](dts[3,j-1])) ) {
> >>>
> >>>
> >>> (change the logical operator from '|' to '&')?
> >>> The result vseries1 still has some NA's at the end of some of its
> >>> series.
> >>>
> >>> Hope this helps,
> >>>
> >>> Rui Barradas
> >>>
> >>> ?s 02:05 de 30/10/19, phil at philipsmith.ca escreveu:
> >>>> I am having a problem that generates the error message: " Error
> >> in
> >>>> firstnonmiss:lastnonmiss : argument of length 0 ". There is an
> >> article
> >>>> on this in stackoverflow, but I have been unable to understand it
> >> well
> >>>> enough to solve my problem. Essentially, I have a data frame with
> >> 41
> >>>> indicator series and some of the series have missing values (NAs)
> >> at
> >>>> the beginning and/or the end. I want to fill in the missing
> >> values
> >>>> using ARIMA models, via the forecast() function. It works when I
> >> use
> >>>> my EXTEND function on a single series, but it fails when I try to
> >> loop
> >>>> through all 41 series. Here is a reproducible example. Thanks for
> >> any
> >>>> advice.
> >>>>
> >>>> # Reproducible example
> >>>> # " Error in firstnonmiss:lastnonmiss : argument of length 0 "
> >>>> # See also stackoverflow:
> >>>>
> >>
> >
> https://stackoverflow.com/questions/27350636/r-argument-is-of-length-zero-in-if-statement
> >>
> >>>> library(forecast)
> >>>> library(lubridate)
> >>>> vseries <- dget("vseries.txt") # data frame containing REF_DATE
> >> and 41
> >>>> "indicator" vectors
> >>>> dts <- dget("dts.txt") # data frame recording where NAs are in
> >> vseries
> >>>> - they will be replaced
> >>>> testcase1 <- dget("testcase1.txt") # a vector for use in testing
> >>>> # Function to fill in missing values (NAs) using ARIMA forecasts
> >> and
> >>>> backcasts
> >>>> EXTEND <-
> >> function(x,REF_DATE,dt1,dt2,dt3,dt4,first_date,last_date) {
> >>>> if (!is.na [1](dt1)) {
> >>>> bfct = dt2-dt1+1 # number of months to backcast
> >>>> revx <- ts(rev(x),frequency=12)
> >>>> revx <- revx[1:(length(revx)-dt2)]
> >>>> fc <- forecast(auto.arima(revx),bfct)
> >>>> revx1 <- c(revx,fc$mean) # extend with forecasts (in
> >> fc$mean)
> >>>> m <- month(as.POSIXlt(first_date,format="%Y-%m-%d"))
> >>>> y <- year(as.POSIXlt(first_date,format="%Y-%m-%d"))
> >>>> x <- as.numeric(ts(rev(revx1),start=c(y,m),frequency=12))
> >>>> }
> >>>> if (!is.na [1](dt3)) {
> >>>> ffct <- dt4-dt3+1 # number of months to forecast
> >>>> x <- x[1:(dt3-1)]
> >>>> fc <- forecast(auto.arima(x),ffct)
> >>>> x <- c(x,fc$mean)
> >>>> }
> >>>> return(x)
> >>>> }
> >>>> # Test EXTEND function with a single vector - apparently it works
> >>>> (testcase1_extended <-
> >> EXTEND(testcase1,vseries$REF_DATE,1,3,222,223,
> >>>> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)]))
> >>>> View(cbind(testcase1,testcase1_extended))
> >>>> # Now use EXTEND to fill in the missing values in all 41
> >> indicators in
> >>>> vseries
> >>>> # Data frame dts has NAs where no extension is required, integer
> >>>> values showing where to start and
> >>>> # where to end when extensions are required. Store extended
> >> series in
> >>>> vseries1.
> >>>> vseries1 <- vseries
> >>>> for (j in 2:(ncol(vseries))) { # j starts at 2 because column 1
> >> in
> >>>> vseries is REF_DATE
> >>>> if ( (!is.na [1](dts[1,j-1])) | (!is.na [1](dts[3,j-1])) ) {
> >>>> vseries1[,j] <-
> >>>>
> >>
> >
> EXTEND(vseries[,j],vseries$REF_DATE,dts[1,j-1],dts[2,j-1],dts[3,j-1],dts[4,j-1],
> >>
> >>>> vseries$REF_DATE[1],vseries$REF_DATE[length(vseries$REF_DATE)])
> >>>> }
> >>>> }
> >>>> View(vseries)
> >>>> View(vseries1)
> >>>>
> >>>> dput() output for vseries:
> >>>>
> >>>> structure(list(REF_DATE = c("2001-01-01", "2001-02-01",
> >> "2001-03-01",
> >>>> "2001-04-01", "2001-05-01", "2001-06-01", "2001-07-01",
> >> "2001-08-01",
> >>>> "2001-09-01", "2001-10-01", "2001-11-01", "2001-12-01",
> >> "2002-01-01",
> >>>> "2002-02-01", "2002-03-01", "2002-04-01", "2002-05-01",
> >> "2002-06-01",
> >>>> "2002-07-01", "2002-08-01", "2002-09-01", "2002-10-01",
> >> "2002-11-01",
> >>>> "2002-12-01", "2003-01-01", "2003-02-01", "2003-03-01",
> >> "2003-04-01",
> >>>> "2003-05-01", "2003-06-01", "2003-07-01", "2003-08-01",
> >> "2003-09-01",
> >>>> "2003-10-01", "2003-11-01", "2003-12-01", "2004-01-01",
> >> "2004-02-01",
> >>>> "2004-03-01", "2004-04-01", "2004-05-01", "2004-06-01",
> >> "2004-07-01",
> >>>> "2004-08-01", "2004-09-01", "2004-10-01", "2004-11-01",
> >> "2004-12-01",
> >>>> "2005-01-01", "2005-02-01", "2005-03-01", "2005-04-01",
> >> "2005-05-01",
> >>>> "2005-06-01", "2005-07-01", "2005-08-01", "2005-09-01",
> >> "2005-10-01",
> >>>> "2005-11-01", "2005-12-01", "2006-01-01", "2006-02-01",
> >> "2006-03-01",
> >>>> "2006-04-01", "2006-05-01", "2006-06-01", "2006-07-01",
> >> "2006-08-01",
> >>>> "2006-09-01", "2006-10-01", "2006-11-01", "2006-12-01",
> >> "2007-01-01",
> >>>> "2007-02-01", "2007-03-01", "2007-04-01", "2007-05-01",
> >> "2007-06-01",
> >>>> "2007-07-01", "2007-08-01", "2007-09-01", "2007-10-01",
> >> "2007-11-01",
> >>>> "2007-12-01", "2008-01-01", "2008-02-01", "2008-03-01",
> >> "2008-04-01",
> >>>> "2008-05-01", "2008-06-01", "2008-07-01", "2008-08-01",
> >> "2008-09-01",
> >>>> "2008-10-01", "2008-11-01", "2008-12-01", "2009-01-01",
> >> "2009-02-01",
> >>>> "2009-03-01", "2009-04-01", "2009-05-01", "2009-06-01",
> >> "2009-07-01",
> >>>> "2009-08-01", "2009-09-01", "2009-10-01", "2009-11-01",
> >> "2009-12-01",
> >>>> "2010-01-01", "2010-02-01", "2010-03-01", "2010-04-01",
> >> "2010-05-01",
> >>>> "2010-06-01", "2010-07-01", "2010-08-01", "2010-09-01",
> >> "2010-10-01",
> >>>> "2010-11-01", "2010-12-01", "2011-01-01", "2011-02-01",
> >> "2011-03-01",
> >>>> "2011-04-01", "2011-05-01", "2011-06-01", "2011-07-01",
> >> "2011-08-01",
> >>>> "2011-09-01", "2011-10-01", "2011-11-01", "2011-12-01",
> >> "2012-01-01",
> >>>> "2012-02-01", "2012-03-01", "2012-04-01", "2012-05-01",
> >> "2012-06-01",
> >>>> "2012-07-01", "2012-08-01", "2012-09-01", "2012-10-01",
> >> "2012-11-01",
> >>>> "2012-12-01", "2013-01-01", "2013-02-01", "2013-03-01",
> >> "2013-04-01",
> >>>> "2013-05-01", "2013-06-01", "2013-07-01", "2013-08-01",
> >> "2013-09-01",
> >>>> "2013-10-01", "2013-11-01", "2013-12-01", "2014-01-01",
> >> "2014-02-01",
> >>>> "2014-03-01", "2014-04-01", "2014-05-01", "2014-06-01",
> >> "2014-07-01",
> >>>> "2014-08-01", "2014-09-01", "2014-10-01", "2014-11-01",
> >> "2014-12-01",
> >>>> "2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01",
> >> "2015-05-01",
> >>>> "2015-06-01", "2015-07-01", "2015-08-01", "2015-09-01",
> >> "2015-10-01",
> >>>> "2015-11-01", "2015-12-01", "2016-01-01", "2016-02-01",
> >> "2016-03-01",
> >>>> "2016-04-01", "2016-05-01", "2016-06-01", "2016-07-01",
> >> "2016-08-01",
> >>>> "2016-09-01", "2016-10-01", "2016-11-01", "2016-12-01",
> >> "2017-01-01",
> >>>> "2017-02-01", "2017-03-01", "2017-04-01", "2017-05-01",
> >> "2017-06-01",
> >>>> "2017-07-01", "2017-08-01", "2017-09-01", "2017-10-01",
> >> "2017-11-01",
> >>>> "2017-12-01", "2018-01-01", "2018-02-01", "2018-03-01",
> >> "2018-04-01",
> >>>> "2018-05-01", "2018-06-01", "2018-07-01", "2018-08-01",
> >> "2018-09-01",
> >>>> "2018-10-01", "2018-11-01", "2018-12-01", "2019-01-01",
> >> "2019-02-01",
> >>>> "2019-03-01", "2019-04-01", "2019-05-01", "2019-06-01",
> >> "2019-07-01"
> >>>> ), v1001816015 = c(17262087, 17014344, 20247169, 19144987,
> >> 19671015,
> >>>> 19189905, 14739759, 18235434, 16623028, 19087839, 18792227,
> >> 15362864,
> >>>> 16782525, 17523910, 19390559, 19783530, 20283113, 19318846,
> >> 16124593,
> >>>> 19250140, 18889900, 20916009, 19349004, 17140428, 17531326,
> >> 17559123,
> >>>> 19401870, 18748298, 18885310, 17982314, 14912147, 15835801,
> >> 17557392,
> >>>> 18431507, 17296519, 16050211, 15215468, 16939038, 19917657,
> >> 19027956,
> >>>> 19932323, 19921644, 16315362, 18862032, 19250137, 18862111,
> >> 18665646,
> >>>> 17710225, 16863860, 17594959, 20442499, 19721391, 20471368,
> >> 20466651,
> >>>> 16013264, 19545483, 19572010, 19837635, 19794191, 18282403,
> >> 17890774,
> >>>> 17694365, 21286043, 19339429, 20363518, 20802697, 16690141,
> >> 20060353,
> >>>> 19217265, 20687952, 20886199, 18925660, 19052279, 19444846,
> >> 23024759,
> >>>> 20960798, 21284786, 20601708, 17882780, 20226914, 19443713,
> >> 21213020,
> >>>> 19984134, 17515960, 17735035, 18639461, 19708496, 20218572,
> >> 20881111,
> >>>> 20967845, 20246946, 20205727, 20951905, 23040393, 21107926,
> >> 18556973,
> >>>> 15757698, 16235071, 18220863, 17502183, 16206875, 16664295,
> >> 16443231,
> >>>> 17309836, 18065805, 18425679, 18383119, 17930175, 16093108,
> >> 17853071,
> >>>> 20468225, 18944075, 19949187, 20940064, 18679964, 20517783,
> >> 21107272,
> >>>> 20935541, 20476625, 19111285, 18591785, 18648376, 22572654,
> >> 20878866,
> >>>> 21334626, 22356452, 19273175, 22959478, 22082938, 22830337,
> >> 22337136,
> >>>> 21205679, 20255195, 21009917, 23627267, 21570319, 23091288,
> >> 23252411,
> >>>> 21004135, 22349893, 20779032, 22622782, 22804069, 19504385,
> >> 20109262,
> >>>> 20720256, 22697357, 23405692, 23330003, 22617671, 21538128,
> >> 23130117,
> >>>> 22943596, 24431094, 23449486, 21320812, 20897790, 21679882,
> >> 25197042,
> >>>> 24941550, 25904330, 24960421, 23649466, 24701113, 25754289,
> >> 27899355,
> >>>> 25196278, 24819686, 23767512, 24169080, 28917366, 27068182,
> >> 27040475,
> >>>> 28384836, 26443178, 27799087, 28229589, 28740172, 27763129,
> >> 27108195,
> >>>> 25800631, 27411304, 29036170, 27999387, 27759231, 29219186,
> >> 25857724,
> >>>> 29127423, 28085258, 28804390, 28364963, 26162758, 26152772,
> >> 26468833,
> >>>> 31455559, 29035964, 31486857, 32048318, 26815735, 29868265,
> >> 28179157,
> >>>> 28333370, 29749364, 27253403, 25959199, 26900190, 31813939,
> >> 29778379,
> >>>> 31070923, 31387782, 28663047, 30679026, 29362553, 31046824,
> >> 29820781,
> >>>> 28263730, 28062692, 28162744, 32752923, 30838600, 32865423,
> >> 30947662,
> >>>> 29590180), v1001816392 = c(14810380, 14200859, 16756119,
> >> 15217622,
> >>>> 16152695, 15734143, 11943953, 15182087, 14144821, 15327643,
> >> 15666826,
> >>>> 12873678, 14082760, 15086691, 15833563, 15883991, 16045785,
> >> 15250640,
> >>>> 12445691, 15776653, 15481482, 16487072, 15489524, 12938416,
> >> 13984446,
> >>>> 14161079, 15530205, 14786496, 14588586, 13934508, 11387684,
> >> 12738958,
> >>>> 14653137, 15079013, 13731146, 13103385, 12270059, 14238311,
> >> 16669218,
> >>>> 15938279, 16007457, 17036074, 12355149, 15533794, 15448684,
> >> 15377076,
> >>>> 14589920, 13589694, 13549648, 14624327, 15706302, 15239530,
> >> 15633935,
> >>>> 15974885, 11803449, 15736297, 15611744, 16105812, 15964696,
> >> 14282888,
> >>>> 14526761, 14449653, 16434235, 14597318, 15435231, 15712547,
> >> 11808763,
> >>>> 14862181, 14503627, 15295540, 15261211, 14585813, 15410585,
> >> 14739285,
> >>>> 17582347, 16171120, 15931155, 15565709, 12619998, 14547113,
> >> 13908728,
> >>>> 14778066, 14423148, 11701775, 12670956, 13600996, 14284120,
> >> 14157825,
> >>>> 13998465, 14543121, 12774383, 13773610, 14353232, 14770313,
> >> 13084751,
> >>>> 11637597, 9588706, 10497657, 11879518, 10586090, 9367990,
> >> 9888218,
> >>>> 9223044, 9922735, 11365570, 11658665, 11111213, 10508361,
> >> 10292744,
> >>>> 10992491, 13210908, 11847469, 12344814, 12772222, 10359995,
> >> 12464327,
> >>>> 12473841, 13137908, 13140871, 12928499, 12412546, 11481365,
> >> 14066907,
> >>>> 12082611, 13050270, 12875573, 11009100, 13447116, 13903540,
> >> 13928150,
> >>>> 13858803, 13349287, 13017205, 13136581, 14629295, 13175174,
> >> 14259088,
> >>>> 14721292, 11943999, 13855276, 13219889, 14406322, 13976428,
> >> 12348507,
> >>>> 12795753, 12884766, 14475286, 14122036, 14061445, 14563402,
> >> 12114754,
> >>>> 13444547, 13827458, 14397852, 14401695, 13108404, 12684810,
> >> 13122736,
> >>>> 15857365, 14149173, 15132604, 15077002, 13674898, 14475121,
> >> 16407589,
> >>>> 16552843, 15367514, 15446201, 14885482, 13981302, 17023925,
> >> 15389386,
> >>>> 15181518, 17365931, 15884142, 16708039, 17481246, 17751529,
> >> 17312508,
> >>>> 17964853, 17635476, 17403932, 18117391, 16708266, 16449636,
> >> 17043771,
> >>>> 14607070, 17536121, 17562680, 17898917, 17882877, 16194251,
> >> 16292556,
> >>>> 15904704, 18550339, 16665634, 18563263, 17857082, 13863082,
> >> 16254963,
> >>>> 15516553, 16359112, 17351737, 16080636, 16136849, 15070366,
> >> 17819011,
> >>>> 16691318, 17603308, 18075717, 15809284, 16585137, 16279853,
> >> 18388536,
> >>>> 18103660, 15593270, 17027143, 15580767, 17959460, 17242596,
> >> 19056997,
> >>>> 17565595, 15977646), v107792891 = c(72.1, 72.1, 72.1, 72.1, 72.1,
> >>>> 79, 79, 79, 79, 79, 79, 79, 79, 79, 81.5, 81.5, 73.8, 82.5, 113,
> >>>> 122.3, 139.6, 99.3, 99.9, 109.6, 113.4, 146.5, 141.8, 112.6,
> >>>> 91.8, 92.2, 88.8, 99.9, 98.6, 109.3, 87.7, 93.8, 122.4, 103,
> >>>> 97.9, 95.7, 99.9, 98.5, 96.3, 93.4, 100.7, 99.5, 103.9, 102.5,
> >>>> 111.9, 100, 113.5, 115.1, 104.6, 125.7, 138, 155.1, 160, 135.3,
> >>>> 110.7, 139, 106.1, 100.3, 97.7, 92, 94.9, 92.4, 99.9, 102.8,
> >>>> 78.4, 84.4, 96.3, 84.4, 89.8, 107.7, 102.9, 92, 83.8, 92.2, 91.2,
> >>>> 103.6, 91.7, 96.2, 92.9, 96.9, 80.9, 94.6, 98.9, 91.1, 74.9,
> >>>> 105.3, 105.3, 90.8, 93.5, 87.4, 95, 90.2, 98, 90.6, 69.3, 56.5,
> >>>> 67.5, 62.4, 57, 66.6, 58.2, 68.9, 65.7, 75.5, 78.2, 76, 67.1,
> >>>> 70.5, 81.1, 82.5, 104.7, 95.3, 79.3, 74.5, 77.6, 81.9, 78.1,
> >>>> 79, 76.4, 74, 70.5, 79.3, 80.8, 78.8, 78.8, 80.4, 79.5, 79.2,
> >>>> 76.7, 77.8, 79.2, 80.2, 81.8, 81.3, 85.8, 73.2, 78, 80.7, 84.1,
> >>>> 77.2, 84.1, 85.1, 82.9, 87.9, 87.1, 96.1, 92.2, 87.3, 94.1, 86.9,
> >>>> 92, 102.1, 109.1, 121.8, 111.6, 81.7, 88.4, 101.2, 94.3, 94.9,
> >>>> 95.4, 94.3, 104.2, 103.2, 99.5, 117.3, 94.6, 101.6, 108.3, 108,
> >>>> 112.6, 112.5, 112.9, 103.1, 107, 111.3, 111.7, 114.7, 107.3,
> >>>> 113.2, 115.5, 122.4, 116.1, 123.3, 108.2, 113, 123, 119.5, 107.4,
> >>>> 112.4, 109.1, 98.9, 106.8, 115.2, 115.3, 118.2, 118.1, 109.6,
> >>>> 109.3, 114.2, 116.5, 100.5, 106.8, 115.9, 101, 121.3, 112.6,
> >>>> 109.7, 109.3, 106.2, 116.7, 109, 109.3, 113.9, 107.7, 107, 110.3,
> >>>> 111.9, 127.2), v107792892 = c(59.1, 59.1, 59.1, 59.1, 59.1, 64.3,
> >>>> 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 64.3, 66.3, 66.3, 60.7,
> >>>> 67.1, 89.2, 95.6, 107.4, 80.4, 81, 83, 84.5, 97, 95.3, 85.3,
> >>>> 77.3, 77.5, 76.1, 80.9, 80.4, 84.8, 76.3, 79, 91.3, 84, 81.9,
> >>>> 86.4, 88.4, 87.8, 86.8, 85.5, 88.9, 88.3, 90.3, 89.7, 93.8, 88.6,
> >>>> 94.8, 98.3, 93.6, 103.2, 108.5, 115.2, 117.2, 108.1, 98.2, 111,
> >>>> 97.9, 94.4, 93.9, 91.1, 96.4, 94.8, 98.7, 100.2, 88.1, 91.5,
> >>>> 96.6, 90.6, 79.7, 82.7, 87.3, 81.9, 77.4, 81.4, 80.9, 86.5, 81.4,
> >>>> 83.4, 80.8, 82.6, 77, 83.7, 85.7, 82.1, 73.4, 88.9, 88.9, 82.6,
> >>>> 83.9, 81, 87.1, 84.2, 88, 84.5, 74.2, 66.8, 74.6, 71.7, 68.4,
> >>>> 74.5, 69.6, 76.3, 74.6, 80.5, 82.3, 81.1, 76.2, 78.2, 89.9, 90.7,
> >>>> 106.8, 101.8, 92.9, 89.9, 91.4, 94.1, 91.9, 92.4, 90.8, 89.3,
> >>>> 88.2, 95.5, 97.5, 92.5, 92.5, 94.1, 93.7, 93, 90.9, 92.7, 94.8,
> >>>> 98.1, 95.4, 94.6, 97.9, 85.4, 90.7, 93.7, 96.2, 90.1, 94.8, 98.2,
> >>>> 95.1, 101.1, 101.4, 109.9, 106.4, 99.5, 110.9, 101.7, 106.6,
> >>>> 113.9, 108.9, 111.1, 101.4, 54, 88.8, 110.3, 97.3, 97.3, 106.4,
> >>>> 97.1, 120.7, 106.7, 99.2, 125.4, 83.6, 99.7, 119.9, 118.6, 121.1,
> >>>> 121.3, 123.1, 104.7, 104.2, 131.4, 114.4, 127.4, 113.1, 135,
> >>>> 128.4, 142, 116.1, 129.1, 107.3, 122.8, 143.7, 134.9, 106.7,
> >>>> 133.5, 121.5, 100.4, 121.2, 132.9, 128.5, 136.9, 149.2, 121.8,
> >>>> 131.6, 117.3, 127.2, 107.3, 110.5, 129.5, 114.6, 147.1, 119.2,
> >>>> 114.1, 118, 110.5, 141.5, 121.7, 105.2, 126.1, 114.2, 106.7,
> >>>> 135.2, 130.5, 150.4), v111955490 = c(59, 59.1, 59.4, 59.5, 59.6,
> >>>> 59.8, 59.9, 60, 60.1, 60.1, 60.3, 60.3, 60.6, 61, 61.1, 61.4,
> >>>> 61.8, 61.9, 62, 62.4, 62.4, 62.9, 63.1, 63.2, 63.3, 63.6, 63.7,
> >>>> 63.9, 64.4, 64.5, 64.8, 65.2, 65.4, 65.6, 66.2, 66.3, 66.4, 66.7,
> >>>> 66.9, 67.5, 68.2, 68.8, 68.8, 69.2, 69.3, 69.4, 69.7, 69.9, 70,
> >>>> 70.2, 70.5, 70.8, 71.2, 71.8, 71.9, 72, 72.2, 72.5, 72.6, 72.6,
> >>>> 73.1, 73.3, 73.4, 73.6, 73.8, 74.1, 74.4, 74.8, 74.9, 74.8, 75.1,
> >>>> 75.1, 75.2, 75.3, 75.4, 75.4, 75.7, 76.1, 76.2, 76.5, 76.7, 76.7,
> >>>> 77.2, 77.3, 78, 78.4, 78.6, 78.7, 78.7, 79, 79, 79.1, 79.1, 79.1,
> >>>> 79, 79.1, 79.1, 79.1, 78.9, 78.5, 78.3, 78.3, 78.4, 78.5, 78.9,
> >>>> 79.1, 79.4, 79.9, 80.2, 80, 80.2, 80.3, 80.7, 80.9, 80.8, 81,
> >>>> 81, 81.2, 81.5, 81.6, 81.8, 82.2, 82.3, 82.8, 83.3, 83.8, 84,
> >>>> 84.2, 84.4, 84.7, 85.3, 85.4, 85.5, 85.9, 86.3, 86.5, 86.9, 87.2,
> >>>> 87.3, 87.5, 87.8, 88, 88.2, 88.4, 88.5, 88.5, 88.6, 88.7, 88.8,
> >>>> 88.8, 89, 89.1, 89.1, 89.2, 89.3, 89.4, 89.5, 89.8, 89.8, 90.2,
> >>>> 90.2, 90.4, 90.4, 90.7, 90.9, 91, 91.1, 91.2, 91.2, 91.4, 91.6,
> >>>> 91.8, 92.1, 92.6, 92.8, 93.3, 93.4, 93.8, 93.9, 94.1, 94.2, 94.6,
> >>>> 94.8, 95.3, 96.6, 97, 97.8, 98.2, 98.5, 99.5, 99.9, 100, 100.3,
> >>>> 101.1, 101.4, 103, 103.8, 103.9, 104.1, 104.2, 104.3, 104.4,
> >>>> 104.5, 104.5, 104.6, 104.3, 104.3, 104.1, 104.1, 104.2, 104.3,
> >>>> 104.4, 104.4, 104.5, 104.6, 104.6, 104.5, 104.5, 104.6, 104.6,
> >>>> 104.6, 104.7, 104.5), v113397631 = c(13666403, 13254077,
> >> 15407812,
> >>>> 14247486, 15080786, 14660425, 11002204, 14202820, 13271658,
> >> 14415174,
> >>>> 14508659, 11955671, 13146722, 14074199, 14791521, 14924080,
> >> 15044874,
> >>>> 14018888, 11578184, 14895437, 14496000, 15378756, 14347316,
> >> 11919494,
> >>>> 12767068, 13001096, 14151808, 13591747, 13337681, 12781326,
> >> 10377252,
> >>>> 11837321, 13499209, 13699497, 12521117, 11856721, 11166102,
> >> 12992845,
> >>>> 15124559, 14541534, 14645934, 15470071, 11120381, 14214588,
> >> 13924365,
> >>>> 13823149, 12964700, 12076947, 12095824, 13216048, 14025754,
> >> 13550102,
> >>>> 13914087, 14115722, 10160966, 14024121, 14022788, 14334153,
> >> 14102556,
> >>>> 12565384, 12839303, 12721934, 14366235, 12974063, 13389033,
> >> 13670648,
> >>>> 10141903, 12812065, 12299642, 13098258, 12851798, 12327714,
> >> 12847367,
> >>>> 12591336, 14825763, 13341600, 13237020, 12836974, 10203377,
> >> 12244381,
> >>>> 11765368, 12504709, 11956004, 9762716, 10401787, 11322046,
> >> 11770050,
> >>>> 11765753, 11284183, 11974342, 10123526, 11289637, 11723217,
> >> 12097708,
> >>>> 10555661, 9420181, 7523279, 8481494, 9242771, 8598074, 7202570,
> >>>> 7866207, 7324976, 8190094, 9088589, 9446953, 8763624, 8523617,
> >>>> 8047988, 8741224, 10166223, 9667012, 9914833, 10698557, 8007402,
> >>>> 9979283, 10042726, 10032883, 9896590, 9780364, 9299971, 8878504,
> >>>> 11119562, 9746562, 10190889, 10039663, 8115021, 10083267,
> >> 10621244,
> >>>> 10939833, 10470646, 10082230, 10164563, 10122394, 11107394,
> >> 10523656,
> >>>> 11128673, 11656285, 8974980, 10923049, 10334113, 11053800,
> >> 11353041,
> >>>> 9446652, 9983629, 9791384, 11053091, 11219875, 11272210,
> >> 11132326,
> >>>> 9306880, 10917075, 10818430, 11628396, 11478765, 10251218,
> >> 10184002,
> >>>> 10281970, 12121307, 11862960, 12308111, 12096729, 10731262,
> >> 11590206,
> >>>> 12816366, 12961856, 11982666, 12058824, 11517780, 11085487,
> >> 13436617,
> >>>> 12553043, 12335153, 14275307, 12679415, 13737743, 14456727,
> >> 14243928,
> >>>> 14099287, 14174328, 14110113, 14426606, 14658088, 13508307,
> >> 13826213,
> >>>> 14372422, 11711022, 14076134, 13858027, 14416062, 14337693,
> >> 12754175,
> >>>> 13196514, 13101829, 14765626, 13632730, 14826133, 14505383,
> >> 10931400,
> >>>> 13195201, 12111306, 13091406, 14152405, 12544611, 12451609,
> >> 12366614,
> >>>> 13998036, 13374490, 13857587, 14176873, 12006484, 13497534,
> >> 12786433,
> >>>> 14622182, 13953516, 12187672, 12676560, 12261957, 14051828,
> >> 13274018,
> >>>> 14558725, 14100590, 12336372), v113399963 = c(12383492, 12489535,
> >>>> 14782841, 13968637, 14630933, 14467257, 10134331, 13173103,
> >> 12173082,
> >>>> 13608236, 13678969, 11195227, 12282398, 12965165, 14472495,
> >> 14636326,
> >>>> 14869906, 14265366, 10942242, 14014202, 13616642, 15069966,
> >> 13877119,
> >>>> 11980443, 12667065, 12919482, 14273228, 13699916, 13856189,
> >> 13126548,
> >>>> 9946994, 11150401, 12469921, 12936259, 12054563, 11110027,
> >> 10695234,
> >>>> 12210008, 14226547, 13555826, 13976396, 14022407, 10640447,
> >> 12927490,
> >>>> 13216051, 12728488, 12215523, 11892094, 11408471, 11992608,
> >> 13925071,
> >>>> 13514739, 14058000, 13934254, 9995077, 13074057, 12947771,
> >> 13135370,
> >>>> 12911642, 12064102, 11668352, 12008392, 14377904, 13014856,
> >> 13492799,
> >>>> 13909599, 10372128, 13203866, 12301356, 12880238, 13158430,
> >> 12127888,
> >>>> 11990355, 12589435, 15029864, 13510353, 14063373, 13387185,
> >> 10548301,
> >>>> 12513166, 12253214, 13093732, 12154649, 10724007, 10974227,
> >> 11593154,
> >>>> 12167544, 12576271, 13252139, 13282088, 11986385, 12388363,
> >> 12622830,
> >>>> 13808547, 12412223, 10498437, 8868838, 9756446, 10918198,
> >> 10608854,
> >>>> 9635848, 10008018, 9262002, 10205239, 10773340, 10943384,
> >> 10612403,
> >>>> 10447653, 9446266, 10744663, 12072595, 11437008, 12055765,
> >> 12335679,
> >>>> 10375837, 11786080, 11836877, 11717685, 11050898, 10512867,
> >> 10507066,
> >>>> 10651956, 13301571, 11834961, 12194410, 12513463, 10330839,
> >> 12542127,
> >>>> 12113245, 12524548, 11821431, 11259600, 11364736, 11684179,
> >> 13279826,
> >>>> 12466423, 13651294, 13655882, 11400445, 12646589, 11701238,
> >> 12657427,
> >>>> 12432006, 10561389, 11303161, 11657370, 13166161, 13479612,
> >> 13452761,
> >>>> 13182454, 11606259, 13265594, 12954057, 13697290, 12957655,
> >> 11701079,
> >>>> 11521999, 12453497, 14751017, 14372295, 15060344, 14724363,
> >> 13341724,
> >>>> 14051091, 14306668, 15496758, 13943134, 13813528, 13107368,
> >> 13650455,
> >>>> 16239726, 15416259, 15520089, 16101026, 14490154, 15577891,
> >> 15646361,
> >>>> 15773300, 15292659, 15452107, 14554541, 15530759, 16579288,
> >> 16527074,
> >>>> 16377782, 17185264, 14518363, 16503262, 15763025, 15855797,
> >> 15281552,
> >>>> 14373491, 14894646, 15106333, 17847651, 16239885, 18225339,
> >> 18182041,
> >>>> 14161870, 16504649, 15462683, 15413283, 15693526, 14506023,
> >> 14000735,
> >>>> 15234901, 17994510, 16652601, 17250143, 17357528, 14854995,
> >> 16636582,
> >>>> 15856325, 16470266, 15502332, 14715205, 14804754, 15773203,
> >> 17997663,
> >>>> 16940919, 18145629, 17048409, 15038038), v121422275 = c(NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, 1294427, 1085157, 1659103, 1227780,
> >> 1264742,
> >>>> 1233227, 1369915, 1241682, 1195597, 1337652, 1463474, 1747482,
> >>>> 1677063, 1710162, 1408062, 1367046, 1325700, 1691519, 1490239,
> >>>> 1513014, 1619474, 1475569, 1128444, 975554, 1238609, 1397151,
> >>>> 1318789, 1574134, 1671827, 1418491, 1334309, 1502402, 1396184,
> >>>> 1534954, 1495128, 1385045, 1564246, 1572126, 1414339, 1390512,
> >>>> 1517317, 1674464, 1804056, 1390981, 1661250, 1521750, 1785414,
> >>>> 1689831, 1657511, 1471717, 1730868, 1914114, 1655118, 1787784,
> >>>> 1978644, 2061312, 1716886, 1775567, 1695326, 1731401, 1476016,
> >>>> 1747452, 1912495, 2113177, 1881425, 1849288, 1847819, 2037590,
> >>>> 2329039, 2215335, 2117342, 2440624, 2144344, 2149473, 2245874,
> >>>> 1776567, 2249560, 2091031, 1900474, 2027541, 1842369, 1956289,
> >>>> 2164626, 1810228, 2118096, 2076786, 1799082, 1985239, 2297525,
> >>>> 2217866, 2262269, 1938379, 1946678, 2282724, 1933329, 1934100,
> >>>> 2210996, 2019742, 1970774, 1922537, 2175532, 2191166, 2270389
> >>>> ), v121429235 = c(NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 936232,
> >> 1380845,
> >>>> 1096564, 804996, 947642, 966950, 1016699, 918866, 849556,
> >> 1053348,
> >>>> 986012, 946487, 950837, 940777, 1201431, 1056492, 869576,
> >> 1029796,
> >>>> 791533, 1342575, 768689, 1129197, 888039, 1196702, 844473,
> >> 836908,
> >>>> 1000086, 948109, 955454, 905751, 1334532, 795432, 939875,
> >> 1055059,
> >>>> 1162267, 887897, 1054106, 1321348, 926182, 747960, 994037,
> >> 934344,
> >>>> 931091, 768161, 1336244, 814041, 993226, 915337, 878574, 962984,
> >>>> 856037, 1349725, 1125033, 1145050, 735484, 1139687, 914030,
> >> 959260,
> >>>> 880369, 1003863, 1100186, 1106088, 943878, 908737, 921558,
> >> 760214,
> >>>> 1109277, 1149700, 881935, 854219, 1141033, 1046805, 990984,
> >> 942851,
> >>>> 1237111, 1260890, 1246517, 1386806, 1459511, 1049323, 1265316,
> >>>> 1526229, 1164388, 1234202, 1213186, 1219715, 1136702, 1018132,
> >>>> 1069785, 1189086, 1051625, 1075847, 1086470, 1097881, 1067886,
> >>>> 1154182, 1176269, 1124279, 1183524, 1411238, 1169574, 1246182,
> >>>> 1294246), v129360 = c(968307, 959792, 1076115, 1086887, 1251495,
> >>>> 1424836, 1645926, 1684631, 940698, 828397, 856445, 841089,
> >> 828632,
> >>>> 840372, 950609, 979841, 1145547, 1241005, 1423829, 1520486,
> >> 1096690,
> >>>> 1047509, 931186, 893051, 818595, 759586, 819928, 783164, 958451,
> >>>> 1052234, 1266479, 1297035, 962400, 940103, 811110, 772748,
> >> 665961,
> >>>> 734449, 784144, 758539, 894121, 1055843, 1236130, 1192797,
> >> 960006,
> >>>> 849533, 729150, 692275, 607965, 632583, 710260, 704517, 824671,
> >>>> 972044, 1142496, 1078026, 845734, 774906, 664769, 659470, 612101,
> >>>> 589993, 674934, 678565, 749718, 889528, 1009429, 969411, 766777,
> >>>> 662975, 606170, 602809, 512657, 475338, 563786, 560655, 668895,
> >>>> 812314, 889427, 905246, 682748, 609636, 515527, 468840, 432613,
> >>>> 413188, 446004, 473583, 581658, 663425, 766218, 798365, 560733,
> >>>> 544244, 448566, 422434, 363941, 373681, 423161, 455848, 549006,
> >>>> 512311, 643896, 655521, 523765, 473648, 395028, 395936, 370816,
> >>>> 364373, 427710, 454885, 527961, 618566, 751011, 714393, 576052,
> >>>> 525327, 433970, 415091, 358181, 346337, 408076, 435412, 503904,
> >>>> 609108, 725224, 688454, 558688, 498784, 427279, 430118, 366452,
> >>>> 377491, 419938, 445065, 528163, 634929, 690784, 707384, 529718,
> >>>> 482768, 418217, 402933, 358317, 342634, 408017, 408543, 507661,
> >>>> 593475, 669148, 698274, 512723, 495423, 412292, 389515, 332097,
> >>>> 333292, 379271, 413360, 496660, 584914, 663033, 687526, 506198,
> >>>> 494580, 384589, 408166, 351113, 324025, 385497, 420713, 517844,
> >>>> 612642, 719301, 696045, 569477, 518096, 423544, 437956, 383651,
> >>>> 377702, 433709, 441800, 539359, 636840, 756702, 714218, 596912,
> >>>> 524944, 438817, 431740, 383612, 367863, 406395, 443138, 500629,
> >>>> 608716, 704251, 689926, 543102, 463086, 397399, 394648, 331558,
> >>>> 323805, 401966, 383701, 492991, 630428, 709143, 710910, 528833,
> >>>> 468225, 398455, 413621, 320746, 315212, 387521, 409642, 517469,
> >>>> 628480, 719469), v129367 = c(895221, 827924, 1053256, 1021700,
> >>>> 1041938, 987341, 1054306, 1143262, 815543, 857805, 842812,
> >> 796604,
> >>>> 834925, 770257, 975730, 934709, 970982, 911664, 970902, 1059151,
> >>>> 927251, 969482, 872692, 839512, 839548, 755360, 888372, 855790,
> >>>> 934028, 917631, 966595, 1008325, 924734, 978616, 895027, 860250,
> >>>> 796199, 816724, 993943, 973312, 971248, 927537, 964599, 1023056,
> >>>> 935330, 952958, 906419, 843985, 784260, 775884, 972637, 942266,
> >>>> 981175, 928757, 996353, 1063537, 934522, 962724, 917215, 877143,
> >>>> 864687, 789247, 1026369, 995372, 1041521, 959846, 1014128,
> >> 1084626,
> >>>> 957957, 965648, 964565, 919535, 860830, 770369, 1018339, 987533,
> >>>> 1036117, 963210, 1052261, 1147884, 1009249, 1102833, 1079839,
> >>>> 920577, 889896, 831708, 1027160, 1004141, 1053969, 978913,
> >> 1058493,
> >>>> 1166431, 948350, 948412, 863854, 775676, 686194, 699708, 877517,
> >>>> 855250, 891139, 751240, 867679, 1010731, 882881, 908782, 899653,
> >>>> 858629, 828679, 785364, 1057204, 1035422, 1046472, 974958,
> >> 1091468,
> >>>> 1170113, 1024139, 1062967, 1051213, 1006391, 899269, 852185,
> >>>> 1117451, 1137169, 1169148, 1099355, 1195778, 1294448, 1099930,
> >>>> 1103412, 1084880, 1064711, 951741, 951003, 1167572, 1160377,
> >>>> 1155739, 1097731, 1212005, 1323590, 1135465, 1136159, 1123725,
> >>>> 1072563, 988504, 923774, 1184955, 1146244, 1187120, 1118133,
> >>>> 1219236, 1315701, 1126955, 1149551, 1106605, 1058712, 912693,
> >>>> 861161, 1096749, 1114567, 1153588, 1094638, 1187780, 1277890,
> >>>> 1070771, 1101986, 996189, 1007737, 846412, 739882, 983093,
> >> 971856,
> >>>> 1009164, 955152, 1042033, 1056119, 910781, 915331, 869120,
> >> 845165,
> >>>> 782995, 716476, 898016, 901224, 955598, 913648, 992280, 1063029,
> >>>> 931401, 933769, 873861, 822407, 804971, 747805, 904296, 928485,
> >>>> 960101, 944055, 1019181, 1128435, 995324, 1002176, 955042,
> >> 892834,
> >>>> 857278, 807727, 1035350, 992653, 1043240, 991543, 1012867,
> >> 1094743,
> >>>> 956089, 1005115, 913995, 881382, 796717, 765572, 986340, 958601,
> >>>> 991910, 947639, 1028986), v1992301 = c(70840, 74340, 75970,
> >> 72620,
> >>>> 72590, 72320, 71220, 69980, 82940, 84910, 80230, 73010, 74010,
> >>>> 71200, 64550, 72030, 67040, 58060, 65780, 73570, 71080, 73530,
> >>>> 70170, 67420, 72770, 70300, 76620, 71950, 82400, 77510, 79280,
> >>>> 73720, 75030, 71800, 75720, 68520, 72890, 73340, 65900, 68700,
> >>>> 69190, 78770, 69700, 69720, 66280, 67950, 66450, 74310, 72100,
> >>>> 79690, 77360, 74970, 73110, 66650, 76190, 76370, 69110, 68130,
> >>>> 69240, 77060, 68900, 70100, 75210, 75370, 69140, 73610, 71880,
> >>>> 70460, 81690, 75830, 76550, 64380, 77620, 70250, 73070, 69700,
> >>>> 76760, 73740, 68430, 68590, 67880, 68000, 67850, 73290, 73330,
> >>>> 71580, 76610, 77860, 71730, 86340, 73130, 74260, 78350, 89670,
> >>>> 92310, 96840, 104600, 118550, 109870, 113690, 121680, 113260,
> >>>> 82240, 88020, 85840, 81320, 84270, 79190, 75740, 72110, 73930,
> >>>> 75840, 75900, 77350, 77450, 77940, 79730, 78970, 76830, 81130,
> >>>> 68780, 74280, 72990, 75610, 74010, 74510, 79640, 77040, 73180,
> >>>> 77450, 76500, 76360, 72950, 80210, 75280, 74220, 72640, 70760,
> >>>> 72080, 74320, 75890, 73160, 73830, 70910, 77080, 71730, 71700,
> >>>> 71440, 73600, 70030, 73910, 71780, 74220, 73980, 72180, 74590,
> >>>> 78850, 73980, 81220, 73320, 70550, 86770, 67370, 68910, 71120,
> >>>> 72460, 74740, 70800, 72760, 79610, 72920, 74290, 76720, 101550,
> >>>> 60190, 70970, 70560, 70590, 71150, 74470, 71840, 70230, 69300,
> >>>> 71960, 72530, 68620, 77810, 74260, 71340, 67720, 71970, 73330,
> >>>> 67820, 70210, 72790, 74620, 70370, 70320, 73740, 71250, 71200,
> >>>> 76850, 70010, 73020, 76190, 68980, 70820, 70170, 72000, 72100,
> >>>> 73900, 75660, 73650, 71520, 73530, 71030, 72710, 75470, 76750,
> >>>> 73720, 74040, 71920, 75250), v1996491 = c(20333104, 20404933,
> >>>> 20429451, 20443702, 20442474, 20453171, 20494907, 20469899,
> >> 20426712,
> >>>> 20423088, 20431074, 20563595, 20608707, 20722376, 20729355,
> >> 20768807,
> >>>> 21040249, 21061442, 21072385, 21386395, 21361143, 21481726,
> >> 21596243,
> >>>> 21614432, 21702298, 21736376, 21736357, 21744928, 21848072,
> >> 21846894,
> >>>> 21947454, 21940721, 22017595, 22187732, 22226844, 22379231,
> >> 22554639,
> >>>> 22641673, 22744549, 22907620, 22980134, 23092919, 23181451,
> >> 23206767,
> >>>> 23425453, 23318773, 23348036, 23517288, 23482935, 23602818,
> >> 23784278,
> >>>> 23974850, 23921664, 24074395, 24223603, 24289526, 24427768,
> >> 24503153,
> >>>> 24606727, 24715635, 24661798, 24748394, 24847099, 24906920,
> >> 25035239,
> >>>> 25153096, 25225233, 25425738, 25594618, 25555772, 25803231,
> >> 25918644,
> >>>> 26050884, 26090730, 26304952, 26332475, 26592901, 26628543,
> >> 26691191,
> >>>> 26795716, 26761208, 26875873, 26972976, 26938528, 27101037,
> >> 27180711,
> >>>> 27241360, 27354111, 27442498, 27514060, 27466513, 27514474,
> >> 27386049,
> >>>> 27517692, 27313803, 27136562, 27069115, 26962612, 26955040,
> >> 26877705,
> >>>> 26886419, 26588008, 26677212, 26851356, 26953581, 27016460,
> >> 27155400,
> >>>> 27251087, 27253169, 27300593, 27342306, 27436290, 27580341,
> >> 27686074,
> >>>> 27860430, 27878998, 28147776, 28256507, 28354370, 28557974,
> >> 28716843,
> >>>> 28861177, 29057415, 28913944, 28887173, 29038232, 29065032,
> >> 29165480,
> >>>> 29222770, 29278705, 29304052, 29449805, 29488534, 29620041,
> >> 29795842,
> >>>> 29879786, 29839111, 30084067, 30096498, 30229968, 30298304,
> >> 30287625,
> >>>> 30389211, 30484631, 30628734, 30641277, 30932839, 30736619,
> >> 30970797,
> >>>> 30851107, 30920882, 31165786, 31066548, 31258395, 31403046,
> >> 31382224,
> >>>> 31477046, 31488824, 31587271, 31728896, 31880578, 32021255,
> >> 32294373,
> >>>> 32244815, 32415589, 32434552, 32436242, 32524750, 32735158,
> >> 33033517,
> >>>> 33172260, 33441230, 33246392, 33273322, 33847198, 33389255,
> >> 33687475,
> >>>> 34049329, 33935583, 33971885, 33781778, 33706550, 33873093,
> >> 33938988,
> >>>> 33985921, 34184776, 34057971, 34092996, 34084079, 34099494,
> >> 34350509,
> >>>> 34805403, 34785441, 34875075, 35152571, 35003861, 35186315,
> >> 35518127,
> >>>> 35361642, 35984437, 36321295, 36349916, 36944209, 36901171,
> >> 36971724,
> >>>> 37173621, 37152181, 37260262, 37492044, 37517038, 37471633,
> >> 37827498,
> >>>> 37872621, 38129314, 38213257, 38064353, 38230587, 38258308,
> >> 38560349,
> >>>> 38883535, 39178365, 39132811, NA), v2063945 = c(5904.9, 5875.6,
> >>>> 5887.4, 5930.5, 5938.4, 5925, 5937.2, 5937.5, 5934.5, 5926,
> >> 5937.3,
> >>>> 5929, 5926.3, 5944.8, 5961.3, 5976.4, 5999, 5999.5, 6031.6,
> >> 6075.3,
> >>>> 6093.5, 6103, 6138.1, 6146.9, 6164.7, 6197.4, 6214, 6186, 6184.7,
> >>>> 6196, 6193, 6210, 6225.1, 6237.7, 6253.3, 6284.2, 6293.8, 6308.9,
> >>>> 6288, 6300.3, 6301.9, 6319.3, 6331.5, 6307.3, 6316.1, 6334.8,
> >>>> 6340.7, 6341, 6328.7, 6348.3, 6347.4, 6363, 6387.7, 6385.3,
> >> 6379.3,
> >>>> 6389.3, 6408.1, 6421.1, 6419.8, 6395.7, 6405.6, 6391.1, 6424,
> >>>> 6444.7, 6477.2, 6476.3, 6476.7, 6463.2, 6456, 6442.3, 6465.3,
> >>>> 6502.4, 6499.9, 6511, 6518, 6507.3, 6521.6, 6530, 6558.8, 6559.4,
> >>>> 6578.1, 6610, 6586.2, 6569.6, 6578.8, 6626.7, 6605.8, 6623,
> >> 6638.2,
> >>>> 6599.7, 6596.8, 6614, 6632.7, 6650.1, 6568, 6576.2, 6480.5,
> >> 6461.2,
> >>>> 6458.8, 6416.4, 6385.7, 6377.6, 6407.4, 6418.1, 6438, 6458.4,
> >>>> 6465.5, 6451.6, 6483.7, 6477.7, 6471.1, 6506.2, 6543.2, 6573,
> >>>> 6566.9, 6566.7, 6534.3, 6553.8, 6578.9, 6602.1, 6638.1, 6618.2,
> >>>> 6629.4, 6658.9, 6649.1, 6677.9, 6670.2, 6684.5, 6668.5, 6651.3,
> >>>> 6668.6, 6682.6, 6669.8, 6659.6, 6692.4, 6705.4, 6672.6, 6702,
> >>>> 6709.3, 6698.6, 6714.3, 6717.2, 6735.8, 6768.9, 6771.7, 6786,
> >>>> 6785.5, 6795.2, 6822.6, 6827.8, 6828.2, 6845.7, 6856.1, 6849.1,
> >>>> 6856.9, 6845.2, 6843, 6861.8, 6864.3, 6882.6, 6864.9, 6848.7,
> >>>> 6879.7, 6881.4, 6892.3, 6930.9, 6899.4, 6879.1, 6878.7, 6898.1,
> >>>> 6899.6, 6894, 6925.8, 6943.9, 6953.9, 6949.8, 6919.6, 6935,
> >> 6930.3,
> >>>> 6963.1, 6979.8, 6968.8, 6985.6, 6991, 7006.8, 7007.8, 6972.6,
> >>>> 6991.4, 7002.6, 7024.7, 7028.3, 7033.3, 7074.1, 7077.5, 7069.9,
> >>>> 7078.6, 7094.7, 7086, 7116.1, 7154.1, 7177.2, 7179.7, 7208.3,
> >>>> 7208.8, 7171.6, 7187.1, 7194.9, 7212.3, 7215.8, 7246.8, 7302.5,
> >>>> 7228.4, 7266.4, 7267.5, 7284.4, 7300.5, 7341.9, 7378.8, 7370,
> >>>> 7417.1, 7438, 7431, 7420.3), v2063948 = c(359.8, 388.7, 394.7,
> >>>> 383.6, 375.4, 395.2, 393.5, 410.6, 414, 419, 438.1, 453.4, 481,
> >>>> 457.2, 466.4, 452.4, 446.7, 469.1, 449.1, 464, 472, 469.6, 441.2,
> >>>> 461.4, 453.5, 456.9, 436.9, 459.1, 467.7, 464.8, 470.3, 464.8,
> >>>> 499.8, 467, 449.6, 448.6, 441.9, 449.4, 462.1, 456.6, 456.9,
> >>>> 460.7, 452, 456.8, 446.4, 450.5, 467.5, 478.6, 447.4, 468.4,
> >>>> 465.8, 459.4, 480.1, 466.5, 455.8, 454.5, 451.9, 449.9, 414,
> >>>> 435.2, 446.7, 433.1, 424.8, 425.3, 415.6, 416.5, 457.9, 449.5,
> >>>> 468.9, 444.1, 439.8, 426.5, 450.9, 446, 455.1, 461.4, 433, 459.3,
> >>>> 454.2, 448.3, 438.2, 426.1, 443.3, 468.2, 448.9, 435.6, 456.8,
> >>>> 439.2, 445.8, 451.4, 457.7, 450.8, 457.1, 471.6, 518.1, 525.3,
> >>>> 573.1, 623.1, 625, 632.7, 671.6, 677.8, 672.5, 666, 643.3, 641.2,
> >>>> 664.9, 655.6, 644.7, 646.5, 638.5, 636.1, 619.8, 593.1, 614,
> >>>> 646.8, 645.4, 595.7, 584.8, 585, 588.5, 570.8, 583.5, 576.4,
> >>>> 585.8, 571, 554.4, 544.6, 571.3, 575.3, 583, 546, 586.4, 556.3,
> >>>> 555.5, 568.6, 595.9, 568.8, 575.5, 570, 576.9, 613.3, 578.4,
> >>>> 581.7, 564, 572, 575.5, 569.2, 550, 563.2, 565, 556.1, 540.1,
> >>>> 552.3, 543.4, 570.3, 550.2, 553.8, 545.8, 541.8, 542.1, 547.2,
> >>>> 566.7, 539.5, 526.9, 502.8, 521.6, 518.6, 505.1, 509.9, 506.5,
> >>>> 500.6, 483.7, 485.2, 483.3, 510.2, 515.2, 501.8, 518.3, 499.4,
> >>>> 507, 508.6, 503.5, 531.1, 481.2, 465.8, 479, 503.5, 491.2, 472.7,
> >>>> 473.3, 483.9, 485.3, 475.5, 482.1, 445.6, 484.2, 473.7, 459.1,
> >>>> 417.4, 423, 441.8, 421.4, 428.9, 424, 419.3, 424.3, 430.1, 438.8,
> >>>> 455, 418.3, 439.1, 448.1, 428.5, 428.5, 416.7, 447.4, 442.2,
> >>>> 460.5, 470.1, 405.2, 427.9, 448.2), v2063949 = c(5.7, 6.2, 6.3,
> >>>> 6.1, 5.9, 6.3, 6.2, 6.5, 6.5, 6.6, 6.9, 7.1, 7.5, 7.1, 7.3, 7,
> >>>> 6.9, 7.3, 6.9, 7.1, 7.2, 7.1, 6.7, 7, 6.9, 6.9, 6.6, 6.9, 7,
> >>>> 7, 7.1, 7, 7.4, 7, 6.7, 6.7, 6.6, 6.6, 6.8, 6.8, 6.8, 6.8, 6.7,
> >>>> 6.8, 6.6, 6.6, 6.9, 7, 6.6, 6.9, 6.8, 6.7, 7, 6.8, 6.7, 6.6,
> >>>> 6.6, 6.5, 6.1, 6.4, 6.5, 6.3, 6.2, 6.2, 6, 6, 6.6, 6.5, 6.8,
> >>>> 6.4, 6.4, 6.2, 6.5, 6.4, 6.5, 6.6, 6.2, 6.6, 6.5, 6.4, 6.2, 6.1,
> >>>> 6.3, 6.7, 6.4, 6.2, 6.5, 6.2, 6.3, 6.4, 6.5, 6.4, 6.4, 6.6, 7.3,
> >>>> 7.4, 8.1, 8.8, 8.8, 9, 9.5, 9.6, 9.5, 9.4, 9.1, 9, 9.3, 9.2,
> >>>> 9, 9.1, 9, 8.9, 8.7, 8.3, 8.6, 9, 9, 8.3, 8.2, 8.1, 8.1, 7.9,
> >>>> 8.1, 8, 8.1, 7.9, 7.7, 7.5, 7.9, 8, 8, 7.6, 8.1, 7.7, 7.7, 7.8,
> >>>> 8.2, 7.8, 7.9, 7.8, 7.9, 8.4, 7.9, 7.9, 7.7, 7.8, 7.8, 7.7, 7.5,
> >>>> 7.6, 7.6, 7.5, 7.3, 7.5, 7.3, 7.7, 7.4, 7.5, 7.4, 7.3, 7.3, 7.4,
> >>>> 7.6, 7.3, 7.1, 6.8, 7, 7, 6.8, 6.9, 6.8, 6.8, 6.5, 6.5, 6.5,
> >>>> 6.8, 6.9, 6.7, 7, 6.7, 6.8, 6.8, 6.7, 7.1, 6.4, 6.2, 6.4, 6.7,
> >>>> 6.6, 6.3, 6.3, 6.4, 6.4, 6.3, 6.4, 5.9, 6.4, 6.3, 6.1, 5.5, 5.6,
> >>>> 5.8, 5.5, 5.6, 5.6, 5.5, 5.6, 5.6, 5.7, 5.9, 5.4, 5.7, 5.8, 5.6,
> >>>> 5.6, 5.4, 5.7, 5.7, 5.9, 6, 5.2, 5.4, 5.7), v2063950 = c(67.3,
> >>>> 67.2, 67.3, 67.5, 67.4, 67.3, 67.3, 67.3, 67.2, 67.1, 67.3, 67.3,
> >>>> 67.5, 67.3, 67.4, 67.3, 67.4, 67.5, 67.5, 68, 68.2, 68.2, 68.2,
> >>>> 68.4, 68.4, 68.7, 68.6, 68.4, 68.4, 68.4, 68.3, 68.3, 68.7, 68.5,
> >>>> 68.4, 68.6, 68.5, 68.7, 68.5, 68.5, 68.4, 68.5, 68.4, 68.1, 68,
> >>>> 68.2, 68.3, 68.4, 67.9, 68.2, 68.1, 68.1, 68.4, 68.2, 67.9, 67.9,
> >>>> 68, 68, 67.6, 67.5, 67.6, 67.3, 67.4, 67.6, 67.7, 67.6, 67.9,
> >>>> 67.6, 67.7, 67.3, 67.4, 67.5, 67.7, 67.7, 67.8, 67.7, 67.5, 67.8,
> >>>> 67.9, 67.8, 67.8, 67.9, 67.8, 67.8, 67.7, 67.9, 67.9, 67.8, 67.9,
> >>>> 67.5, 67.5, 67.5, 67.7, 67.9, 67.5, 67.6, 67.1, 67.3, 67.3, 66.9,
> >>>> 66.9, 66.8, 66.9, 66.9, 66.8, 66.9, 67.1, 66.8, 67, 66.9, 66.7,
> >>>> 66.9, 67, 66.9, 67, 67.2, 66.8, 66.4, 66.5, 66.7, 67, 66.6, 66.8,
> >>>> 66.9, 66.8, 66.9, 66.6, 66.5, 66.5, 66.3, 66.5, 66.2, 66.4, 65.9,
> >>>> 66.2, 66.3, 66.2, 66.1, 66.2, 66, 66.1, 66.4, 66.2, 66.4, 66.2,
> >>>> 66.4, 66.3, 66.3, 66.3, 66.4, 66.3, 66.3, 66.2, 66.2, 66.1, 66.2,
> >>>> 65.9, 66.1, 66, 66, 65.8, 65.6, 66, 65.7, 65.7, 65.8, 65.6, 65.3,
> >>>> 65.2, 65.3, 65.3, 65.1, 65.2, 65.3, 65.3, 65.4, 65.1, 65.1, 65.1,
> >>>> 65.2, 65.4, 65.2, 65.2, 65.5, 65.1, 64.9, 64.6, 64.9, 64.8, 64.8,
> >>>> 64.8, 64.9, 65.1, 65, 64.9, 64.6, 65, 64.8, 64.8, 64.7, 64.8,
> >>>> 64.9, 64.9, 64.9, 64.4, 64.4, 64.4, 64.5, 64.5, 64.8, 64.8, 64.3,
> >>>> 64.6, 64.3, 64.4, 64.3, 64.8, 65, 65, 65.3, 64.9, 64.9, 64.8),
> >>>> v2063951 = c(63.5, 63, 63.1, 63.4, 63.4, 63.1, 63.1, 63,
> >>>> 62.9, 62.7, 62.7, 62.5, 62.4, 62.5, 62.6, 62.6, 62.7, 62.6,
> >>>> 62.8, 63.2, 63.3, 63.3, 63.6, 63.6, 63.7, 64, 64.1, 63.7,
> >>>> 63.6, 63.6, 63.5, 63.6, 63.6, 63.7, 63.8, 64, 64, 64.1,
> >> 63.8,
> >>>> 63.8, 63.8, 63.8, 63.9, 63.5, 63.5, 63.7, 63.7, 63.6, 63.4,
> >>>> 63.5, 63.4, 63.5, 63.6, 63.5, 63.4, 63.4, 63.5, 63.5, 63.5,
> >>>> 63.2, 63.2, 63, 63.2, 63.4, 63.6, 63.5, 63.4, 63.2, 63.1,
> >>>> 62.9, 63.1, 63.4, 63.3, 63.4, 63.4, 63.2, 63.3, 63.3, 63.5,
> >>>> 63.4, 63.6, 63.8, 63.5, 63.3, 63.3, 63.7, 63.5, 63.6, 63.7,
> >>>> 63.2, 63.1, 63.2, 63.3, 63.4, 62.6, 62.6, 61.7, 61.4, 61.3,
> >>>> 60.9, 60.5, 60.4, 60.6, 60.6, 60.7, 60.8, 60.9, 60.7, 60.9,
> >>>> 60.8, 60.7, 60.9, 61.2, 61.4, 61.3, 61.2, 60.8, 60.9, 61.1,
> >>>> 61.3, 61.5, 61.3, 61.4, 61.6, 61.4, 61.6, 61.5, 61.5, 61.3,
> >>>> 61, 61.1, 61.2, 61, 60.9, 61.1, 61.1, 60.8, 61, 60.9, 60.8,
> >>>> 60.9, 60.8, 60.9, 61.2, 61.1, 61.2, 61.2, 61.2, 61.3, 61.3,
> >>>> 61.2, 61.3, 61.3, 61.2, 61.2, 61.1, 61, 61.1, 61.1, 61.2,
> >>>> 61, 60.8, 61, 61, 61, 61.3, 61, 60.8, 60.7, 60.8, 60.8,
> >> 60.7,
> >>>> 60.9, 61, 61.1, 61, 60.6, 60.7, 60.6, 60.8, 60.9, 60.8,
> >> 60.9,
> >>>> 60.9, 60.9, 60.9, 60.5, 60.6, 60.6, 60.7, 60.7, 60.7, 61,
> >>>> 60.9, 60.8, 60.8, 60.9, 60.7, 60.9, 61.1, 61.2, 61.1, 61.3,
> >>>> 61.2, 60.8, 60.9, 60.8, 60.9, 60.8, 61, 61.3, 60.6, 60.8,
> >>>> 60.7, 60.8, 60.8, 61.1, 61.3, 61.2, 61.4, 61.5, 61.3, 61.1
> >>>> ), v382201 = c(212164, 193583, 215866, 211263, 222871,
> >> 215519,
> >>>> 219942, 216251, 207703, 212013, 207781, 219596, 222977,
> >> 202836,
> >>>> 225014, 217040, 223269, 212081, 211644, 208999, 200885,
> >> 207899,
> >>>> 204091, 216573, 218997, 195583, 215113, 206360, 214884,
> >> 208636,
> >>>> 214072, 211055, 206974, 211607, 205837, 215020, 216294,
> >> 201218,
> >>>> 216097, 209029, 216690, 207829, 211911, 212123, 205356,
> >> 211083,
> >>>> 205076, 212205, 212779, 191520, 213090, 209484, 215975,
> >> 205127,
> >>>> 207085, 209844, 201884, 206749, 200246, 208719, 211380,
> >> 190749,
> >>>> 209346, 200994, 207431, 198322, 201983, 200869, 196045,
> >> 199493,
> >>>> 195149, 205332, 207126, 185698, 207850, 205701, 216965,
> >> 209296,
> >>>> 215644, 214061, 205121, 209924, 204004, 213241, 217848,
> >> 203144,
> >>>> 213848, 206368, 212813, 200362, 202502, 202339, 195491,
> >> 201314,
> >>>> 196093, 206104, 208701, 190879, 213025, 208090, 217292,
> >> 210890,
> >>>> 216526, 213092, 206553, 209884, 204042, 211314, 212389,
> >> 192037,
> >>>> 213815, 208826, 216756, 207533, 210091, 212435, 204595,
> >> 209379,
> >>>> 203827, 210218, 212451, 192470, 214095, 208717, 217913,
> >> 212215,
> >>>> 217087, 218783, 209940, 214059, 208998, 220829, 223171,
> >> 208246,
> >>>> 222458, 215499, 221694, 213553, 219458, 221757, 214203,
> >> 221003,
> >>>> 214380, 221215, 220019, 197689, 218045, 210866, 218954,
> >> 209825,
> >>>> 212145, 218399, 210138, 215187, 206605, 211504, 212024,
> >> 192311,
> >>>> 212260, 207136, 215097, 210584, 218528, 220739, 214149,
> >> 218748,
> >>>> 208968, 216712, 218399, 197318, 223819, 221927, 234903,
> >> 228622,
> >>>> 233660, 231277, 221779, 227918, 220888, 231634, 235272,
> >> 220580,
> >>>> 233970, 226381, 235613, 227998, 234353, 235796, 230542,
> >> 239605,
> >>>> 233645, 245124, 248935, 226969, 252118, 245888, 253940,
> >> 242869,
> >>>> 249518, 250305, 242427, 251666, 242906, 253645, 257586,
> >> 236425,
> >>>> 262768, 252595, 262910, 254396, 254417, 252449, 241404,
> >> 246729,
> >>>> 237361, 248692, 251752, 228933, 256286, 249336, 255692,
> >> 247109,
> >>>> 251855), v41691004 = c(96.1, 96.7, 97.1, 96.6, 98, 95.7,
> >>>> 97, 98.2, 97.3, 98.3, 98.4, 98.6, 95.7, 98.4, 99.3, 99.7,
> >>>> 99.1, 100.4, 99.8, 100.5, 99.8, 99.9, 103.6, 103.7, 101.6,
> >>>> 104.4, 103.6, 104.1, 104.8, 104.9, 104.8, 105.2, 104.7,
> >> 103.8,
> >>>> 104.5, 105.7, 104.6, 105.6, 106.8, 107.1, 107, 107.1, 108.5,
> >>>> 108.6, 109.1, 109.6, 109.8, 109, 109.3, 110.3, 111, 111.8,
> >>>> 110.8, 109.9, 111.4, 111, 110.8, 111.4, 111, 111.6, 108.9,
> >>>> 111.2, 110.9, 111.5, 111.7, 113.2, 112.7, 112.2, 111.1,
> >> 112.6,
> >>>> 112.2, 113.7, 113.5, 114.2, 113.4, 114.7, 113.4, 113.8, 114,
> >>>> 113.9, 112.9, 114.2, 114.5, 116.7, 117.5, 120.1, 120.5, 123,
> >>>> 125.5, 126.9, 126.9, 128.3, 127.5, 129.4, 129.9, 131, 128.9,
> >>>> 130.4, 130.4, 132.6, 134.3, 133.2, 133.7, 133.4, 132.7,
> >> 134.3,
> >>>> 134.4, 137.5, 134.8, 137.1, 136.3, 136.6, 136, 135.8, 134.6,
> >>>> 135.6, 136.1, 136.4, 136.2, 138, 136.4, 137.9, 139.7, 140.2,
> >>>> 139.9, 140.9, 141.9, 139.8, 139.4, 140.1, 140, 142.3, 139.1,
> >>>> 141.3, 141.3, 141.9, 139, 140.2, 140.3, 141.2, 139.8, 145.6,
> >>>> 143, 142.1, 140.9, 145, 142.5, 143.6, 144, 143.6, 145.1,
> >>>> 144.5, 143.9, 143.4, 142.7, 142.6, 140.9, 146, 142.6, 144.2,
> >>>> 145.4, 143.9, 145.8, 146.2, 144.3, 143.4, 144.2, 146.8,
> >> 141.5,
> >>>> 147.4, 146.1, 144.8, 146.4, 144.9, 147, 146, 143.2, 142.5,
> >>>> 141.9, 146.1, 144.8, 146.9, 143.7, 146, 151.6, 144.1, 146.8,
> >>>> 145.6, 146.2, 146.3, 147.1, 148.1, 145, 145.1, 149.3, 148.6,
> >>>> 147.9, 148.6, 149.9, 150.4, 148.2, 150.9, 149, 151.4, 147.8,
> >>>> 149.5, 149.2, 149.1, 151.8, 150.9, 151.2, 150, 149.5, 152.5,
> >>>> 152, 153.6, 149.9, 153.7, 152.4, 149.8, 151.8, 150, 152.5
> >>>> ), v41691014 = c(103.9, 106.6, 106.1, 105.2, 107.6, 105.4,
> >>>> 108, 106.5, 102.2, 101.4, 97.5, 105.2, 102.7, 101.5, 95.5,
> >>>> 101.7, 99, 100.5, 101.9, 98.6, 98.2, 100.7, 97.2, 102.4,
> >>>> 100.9, 103.6, 105.1, 104.9, 105.3, 100.9, 104.1, 104.8,
> >> 98.1,
> >>>> 98.3, 101.5, 101.9, 102.2, 101.8, 95.6, 97.6, 97.9, 102.3,
> >>>> 98.7, 102.7, 96.4, 101.3, 98, 95.4, 95.6, 101.3, 100.6,
> >> 97.5,
> >>>> 101.2, 98.8, 96.1, 98.4, 92.6, 99.2, 96.9, 100, 99.5, 103.8,
> >>>> 103.8, 104.1, 105.7, 106.9, 104.9, 103, 95.5, 101.5, 100.8,
> >>>> 101.9, 104.2, 104.3, 104.5, 104.4, 105.8, 105.2, 105.5,
> >> 105.4,
> >>>> 98.3, 100.4, 98.3, 98, 101.7, 102.9, 110.7, 120.4, 121.3,
> >>>> 120.1, 121.8, 121.1, 117.8, 122.4, 133.1, 134.9, 135.2,
> >> 137.7,
> >>>> 140, 140.8, 140.8, 140.8, 140.5, 139.9, 135.4, 138.2, 138.6,
> >>>> 138.5, 137, 140.4, 139.6, 136.9, 136.5, 136.9, 137.1, 136,
> >>>> 130.9, 136.1, 139, 136.5, 139.4, 141.2, 143.1, 145.1, 142.5,
> >>>> 143.6, 142.9, 142.1, 134.4, 141.4, 139.4, 141.8, 142.4,
> >> 143.5,
> >>>> 143.1, 143.4, 143, 142.3, 143, 143.3, 137.5, 141.6, 141.2,
> >>>> 142.9, 138.9, 143.3, 143.8, 140.8, 137, 138.6, 137.8, 137.5,
> >>>> 132, 137.8, 136, 135.7, 136.2, 137.2, 139.6, 140.2, 140.2,
> >>>> 139.9, 139.8, 140, 138.9, 139.3, 138.6, 139, 138.1, 139.1,
> >>>> 144.6, 144.4, 143.3, 143.9, 142.9, 143.8, 143.2, 142.6,
> >> 141.5,
> >>>> 141.1, 145.3, 145.8, 145.2, 145.3, 140.5, 140.1, 139.7,
> >> 137.1,
> >>>> 134.5, 135.4, 133.6, 132.4, 132.3, 133.5, 134, 133.7, 133,
> >>>> 133.2, 133, 132.9, 131.3, 133.5, 133.2, 132.8, 133.4, 134,
> >>>> 134.5, 134.4, 134.5, 134.8, 133.5, 130.4, 130.5, 131.5, 131,
> >>>> 130.4, 131.3, 130.4, 131.5, 131.5, 130.7, 131.3, 130),
> >> v41691919
> >>>> = c(96.5,
> >>>> 97.1, 97.7, 98.1, 98.7, 98.7, 98.5, 98.5, 98.7, 98.4, 97.7,
> >>>> 97.7, 97.7, 98.4, 99.5, 99.5, 99.5, 99.8, 100.5, 101.3,
> >> 100.9,
> >>>> 101.1, 101.4, 100.4, 101.9, 102.7, 102.8, 101.8, 102.2,
> >> 102.3,
> >>>> 102.5, 103, 103.2, 102.9, 103.1, 103.4, 103.4, 103.6, 104,
> >>>> 104.1, 105, 104.8, 104.9, 104.7, 104.8, 105, 105.4, 105.3,
> >>>> 105.1, 105.8, 106.4, 106.5, 106.6, 106.8, 106.9, 107.5,
> >> 108.2,
> >>>> 107.7, 107.5, 107.6, 108.2, 107.9, 108.8, 109.1, 109.5,
> >> 109.3,
> >>>> 109, 109.1, 108.5, 108.4, 108.6, 108.8, 108.6, 109.7, 110.8,
> >>>> 111.1, 111.6, 111.1, 111.1, 110.9, 111, 110.9, 111.2, 111.1,
> >>>> 110.9, 111.4, 111.7, 112.5, 113.6, 114.2, 115.1, 114.8,
> >> 115.1,
> >>>> 113.7, 113.5, 112.8, 112.4, 113.1, 113.7, 113.2, 114, 114.2,
> >>>> 113.7, 113.7, 113.8, 113.9, 114.6, 114.1, 114.5, 115.1,
> >> 115.3,
> >>>> 115.7, 116.2, 116, 117, 117, 117.1, 117.8, 118, 117.9,
> >> 117.8,
> >>>> 118, 119.4, 119.9, 120.9, 120.2, 120.5, 120.6, 121.1, 121,
> >>>> 121, 120.3, 120.6, 121.4, 122, 122.4, 122.4, 121.6, 121.4,
> >>>> 121.8, 122, 122.2, 121.9, 121.3, 121.3, 122.8, 123.2, 122.9,
> >>>> 123, 123.2, 123.4, 123.4, 123.5, 123.3, 123.3, 123.1, 123.3,
> >>>> 124.6, 125.1, 125.9, 126.5, 126.9, 126.5, 126.5, 126.7,
> >> 126.8,
> >>>> 126.3, 125.4, 125.3, 126.2, 127.1, 126.9, 127.7, 128.2,
> >> 128.4,
> >>>> 128, 127.8, 127.9, 127.9, 127.5, 127.8, 128.2, 129, 129.6,
> >>>> 130.1, 130.4, 130.3, 129.9, 130.1, 130.6, 130.2, 130, 130.8,
> >>>> 131.2, 131.4, 132, 131.9, 132.1, 131.9, 131.8, 132.3, 132.3,
> >>>> 132.7, 132, 133.2, 134, 134.6, 134.8, 134.9, 135.3, 136,
> >>>> 135.9, 135.2, 135.6, 135.1, 135, 135.2, 136, 137, 137.4,
> >>>> 138.1, 138, 138.8), v41691920 = c(95, 95.9, 96.6, 96.8,
> >> 97.7,
> >>>> 98.1, 98, 97.4, 96.7, 96.8, 97.4, 98, 99, 99.9, 100.3,
> >> 100.2,
> >>>> 100.1, 100.9, 100.6, 100.3, 99.1, 98.5, 100.2, 100.9, 102,
> >>>> 102.1, 102, 102, 101.6, 102.1, 102.5, 101.6, 100.5, 100.2,
> >>>> 100.9, 102.2, 102.5, 102.5, 102.6, 102.2, 103.2, 103.8,
> >> 104.3,
> >>>> 104, 103.3, 103.7, 104.9, 105.9, 105.4, 106, 106.4, 107.2,
> >>>> 107.5, 107.8, 107.3, 107.3, 105.9, 105.9, 106.6, 107.6, 109,
> >>>> 108.8, 109.2, 108.9, 109.2, 109.5, 108.9, 109, 108.2, 108.3,
> >>>> 109.6, 109.5, 110.8, 112.9, 112.3, 112, 113, 112.5, 112.2,
> >>>> 111.9, 110.5, 110.1, 111.2, 111.7, 112.5, 113, 112.8, 113.9,
> >>>> 115.2, 116.1, 117, 117.1, 117.3, 117.4, 119.6, 119.7, 120.8,
> >>>> 121.5, 121.6, 121.8, 121.6, 122.3, 122.3, 121.2, 120.2, 120,
> >>>> 121.6, 122.3, 123, 123.3, 123.8, 123, 123.1, 123.1, 123.6,
> >>>> 123.5, 122.5, 122.2, 122.9, 124.1, 124.9, 125.2, 127.4,
> >> 127.1,
> >>>> 128.5, 128.9, 129.7, 129.6, 128.4, 128.1, 129.6, 129.4,
> >> 130.6,
> >>>> 131, 130.5, 130.9, 131.6, 130.7, 131.5, 131.9, 130.1, 130.5,
> >>>> 131.5, 131.5, 131.7, 133.3, 132.8, 132.9, 132.9, 133.6,
> >> 133.5,
> >>>> 133.5, 131.7, 132.4, 133.5, 133, 133.7, 135.1, 135.1, 135.1,
> >>>> 136.7, 137.8, 137.5, 136.7, 136, 135.5, 137.6, 137.7, 140.2,
> >>>> 140.3, 140.2, 140, 141.7, 141.9, 141.6, 141.4, 140, 141.3,
> >>>> 142.4, 143.6, 145.7, 146.9, 146.1, 145.1, 144, 143.8, 144,
> >>>> 142.4, 140.5, 140.8, 141.6, 141.5, 142.1, 142.6, 142.4, 143,
> >>>> 143.6, 144.1, 145.1, 144.3, 142.8, 142, 143.3, 144.3, 146.3,
> >>>> 146.6, 146, 147, 146.7, 148.3, 148.9, 148.1, 146.7, 146.3,
> >>>> 148, 150.2, 151.6, 151.9, 151.9, 151.8, 152.7, 153.7, 153.8
> >>>> ), v41691952 = c(97.3, 97.4, 98.9, 98.8, 99, 99.6, 99.8,
> >>>> 99.7, 99.2, 99.9, 99.3, 99.5, 99.5, 99.6, 100.4, 99.1, 99.3,
> >>>> 99, 99.4, 101.5, 100.9, 101.9, 101.6, 97.7, 101.5, 101.8,
> >>>> 102.2, 100.4, 102.3, 103.1, 103, 103.5, 103.6, 103.7, 103.8,
> >>>> 104.4, 103.9, 104.1, 104.4, 105, 105.2, 105.3, 106, 106.1,
> >>>> 106.3, 106.7, 107, 107.1, 107.4, 107.9, 108.2, 108.2, 108.6,
> >>>> 108.8, 109.2, 109.3, 109.6, 110.3, 110.4, 110.2, 111.7, 112,
> >>>> 112.2, 111.7, 113, 112.9, 112.5, 112.7, 112.8, 113, 112.4,
> >>>> 112.9, 112.9, 112.9, 113.3, 114.2, 114.2, 114.4, 114.4,
> >> 114.7,
> >>>> 115, 116, 115.5, 115.8, 115.6, 115.9, 116.3, 117.1, 117.5,
> >>>> 117.6, 119.9, 120, 119.8, 120.1, 120.6, 120.6, 120.3, 120.3,
> >>>> 120.2, 118.1, 118.3, 118.3, 117.8, 117.7, 117.7, 118.2, 118,
> >>>> 118.2, 118.6, 118.6, 118.8, 120, 121.4, 121.4, 122.9, 122.5,
> >>>> 122.5, 123.2, 122.8, 123, 122.4, 121.5, 122, 122.2, 123,
> >>>> 123.1, 123.5, 123.6, 123.6, 123.8, 123.9, 124.1, 124.3,
> >> 124.3,
> >>>> 124.4, 124.4, 125.2, 125.3, 125.4, 125.4, 125.2, 125.5,
> >> 125.4,
> >>>> 125.4, 125.9, 126.1, 126.1, 126.1, 126.4, 126.6, 127.1,
> >> 127.2,
> >>>> 127.4, 127.4, 128.1, 128.3, 128.8, 128.9, 129.1, 131.9,
> >> 132.4,
> >>>> 132.3, 132.1, 132.1, 132.1, 132.3, 132.6, 132.9, 133.4,
> >> 133.5,
> >>>> 133.8, 133.5, 134.1, 134.4, 134.9, 135, 135.1, 135, 135.3,
> >>>> 135.5, 136.1, 136.2, 136.5, 136.9, 137.5, 138, 138.5, 138.7,
> >>>> 138.9, 139.5, 139.9, 140.1, 140.2, 140.2, 140.5, 140.7,
> >> 140.3,
> >>>> 140.6, 139.8, 140, 140.1, 140.5, 140.8, 141.1, 141.7, 141.9,
> >>>> 141.9, 141.9, 142.1, 142.4, 142.6, 142.9, 143.2, 143.7,
> >> 143.9,
> >>>> 144.1, 145, 145.5, 145.8, 146.5, 146.6, 146.8, 147.3),
> >> v41691965
> >>>> = c(96.9,
> >>>> 97.5, 97.8, 98.7, 98.8, 98.9, 98.7, 98.9, 100, 99.4, 98.9,
> >>>> 98.9, 98.8, 99.5, 100.3, 100.2, 100.2, 100.5, 100.8, 100.7,
> >>>> 100, 99.7, 99.9, 99.5, 99.5, 100.8, 100.8, 101, 101.1, 101,
> >>>> 101.1, 101.1, 101.6, 101.7, 101.3, 101.5, 101.2, 101.5,
> >> 101.7,
> >>>> 102.2, 101.9, 101.4, 101.2, 101.3, 101.5, 101.3, 101.2,
> >> 101.2,
> >>>> 101.2, 101.3, 101.7, 101.3, 101.5, 101.6, 101.2, 101.5,
> >> 102.2,
> >>>> 101.9, 102.5, 102.5, 102.4, 102.5, 102.3, 102.3, 102.6,
> >> 101.7,
> >>>> 100.9, 101.3, 101.9, 102.2, 102.3, 102.1, 102.3, 103, 103.4,
> >>>> 103.6, 103.3, 102.9, 103.3, 103.6, 103.9, 103.6, 103.4,
> >> 103.2,
> >>>> 103.5, 104.9, 104.6, 104.6, 104.6, 104.4, 104.6, 104.6,
> >> 106.1,
> >>>> 105.6, 106, 105.9, 105.9, 106.8, 107.1, 107.6, 107.6, 107.1,
> >>>> 106.6, 106.3, 107.9, 107.5, 108.6, 107.6, 108.1, 109.3,
> >> 109.2,
> >>>> 109.2, 109.4, 108.9, 110, 109.7, 110.4, 109.7, 110.1, 110,
> >>>> 110.1, 110.6, 111, 110.9, 111.5, 111.7, 111.8, 112.4, 113,
> >>>> 113.1, 113.3, 113.1, 113.3, 114.2, 113.8, 114, 114.1, 113.9,
> >>>> 113.9, 113.4, 113.5, 114.2, 114.5, 114, 114.4, 115.1, 115.6,
> >>>> 115.6, 115.2, 115.6, 116.1, 115.5, 115.6, 115.4, 115.6,
> >> 115.6,
> >>>> 115.6, 116.2, 116.8, 116, 116.4, 117.6, 117.7, 119.2, 119.2,
> >>>> 119.6, 119.6, 119.5, 119.8, 120.7, 121, 121.6, 121.7, 122,
> >>>> 121.9, 122.2, 122.4, 122.3, 121.7, 121.1, 121.4, 122.3,
> >> 122.6,
> >>>> 123.1, 123.7, 124.1, 124.3, 123.4, 123.7, 124.1, 123.7,
> >> 123.5,
> >>>> 123.6, 124.4, 124.2, 124.8, 124.4, 124.8, 124.2, 123.5,
> >> 123.2,
> >>>> 124.1, 124.8, 122.3, 124.9, 126.4, 125.7, 126.2, 125.2,
> >> 125.2,
> >>>> 125.9, 125.7, 125.5, 126.6, 126.3, 125.9, 125.8, 125.3,
> >> 124.9,
> >>>> 125.3, 125.3, 125.7, 124.9), v41691980 = c(102.4, 103.2,
> >>>> 105.3, 101, 100.4, 101.2, 101.2, 101.8, 102.7, 101.9, 100.5,
> >>>> 99.5, 95.8, 99, 101.8, 101.8, 99, 99.1, 101, 100.9, 101.9,
> >>>> 101.8, 100.1, 97.8, 96.6, 98.7, 99.9, 97.6, 97.7, 94.9,
> >> 95.6,
> >>>> 96.1, 99.2, 98.5, 99.6, 98, 98, 99.3, 100.2, 98.9, 97.7,
> >>>> 96.8, 95.3, 96.5, 99.8, 100.1, 98.1, 95.7, 92, 97.2, 99.3,
> >>>> 97.1, 96, 93.7, 93.2, 96.1, 99.7, 99.7, 95.8, 94.7, 92.1,
> >>>> 92.3, 97, 93.5, 94.1, 91.8, 90.2, 92.7, 95.2, 93.9, 94.4,
> >>>> 90.9, 90.7, 92.5, 95.4, 96.3, 94, 90.1, 92.7, 94.2, 94.7,
> >>>> 95, 94.6, 92.2, 89.4, 92.5, 93.7, 91.6, 90.2, 90.4, 92.5,
> >>>> 93.1, 95.5, 93.1, 93, 91.2, 90.4, 92.9, 95.2, 94.7, 92.6,
> >>>> 89.1, 89.6, 90.6, 93.2, 93.3, 94, 88.9, 88.4, 90.2, 91.9,
> >>>> 92.6, 92.2, 88.2, 88, 89.7, 93.1, 95, 91.5, 88.1, 86.3, 89,
> >>>> 93.7, 93.7, 93.1, 91, 89.9, 90.6, 95.8, 95.4, 92, 88.6,
> >> 88.3,
> >>>> 92.6, 94.6, 93.3, 91.2, 88.6, 86.5, 86.5, 90, 92.1, 88.6,
> >>>> 85.7, 83.8, 88.7, 93, 91.4, 91.1, 88.8, 87.6, 89.1, 89.8,
> >>>> 90.3, 87.9, 85.4, 85.2, 89.3, 92, 93.6, 93.2, 91.7, 90.9,
> >>>> 91.2, 94, 95.8, 93.3, 90.4, 89.3, 91, 93.7, 93.4, 92.3,
> >> 91.5,
> >>>> 91.7, 91.4, 93.6, 94.9, 94.2, 89.8, 88.1, 88.7, 92.9, 93.6,
> >>>> 93.6, 92.6, 90.6, 91.8, 94.3, 95.3, 93.2, 89.7, 88.2, 89.3,
> >>>> 91, 90.2, 90.3, 89.2, 88.9, 89.7, 90.6, 91.7, 91.6, 88.1,
> >>>> 87.6, 88.5, 90.5, 91.7, 90.6, 89.5, 88.8, 90.1, 91.9, 93.8,
> >>>> 92.6, 88.9, 89, 91.1, 92.3, 92.6, 92, 90.4, 90.2), v41691988
> >> =
> >>>> c(98.2,
> >>>> 98.6, 97.4, 99.3, 100.4, 98.8, 97.3, 97.8, 99, 97.3, 94.9,
> >>>> 94.4, 95.3, 95.8, 97.8, 99.8, 99.6, 99.3, 100.4, 101.3,
> >> 101.2,
> >>>> 101.9, 102.9, 104.5, 106.3, 107.8, 107.7, 105.6, 104.2,
> >> 103.9,
> >>>> 104.2, 106.9, 106.5, 105.3, 105.9, 105.9, 107.1, 106.6,
> >> 106.8,
> >>>> 107, 110.4, 109, 108.6, 107.2, 106.5, 107.4, 109, 108.4,
> >>>> 109.5, 109.7, 110.6, 111, 110.5, 111.3, 111.7, 113.7, 116.5,
> >>>> 113.7, 113.1, 113.4, 115.1, 112.5, 114.3, 117.8, 116.8,
> >> 116.9,
> >>>> 117.7, 117, 112.1, 111.7, 112.8, 114.2, 112.7, 115.1, 118.7,
> >>>> 118.8, 120.3, 119.2, 118.2, 116.1, 116.6, 115.4, 117.3, 118,
> >>>> 118, 117.1, 117.6, 120.3, 123.7, 125.8, 125.7, 123.5, 122.5,
> >>>> 116.5, 113.1, 110.9, 109.2, 110.2, 111.2, 111.2, 114.5,
> >> 116.7,
> >>>> 114.9, 115.8, 114.4, 115, 117, 117, 118.8, 118.5, 119,
> >> 119.1,
> >>>> 119.5, 119, 119.9, 119.3, 118.9, 121.4, 124, 124.2, 125.8,
> >>>> 125.6, 127.4, 130.2, 132.4, 129.1, 128.9, 128.9, 129.5,
> >> 129.5,
> >>>> 130.3, 128.1, 130.2, 130.8, 132.1, 134.1, 132.3, 129.7, 129,
> >>>> 130.2, 130.8, 130.7, 130.1, 128.7, 130.1, 133.3, 132.3,
> >> 131.3,
> >>>> 131.2, 132.1, 132.3, 131.8, 131.8, 131.2, 130.8, 131.7,
> >> 132.3,
> >>>> 133.8, 134.1, 134.7, 134.8, 135.7, 133.9, 132.9, 131.8,
> >> 131.4,
> >>>> 129.2, 126.1, 123.4, 125.3, 127.3, 127.4, 128.7, 130.4,
> >> 130.6,
> >>>> 128.2, 125.7, 125.6, 126.5, 126.3, 125.7, 124.5, 125.6,
> >> 128.6,
> >>>> 130.2, 130.8, 129.5, 128.5, 128.3, 129.9, 128.8, 130.3, 134,
> >>>> 133, 131.7, 134.3, 133.6, 132.9, 132.7, 132.8, 134.5, 134.8,
> >>>> 136.5, 137, 138.6, 138.9, 139.3, 140.7, 140.7, 141.2, 142.7,
> >>>> 142, 138.6, 139.2, 137.4, 138.5, 137, 138, 140.5, 142.7,
> >>>> 143.8, 143.2, 145.2), v41691994 = c(103.8, 103.4, 100.6,
> >>>> 110.1, 115.3, 105.7, 96.6, 98.7, 104.8, 96.7, 88.7, 85.4,
> >>>> 88.7, 89.1, 96.7, 103, 100, 98.4, 101.4, 104, 104.4, 106.7,
> >>>> 104.5, 103, 109.3, 116.4, 115.2, 104.5, 97, 98.6, 100.1,
> >>>> 111.2, 109.5, 103.7, 100.5, 100.1, 107, 109.3, 110, 111.4,
> >>>> 127.5, 120.5, 118.5, 117.9, 116.1, 122.8, 115.3, 109.1,
> >> 114.8,
> >>>> 117, 123.6, 128.9, 123.8, 128.3, 133.6, 142.9, 159.4, 143.5,
> >>>> 127.3, 128.7, 138.8, 125.6, 132.5, 150.2, 145.2, 147.9,
> >> 154.3,
> >>>> 152.2, 124.9, 122.8, 123, 129, 120.7, 132.6, 149.5, 149.3,
> >>>> 155.3, 151.1, 149, 141.7, 143.3, 140.5, 147.8, 148.9, 152.1,
> >>>> 152.2, 156.6, 167.5, 182.1, 192.4, 193.9, 182, 182.2, 156.2,
> >>>> 122.6, 110.1, 116, 120.4, 124.5, 125.1, 137.6, 145.5, 138,
> >>>> 143.5, 139.8, 139.8, 144, 139.6, 144.6, 142.1, 147.5, 147.1,
> >>>> 144.4, 140.9, 151, 149, 148.1, 155.2, 159.2, 162, 167.1,
> >>>> 168.1, 177.6, 191.4, 195.8, 189.3, 189.5, 186.8, 184, 182,
> >>>> 177.7, 173.2, 178.2, 184.1, 190.4, 196.8, 188.7, 179.8,
> >> 182.4,
> >>>> 187.4, 190.7, 186.1, 179.6, 176.2, 178.2, 190.6, 189.6,
> >> 183.7,
> >>>> 182.2, 187, 192.5, 191.3, 191, 182.7, 181.5, 186.1, 184.4,
> >>>> 189.7, 191.6, 196.8, 197.9, 204.5, 200.6, 192.7, 189.9,
> >> 181.1,
> >>>> 167.9, 151, 131.8, 144.8, 152.6, 153.3, 162.9, 172.7, 175.8,
> >>>> 163.8, 150.9, 145.7, 147.3, 144.2, 136.1, 128.3, 132.2,
> >> 146.8,
> >>>> 152.9, 154.8, 149.5, 146.5, 145.7, 151.6, 146.7, 152.1,
> >> 163.9,
> >>>> 156.6, 151.8, 168.9, 163.9, 156.8, 158.8, 161.3, 172.8,
> >> 167.2,
> >>>> 177.8, 175.7, 180.8, 178.6, 182.5, 194.2, 198.8, 193.7,
> >> 194.8,
> >>>> 192, 186.6, 179.2, 161.8, 152, 146.8, 146.3, 166.2, 184,
> >>>> 186.9, 174.6, 183.5), v42170711 = c(1170046, 1167260,
> >> 1172192,
> >>>> 1173559, 1173865, 1163159, 1173230, 1168291, 1148136,
> >> 1135730,
> >>>> 1176671, 1184706, 1186957, 1177962, 1194820, 1192486,
> >> 1204268,
> >>>> 1196677, 1198166, 1192339, 1188059, 1189860, 1195524,
> >> 1179193,
> >>>> 1160881, 1156255, 1154137, 1151079, 1223651, 1193786,
> >> 1187791,
> >>>> 1185070, 1222101, 1233158, 1222271, 1205916, 1211049,
> >> 1237429,
> >>>> 1221806, 1288146, 1268949, 1239192, 1259979, 1259944,
> >> 1257909,
> >>>> 1229472, 1206627, 1245003, 1262388, 1269395, 1276432,
> >> 1277248,
> >>>> 1261277, 1291593, 1298114, 1305550, 1267413, 1294688,
> >> 1295694,
> >>>> 1317484, 1333362, 1330478, 1362024, 1326774, 1319396,
> >> 1318673,
> >>>> 1334044, 1346594, 1339499, 1363158, 1404445, 1434255,
> >> 1396545,
> >>>> 1355204, 1367796, 1352577, 1349119, 1374720, 1398253,
> >> 1369215,
> >>>> 1413653, 1431392, 1421479, 1419408, 1487702, 1434740,
> >> 1434398,
> >>>> 1472990, 1471028, 1460549, 1461166, 1482247, 1490620,
> >> 1486005,
> >>>> 1467463, 1444413, 1469876, 1477567, 1460040, 1446679,
> >> 1452324,
> >>>> 1456279, 1455826, 1472154, 1485169, 1464240, 1487456,
> >> 1518692,
> >>>> 1516207, 1512158, 1535860, 1535652, 1538473, 1549310,
> >> 1517172,
> >>>> 1511436, 1531246, 1558108, 1555668, 1566767, 1566882,
> >> 1580492,
> >>>> 1566209, 1594096, 1600677, 1613907, 1619388, 1607791,
> >> 1602639,
> >>>> 1612385, 1631814, 1643924, 1650496, 1659254, 1679545,
> >> 1674956,
> >>>> 1675779, 1676020, 1676843, 1679625, 1694232, 1695255,
> >> 1720478,
> >>>> 1741576, 1736856, 1722187, 1750359, 1728204, 1736587,
> >> 1752139,
> >>>> 1752173, 1770304, 1762990, 1777806, 1787814, 1766222,
> >> 1771789,
> >>>> 1806919, 1817679, 1826720, 1854228, 1850492, 1857490,
> >> 1892994,
> >>>> 1890432, 1892879, 1890258, 1911380, 1915088, 1891501,
> >> 1922679,
> >>>> 1947153, 1994578, 1970953, 1983867, 2014740, 2008756,
> >> 2030234,
> >>>> 2032886, 2059674, 2068652, 2073047, 2083031, 2136894,
> >> 2115520,
> >>>> 2130280, 2158663, 2134182, 2172927, 2173367, 2173553,
> >> 2156196,
> >>>> 2218283, 2237749, 2206090, 2227664, 2221296, 2238127,
> >> 2265268,
> >>>> 2262536, 2284770, 2309970, 2310161, 2307041, 2331779,
> >> 2369833,
> >>>> 2388535, 2335561, 2373858, 2397911, 2392511, 2405673,
> >> 2410779,
> >>>> 2411443, 2438862, 2483861, 2444050, 2429816, 2451814,
> >> 2464695,
> >>>> 2470975, 2496128, 2476598), v44174769 = c(NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, 14870199, 13850896, 13723104, 12678291,
> >>>> 12481142, 13192192, 14390793, 13792514, 12301574, 12337737,
> >>>> 12179895, 13722325, 14545047, 12249895, 13035258, 10927584,
> >>>> 10791532, 11585680, 11896537, 12370088, 10788546, 10909386,
> >>>> 11181286, 13637486, 13731878, 12072844, 12075216, 10300763,
> >>>> 10397213, 11345202, 12392196, 12028914, 11059735, 11243073,
> >>>> 11257174, 13342863, 13491946, 11306554, 12021618, 11138199,
> >>>> 11643671, 11282364, 12719648, 12056468, 10814757, 10851400,
> >>>> 10601293, 11868363, 12184798, 11191009, 11849582, 10987177,
> >>>> 11591640, 11751264, 12496489, 11803400, 10478331, 11611753,
> >>>> 12350431, 12881577, 13487609, 11618200, 12250783, 11826684,
> >>>> 12102462, 12172373, 13118089, 12941911, 11778903, 12221484,
> >>>> 12655891, 13338404, 13206706, 11502235, 12312545, 11265569,
> >>>> 12023172, 12146589, 12418915, 12514403, 12441607, 12174062,
> >>>> 12761836, 13383973, 13602164, 12153121, 13222284, 11645090,
> >>>> 11870180, 11908548, 12536353, 11770646, 10308391, 9717057,
> >>>> 11975998, 12389373, 14714456, 13612168, 13246479, 12151889,
> >>>> 11885998, 12568410, 13693121, 13972899, 12538465, 12579381,
> >>>> 12575806, 13673046, 13741588, 12046519, 13195851, 12099752,
> >>>> 12305290, 12681867, 13133006, 12799308, 11905570, 12044349,
> >>>> 12653710, 14138740, 14612989, 12188411, 12860259, 11715642,
> >>>> 12189386, 12338008, 13697316, 13571423, 12294172, 12624440,
> >>>> 12973386, 13561183, 14465206, 12636860, 13160251, 11960370,
> >>>> 12456209, 12804423, 14463529), v47794 = c(2600262, 2215920,
> >>>> 2120366, 1437092, 708746, 493068, 361536, 438401, 445833,
> >>>> 778862, 1138557, 1636203, 2233518, 2114752, 1974646,
> >> 1534387,
> >>>> 998860, 559524, 447850, 393285, 402189, 651017, 1523288,
> >>>> 2076491, 2751527, 2619063, 2246900, 1555782, 855432, 475902,
> >>>> 452943, 420167, 414293, 850387, 1358940, 1968115, 2708192,
> >>>> 2497621, 1948959, 1466106, 828148, 462889, 422246, 405036,
> >>>> 425039, 687867, 1280263, 2001790, 2666491, 2470415, 2263741,
> >>>> 1411442, 900073, 491461, 413880, 390364, 393934, 586734,
> >>>> 1266299, 2202400, 2309033, 2164470, 2145389, 1328220,
> >> 736964,
> >>>> 480707, 445443, 369321, 424694, 845898, 1385128, 1748853,
> >>>> 3283157, 3804876, 3244792, 2477267, 1569953, 1169971,
> >> 1121247,
> >>>> 1218442, 1182862, 1409876, 2241749, 3274756, 3494706,
> >> 3615470,
> >>>> 3455902, 2199773, 1647961, 1230718, 1125165, 1078839,
> >> 1099809,
> >>>> 1539702, 2190793, 3126922, 3886115, 3290320, 2942615,
> >> 2110948,
> >>>> 1405583, 1308947, 1014607, 1148503, 1066941, 1596998,
> >> 2039112,
> >>>> 2798847, 3446040, 3255602, 2815621, 1839592, 1426302,
> >> 1177683,
> >>>> 1090902, 1145557, 1140902, 1524916, 2145484, 3256107,
> >> 3775523,
> >>>> 3559115, 3289994, 2219521, 1774688, 1291471, 1191457,
> >> 1170953,
> >>>> 1159087, 1543907, 2159364, 2786142, 3447635, 3179625,
> >> 2751435,
> >>>> 2152765, 1596927, 1290466, 1278246, 1247608, 1253886,
> >> 1622877,
> >>>> 2433993, 2831938, 3565488, 3636268, 3253630, 2559152,
> >> 1626984,
> >>>> 1251460, 1163841, 1130486, 1190063, 1491645, 2345181,
> >> 3346689,
> >>>> 4165953, 3842336, 3682352, 2580288, 1731497, 1199181,
> >> 1098817,
> >>>> 1113400, 1079822, 1464918, 2344949, 3006111, 3847035,
> >> 4007847,
> >>>> 3550039, 2397284, 1457876, 1155121, 1115934, 1113953,
> >> 1185585,
> >>>> 1421534, 2074815, 2726464, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,
> >>>> NA, NA, NA, NA, NA), v52300164 = c(75.656, 69.085, 78.652,
> >>>> 76.864, 72.529, 81.702, 56.027, 83.519, 70.07, 69.387,
> >> 77.807,
> >>>> 74.695, 100.946, 79.579, 93.638, 78.087, 86.824, 73.918,
> >>>> 87.194, 83.403, 76.443, 89.991, 86.48, 72.567, 72.041,
> >> 114.235,
> >>>> 82.83, 79.503, 73.893, 78.598, 81.738, 91.451, 86.032,
> >> 108.011,
> >>>> 79.145, 77.618, 65.539, 79.438, 102.972, 90.846, 85.324,
> >>>> 83.823, 77.963, 104.5, 85.947, 95.124, 85.782, 76.143,
> >> 57.357,
> >>>> 71.102, 79.966, 90.391, 70.392, 99.74, 101.093, 68.519,
> >> 70.549,
> >>>> 64.984, 84.727, 80.825, 78.937, 78.679, 81.605, 74.906,
> >> 74.252,
> >>>> 84.369, 86.341, 66.781, 61.618, 74.485, 69.132, 63.522,
> >> 74.888,
> >>>> 52.395, 57.398, 65.234, 74.207, 65.783, 73.555, 68.3,
> >> 82.511,
> >>>> 71.971, 78.523, 48.721, 65.401, 72.862, 78.834, 82.79,
> >> 72.919,
> >>>> 92.277, 56.461, 93.681, 87.929, 89.085, 56.675, 53.501,
> >> 43.62,
> >>>> 37.324, 59.424, 36.481, 42.83, 50.28, 41.606, 48.622,
> >> 57.833,
> >>>> 72.492, 53.894, 53.125, 54.779, 70.139, 58.95, 67.712,
> >> 69.299,
> >>>> 56.243, 56.468, 64.636, 60.448, 46.748, 81.488, 45.477,
> >> 50.752,
> >>>> 66.029, 73.787, 77.554, 58.62, 75.255, 76.621, 66.846,
> >> 66.99,
> >>>> 75.322, 54.47, 71.371, 80.795, 71.066, 87.498, 99.376,
> >> 76.071,
> >>>> 70.67, 72.869, 87.986, 73.416, 68.684, 60.868, 79.346,
> >> 47.764,
> >>>> 68.905, 58.11, 49.672, 65.877, 59.735, 62.198, 70.928,
> >> 60.752,
> >>>> 71.221, 60.905, 56.839, 64.447, 61.82, 42.108, 67.44,
> >> 65.443,
> >>>> 55.605, 68.712, 52.171, 53.423, 52.954, 58.842, 60.084,
> >> 61.375,
> >>>> 41.948, 62.912, 64.89, 84.012, 57.381, 51.031, 96.148,
> >> 90.318,
> >>>> 75.115, 87.755, 55.083, 61.053, 76.113, 86.185, 68.21,
> >> 72.047,
> >>>> 88.35, 79.231, 74.712, 69.061, 84.729, 58.144, 79.135,
> >> 100.138,
> >>>> 84.905, 88.793, 74.315, 54.912, 78.051, 82.618, 97.755,
> >> 77.894,
> >>>> 59.878, 97.51, 64.46, 84.769, 105.506, 74.729, 69.223,
> >> 54.825,
> >>>> 104.078, 68.996, 64.279, 78.005, 91.656, 85.848, 70.439,
> >>>> 73.273, 56.563, 61.413, 84.829, 48.976, 66.784, 69.821),
> >>>> v52367573 = c(9464438, 9389850, 9414772, 9544913, 9572846,
> >>>> 9584905, 9382415, 9482770, 9307864, 9492970, 9715825,
> >> 9940764,
> >>>> 10187105, 9817105, 9894764, 10188403, 9752106, 10139040,
> >>>> 10087479, 10102348, 10016255, 10262020, 10237805, 10307612,
> >>>> 10275184, 10419349, 10293724, 10289432, 10424067, 10431761,
> >>>> 10527812, 10580315, 10595496, 10523776, 10425828, 10335721,
> >>>> 10424135, 10732762, 10659720, 10501711, 10717818, 10609381,
> >>>> 10645290, 10737670, 10887666, 10937108, 11132192, 10931217,
> >>>> 11103939, 11305801, 11075886, 11028720, 11033612, 11241378,
> >>>> 11397097, 11326044, 11304720, 11399814, 11421142, 11492582,
> >>>> 11649949, 11524634, 11642228, 11686280, 11599854, 11634717,
> >>>> 11884843, 11829986, 11677538, 11713733, 11776782, 11976272,
> >>>> 11770553, 11952997, 12037744, 12132233, 12294168, 12192129,
> >>>> 12059206, 12249964, 12079285, 12188221, 12370418, 12650935,
> >>>> 12764803, 12552916, 12608853, 12795617, 12750516, 12876709,
> >>>> 12952859, 12827097, 12887679, 12691419, 12219526, 11768893,
> >>>> 11971337, 12144957, 12191313, 12116405, 12224295, 12297602,
> >>>> 12347845, 12466555, 12569735, 12626521, 12497659, 12654901,
> >>>> 12729332, 12664595, 13078388, 12984005, 12842562, 12990498,
> >>>> 12993825, 12972340, 13039000, 13133983, 13479873, 13367799,
> >>>> 13335395, 13464771, 13363329, 13442441, 13465088, 13511336,
> >>>> 13442888, 13465232, 13516739, 13526653, 13589859, 13734948,
> >>>> 13860252, 13684437, 13849354, 13682966, 13668438, 13655828,
> >>>> 13580493, 13625938, 13664902, 13702841, 13755498, 13686368,
> >>>> 13734294, 13844170, 13949851, 13820642, 14051575, 13898439,
> >>>> 14174606, 14358699, 14312287, 14272243, 14209392, 14249460,
> >>>> 14227780, 14452281, 14308973, 14748479, 14743171, 15010368,
> >>>> 15069059, 15070431, 15195531, 15255816, 15183239, 15205394,
> >>>> 14647813, 14945576, 15334757, 15374511, 15592985, 15798994,
> >>>> 15891823, 15968627, 15951432, 15952705, 16254637, 16221005,
> >>>> 16501660, 16685866, 16457644, 16452841, 16389104, 16572296,
> >>>> 16682913, 16647074, 16870723, 17044004, 17229456, 17351957,
> >>>> 17620979, 17602540, 17854654, 18075746, 17997156, 17852577,
> >>>> 18009088, 18068445, 18089431, 18415992, 18478794, 18252180,
> >>>> 18447029, 18476603, 18431675, 18001966, 18923864, 19072002,
> >>>> 19036564, 19125896, 19252974, 19388570, 18913792, 18775702,
> >>>> 18549987, 18866029, 19106589, 19318267, 19393034, 19381921,
> >>>> 19635452), v52368043 = c(17055707, 16701281, 16786260,
> >> 16756166,
> >>>> 16426263, 17318876, 17415322, 17417988, 17467072, 16667843,
> >>>> 16809604, 16838837, 17656245, 17760898, 17801874, 18105941,
> >>>> 18478672, 17862917, 18431580, 18835012, 18673362, 18981674,
> >>>> 19288359, 18532630, 19026893, 19180319, 18826048, 18486116,
> >>>> 18089625, 18443518, 18602047, 16896308, 18860395, 18915620,
> >>>> 19204737, 19105493, 19057133, 19208788, 19480899, 19674690,
> >>>> 19944916, 20191003, 19112930, 19976985, 19988078, 19908461,
> >>>> 19984769, 20052585, 20174329, 20282393, 19971041, 20011153,
> >>>> 20118897, 20384291, 19394115, 20528811, 20747769, 21226830,
> >>>> 20889921, 20835911, 21174421, 21127491, 21115706, 21262173,
> >>>> 21259669, 20762658, 20924455, 21128838, 20983747, 20702448,
> >>>> 20902061, 22345557, 21606059, 22455072, 22565907, 22270902,
> >>>> 22234914, 21980827, 21847268, 21946181, 21747434, 22088155,
> >>>> 22182948, 21347892, 21621099, 21430878, 21369303, 21760587,
> >>>> 22460331, 22607535, 23038099, 22220849, 22449645, 21821231,
> >>>> 21527176, 21186532, 19338429, 19597253, 19884704, 19771201,
> >>>> 20036009, 20304254, 21454669, 21050550, 21284980, 21705066,
> >>>> 22639281, 22690758, 22232400, 22063785, 21935778, 22036533,
> >>>> 22056549, 22257846, 21838250, 22219803, 22420845, 22433192,
> >>>> 22470460, 22707910, 23223292, 22951308, 23074595, 23073830,
> >>>> 23064664, 22851575, 23617734, 23483236, 23583258, 23634482,
> >>>> 23437658, 23930976, 23919897, 24166465, 24493107, 24053481,
> >>>> 23681436, 24261439, 23776686, 23773759, 23555273, 23586467,
> >>>> 24004817, 23802877, 23706412, 23500283, 23937931, 23774129,
> >>>> 23950854, 23426495, 23813338, 24075179, 24192801, 24430720,
> >>>> 24673059, 24276619, 24149635, 25049048, 24676187, 24825428,
> >>>> 25678929, 25704834, 25639134, 26020843, 26609736, 26171747,
> >>>> 25832302, 27524063, 25919116, 26045163, 26524824, 27370490,
> >>>> 27221566, 27327466, 27786373, 27642938, 27539806, 27574631,
> >>>> 28242316, 29454873, 29076991, 28757458, 28179964, 28507837,
> >>>> 28785755, 29279475, 29506538, 29536098, 29652113, 29854882,
> >>>> 29339135, 29688228, 30665282, 30467501, 30692879, 31064467,
> >>>> 31001099, 31230693, 31505904, 31660230, 31558092, 31645834,
> >>>> 32469843, 32170840, 32023093, 31736921, 32477853, 32189881,
> >>>> 31808769, 32214965, 32187342, 32060514, 31894538, 32692963,
> >>>> 32169342, 32134043, 32349968, 32960842, 32835304, 33065854,
> >>>> 32796030, 32840886, 33870331), v54027371 = c(5006719,
> >> 5067172,
> >>>> 5060865, 5062576, 5083254, 5072377, 5031234, 5052979,
> >> 5027204,
> >>>> 5043632, 5035454, 5044842, 5063238, 5093024, 5091640,
> >> 5102054,
> >>>> 5133352, 5142226, 5165655, 5203037, 5186307, 5174704,
> >> 5194163,
> >>>> 5190310, 5232432, 5210572, 5234726, 5235080, 5254050,
> >> 5245134,
> >>>> 5245175, 5249094, 5235952, 5262268, 5263595, 5253813,
> >> 5274263,
> >>>> 5265423, 5299891, 5327379, 5316191, 5331555, 5346574,
> >> 5307140,
> >>>> 5337742, 5347287, 5348381, 5377210, 5374212, 5383470,
> >> 5366697,
> >>>> 5392882, 5388985, 5416367, 5417477, 5433010, 5448853,
> >> 5441429,
> >>>> 5458425, 5471520, 5489243, 5495727, 5511121, 5512216,
> >> 5526438,
> >>>> 5537303, 5522426, 5518461, 5536277, 5501749, 5564018,
> >> 5570599,
> >>>> 5584461, 5593844, 5590604, 5602700, 5608632, 5616521,
> >> 5608951,
> >>>> 5623657, 5616005, 5645595, 5647305, 5647451, 5693895,
> >> 5691488,
> >>>> 5700220, 5707445, 5725799, 5728509, 5717031, 5723853,
> >> 5711995,
> >>>> 5719339, 5681740, 5663311, 5643435, 5611268, 5590716,
> >> 5570704,
> >>>> 5557739, 5536962, 5560436, 5529977, 5551949, 5574728,
> >> 5563493,
> >>>> 5575590, 5577965, 5587020, 5596086, 5612563, 5609016,
> >> 5626466,
> >>>> 5654424, 5633372, 5661574, 5667386, 5669274, 5689694,
> >> 5681104,
> >>>> 5701730, 5706973, 5707289, 5692449, 5724435, 5730464,
> >> 5731650,
> >>>> 5750310, 5739110, 5745413, 5742657, 5748606, 5744911,
> >> 5767140,
> >>>> 5785313, 5808618, 5816135, 5806957, 5825860, 5814678,
> >> 5800046,
> >>>> 5822757, 5809772, 5808239, 5818814, 5833898, 5829771,
> >> 5825801,
> >>>> 5833676, 5847351, 5886288, 5872335, 5876134, 5878844,
> >> 5883709,
> >>>> 5891947, 5885232, 5889681, 5891564, 5921837, 5931270,
> >> 5952834,
> >>>> 5959543, 5957751, 5970395, 5962589, 5958983, 5996099,
> >> 5997162,
> >>>> 5997791, 6025616, 6046802, 6043966, 6072665, 6063075,
> >> 6065666,
> >>>> 6115610, 6091893, 6118988, 6119637, 6126261, 6136886,
> >> 6169330,
> >>>> 6172147, 6198848, 6202387, 6197097, 6228521, 6219420,
> >> 6240999,
> >>>> 6266000, 6254684, 6277414, 6289899, 6290412, 6302735,
> >> 6343442,
> >>>> 6341087, 6359345, 6383177, 6364995, 6373585, 6394318,
> >> 6396556,
> >>>> 6406482, 6430135, 6428086, 6458862, 6470913, 6480563,
> >> 6509009,
> >>>> 6514678, 6545545, 6547838, 6538390, 6566127, 6566755,
> >> 6578311,
> >>>> 6586796, 6596265, 6592137, 6621773), v54027372 = c(698.62,
> >>>> 692.1, 695.87, 692.13, 690.73, 695.22, 696.41, 695.69,
> >> 699.31,
> >>>> 697.67, 701.01, 698.38, 698.51, 697.03, 704.24, 709.05,
> >> 708.58,
> >>>> 709.21, 716.46, 712.37, 715.7, 719.6, 720.31, 722.96,
> >> 716.06,
> >>>> 724.73, 720.79, 721.51, 722.85, 728.82, 727, 734.71, 736.25,
> >>>> 736.27, 737.61, 737.25, 744.83, 742.92, 744.9, 746.98,
> >> 752.13,
> >>>> 745.86, 750.15, 750.31, 744.13, 750.81, 755.16, 759.22,
> >> 763.57,
> >>>> 770.53, 764.34, 770.7, 773.6, 777.54, 775.18, 780.65,
> >> 789.71,
> >>>> 784.48, 782.33, 782.15, 783.23, 781.14, 783.74, 782.76,
> >> 783.53,
> >>>> 781.87, 787.48, 790.22, 794.1, 796.77, 793.41, 806.6,
> >> 806.36,
> >>>> 802.21, 813.11, 814.56, 817.25, 824.93, 824.76, 821.27,
> >> 821.08,
> >>>> 823.78, 831.6, 828.09, 828.79, 835.7, 833.64, 835.26,
> >> 838.09,
> >>>> 840.33, 838.09, 840.35, 839.84, 846.35, 846.62, 836.65,
> >> 840.76,
> >>>> 843.8, 846.48, 847.11, 843.82, 843.64, 844.55, 848.04,
> >> 853.68,
> >>>> 852.59, 856.16, 864.11, 864.09, 873.24, 870.03, 872.13,
> >> 873.52,
> >>>> 875.68, 883.39, 888.95, 902.33, 886.78, 891.69, 893.37,
> >> 897.82,
> >>>> 894.44, 896.07, 890.68, 893.01, 889.93, 887.63, 889.08,
> >> 888.93,
> >>>> 901.95, 894.42, 897.03, 898.32, 892.12, 895.8, 904.11,
> >> 902.56,
> >>>> 909.48, 912.62, 909.97, 911.16, 911.32, 911.6, 913.03,
> >> 911.93,
> >>>> 913.79, 916.13, 913.46, 921.64, 919.21, 916.77, 924.35,
> >> 920.2,
> >>>> 924, 930.44, 926.46, 930.9, 933.12, 928.53, 933.05, 938.36,
> >>>> 938.25, 945.34, 943.02, 944.16, 942.02, 939.85, 940.82,
> >> 950.06,
> >>>> 956.56, 962.54, 963.78, 955.99, 960.3, 972.32, 959.15,
> >> 966.48,
> >>>> 968.39, 967.04, 969.76, 962.76, 964.22, 969.64, 969.64,
> >> 974.42,
> >>>> 978.96, 975.58, 979.4, 970.39, 973.89, 976.8, 987.21, 985.7,
> >>>> 982.39, 982.7, 987.22, 987.37, 986.88, 984.19, 992.24,
> >> 1002.93,
> >>>> 1000.22, 1006.93, 1008.81, 1010.78, 1015.52, 1014.01,
> >> 1012.58,
> >>>> 1015.28, 1019.15, 1017.74, 1025.74, 1027.27, 1031.26,
> >> 1034.06,
> >>>> 1031.76, 1027.91, 1028.6, 1037.3, 1040.28, 1051.1, 1038.39,
> >>>> 1049.13), v54027376 = c(32.3, 32.2, 32.2, 32.1, 31.8, 31.6,
> >>>> 31.5, 31.3, 31.3, 31.4, 31.3, 31.2, 31.2, 31, 31.3, 31.3,
> >>>> 31.3, 31.3, 31.5, 31.4, 31.3, 31.4, 31.4, 31.4, 31.4, 31.5,
> >>>> 31.2, 31.3, 31.5, 31.4, 31.4, 31.5, 31.6, 31.6, 31.5, 31.5,
> >>>> 31.8, 31.7, 31.8, 31.8, 31.6, 31.6, 31.6, 31.5, 31.5, 31.5,
> >>>> 31.5, 31.5, 31.3, 31.4, 31.4, 31.3, 31.4, 31.4, 31.3, 31.5,
> >>>> 31.5, 31.4, 31.5, 31.4, 31.4, 31.4, 31.4, 31.3, 31.4, 31.2,
> >>>> 31.3, 31, 31.1, 31, 31.2, 31.3, 31.2, 30.9, 30.9, 31.1,
> >> 30.8,
> >>>> 30.8, 30.7, 30.8, 30.6, 30.7, 30.8, 30.8, 30.7, 30.9, 30.6,
> >>>> 30.7, 30.8, 31, 30.9, 30.8, 31, 31.1, 30.8, 30.1, 30.3,
> >> 30.4,
> >>>> 30.4, 30.3, 30.3, 30.2, 30.3, 30.4, 30.1, 30.2, 30, 30.1,
> >>>> 30, 30.2, 30.4, 30.6, 30.3, 30.3, 30.5, 30.5, 30.4, 30.3,
> >>>> 30.3, 30.5, 30.5, 30.5, 30.5, 30.2, 30.4, 30.3, 30.3, 30.4,
> >>>> 30.6, 30.6, 30.7, 30.6, 30.5, 30.5, 30.5, 30.7, 30.6, 30.9,
> >>>> 30.6, 30.6, 30.5, 30.6, 30.7, 30.2, 30.4, 30.3, 30.2, 30.2,
> >>>> 30.5, 30, 30.2, 30.4, 30.3, 30.1, 30.1, 30.2, 30.4, 30.4,
> >>>> 30.3, 30, 30, 30.1, 30.2, 30.3, 30, 30.3, 30.2, 30.2, 30.4,
> >>>> 30.2, 30.5, 30.6, 30.5, 30.5, 30.9, 30.2, 30.6, 30.7, 30.4,
> >>>> 30.8, 30.3, 30.5, 30.4, 30.5, 30.3, 30.6, 30.2, 30.1, 30.4,
> >>>> 30, 29.8, 30.2, 30.2, 29.9, 29.7, 29.9, 29.9, 29.8, 29.7,
> >>>> 30.2, 30, 30.3, 30.5, 30.4, 30, 30.3, 30.6, 30.2, 30.4,
> >> 30.4,
> >>>> 30.4, 30.2, 29.9, 29.9, 30, 29.5, 29.8, 29.8, 30, 30, 29.7,
> >>>> 29.4, 29.7), v61172 = c(22005, 20776, 22513, 21920, 22802,
> >>>> 22362, 23115, 22733, 21398, 22752, 22852, 23176, 22406,
> >> 20917,
> >>>> 21902, 21685, 22286, 22379, 22462, 24011, 21938, 23253,
> >> 22542,
> >>>> 23390, 22772, 21411, 23059, 21923, 22676, 22603, 22269,
> >> 23088,
> >>>> 21739, 22853, 23036, 22761, 24435, 22798, 23316, 22371,
> >> 23691,
> >>>> 25848, 26116, 26482, 24657, 25219, 23780, 25027, 23459,
> >> 20867,
> >>>> 21815, 21448, 22205, 22734, 21750, 21894, 21129, 22359,
> >> 21206,
> >>>> 23018, 21452, 20560, 23331, 22223, 24465, 22765, 23132,
> >> 22893,
> >>>> 22497, 24115, 23879, 24696, 23399, 21413, 24268, 23387,
> >> 25378,
> >>>> 24807, 23902, 26674, 24842, 27060, 25579, 27140, 25948,
> >> 23937,
> >>>> 27291, 26785, 26741, 28014, 26468, 30254, 28078, 31165,
> >> 27903,
> >>>> 30406, 28724, 25872, 26674, 28005, 28574, 28116, 27645,
> >> 28820,
> >>>> 26915, 29534, 29506, 29755, 25859, 25733, 27848, 27664,
> >> 29056,
> >>>> 28913, 27682, 28455, 28286, 28968, 27711, 31211, 26457,
> >> 25821,
> >>>> 29790, 28530, 32482, 31544, 32214, 33592, 30870, 34086,
> >> 31843,
> >>>> 33502, 32137, 30800, 31770, 30887, 31224, 34883, 31727,
> >> 34795,
> >>>> 33329, 37090, 35631, 36927, 36254, 34678, 35695, 34568,
> >> 36096,
> >>>> 35285, 36044, 36811, 34141, 35512, 34365, 34675, 34920,
> >> 33633,
> >>>> 33938, 35237, 35859, 34650, 34644, 35059, 34299, 35653,
> >> 35486,
> >>>> 35769, 36267, 35524, 36736, 36364, 36730, 36261, 37129,
> >> 37903,
> >>>> 37136, 38402, 38094, 39260, 39189, 38222, 39043, 38617,
> >> 38777,
> >>>> 38777, 38843, 39769, 40365, 40270, 40605, 40847, 40330,
> >> 39600,
> >>>> 40629, 40509, 41056, 40898, 40745, 41350, 41735, 41405,
> >> 41141,
> >>>> 41662, 40998, 39582, 41728, 42189, 43148, 42427, 42908,
> >> 44375,
> >>>> 43402, 44144, 43871, 44696, 44803, 43998, 44419, 45686,
> >> 45193,
> >>>> 44981, 46250), v66449943 = c(88.1, 86.1, 86.5, 84.6, 85.7,
> >>>> 85.8, 88.9, 92.4, 90.8, 90.7, 90.5, 91.6, 91.5, 90.8, 91.2,
> >>>> 92.4, 93.4, 91.3, 100.4, 100.8, 96.6, 101.2, 101.1, 96.7,
> >>>> 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6, 95.2, 93.1,
> >>>> 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103, 101.9,
> >> 95.7,
> >>>> 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6, 86.3, 88.9,
> >>>> 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7, 87.7,
> >>>> 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9, 101.2,
> >>>> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
> >>>> 104.3, 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9,
> >>>> 112.9, 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7,
> >>>> 115.9, 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6,
> >> 115.4,
> >>>> 114.4, 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8,
> >> 110.8,
> >>>> 113.2, 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4,
> >> 124.2,
> >>>> 129.5, 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3,
> >> 126.3,
> >>>> 121, 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3,
> >>>> 142, 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1,
> >>>> 117.6, 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2,
> >>>> 132.8, 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2,
> >> 126.7,
> >>>> 128, 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5,
> >>>> 130.3, 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2,
> >>>> 131.3, 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9,
> >>>> 135.8, 133.7, 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3,
> >>>> 136.6, 136, 137.2, 137.9, 136, 133.2, 133.4, 134.1, 134.2,
> >>>> 135.5, 135.6, 136.1, 135.1, 136.8, NA), v66449950 = c(94.3,
> >>>> 100.4, 103.6, 103.3, 106.1, 107.5, 105.3, 103.4, 99, 98.8,
> >>>> 98.3, 96.9, 97.5, 102.1, 100.2, 93.9, 95.3, 93.4, 94.9, 95,
> >>>> 89.6, 93, 93.9, 96.3, 95.7, 101.5, 98.7, 100.9, 99.8, 94.2,
> >>>> 86.3, 87.9, 88, 89.7, 90.3, 89.3, 89.4, 91.8, 93.5, 92.7,
> >>>> 96, 97, 96.8, 95.5, 95.1, 92.4, 91.5, 94.9, 96.6, 102.1,
> >>>> 97.1, 97.9, 98, 94.8, 96.6, 95.8, 97.2, 99.4, 97.8, 97.8,
> >>>> 97, 96.8, 96.7, 97.7, 98.3, 98.7, 100, 99.1, 100.6, 96.8,
> >>>> 97.4, 97.8, 96.9, 102.8, 104.2, 103.4, 106.5, 104.1, 102.3,
> >>>> 102.3, 98, 95.6, 92.3, 95, 92.6, 97.3, 96.2, 94.6, 103.8,
> >>>> 103.7, 104.4, 110, 109, 106.5, 107.2, 107.9, 105, 107,
> >> 107.5,
> >>>> 106, 107.8, 102.7, 102, 98.4, 98.7, 96.7, 99.2, 101.7,
> >> 102.7,
> >>>> 104.8, 105, 104.7, 107.7, 105.7, 105.3, 106.7, 108.2, 105.3,
> >>>> 104.1, 107.5, 110, 112.8, 115.2, 118.5, 116.6, 115.9, 116.4,
> >>>> 119.1, 118.7, 122.6, 121.7, 122.3, 120.5, 121.5, 118.2,
> >> 117.2,
> >>>> 115.5, 118.3, 116.3, 116.5, 112.3, 117.1, 120.4, 120.3,
> >> 117.4,
> >>>> 120.7, 118.9, 117.8, 121.6, 123.6, 123.8, 125, 124.6, 124.8,
> >>>> 123.8, 124.1, 124, 128, 136.2, 141.6, 137.5, 138.2, 142,
> >>>> 140.3, 134.6, 140.3, 140.2, 139.4, 136.9, 137, 134.8, 136.4,
> >>>> 136.2, 135.3, 132.9, 133.8, 134.8, 131.8, 130.5, 125.7,
> >> 128.4,
> >>>> 130.2, 129.9, 124, 127.5, 128.9, 127.1, 123.8, 123.8, 121.1,
> >>>> 118.8, 122.4, 124.3, 128.3, 130.7, 128.2, 131.7, 133.4,
> >> 132.6,
> >>>> 128.4, 121, 121.2, 122.5, 121.7, 123.5, 122.7, 122, 118.6,
> >>>> 120.6, 124, 124.9, 121.4, 118, 124, 123.3, 120, 122.5,
> >> 121.1,
> >>>> 122.3, 129.8, 131.4, 127.8, NA), v806086 = c(24241837,
> >> 23571783,
> >>>> 24044065, 24286278, 24628066, 24118928, 23617076, 23636633,
> >>>> 23428219, 22676196, 23634652, 23129728, 23460762, 24470816,
> >>>> 24710021, 25047202, 24605685, 24889031, 25374882, 25327868,
> >>>> 25109773, 25083430, 25307028, 24264047, 25218362, 25026529,
> >>>> 25123228, 24770185, 24471279, 23997307, 25100446, 22964008,
> >>>> 24847797, 24677891, 24855666, 24657136, 24257410, 24671333,
> >>>> 25042084, 25294153, 25594879, 25710661, 25392113, 25762642,
> >>>> 25495968, 25594992, 25046371, 24990942, 26049772, 25720141,
> >>>> 24908463, 24706488, 25213097, 24845513, 24526632, 25604879,
> >>>> 25607606, 25775948, 24928252, 25720454, 25230304, 24969882,
> >>>> 24588168, 24950843, 24342432, 24727389, 24207745, 24653546,
> >>>> 24098105, 23526031, 24359382, 25982179, 24579627, 24404161,
> >>>> 25000895, 24807287, 24362175, 23689711, 24144763, 23438032,
> >>>> 23439725, 23516262, 23790262, 21814921, 21887345, 22899655,
> >>>> 22230193, 22324816, 22934833, 23503414, 23954111, 23283045,
> >>>> 22841589, 22386978, 21842554, 19295160, 17419392, 18364375,
> >>>> 17905440, 18108957, 16916442, 17026042, 18751034, 18321591,
> >>>> 19048289, 18784796, 18924599, 19475767, 19573589, 19850904,
> >>>> 19804795, 20157495, 20328658, 20361279, 20061299, 20395027,
> >>>> 20298913, 20737329, 19902428, 20480090, 21614065, 20987752,
> >>>> 20921846, 20374783, 20233473, 20215808, 21174832, 21660830,
> >>>> 21640023, 22114244, 21850029, 22827161, 23011928, 21728327,
> >>>> 22257123, 22937471, 22827906, 22875554, 22170195, 22516726,
> >>>> 22303145, 21675434, 22247002, 21567688, 21860739, 22317023,
> >>>> 22207928, 22332500, 22343634, 22272300, 22054266, 22139544,
> >>>> 22476830, 22475093, 22870618, 22550632, 21973040, 22959343,
> >>>> 23266389, 23188580, 23768769, 23473685, 24108092, 23017700,
> >>>> 23922409, 23820985, 23428273, 23928861, 23165872, 22611064,
> >>>> 23647886, 23309658, 23349645, 23502513, 24672977, 24826679,
> >>>> 24264370, 24314700, 24691695, 24783596, 25965007, 24936109,
> >>>> 24148638, 24551950, 24096124, 24428453, 24656116, 24898703,
> >>>> 25091096, 25097671, 24932606, 25523713, 25877824, 25493931,
> >>>> 25584427, 25434925, 26270738, 25655031, 24154450, 24916780,
> >>>> 24698894, 23950081, 25547953, 25979949, 25162501, 26286322,
> >>>> 26227143, 26106405, 26205893, 26432292, 26910272, 26326292,
> >>>> 26552306, 26781714, 26338911, 26176024, 26466019, 26026198,
> >>>> 26637112, 26198157, 26778716, 26846047, 26409309)),
> >> row.names =
> >>>> c(NA,
> >>>> -223L), class = c("tbl_df", "tbl", "data.frame"))
> >>>>
> >>>> dput() output for dts:
> >>>>
> >>>>
> >>>> structure(list(X1 = c(NA_real_, NA_real_, NA_real_, NA_real_),
> >>>> X2 = c(NA_real_, NA_real_, NA_real_, NA_real_), X3 =
> >> c(NA_real_,
> >>>> NA_real_, NA_real_, NA_real_), X4 = c(NA_real_, NA_real_,
> >>>> NA_real_, NA_real_), X5 = c(NA_real_, NA_real_, NA_real_,
> >>>> NA_real_), X6 = c(NA_real_, NA_real_, NA_real_, NA_real_),
> >>>> X7 = c(NA_real_, NA_real_, NA_real_, NA_real_), X8 = c(1,
> >>>> 120, NA, NA), X9 = c(1, 120, NA, NA), X10 = c(NA_real_,
> >> NA_real_,
> >>>> NA_real_, NA_real_), X11 = c(NA_real_, NA_real_, NA_real_,
> >>>> NA_real_), X12 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>>> ), X13 = c(NA, NA, 223, 223), X14 = c(NA_real_, NA_real_,
> >>>> NA_real_, NA_real_), X15 = c(NA_real_, NA_real_, NA_real_,
> >>>> NA_real_), X16 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>>> ), X17 = c(NA_real_, NA_real_, NA_real_, NA_real_), X18 =
> >>>> c(NA_real_,
> >>>> NA_real_, NA_real_, NA_real_), X19 = c(NA_real_, NA_real_,
> >>>> NA_real_, NA_real_), X20 = c(NA_real_, NA_real_, NA_real_,
> >>>> NA_real_), X21 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>>> ), X22 = c(NA_real_, NA_real_, NA_real_, NA_real_), X23 =
> >>>> c(NA_real_,
> >>>> NA_real_, NA_real_, NA_real_), X24 = c(NA_real_, NA_real_,
> >>>> NA_real_, NA_real_), X25 = c(NA_real_, NA_real_, NA_real_,
> >>>> NA_real_), X26 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>>> ), X27 = c(NA_real_, NA_real_, NA_real_, NA_real_), X28 =
> >>>> c(NA_real_,
> >>>> NA_real_, NA_real_, NA_real_), X29 = c(NA_real_, NA_real_,
> >>>> NA_real_, NA_real_), X30 = c(1, 84, NA, NA), X31 = c(NA,
> >>>> NA, 181, 223), X32 = c(NA_real_, NA_real_, NA_real_,
> >> NA_real_
> >>>> ), X33 = c(NA_real_, NA_real_, NA_real_, NA_real_), X34 =
> >>>> c(NA_real_,
> >>>> NA_real_, NA_real_, NA_real_), X35 = c(NA_real_, NA_real_,
> >>>> NA_real_, NA_real_), X36 = c(NA_real_, NA_real_, NA_real_,
> >>>> NA_real_), X37 = c(NA_real_, NA_real_, NA_real_, NA_real_
> >>>> ), X38 = c(NA_real_, NA_real_, NA_real_, NA_real_), X39 =
> >> c(NA,
> >>>> NA, 223, 223), X40 = c(NA, NA, 223, 223), X41 = c(NA_real_,
> >>>> NA_real_, NA_real_, NA_real_)), row.names = c(NA, -4L),
> >> class =
> >>>> "data.frame")
> >>>>
> >>>> dput() output for testcase1:
> >>>>
> >>>> c(NA, NA, NA, 84.6, 85.7, 85.8, 88.9, 92.4, 90.8, 90.7, 90.5,
> >>>> 91.6, 91.5, 90.8, 91.2, 92.4, 93.4, 91.3, 100.4, 100.8, 96.6,
> >>>> 101.2, 101.1, 96.7, 100.2, 100.1, 98.5, 100.4, 98.7, 97.4, 92.6,
> >>>> 95.2, 93.1, 96.5, 95.9, 96.1, 97.5, 99.1, 104.1, 105.8, 103,
> >>>> 101.9, 95.7, 94.8, 96.7, 95.1, 89.1, 89.1, 86.4, 87.3, 87.6,
> >>>> 86.3, 88.9, 93, 91.8, 95.2, 91.6, 85.2, 81.1, 89.4, 88.1, 86.7,
> >>>> 87.7, 88.4, 89.9, 90.5, 90.2, 91.9, 88.1, 86.3, 91.6, 90.9,
> >> 101.2,
> >>>> 101.8, 100.7, 96.8, 92.3, 92.4, 100.2, 103.2, 103.1, 106.6,
> >> 104.3,
> >>>> 102.1, 112.8, 113.5, 115.6, 117, 109.8, 111.8, 108.9, 112.9,
> >>>> 112, 117.6, 114.3, 109.5, 111.9, 112.3, 111.8, 113.7, 115.9,
> >>>> 119.9, 117.1, 113.6, 108.6, 105.7, 104.1, 119.6, 115.4, 114.4,
> >>>> 110.6, 109.1, 113.3, 111.8, 111.8, 112.3, 110.8, 110.8, 113.2,
> >>>> 118.3, 121.9, 123.6, 124.4, 126.2, 121.1, 120.4, 124.2, 129.5,
> >>>> 127.2, 124.9, 126.9, 123.5, 125.4, 127.3, 128.3, 126.3, 121,
> >>>> 121.8, 140.2, 142.1, 142.7, 138.8, 133.9, 135.4, 138.3, 142,
> >>>> 141.6, 141.3, 141.5, 142.7, 127.8, 123.3, 124.6, 126.1, 117.6,
> >>>> 119.1, 119.1, 122.9, 127, 130.2, 131.5, 133.5, 130.2, 132.8,
> >>>> 127.7, 116.6, 113.5, 118.9, 122.2, 125.1, 126.2, 126.7, 128,
> >>>> 128.1, 129.3, 129.7, 129, 121.8, 122.4, 127.6, 128.5, 130.3,
> >>>> 131.4, 131.7, 132.6, 135.2, 128, 124.9, 127.1, 130.2, 131.3,
> >>>> 132.8, 133.3, 134.6, 136.8, 135.7, 136, 136, 137.9, 135.8, 133.7,
> >>>> 129.9, 128.5, 128.5, 129.5, 131, 135.8, 136.3, 136.6, 136, 137.2,
> >>>> 137.9, 136, 133.2, 133.4, 134.1, 134.2, 135.5, 135.6, 136.1,
> >>>> 135.1, NA, NA)
> >>>>
> >>>> ______________________________________________
> >>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>>> PLEASE do read the posting guide
> >>>> http://www.R-project.org/posting-guide.html
> >>>> and provide commented, minimal, self-contained, reproducible
> >> code.
> >>
> >> ______________________________________________
> >> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide
> >> http://www.R-project.org/posting-guide.html
> >> and provide commented, minimal, self-contained, reproducible code.
> >
> >
> > Links:
> > ------
> > [1] http://is.na
> > [2] http://tibco.com
>

	[[alternative HTML version deleted]]


From c@c|que@@mur@| @end|ng |rom gm@||@com  Thu Oct 31 03:54:05 2019
From: c@c|que@@mur@| @end|ng |rom gm@||@com (Cacique Samurai)
Date: Wed, 30 Oct 2019 23:54:05 -0300
Subject: [R] Tricky filtering
Message-ID: <CAGtwFe0BvXd5huCiEtZX-D9ohm7o76ptDker9D7vMaThGPvGXg@mail.gmail.com>

Hi all,

I had a fish telemetry data with more then 11 million lines. I had some
false records in the data, that I have to eliminate. I can solve this using
a loop, but I think that dplyr:: filter could be faster and elegant. I just
can't figure out how to do it.

At this moment, I already summarized this raw data, and had something like
this (dput at end of e-mail):

Date Station Antenna Mean_power N_records *Action need (manually inserted)*
29/03/2019 ANT01 1 108 1704 Remove
29/03/2019 ANT01 2 94 1219 Remove
29/03/2019 ANT02 1 220 3029 Keep
29/03/2019 ANT02 2 219 2711 Keep
30/03/2019 ANT01 1 204 2289 Keep
30/03/2019 ANT01 2 172 1477 Keep
30/03/2019 ANT02 1 88 913 Remove
30/03/2019 ANT02 2 72 1080 Remove
30/03/2019 ETE01 AH0 87 1 Keep

The problem occurs between Stations ANT01 and ANT02. In the same day, I
have to keep the pair of records that have bigger Mean_power and more
N_records. In this example, I have to keep records in Station ANT02 in
29/03 and of ANT01 and ETE01 in 30/03. If I do not have more than ANT01 and
ANT02 in the same day, it was a simple question.

I have to do this for each marked fish, that is identified by a Code supres
here for resuming.

Thanks in advanced,

Raoni


structure(list(Date = structure(c(17984, 17984, 17984, 17984, 17985, 17985,
17985, 17985, 17985), class = "Date"),
Station = c("ANT01","ANT01", "ANT02", "ANT02", "ANT01", "ANT01", "ANT02",
"ANT02","ETE01"),
Antenna = c("1", "2", "1", "2", "1", "2", "1", "2","AH0"),
Media_power = c(108, 94, 220, 219, 204, 172, 88, 72, 87), N_records =
c(1704L, 1219L, 3029L, 2711L, 2289L, 1477L, 913L, 1080L, 1L)),
row.names = c(NA, -9L), class = c("grouped_df", "tbl_df", "tbl",
"data.frame"),
groups = structure(list(Date = structure(c(17984, 17984, 17985, 17985,
17985), class = "Date"), Station = c("ANT01",
"ANT02", "ANT01", "ANT02", "ETE01"), .rows = list(1:2, 3:4, 5:6, 7:8, 9L)),
row.names = c(NA, -5L), class = c("tbl_df", "tbl",
"data.frame"), .drop = TRUE))







--
Raoni Rosa Rodrigues
Research Associate of Fish Transposition Center CTPeixes
Universidade Federal de Minas Gerais - UFMG
Brasil
rodrigues.raoni at gmail.com

	[[alternative HTML version deleted]]


From bgunter@4567 @end|ng |rom gm@||@com  Thu Oct 31 05:17:30 2019
From: bgunter@4567 @end|ng |rom gm@||@com (Bert Gunter)
Date: Wed, 30 Oct 2019 21:17:30 -0700
Subject: [R] Tricky filtering
In-Reply-To: <CAGtwFe0BvXd5huCiEtZX-D9ohm7o76ptDker9D7vMaThGPvGXg@mail.gmail.com>
References: <CAGtwFe0BvXd5huCiEtZX-D9ohm7o76ptDker9D7vMaThGPvGXg@mail.gmail.com>
Message-ID: <CAGxFJbQCZTYmqOzkaqg56r=GBh-OrSJ=wT0LRQ00H8et1HF8nA@mail.gmail.com>

Thanks for the nice dput example, but your specification confuses me.
What if the 2 records with largest Mean_power are not the same as the two
with largest N_records. Do you want to keep all four records? Or various
combinations of this question that would keep 3 records. And will you
always have two records on a date, or could you have just one? And if the 2
records with largest Mean_power always also have the largest N_records,
then you only need to choose the two with largest Mean_power and can ignore
the N_records, right?

Once you have answered these questions -- or someone else has a better
understanding than I -- it should be easy. It will require a loop of one
form or another, however, and therefore might take a while.

Cheers,
Bert

Bert Gunter

"The trouble with having an open mind is that people keep coming along and
sticking things into it."
-- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )


On Wed, Oct 30, 2019 at 7:55 PM Cacique Samurai <caciquesamurai at gmail.com>
wrote:

> Hi all,
>
> I had a fish telemetry data with more then 11 million lines. I had some
> false records in the data, that I have to eliminate. I can solve this using
> a loop, but I think that dplyr:: filter could be faster and elegant. I just
> can't figure out how to do it.
>
> At this moment, I already summarized this raw data, and had something like
> this (dput at end of e-mail):
>
> Date Station Antenna Mean_power N_records *Action need (manually inserted)*
> 29/03/2019 ANT01 1 108 1704 Remove
> 29/03/2019 ANT01 2 94 1219 Remove
> 29/03/2019 ANT02 1 220 3029 Keep
> 29/03/2019 ANT02 2 219 2711 Keep
> 30/03/2019 ANT01 1 204 2289 Keep
> 30/03/2019 ANT01 2 172 1477 Keep
> 30/03/2019 ANT02 1 88 913 Remove
> 30/03/2019 ANT02 2 72 1080 Remove
> 30/03/2019 ETE01 AH0 87 1 Keep
>
> The problem occurs between Stations ANT01 and ANT02. In the same day, I
> have to keep the pair of records that have bigger Mean_power and more
> N_records. In this example, I have to keep records in Station ANT02 in
> 29/03 and of ANT01 and ETE01 in 30/03. If I do not have more than ANT01 and
> ANT02 in the same day, it was a simple question.
>
> I have to do this for each marked fish, that is identified by a Code supres
> here for resuming.
>
> Thanks in advanced,
>
> Raoni
>
>
> structure(list(Date = structure(c(17984, 17984, 17984, 17984, 17985, 17985,
> 17985, 17985, 17985), class = "Date"),
> Station = c("ANT01","ANT01", "ANT02", "ANT02", "ANT01", "ANT01", "ANT02",
> "ANT02","ETE01"),
> Antenna = c("1", "2", "1", "2", "1", "2", "1", "2","AH0"),
> Media_power = c(108, 94, 220, 219, 204, 172, 88, 72, 87), N_records =
> c(1704L, 1219L, 3029L, 2711L, 2289L, 1477L, 913L, 1080L, 1L)),
> row.names = c(NA, -9L), class = c("grouped_df", "tbl_df", "tbl",
> "data.frame"),
> groups = structure(list(Date = structure(c(17984, 17984, 17985, 17985,
> 17985), class = "Date"), Station = c("ANT01",
> "ANT02", "ANT01", "ANT02", "ETE01"), .rows = list(1:2, 3:4, 5:6, 7:8, 9L)),
> row.names = c(NA, -5L), class = c("tbl_df", "tbl",
> "data.frame"), .drop = TRUE))
>
>
>
>
>
>
>
> --
> Raoni Rosa Rodrigues
> Research Associate of Fish Transposition Center CTPeixes
> Universidade Federal de Minas Gerais - UFMG
> Brasil
> rodrigues.raoni at gmail.com
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

	[[alternative HTML version deleted]]


From t@ub|@ @end|ng |rom |mgprec|@|on@com  Thu Oct 31 01:06:22 2019
From: t@ub|@ @end|ng |rom |mgprec|@|on@com (Thomas Subia)
Date: Thu, 31 Oct 2019 00:06:22 +0000
Subject: [R] Help for pdf conversion
Message-ID: <CH2PR17MB3749B7793E74F35B4DD7B198B8630@CH2PR17MB3749.namprd17.prod.outlook.com>

Colleagues,

I'm trying to convert a pdf to a text file with the following code.

# pdf to excel
library(pdftools) # pdf to excel library
# set working directory
setwd("C:/Users")
# input pdf
txt <- pdf_text("C:/Users/10619.pdf")
cat(txt[1])
write.table(cat(txt[1]),file="10619.txt",sep= "\t",row.names =TRUE,col.names =FALSE)

When I examine the contents of cat(txt[1]) on the console, everything I need is displayed in the format I need.

However when I execute write.table(cat(txt[1]),file="10619.txt",sep= "\t",row.names =TRUE,col.names =FALSE) and examine the output, my output does not match cat(txt[1]).
I suspect that sep= "\t",row.names =TRUE,col.names =FALSE) might be the error.

How can one output the contents of cat(txt[1]) and retain its format?

Thomas Subia



	[[alternative HTML version deleted]]


From drj|m|emon @end|ng |rom gm@||@com  Thu Oct 31 07:13:58 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 31 Oct 2019 17:13:58 +1100
Subject: [R] Help for pdf conversion
In-Reply-To: <CH2PR17MB3749B7793E74F35B4DD7B198B8630@CH2PR17MB3749.namprd17.prod.outlook.com>
References: <CH2PR17MB3749B7793E74F35B4DD7B198B8630@CH2PR17MB3749.namprd17.prod.outlook.com>
Message-ID: <CA+8X3fWZp4WZWCexzWAC69GCFdaAruiQf7_r0xdkAi3=Dqx6Ng@mail.gmail.com>

Hi Thomas,
Perhaps you should be doing something like writeLines(txt[1],...) or just:

sink("10619.txt")
cat(txt[1])
sink()

Jim

On Thu, Oct 31, 2019 at 4:48 PM Thomas Subia <tsubia at imgprecision.com> wrote:
>
> Colleagues,
>
> I'm trying to convert a pdf to a text file with the following code.
>
> # pdf to excel
> library(pdftools) # pdf to excel library
> # set working directory
> setwd("C:/Users")
> # input pdf
> txt <- pdf_text("C:/Users/10619.pdf")
> cat(txt[1])
> write.table(cat(txt[1]),file="10619.txt",sep= "\t",row.names =TRUE,col.names =FALSE)
>
> When I examine the contents of cat(txt[1]) on the console, everything I need is displayed in the format I need.
>
> However when I execute write.table(cat(txt[1]),file="10619.txt",sep= "\t",row.names =TRUE,col.names =FALSE) and examine the output, my output does not match cat(txt[1]).
> I suspect that sep= "\t",row.names =TRUE,col.names =FALSE) might be the error.
>
> How can one output the contents of cat(txt[1]) and retain its format?
>
> Thomas Subia
>
>
>
>         [[alternative HTML version deleted]]
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From petr@p|k@| @end|ng |rom prechez@@cz  Thu Oct 31 08:29:33 2019
From: petr@p|k@| @end|ng |rom prechez@@cz (PIKAL Petr)
Date: Thu, 31 Oct 2019 07:29:33 +0000
Subject: [R] Tricky filtering
In-Reply-To: <CAGxFJbQCZTYmqOzkaqg56r=GBh-OrSJ=wT0LRQ00H8et1HF8nA@mail.gmail.com>
References: <CAGtwFe0BvXd5huCiEtZX-D9ohm7o76ptDker9D7vMaThGPvGXg@mail.gmail.com>
 <CAGxFJbQCZTYmqOzkaqg56r=GBh-OrSJ=wT0LRQ00H8et1HF8nA@mail.gmail.com>
Message-ID: <c4ed0cf212c741d3b6908c6979b982fa@SRVEXCHCM1301.precheza.cz>

Hi.

Bert's questions should be clarified. But from your question I understand
that only ANT01 and ANT02 are the Stations which you want to filter and all
others you want to keep regardless of condition. If this is true, I would
add the new column which would have one value for ANT stations and different
for all others (if you have more than one). Than you could set flag which is
the biggest number in each day. And after that you could add in each day
stations different from ANT and want to keep.

I named your data as test and change them to data frame as I am not familiar
with tibbles.

The code is like that.
test$m <- ave(test$N_records, interaction(test$Date, test$Station),
FUN=mean)
test$flag <- ave(test$m, test$Date, FUN=function(x) max(x) == x)
test$keep <- test$flag + (test$Station == "ETE01")*1

but you need to think about questions asked by Bert.

Cheers
Petr

> -----Original Message-----
> From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert Gunter
> Sent: Thursday, October 31, 2019 5:18 AM
> To: Cacique Samurai <caciquesamurai at gmail.com>
> Cc: R help <r-help at r-project.org>
> Subject: Re: [R] Tricky filtering
> 
> Thanks for the nice dput example, but your specification confuses me.
> What if the 2 records with largest Mean_power are not the same as the two
> with largest N_records. Do you want to keep all four records? Or various
> combinations of this question that would keep 3 records. And will you
> always have two records on a date, or could you have just one? And if the
2
> records with largest Mean_power always also have the largest N_records,
> then you only need to choose the two with largest Mean_power and can
> ignore the N_records, right?
> 
> Once you have answered these questions -- or someone else has a better
> understanding than I -- it should be easy. It will require a loop of one
form or
> another, however, and therefore might take a while.
> 
> Cheers,
> Bert
> 
> Bert Gunter
> 
> "The trouble with having an open mind is that people keep coming along
> and sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> 
> 
> On Wed, Oct 30, 2019 at 7:55 PM Cacique Samurai
> <caciquesamurai at gmail.com>
> wrote:
> 
> > Hi all,
> >
> > I had a fish telemetry data with more then 11 million lines. I had
> > some false records in the data, that I have to eliminate. I can solve
> > this using a loop, but I think that dplyr:: filter could be faster and
> > elegant. I just can't figure out how to do it.
> >
> > At this moment, I already summarized this raw data, and had something
> > like this (dput at end of e-mail):
> >
> > Date Station Antenna Mean_power N_records *Action need (manually
> > inserted)*
> > 29/03/2019 ANT01 1 108 1704 Remove
> > 29/03/2019 ANT01 2 94 1219 Remove
> > 29/03/2019 ANT02 1 220 3029 Keep
> > 29/03/2019 ANT02 2 219 2711 Keep
> > 30/03/2019 ANT01 1 204 2289 Keep
> > 30/03/2019 ANT01 2 172 1477 Keep
> > 30/03/2019 ANT02 1 88 913 Remove
> > 30/03/2019 ANT02 2 72 1080 Remove
> > 30/03/2019 ETE01 AH0 87 1 Keep
> >
> > The problem occurs between Stations ANT01 and ANT02. In the same day,
> > I have to keep the pair of records that have bigger Mean_power and
> > more N_records. In this example, I have to keep records in Station
> > ANT02 in
> > 29/03 and of ANT01 and ETE01 in 30/03. If I do not have more than
> > ANT01 and
> > ANT02 in the same day, it was a simple question.
> >
> > I have to do this for each marked fish, that is identified by a Code
> > supres here for resuming.
> >
> > Thanks in advanced,
> >
> > Raoni
> >
> >
> > structure(list(Date = structure(c(17984, 17984, 17984, 17984, 17985,
> > 17985, 17985, 17985, 17985), class = "Date"), Station =
> > c("ANT01","ANT01", "ANT02", "ANT02", "ANT01", "ANT01", "ANT02",
> > "ANT02","ETE01"), Antenna = c("1", "2", "1", "2", "1", "2", "1",
> > "2","AH0"), Media_power = c(108, 94, 220, 219, 204, 172, 88, 72, 87),
> > N_records = c(1704L, 1219L, 3029L, 2711L, 2289L, 1477L, 913L, 1080L,
> > 1L)), row.names = c(NA, -9L), class = c("grouped_df", "tbl_df", "tbl",
> > "data.frame"), groups = structure(list(Date = structure(c(17984,
> > 17984, 17985, 17985, 17985), class = "Date"), Station = c("ANT01",
> > "ANT02", "ANT01", "ANT02", "ETE01"), .rows = list(1:2, 3:4, 5:6, 7:8,
> > 9L)), row.names = c(NA, -5L), class = c("tbl_df", "tbl",
> > "data.frame"), .drop = TRUE))
> >
> >
> >
> >
> >
> >
> >
> > --
> > Raoni Rosa Rodrigues
> > Research Associate of Fish Transposition Center CTPeixes Universidade
> > Federal de Minas Gerais - UFMG Brasil rodrigues.raoni at gmail.com
> >
> >         [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide
> > http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
> 
> 	[[alternative HTML version deleted]]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-
> guide.html
> and provide commented, minimal, self-contained, reproducible code.

From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Thu Oct 31 10:09:48 2019
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Thu, 31 Oct 2019 14:39:48 +0530
Subject: [R] save() unable to find object
Message-ID: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>

Hi,

I wanted to save a few R objects in RData file for some future use.
The names of such R objects are actually dynamic so I used below code
to save them -

Date = Sys.Date()
assign(paste('AAA', format(Date, "%d"), sep = ""), 5)
save('Date', paste('AAA', format(Date, "%d"), sep = ""), file = 'Save.RData')

With this, I am getting below error -

Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
= "Save.RData") :
  object ?paste("AAA", format(Date, "%d"), sep = "")? not found

But I have the object in the workplace -

> AAA31
[1] 5

I will really appreciate if someone can point towards the right direction.

Thanks,


From drj|m|emon @end|ng |rom gm@||@com  Thu Oct 31 10:15:37 2019
From: drj|m|emon @end|ng |rom gm@||@com (Jim Lemon)
Date: Thu, 31 Oct 2019 20:15:37 +1100
Subject: [R] save() unable to find object
In-Reply-To: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
References: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
Message-ID: <CA+8X3fV1MmVdoemu-XWLK6ntz7apA4+C9=JQZxzbUG7bL3z2bg@mail.gmail.com>

Hi Christofer,
This is a guess, but have you tried:

save(AAA31,file="Save.RData")

Jim

On Thu, Oct 31, 2019 at 8:10 PM Christofer Bogaso
<bogaso.christofer at gmail.com> wrote:
>
> Hi,
>
> I wanted to save a few R objects in RData file for some future use.
> The names of such R objects are actually dynamic so I used below code
> to save them -
>
> Date = Sys.Date()
> assign(paste('AAA', format(Date, "%d"), sep = ""), 5)
> save('Date', paste('AAA', format(Date, "%d"), sep = ""), file = 'Save.RData')
>
> With this, I am getting below error -
>
> Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
> = "Save.RData") :
>   object ?paste("AAA", format(Date, "%d"), sep = "")? not found
>
> But I have the object in the workplace -
>
> > AAA31
> [1] 5
>
> I will really appreciate if someone can point towards the right direction.
>
> Thanks,
>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Thu Oct 31 10:17:48 2019
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Thu, 31 Oct 2019 14:47:48 +0530
Subject: [R] save() unable to find object
In-Reply-To: <CA+8X3fV1MmVdoemu-XWLK6ntz7apA4+C9=JQZxzbUG7bL3z2bg@mail.gmail.com>
References: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
 <CA+8X3fV1MmVdoemu-XWLK6ntz7apA4+C9=JQZxzbUG7bL3z2bg@mail.gmail.com>
Message-ID: <CA+dpOJmLSS0EYOh7tH46OQ=OekKYT9WkegoDUtwW5-KvDe3RvQ@mail.gmail.com>

As I said the name 'AAA31' is itself a variable. So I cant hard-code
it within the save() function

On Thu, Oct 31, 2019 at 2:45 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>
> Hi Christofer,
> This is a guess, but have you tried:
>
> save(AAA31,file="Save.RData")
>
> Jim
>
> On Thu, Oct 31, 2019 at 8:10 PM Christofer Bogaso
> <bogaso.christofer at gmail.com> wrote:
> >
> > Hi,
> >
> > I wanted to save a few R objects in RData file for some future use.
> > The names of such R objects are actually dynamic so I used below code
> > to save them -
> >
> > Date = Sys.Date()
> > assign(paste('AAA', format(Date, "%d"), sep = ""), 5)
> > save('Date', paste('AAA', format(Date, "%d"), sep = ""), file = 'Save.RData')
> >
> > With this, I am getting below error -
> >
> > Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
> > = "Save.RData") :
> >   object ?paste("AAA", format(Date, "%d"), sep = "")? not found
> >
> > But I have the object in the workplace -
> >
> > > AAA31
> > [1] 5
> >
> > I will really appreciate if someone can point towards the right direction.
> >
> > Thanks,
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.


From c@c|que@@mur@| @end|ng |rom gm@||@com  Thu Oct 31 10:23:41 2019
From: c@c|que@@mur@| @end|ng |rom gm@||@com (Cacique Samurai)
Date: Thu, 31 Oct 2019 06:23:41 -0300
Subject: [R] Tricky filtering
In-Reply-To: <CAGxFJbQCZTYmqOzkaqg56r=GBh-OrSJ=wT0LRQ00H8et1HF8nA@mail.gmail.com>
References: <CAGtwFe0BvXd5huCiEtZX-D9ohm7o76ptDker9D7vMaThGPvGXg@mail.gmail.com>
 <CAGxFJbQCZTYmqOzkaqg56r=GBh-OrSJ=wT0LRQ00H8et1HF8nA@mail.gmail.com>
Message-ID: <CAGtwFe1aQvuzdAP9TsCPDoAqqnGXbv4t_RiXY=TeYKtXtp=BHg@mail.gmail.com>

Hi Bert, thanks for your replay, and sorry for not be so clear. Let?s try:

What if the 2 records with largest Mean_power are not the same as the two
with largest N_records. Do you want to keep all four records?
In the sample data that I used to understand what is going on, this never
happened.  But, if so, I should ignore N_records and use just Mean_power.

Or various combinations of this question that would keep 3 records.
No, at this moment, I just need to keep with one record. Maybe in the
future I will need to filter the raw data, but now I just need to have one
record in ANT01 OR ANT02 per day.

And will you always have two records on a date, or could you have just one?
Yes, I can have just one record. Probably will be with the ANT that have
lower Mean_power.

And if the 2 records with largest Mean_power always also have the largest
N_records, then you only need to choose the two with largest Mean_power and
can ignore the N_records, right?
Right, exactly that!

Thanks for your attention and help!

Raoni


Em qui, 31 de out de 2019 ?s 01:17, Bert Gunter <bgunter.4567 at gmail.com>
escreveu:

> Thanks for the nice dput example, but your specification confuses me.
> What if the 2 records with largest Mean_power are not the same as the two
> with largest N_records. Do you want to keep all four records? Or various
> combinations of this question that would keep 3 records. And will you
> always have two records on a date, or could you have just one? And if the 2
> records with largest Mean_power always also have the largest N_records,
> then you only need to choose the two with largest Mean_power and can ignore
> the N_records, right?
>
> Once you have answered these questions -- or someone else has a better
> understanding than I -- it should be easy. It will require a loop of one
> form or another, however, and therefore might take a while.
>
> Cheers,
> Bert
>
> Bert Gunter
>
> "The trouble with having an open mind is that people keep coming along and
> sticking things into it."
> -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
>
>
> On Wed, Oct 30, 2019 at 7:55 PM Cacique Samurai <caciquesamurai at gmail.com>
> wrote:
>
>> Hi all,
>>
>> I had a fish telemetry data with more then 11 million lines. I had some
>> false records in the data, that I have to eliminate. I can solve this
>> using
>> a loop, but I think that dplyr:: filter could be faster and elegant. I
>> just
>> can't figure out how to do it.
>>
>> At this moment, I already summarized this raw data, and had something like
>> this (dput at end of e-mail):
>>
>> Date Station Antenna Mean_power N_records *Action need (manually
>> inserted)*
>> 29/03/2019 ANT01 1 108 1704 Remove
>> 29/03/2019 ANT01 2 94 1219 Remove
>> 29/03/2019 ANT02 1 220 3029 Keep
>> 29/03/2019 ANT02 2 219 2711 Keep
>> 30/03/2019 ANT01 1 204 2289 Keep
>> 30/03/2019 ANT01 2 172 1477 Keep
>> 30/03/2019 ANT02 1 88 913 Remove
>> 30/03/2019 ANT02 2 72 1080 Remove
>> 30/03/2019 ETE01 AH0 87 1 Keep
>>
>> The problem occurs between Stations ANT01 and ANT02. In the same day, I
>> have to keep the pair of records that have bigger Mean_power and more
>> N_records. In this example, I have to keep records in Station ANT02 in
>> 29/03 and of ANT01 and ETE01 in 30/03. If I do not have more than ANT01
>> and
>> ANT02 in the same day, it was a simple question.
>>
>> I have to do this for each marked fish, that is identified by a Code
>> supres
>> here for resuming.
>>
>> Thanks in advanced,
>>
>> Raoni
>>
>>
>> structure(list(Date = structure(c(17984, 17984, 17984, 17984, 17985,
>> 17985,
>> 17985, 17985, 17985), class = "Date"),
>> Station = c("ANT01","ANT01", "ANT02", "ANT02", "ANT01", "ANT01", "ANT02",
>> "ANT02","ETE01"),
>> Antenna = c("1", "2", "1", "2", "1", "2", "1", "2","AH0"),
>> Media_power = c(108, 94, 220, 219, 204, 172, 88, 72, 87), N_records =
>> c(1704L, 1219L, 3029L, 2711L, 2289L, 1477L, 913L, 1080L, 1L)),
>> row.names = c(NA, -9L), class = c("grouped_df", "tbl_df", "tbl",
>> "data.frame"),
>> groups = structure(list(Date = structure(c(17984, 17984, 17985, 17985,
>> 17985), class = "Date"), Station = c("ANT01",
>> "ANT02", "ANT01", "ANT02", "ETE01"), .rows = list(1:2, 3:4, 5:6, 7:8,
>> 9L)),
>> row.names = c(NA, -5L), class = c("tbl_df", "tbl",
>> "data.frame"), .drop = TRUE))
>>
>>
>>
>>
>>
>>
>>
>> --
>> Raoni Rosa Rodrigues
>> Research Associate of Fish Transposition Center CTPeixes
>> Universidade Federal de Minas Gerais - UFMG
>> Brasil
>> rodrigues.raoni at gmail.com
>>
>>         [[alternative HTML version deleted]]
>>
>> ______________________________________________
>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide
>> http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

-- 
Raoni Rosa Rodrigues
Research Associate of Fish Transposition Center CTPeixes
Universidade Federal de Minas Gerais - UFMG
Brasil
rodrigues.raoni at gmail.com

	[[alternative HTML version deleted]]


From kry|ov@r00t @end|ng |rom gm@||@com  Thu Oct 31 10:25:08 2019
From: kry|ov@r00t @end|ng |rom gm@||@com (Ivan Krylov)
Date: Thu, 31 Oct 2019 12:25:08 +0300
Subject: [R] save() unable to find object
In-Reply-To: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
References: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
Message-ID: <20191031122508.67641d6d@trisector>

On Thu, 31 Oct 2019 14:39:48 +0530
Christofer Bogaso <bogaso.christofer at gmail.com> wrote:

> Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
> = "Save.RData") :
>   object ?paste("AAA", format(Date, "%d"), sep = "")? not found

save() uses non-standard evaluation [*], which means that, instead of
just getting parameter values, it gets the expressions supplied to it
by the caller in their original form. This makes it possible to pass
variable names to save() unquoted: save() will still get the name, not
the value of the variable.

This also causes error messages like yours. To prevent the non-standard
evaluation from causing problems, pass the names of the variables as a
character vector in the list = ... argument to save().

Alternatively, consider avoiding "variable variable names". Restricting
objects with programmatically generated names to a named list might
lead to cleaner code:

mydata <- list()
mydata[paste('AAA', format(Date, "%d"), sep = ""] <- 5
saveRDS(mydata, 'mydata.rds')

-- 
Best regards,
Ivan

[*] https://adv-r.hadley.nz/metaprogramming.html


From murdoch@dunc@n @end|ng |rom gm@||@com  Thu Oct 31 10:32:17 2019
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Thu, 31 Oct 2019 05:32:17 -0400
Subject: [R] save() unable to find object
In-Reply-To: <CA+dpOJmLSS0EYOh7tH46OQ=OekKYT9WkegoDUtwW5-KvDe3RvQ@mail.gmail.com>
References: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
 <CA+8X3fV1MmVdoemu-XWLK6ntz7apA4+C9=JQZxzbUG7bL3z2bg@mail.gmail.com>
 <CA+dpOJmLSS0EYOh7tH46OQ=OekKYT9WkegoDUtwW5-KvDe3RvQ@mail.gmail.com>
Message-ID: <abe79c2a-5d37-8e2d-ed91-6faabdc909f3@gmail.com>

On 31/10/2019 5:17 a.m., Christofer Bogaso wrote:
> As I said the name 'AAA31' is itself a variable. So I cant hard-code
> it within the save() function

Use the list= argument to save().

Duncan Murdoch

> 
> On Thu, Oct 31, 2019 at 2:45 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>>
>> Hi Christofer,
>> This is a guess, but have you tried:
>>
>> save(AAA31,file="Save.RData")
>>
>> Jim
>>
>> On Thu, Oct 31, 2019 at 8:10 PM Christofer Bogaso
>> <bogaso.christofer at gmail.com> wrote:
>>>
>>> Hi,
>>>
>>> I wanted to save a few R objects in RData file for some future use.
>>> The names of such R objects are actually dynamic so I used below code
>>> to save them -
>>>
>>> Date = Sys.Date()
>>> assign(paste('AAA', format(Date, "%d"), sep = ""), 5)
>>> save('Date', paste('AAA', format(Date, "%d"), sep = ""), file = 'Save.RData')
>>>
>>> With this, I am getting below error -
>>>
>>> Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
>>> = "Save.RData") :
>>>    object ?paste("AAA", format(Date, "%d"), sep = "")? not found
>>>
>>> But I have the object in the workplace -
>>>
>>>> AAA31
>>> [1] 5
>>>
>>> I will really appreciate if someone can point towards the right direction.
>>>
>>> Thanks,
>>>
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From c@c|que@@mur@| @end|ng |rom gm@||@com  Thu Oct 31 10:37:02 2019
From: c@c|que@@mur@| @end|ng |rom gm@||@com (Cacique Samurai)
Date: Thu, 31 Oct 2019 06:37:02 -0300
Subject: [R] Tricky filtering
In-Reply-To: <c4ed0cf212c741d3b6908c6979b982fa@SRVEXCHCM1301.precheza.cz>
References: <CAGtwFe0BvXd5huCiEtZX-D9ohm7o76ptDker9D7vMaThGPvGXg@mail.gmail.com>
 <CAGxFJbQCZTYmqOzkaqg56r=GBh-OrSJ=wT0LRQ00H8et1HF8nA@mail.gmail.com>
 <c4ed0cf212c741d3b6908c6979b982fa@SRVEXCHCM1301.precheza.cz>
Message-ID: <CAGtwFe2PqyLBOW_oeP4yBwDvUX8RX-vXZ-0YhkxBYD8Yo0fNhQ@mail.gmail.com>

Hello Pert, thanks for your reply!

You are right, my problem is just between ANT01 and ANT02. All other will
keep in the filtered data. I have six more stations.

Looks like your solution will work pretty well for me! Once that I have to
I think that I can insert this inside a function and use lapply to use it
with all data that I have - that I can separe fishes by code.

I just do not understand one thing:

In the keep variable assumes value of 2 in the ANT that I have to keep, but
value of 1 for other stations. How I can keep with just necessary data
after use your solution?

Thanks again for your attention and help.

Raoni

Em qui, 31 de out de 2019 ?s 04:30, PIKAL Petr <petr.pikal at precheza.cz>
escreveu:

> Hi.
>
> Bert's questions should be clarified. But from your question I understand
> that only ANT01 and ANT02 are the Stations which you want to filter and all
> others you want to keep regardless of condition. If this is true, I would
> add the new column which would have one value for ANT stations and
> different
> for all others (if you have more than one). Than you could set flag which
> is
> the biggest number in each day. And after that you could add in each day
> stations different from ANT and want to keep.
>
> I named your data as test and change them to data frame as I am not
> familiar
> with tibbles.
>
> The code is like that.
> test$m <- ave(test$N_records, interaction(test$Date, test$Station),
> FUN=mean)
> test$flag <- ave(test$m, test$Date, FUN=function(x) max(x) == x)
> test$keep <- test$flag + (test$Station == "ETE01")*1
>
> but you need to think about questions asked by Bert.
>
> Cheers
> Petr
>
> > -----Original Message-----
> > From: R-help <r-help-bounces at r-project.org> On Behalf Of Bert Gunter
> > Sent: Thursday, October 31, 2019 5:18 AM
> > To: Cacique Samurai <caciquesamurai at gmail.com>
> > Cc: R help <r-help at r-project.org>
> > Subject: Re: [R] Tricky filtering
> >
> > Thanks for the nice dput example, but your specification confuses me.
> > What if the 2 records with largest Mean_power are not the same as the two
> > with largest N_records. Do you want to keep all four records? Or various
> > combinations of this question that would keep 3 records. And will you
> > always have two records on a date, or could you have just one? And if the
> 2
> > records with largest Mean_power always also have the largest N_records,
> > then you only need to choose the two with largest Mean_power and can
> > ignore the N_records, right?
> >
> > Once you have answered these questions -- or someone else has a better
> > understanding than I -- it should be easy. It will require a loop of one
> form or
> > another, however, and therefore might take a while.
> >
> > Cheers,
> > Bert
> >
> > Bert Gunter
> >
> > "The trouble with having an open mind is that people keep coming along
> > and sticking things into it."
> > -- Opus (aka Berkeley Breathed in his "Bloom County" comic strip )
> >
> >
> > On Wed, Oct 30, 2019 at 7:55 PM Cacique Samurai
> > <caciquesamurai at gmail.com>
> > wrote:
> >
> > > Hi all,
> > >
> > > I had a fish telemetry data with more then 11 million lines. I had
> > > some false records in the data, that I have to eliminate. I can solve
> > > this using a loop, but I think that dplyr:: filter could be faster and
> > > elegant. I just can't figure out how to do it.
> > >
> > > At this moment, I already summarized this raw data, and had something
> > > like this (dput at end of e-mail):
> > >
> > > Date Station Antenna Mean_power N_records *Action need (manually
> > > inserted)*
> > > 29/03/2019 ANT01 1 108 1704 Remove
> > > 29/03/2019 ANT01 2 94 1219 Remove
> > > 29/03/2019 ANT02 1 220 3029 Keep
> > > 29/03/2019 ANT02 2 219 2711 Keep
> > > 30/03/2019 ANT01 1 204 2289 Keep
> > > 30/03/2019 ANT01 2 172 1477 Keep
> > > 30/03/2019 ANT02 1 88 913 Remove
> > > 30/03/2019 ANT02 2 72 1080 Remove
> > > 30/03/2019 ETE01 AH0 87 1 Keep
> > >
> > > The problem occurs between Stations ANT01 and ANT02. In the same day,
> > > I have to keep the pair of records that have bigger Mean_power and
> > > more N_records. In this example, I have to keep records in Station
> > > ANT02 in
> > > 29/03 and of ANT01 and ETE01 in 30/03. If I do not have more than
> > > ANT01 and
> > > ANT02 in the same day, it was a simple question.
> > >
> > > I have to do this for each marked fish, that is identified by a Code
> > > supres here for resuming.
> > >
> > > Thanks in advanced,
> > >
> > > Raoni
> > >
> > >
> > > structure(list(Date = structure(c(17984, 17984, 17984, 17984, 17985,
> > > 17985, 17985, 17985, 17985), class = "Date"), Station =
> > > c("ANT01","ANT01", "ANT02", "ANT02", "ANT01", "ANT01", "ANT02",
> > > "ANT02","ETE01"), Antenna = c("1", "2", "1", "2", "1", "2", "1",
> > > "2","AH0"), Media_power = c(108, 94, 220, 219, 204, 172, 88, 72, 87),
> > > N_records = c(1704L, 1219L, 3029L, 2711L, 2289L, 1477L, 913L, 1080L,
> > > 1L)), row.names = c(NA, -9L), class = c("grouped_df", "tbl_df", "tbl",
> > > "data.frame"), groups = structure(list(Date = structure(c(17984,
> > > 17984, 17985, 17985, 17985), class = "Date"), Station = c("ANT01",
> > > "ANT02", "ANT01", "ANT02", "ETE01"), .rows = list(1:2, 3:4, 5:6, 7:8,
> > > 9L)), row.names = c(NA, -5L), class = c("tbl_df", "tbl",
> > > "data.frame"), .drop = TRUE))
> > >
> > >
> > >
> > >
> > >
> > >
> > >
> > > --
> > > Raoni Rosa Rodrigues
> > > Research Associate of Fish Transposition Center CTPeixes Universidade
> > > Federal de Minas Gerais - UFMG Brasil rodrigues.raoni at gmail.com
> > >
> > >         [[alternative HTML version deleted]]
> > >
> > > ______________________________________________
> > > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > https://stat.ethz.ch/mailman/listinfo/r-help
> > > PLEASE do read the posting guide
> > > http://www.R-project.org/posting-guide.html
> > > and provide commented, minimal, self-contained, reproducible code.
> > >
> >
> >       [[alternative HTML version deleted]]
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-
> > guide.html
> > and provide commented, minimal, self-contained, reproducible code.
>


-- 
Raoni Rosa Rodrigues
Research Associate of Fish Transposition Center CTPeixes
Universidade Federal de Minas Gerais - UFMG
Brasil
rodrigues.raoni at gmail.com

	[[alternative HTML version deleted]]


From bog@@o@chr|@to|er @end|ng |rom gm@||@com  Thu Oct 31 10:43:51 2019
From: bog@@o@chr|@to|er @end|ng |rom gm@||@com (Christofer Bogaso)
Date: Thu, 31 Oct 2019 15:13:51 +0530
Subject: [R] save() unable to find object
In-Reply-To: <abe79c2a-5d37-8e2d-ed91-6faabdc909f3@gmail.com>
References: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
 <CA+8X3fV1MmVdoemu-XWLK6ntz7apA4+C9=JQZxzbUG7bL3z2bg@mail.gmail.com>
 <CA+dpOJmLSS0EYOh7tH46OQ=OekKYT9WkegoDUtwW5-KvDe3RvQ@mail.gmail.com>
 <abe79c2a-5d37-8e2d-ed91-6faabdc909f3@gmail.com>
Message-ID: <CA+dpOJkZw9yYvPDnkQ1jhWjUuscVWWXZdQA9X8EvGBvmLpO6kA@mail.gmail.com>

Thanks Duncan. It worked.

On Thu, Oct 31, 2019 at 3:02 PM Duncan Murdoch <murdoch.duncan at gmail.com> wrote:
>
> On 31/10/2019 5:17 a.m., Christofer Bogaso wrote:
> > As I said the name 'AAA31' is itself a variable. So I cant hard-code
> > it within the save() function
>
> Use the list= argument to save().
>
> Duncan Murdoch
>
> >
> > On Thu, Oct 31, 2019 at 2:45 PM Jim Lemon <drjimlemon at gmail.com> wrote:
> >>
> >> Hi Christofer,
> >> This is a guess, but have you tried:
> >>
> >> save(AAA31,file="Save.RData")
> >>
> >> Jim
> >>
> >> On Thu, Oct 31, 2019 at 8:10 PM Christofer Bogaso
> >> <bogaso.christofer at gmail.com> wrote:
> >>>
> >>> Hi,
> >>>
> >>> I wanted to save a few R objects in RData file for some future use.
> >>> The names of such R objects are actually dynamic so I used below code
> >>> to save them -
> >>>
> >>> Date = Sys.Date()
> >>> assign(paste('AAA', format(Date, "%d"), sep = ""), 5)
> >>> save('Date', paste('AAA', format(Date, "%d"), sep = ""), file = 'Save.RData')
> >>>
> >>> With this, I am getting below error -
> >>>
> >>> Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
> >>> = "Save.RData") :
> >>>    object ?paste("AAA", format(Date, "%d"), sep = "")? not found
> >>>
> >>> But I have the object in the workplace -
> >>>
> >>>> AAA31
> >>> [1] 5
> >>>
> >>> I will really appreciate if someone can point towards the right direction.
> >>>
> >>> Thanks,
> >>>
> >>> ______________________________________________
> >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> >>> https://stat.ethz.ch/mailman/listinfo/r-help
> >>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> >>> and provide commented, minimal, self-contained, reproducible code.
> >
> > ______________________________________________
> > R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > and provide commented, minimal, self-contained, reproducible code.
> >
>


From pd@|gd @end|ng |rom gm@||@com  Thu Oct 31 10:45:54 2019
From: pd@|gd @end|ng |rom gm@||@com (peter dalgaard)
Date: Thu, 31 Oct 2019 10:45:54 +0100
Subject: [R] save() unable to find object
In-Reply-To: <CA+dpOJmLSS0EYOh7tH46OQ=OekKYT9WkegoDUtwW5-KvDe3RvQ@mail.gmail.com>
References: <CA+dpOJmBkV2HGBBzEXY3QrnXYgeOdXddCK_nthu+PnBXcZryQQ@mail.gmail.com>
 <CA+8X3fV1MmVdoemu-XWLK6ntz7apA4+C9=JQZxzbUG7bL3z2bg@mail.gmail.com>
 <CA+dpOJmLSS0EYOh7tH46OQ=OekKYT9WkegoDUtwW5-KvDe3RvQ@mail.gmail.com>
Message-ID: <4392FF66-7E84-4867-8D7E-32DAE2B822F8@gmail.com>

Try the list= argument

save(list= c("Date", paste(.....)), file=....)

If you use ..., you'll get bitten by

     ...: the names of the objects to be saved (as symbols or character
          strings).

and the paste() construct is neither. (Internally, it gets converted by as.character(substitute(list(...))), leading to the "object...not found" that you see)

The documentation is maybe a little oblique, but the point is that in

bar <- 1234
foo <- "bar"

save(foo) and save("foo") both save the "foo" object, whereas save(list=foo) will save "bar". 

We don't evaluate expressions in ... because then save(foo) would also save "bar" (we could  in principle have different behaviour from symbols and more general expressions, but that is a certain road to insanity).

-pd

> On 31 Oct 2019, at 10:17 , Christofer Bogaso <bogaso.christofer at gmail.com> wrote:
> 
> As I said the name 'AAA31' is itself a variable. So I cant hard-code
> it within the save() function
> 
> On Thu, Oct 31, 2019 at 2:45 PM Jim Lemon <drjimlemon at gmail.com> wrote:
>> 
>> Hi Christofer,
>> This is a guess, but have you tried:
>> 
>> save(AAA31,file="Save.RData")
>> 
>> Jim
>> 
>> On Thu, Oct 31, 2019 at 8:10 PM Christofer Bogaso
>> <bogaso.christofer at gmail.com> wrote:
>>> 
>>> Hi,
>>> 
>>> I wanted to save a few R objects in RData file for some future use.
>>> The names of such R objects are actually dynamic so I used below code
>>> to save them -
>>> 
>>> Date = Sys.Date()
>>> assign(paste('AAA', format(Date, "%d"), sep = ""), 5)
>>> save('Date', paste('AAA', format(Date, "%d"), sep = ""), file = 'Save.RData')
>>> 
>>> With this, I am getting below error -
>>> 
>>> Error in save("Date", paste("AAA", format(Date, "%d"), sep = ""), file
>>> = "Save.RData") :
>>>  object ?paste("AAA", format(Date, "%d"), sep = "")? not found
>>> 
>>> But I have the object in the workplace -
>>> 
>>>> AAA31
>>> [1] 5
>>> 
>>> I will really appreciate if someone can point towards the right direction.
>>> 
>>> Thanks,
>>> 
>>> ______________________________________________
>>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>>> and provide commented, minimal, self-contained, reproducible code.
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.

-- 
Peter Dalgaard, Professor,
Center for Statistics, Copenhagen Business School
Solbjerg Plads 3, 2000 Frederiksberg, Denmark
Phone: (+45)38153501
Office: A 4.23
Email: pd.mes at cbs.dk  Priv: PDalgd at gmail.com


From p@@c@|@n|k|@u@ @end|ng |rom |eu@uzh@ch  Thu Oct 31 19:17:38 2019
From: p@@c@|@n|k|@u@ @end|ng |rom |eu@uzh@ch (Pascal A. Niklaus)
Date: Thu, 31 Oct 2019 19:17:38 +0100
Subject: [R] Problems with external library conflict in R package
Message-ID: <c9077f4c-1a89-4ddd-0a08-1aff61a9c843@ieu.uzh.ch>

I have an R library (using Rcpp) that used to compile and install fine. 
It uses some boost libraries. My Makevars file looks like this:

PKG_LIBS=`$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"` -lboost_iostreams -lm
CXX_STD = CXX14

The problem I face now is that for some other R-independent software 
project I installed boost 1.71 from source in /usr/local. Since then, 
the R package does not install anymore; I get:

Error: package or namespace load failed (...) dyn.load(file, DLLpath = 
DLLpath, ...):
  unable to load shared object (...) XXX.so
  undefined symbol: _ZN5boost9iostreams6detail10bzip2_base3endEbSt9nothrow_t

Both the distribution's includes and library files and the ones I 
installed in /usr/local are there:

$ locate boost/iostreams/filter/bzip2.hpp
/usr/include/boost/iostreams/filter/bzip2.hpp
/usr/local/include/boost/iostreams/filter/bzip2.hpp

$ ldconfig -p | grep boost_ios
         libboost_iostreams.so.1.71.0 (libc6,x86-64) => 
/usr/local/lib/libboost_iostreams.so.1.71.0
         libboost_iostreams.so.1.65.1 (libc6,x86-64) => 
/usr/lib/x86_64-linux-gnu/libboost_iostreams.so.1.65.1

When I als specify -L/usr/local/lib in Makevars, the code installs fine.

There is probably a simple answer, but I don't understand why I get this 
mismatch between library versions. Any help is appreciated!

Thanks

Pascal


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 31 21:31:01 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Thu, 31 Oct 2019 15:31:01 -0500
Subject: [R] how to calculate multiple meta p values
In-Reply-To: <CAF9-5jNnhM=6mUu1TB41=yoBkVzZ_qdigi+UsjnnzBJ_KMwPGw@mail.gmail.com>
References: <CAF9-5jP4E3B0Rd-ozo-wBc5iX8s8Qw+q8g4NAQkPnwoNti=dhg@mail.gmail.com>
 <18d995e9-5289-ca8c-cf36-d2e59732891d@dewey.myzen.co.uk>
 <CAF9-5jNmXkq8hpvi68O6uhKt_Z0NsKg3FBeAWB1xkHkkd1nffQ@mail.gmail.com>
 <4f6d97d3-b3b6-47a8-15c7-4159d09bead8@dewey.myzen.co.uk>
 <CAF9-5jPj0zqjLhCw1vOVT+GbJQVXU60azb-8AHd5oz_wxjBN7w@mail.gmail.com>
 <CAF9-5jNnhM=6mUu1TB41=yoBkVzZ_qdigi+UsjnnzBJ_KMwPGw@mail.gmail.com>
Message-ID: <CAF9-5jM5UHS92RVUwQd7WLYmF9_iCEpY6UdC-kEP_v5JzLuBpw@mail.gmail.com>

Can you please get back to me about this, I need this meta p values
for manuscript I have to submit next week

On Wed, Oct 30, 2019 at 5:35 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
>
> I also tried to do it this way:
>
> d$META <- sapply(seq_len(nrow(d)), function(rn) {
>   unlist(sumz(as.matrix(d[,.(LCL,Retina)])[rn,], weights =
> as.vector(d[,.(wl,wr)])[rn,],
>               na.action=na.fail)["p"])
> })
>
> but again I am getting error:
> Error in sumz(as.matrix(d[, .(LCL, Retina)])[rn, ], weights = as.vector(d[,  :
>   Must have at least two valid p values
>
> for this reference these are details about my data frame:
> > head(d)
>     chr    pos         gene_id                     LCL          Retina
>            wl           wr
> 1: chr1 775930 ENSG00000237094 0.3559520 9.72251e-05 31.62278 21.2838
> 2: chr1 815963 ENSG00000237094 0.2648080 3.85837e-06 31.62278 21.2838
> 3: chr1 816376 ENSG00000237094 0.3313120 3.85824e-06 31.62278 21.2838
> 4: chr1 817186 ENSG00000237094 0.0912854 3.75134e-06 31.62278 21.2838
> 5: chr1 817341 ENSG00000237094 0.1020520 3.75134e-06 31.62278 21.2838
> 6: chr1 817514 ENSG00000237094 0.0831412 3.82866e-06 31.62278 21.2838
> > sapply(d,class)
>         chr         pos     gene_id         LCL      Retina          wl
> "character" "character" "character"   "numeric"   "numeric"   "numeric"
>          wr
>   "numeric"
> > sum(is.na(d$LCL))
> [1] 0
> > sum(is.na(d$Retina))
> [1] 0
> > sum(is.na(d$wl))
> [1] 0
> > sum(is.na(d$wr))
> [1] 0
> > dim(d)
> [1] 1668837       7
>
> On Wed, Oct 30, 2019 at 4:52 PM Ana Marija <sokovic.anamarija at gmail.com> wrote:
> >
> > Hi Michael,
> >
> > this still doesn't work, by data frame has a few less columns now, but
> > the principle is still the same:
> >
> > > head(d)
> >     chr    pos         gene_id                     LCL
> > Retina       wl           wr
> > 1: chr1 775930 ENSG00000237094 0.3559520 9.72251e-05 31.62278 21.2838
> > 2: chr1 815963 ENSG00000237094 0.2648080 3.85837e-06 31.62278 21.2838
> > 3: chr1 816376 ENSG00000237094 0.3313120 3.85824e-06 31.62278 21.2838
> > 4: chr1 817186 ENSG00000237094 0.0912854 3.75134e-06 31.62278 21.2838
> > 5: chr1 817341 ENSG00000237094 0.1020520 3.75134e-06 31.62278 21.2838
> > 6: chr1 817514 ENSG00000237094 0.0831412 3.82866e-06 31.62278 21.2838
> >
> > so solution for the first row should be:
> > > sumz(c(0.3559520,9.72251e-05), weights = c(31.62278,21.2838), na.action = na.fail)
> > sumz =  2.386896 p =  0.008495647
> >
> > when I run what you proposed in the last email:
> >
> > helper <- function(x) {
> >   p <- sumz(as.numeric(x[4:5]), weights = as.numeric(x[6:7]))$p
> >   p
> > }
> >
> > d$META <- apply(d, MARGIN = 1, helper)
> >
> > I am getting:
> >
> > Error in sumz(as.numeric(x[4:5]), weights = as.numeric(x[6:7])) :
> >   Must have at least two valid p values
> >
> > Please advise,
> > Ana
> >
> > On Wed, Oct 30, 2019 at 5:02 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> > >
> > > Dear Ana
> > >
> > > Yes, when apply coerces q to a matrix it does so as a character matrix
> > > because of the values in the first column. So you need to wrap the
> > > references to x in helper in as.numeric() tat is to day like
> > > as.numeric(x[2:4]) and similarly for the other one. Sorry about that, I
> > > should have thought of it before.
> > >
> > > When I next update metap I will try to get it to degrade more gracefully
> > > when it finds an error.
> > >
> > > Michael
> > >
> > > On 28/10/2019 19:06, Ana Marija wrote:
> > > > Hi Michael,
> > > >
> > > > I tried what you proposed with my data frame q:
> > > >
> > > >> head(q)
> > > >             ID                P             G              E
> > > >   wb          wg           we
> > > > 1:  rs1029830 0.0979931 0.0054060 0.39160 580.6436 40.6325 35.39774
> > > > 2:  rs1029832 0.1501820 0.0028140 0.39320 580.6436 40.6325 35.39774
> > > > 3: rs11078374 0.1701250 0.0009805 0.49730 580.6436 40.6325 35.39774
> > > > 4:  rs1124961 0.1710150 0.7252000 0.05737 580.6436 40.6325 35.39774
> > > > 5:  rs1135237 0.1493650 0.6851000 0.06354 580.6436 40.6325 35.39774
> > > > 6: rs11867934 0.0757972 0.0006140 0.00327 580.6436 40.6325 35.39774
> > > >
> > > > so the solution of the first row would be this:
> > > >> sumz(c(0.0979931,0.0054060,0.39160), weights = c(580.6436,40.6325,35.39774), na.action = na.fail)
> > > > sumz =  1.481833 p =  0.06919239
> > > >
> > > > I tried applying the function you wrote:
> > > > helper <- function(x) {
> > > >    p <- sumz(x[2:4], weights = x[5:7])$p
> > > >    p
> > > > }
> > > >
> > > > With:
> > > >
> > > > q$META <- apply(q, MARGIN = 1, helper)
> > > >
> > > > # I want to make a new column in q named META with results
> > > > but I got this error:
> > > >   Error in sumz(x[2:4], weights = x[5:7]) :
> > > >    Must have at least two valid p values
> > > >
> > > > Please advise,
> > > > Ana
> > > >
> > > > On Sun, Oct 27, 2019 at 9:49 AM Michael Dewey <lists at dewey.myzen.co.uk> wrote:
> > > >>
> > > >> Dear Ana
> > > >>
> > > >> There must be several ways of doing this but see below for an idea with
> > > >> comments in-line.
> > > >>
> > > >> On 26/10/2019 00:31, Ana Marija wrote:
> > > >>> Hello,
> > > >>>
> > > >>> I would like to use this package metap
> > > >>> to calculate multiple o values
> > > >>>
> > > >>> I have my data frame with 3 p values
> > > >>>> head(tt)
> > > >>>             RS            G           E          B
> > > >>> 1: rs2089177   0.9986   0.7153   0.604716
> > > >>> 2: rs4360974   0.9738   0.7838   0.430228
> > > >>> 3: rs6502526   0.9744   0.7839   0.429160
> > > >>> 4: rs8069906   0.7184   0.4918   0.521452
> > > >>> 5: rs9905280   0.7205   0.4861   0.465758
> > > >>> 6: rs4313843   0.9804   0.8522   0.474313
> > > >>>
> > > >>> and data frame with corresponding weights for each of the p values
> > > >>> from the tt data frame
> > > >>>
> > > >>>> head(df)
> > > >>>          wg       we             wb                RS
> > > >>> 1 40.6325 35.39774 580.6436 rs2089177
> > > >>> 2 40.6325 35.39774 580.6436 rs4360974
> > > >>> 3 40.6325 35.39774 580.6436 rs6502526
> > > >>> 4 40.6325 35.39774 580.6436 rs8069906
> > > >>> 5 40.6325 35.39774 580.6436 rs9905280
> > > >>> 6 40.6325 35.39774 580.6436 rs4313843
> > > >>>
> > > >>> RS column is the same in df and tt
> > > >>>
> > > >>
> > > >> So you can create a new data-frame with merge()
> > > >>
> > > >> newdata <- merge(tt, df)
> > > >>
> > > >> which will use RS as the key to merge them on.
> > > >>
> > > >> The write a function of one argument, a seven element vector, which
> > > >> picks out the p-values and the weights and feeds them to sumz().
> > > >> Something like
> > > >>
> > > >> helper <- function(x) {
> > > >>    p <- sumz(x[2:4], weights = x[5:7])$p
> > > >>    p
> > > >> }
> > > >> Note you need to check that 2:4 and 5:7 are actually where they are in
> > > >> the row of newdat.
> > > >>
> > > >> Then use apply() to apply that to the rows of newdat.
> > > >>
> > > >> I have not tested any of this but the general idea should be OK even if
> > > >> the details are wrong.
> > > >>
> > > >> Michael
> > > >>
> > > >>
> > > >>> How to use this sunz() function to create a new data frame which would
> > > >>> look the same as tt only it would have additional column, say named
> > > >>> "META" which has calculated meta p values for each row
> > > >>>
> > > >>> This i s example of how much would be p value in the first row:
> > > >>>
> > > >>>> sumz(c(0.9986,0.7153,0.604716), weights = c(40.6325,35.39774,580.6436), na.action = na.fail)
> > > >>> p =  0.6940048
> > > >>>
> > > >>> Thanks
> > > >>> Ana
> > > >>>
> > > >>> ______________________________________________
> > > >>> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> > > >>> https://stat.ethz.ch/mailman/listinfo/r-help
> > > >>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> > > >>> and provide commented, minimal, self-contained, reproducible code.
> > > >>>
> > > >>
> > > >> --
> > > >> Michael
> > > >> http://www.dewey.myzen.co.uk/home.html
> > > >
> > >
> > > --
> > > Michael
> > > http://www.dewey.myzen.co.uk/home.html


From @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com  Thu Oct 31 22:08:28 2019
From: @okov|c@@n@m@r|j@ @end|ng |rom gm@||@com (Ana Marija)
Date: Thu, 31 Oct 2019 16:08:28 -0500
Subject: [R] =?utf-8?q?How_to_calculate_p_value_and_correlation_coefficie?=
	=?utf-8?q?nt_for_Spearman=E2=80=99s_correlation_of_differential_ex?=
	=?utf-8?q?pression_data_with_40000_permutations=3F?=
Message-ID: <CAF9-5jNb9eSzq2NUihB3S6NwR0Lk7hiFeOE9XH0UyU9Wmvw2LQ@mail.gmail.com>

Hello,

I have 3 groups,let's call them g1, g2, g3. Each of them is a result
of analysis in between groups of conditions, and g1 looks like this

                       geneSymbol      logFC         t      P.Value
adj.P.Val         Beta
    EXykpF1BRREdXnv9Xk      MKI67 -0.3115880 -5.521186 5.772137e-07
0.008986062 4.3106665
    0Tm7hdRJxd9zoevPlA     CCL3L3  0.1708020  4.162115 9.109798e-05
0.508784638 0.6630544
    u_M5UdFdhg3lZ.qe64     UBE2G1 -0.1528149 -4.031466 1.430822e-04
0.508784638 0.3354065
    lkkLCXcnzL9NXFXTl4     SEL1L3 -0.2138729 -3.977482 1.720517e-04
0.508784638 0.2015945
    0Uu3XrB6Bd14qoNeuc      ZFP36  0.1667330  3.944917 1.921715e-04
0.508784638 0.1213335
    3h7Sgq2i3sAUkxL_n8      ITGB5  0.3419488  3.938960 1.960886e-04
0.508784638 0.1066896

g2 and g2 look the same and each has  15568 entries (genes)

How to calculate p value and correlation coefficient for Spearman?s
correlation for this data for 40000 permutations?

I joined all 3 groups, g1, g2, g3, and extracted only Beta (B)

I got this data frame (d), with matching 15568 entries:

                         B.x       B.y         B
    EXykpF1BRREdXnv9Xk -4.970533 -4.752771 -5.404054
    0Tm7hdRJxd9zoevPlA -4.862168 -5.147294 -3.909654
    u_M5UdFdhg3lZ.qe64 -5.368846 -5.396183 -5.405330
    lkkLCXcnzL9NXFXTl4 -4.367704 -4.847795 -5.148524
    0Uu3XrB6Bd14qoNeuc -5.286592 -4.949305 -5.278798
    3h7Sgq2i3sAUkxL_n8 -4.579528 -2.403240 -4.710600

To calculate Spearman?s I could use in R:

    > cor(d,use="pairwise.complete.obs",method="spearman")
                B.x          B.y            B
    B.x 1.000000000  0.234171932  0.002474729
    B.y 0.234171932  1.000000000 -0.005469126
    B   0.002474729 -0.005469126  1.000000000

Can someone please tell me what would be the method to use to get
correlation coefficient and p value taken in account number of
permutations? And am I am correct to use Beta in order to do
correlation in between these 3 groups?

Thanks!



From j@ork|n @end|ng |rom @om@um@ry|@nd@edu  Mon Jul  1 17:54:21 2024
From: j@ork|n @end|ng |rom @om@um@ry|@nd@edu (Sorkin, John)
Date: Mon, 1 Jul 2024 15:54:21 +0000
Subject: [R] Create matrix with variable number of columns AND CREATE NAMES
 FOR THE COLUMNS
Message-ID: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>

#I am trying to write code that will create a matrix with a variable number of columns where the #number of columns is 1+Grps
#I can do this:
NSims <- 4
Grps <- 5
DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
DiffMeans

#I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps

# I wrote a function to build a list of length Grps
createValuelist <- function(num_elements) {
  for (i in 1:num_elements) {
    cat("Item", i, "\n", sep = "")
  }
}
createValuelist(Grps)

# When I try to assign column names I receive an error:
#Error in dimnames(DiffMeans) <- list(NULL, c("NSim", createValuelist(Grps))) : 
# length of 'dimnames' [2] not equal to array extent
dimnames(DiffMeans) <- list(NULL,c("NSim",createValuelist(Grps)))
DiffMeans

# Thank you for your help!


John David Sorkin M.D., Ph.D.
Professor of Medicine, University of Maryland School of Medicine;
Associate Director for Biostatistics and Informatics, Baltimore VA Medical Center Geriatrics Research, Education, and Clinical Center;?
PI?Biostatistics and Informatics Core, University of Maryland School of Medicine Claude D. Pepper Older Americans Independence Center;
Senior Statistician University of Maryland Center for Vascular Research;

Division of Gerontology and Paliative Care,
10 North Greene Street
GRECC (BT/18/GR)
Baltimore, MD 21201-1524
Cell phone 443-418-5382




From tebert @end|ng |rom u||@edu  Mon Jul  1 19:43:36 2024
From: tebert @end|ng |rom u||@edu (Ebert,Timothy Aaron)
Date: Mon, 1 Jul 2024 17:43:36 +0000
Subject: [R] 
 Create matrix with variable number of columns AND CREATE NAMES
 FOR THE COLUMNS
In-Reply-To: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
References: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
Message-ID: <CH3PR22MB45142BD4D2792E8AEAB11AF4CFD32@CH3PR22MB4514.namprd22.prod.outlook.com>

NSims <- 4
Grps <- 5
DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
DiffMeans

#I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps
Colnames <- as.vector("NSims")
num_elements <- ncol(DiffMeans)
for (i in 2:num_elements) {
  Colnames[i] <- paste0("Item",i)
}
colnames(DiffMeans) <- Colnames

You need the vector "Colnames" to have the same number of elements as columns in DiffMeans.
Colnames in created with the first element in place because that will not change.
The loop starts with the second element so that the first element is not overwritten by the for loop.


As a function it might look something like this:
# Name columns is a function that will take a matrix and two strings.
# The first string is the name of the first column.
# The second string is the base part of column names.
#     The function adds a number after the base part.
name_cols <- function(matrix, name1, name2){
  colnames <- as.vector(name1)
  num_elements <- ncol(DiffMeans)
  # I wrote a function to build a list of length Grps createValuelist <- function(num_elements) {
  for (i in 2:num_elements) {
    colnames[i] <- paste0(name2,i)
  }
}

colnames(DiffMeans) <- name_cols(DiffNames,"Book", "Cola")

You can now make the names anything you want for any specific use.
You could add some error checking like making sure the first parameter is a matrix and the other two parmeters are appropriate strings.
If the function will only be called once or twice it might be simpler to not use a function.


Tim
-----Original Message-----
From: R-help <r-help-bounces at r-project.org> On Behalf Of Sorkin, John
Sent: Monday, July 1, 2024 11:54 AM
To: r-help at r-project.org (r-help at r-project.org) <r-help at r-project.org>
Subject: [R] Create matrix with variable number of columns AND CREATE NAMES FOR THE COLUMNS

[External Email]

#I am trying to write code that will create a matrix with a variable number of columns where the #number of columns is 1+Grps #I can do this:
NSims <- 4
Grps <- 5
DiffMeans <- matrix(nrow=NSims,ncol=1+Grps) DiffMeans

#I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps

# I wrote a function to build a list of length Grps createValuelist <- function(num_elements) {
  for (i in 1:num_elements) {
    cat("Item", i, "\n", sep = "")
  }
}
createValuelist(Grps)

# When I try to assign column names I receive an error:
#Error in dimnames(DiffMeans) <- list(NULL, c("NSim", createValuelist(Grps))) :
# length of 'dimnames' [2] not equal to array extent
dimnames(DiffMeans) <- list(NULL,c("NSim",createValuelist(Grps)))
DiffMeans

# Thank you for your help!


John David Sorkin M.D., Ph.D.
Professor of Medicine, University of Maryland School of Medicine; Associate Director for Biostatistics and Informatics, Baltimore VA Medical Center Geriatrics Research, Education, and Clinical Center; PI Biostatistics and Informatics Core, University of Maryland School of Medicine Claude D. Pepper Older Americans Independence Center; Senior Statistician University of Maryland Center for Vascular Research;

Division of Gerontology and Paliative Care,
10 North Greene Street
GRECC (BT/18/GR)
Baltimore, MD 21201-1524
Cell phone 443-418-5382



______________________________________________
R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.r-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Jul  1 19:56:23 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 1 Jul 2024 18:56:23 +0100
Subject: [R] 
 Create matrix with variable number of columns AND CREATE NAMES
 FOR THE COLUMNS
In-Reply-To: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
References: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
Message-ID: <78bf05fa-7f80-413e-aa6d-0c0f785c0c49@sapo.pt>

?s 16:54 de 01/07/2024, Sorkin, John escreveu:
> #I am trying to write code that will create a matrix with a variable number of columns where the #number of columns is 1+Grps
> #I can do this:
> NSims <- 4
> Grps <- 5
> DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
> DiffMeans
> 
> #I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps
> 
> # I wrote a function to build a list of length Grps
> createValuelist <- function(num_elements) {
>    for (i in 1:num_elements) {
>      cat("Item", i, "\n", sep = "")
>    }
> }
> createValuelist(Grps)
> 
> # When I try to assign column names I receive an error:
> #Error in dimnames(DiffMeans) <- list(NULL, c("NSim", createValuelist(Grps))) :
> # length of 'dimnames' [2] not equal to array extent
> dimnames(DiffMeans) <- list(NULL,c("NSim",createValuelist(Grps)))
> DiffMeans
> 
> # Thank you for your help!
> 
> 
> John David Sorkin M.D., Ph.D.
> Professor of Medicine, University of Maryland School of Medicine;
> Associate Director for Biostatistics and Informatics, Baltimore VA Medical Center Geriatrics Research, Education, and Clinical Center;
> PI?Biostatistics and Informatics Core, University of Maryland School of Medicine Claude D. Pepper Older Americans Independence Center;
> Senior Statistician University of Maryland Center for Vascular Research;
> 
> Division of Gerontology and Paliative Care,
> 10 North Greene Street
> GRECC (BT/18/GR)
> Baltimore, MD 21201-1524
> Cell phone 443-418-5382
> 
> 
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
Hello,

Something like this?



names_cols <- function(x, First = "NSims", Prefix = "Value") {
   nms <- c(First, sprintf("%s%d", Prefix, seq_len(ncol(x) - 1L)))
   colnames(x) <- nms
   x
}

NSims <- 4
Grps <- 5
DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
names_cols(DiffMeans)
#>      NSims Value1 Value2 Value3 Value4 Value5
#> [1,]    NA     NA     NA     NA     NA     NA
#> [2,]    NA     NA     NA     NA     NA     NA
#> [3,]    NA     NA     NA     NA     NA     NA
#> [4,]    NA     NA     NA     NA     NA     NA



Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Mon Jul  1 20:05:32 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Mon, 1 Jul 2024 19:05:32 +0100
Subject: [R] 
 Create matrix with variable number of columns AND CREATE NAMES
 FOR THE COLUMNS
In-Reply-To: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
References: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
Message-ID: <cbf9861a-2d11-4fb9-86c4-db6387b71af1@sapo.pt>

?s 16:54 de 01/07/2024, Sorkin, John escreveu:
> #I am trying to write code that will create a matrix with a variable number of columns where the #number of columns is 1+Grps
> #I can do this:
> NSims <- 4
> Grps <- 5
> DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
> DiffMeans
> 
> #I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps
> 
> # I wrote a function to build a list of length Grps
> createValuelist <- function(num_elements) {
>    for (i in 1:num_elements) {
>      cat("Item", i, "\n", sep = "")
>    }
> }
> createValuelist(Grps)
> 
> # When I try to assign column names I receive an error:
> #Error in dimnames(DiffMeans) <- list(NULL, c("NSim", createValuelist(Grps))) :
> # length of 'dimnames' [2] not equal to array extent
> dimnames(DiffMeans) <- list(NULL,c("NSim",createValuelist(Grps)))
> DiffMeans
> 
> # Thank you for your help!
> 
> 
> John David Sorkin M.D., Ph.D.
> Professor of Medicine, University of Maryland School of Medicine;
> Associate Director for Biostatistics and Informatics, Baltimore VA Medical Center Geriatrics Research, Education, and Clinical Center;
> PI?Biostatistics and Informatics Core, University of Maryland School of Medicine Claude D. Pepper Older Americans Independence Center;
> Senior Statistician University of Maryland Center for Vascular Research;
> 
> Division of Gerontology and Paliative Care,
> 10 North Greene Street
> GRECC (BT/18/GR)
> Baltimore, MD 21201-1524
> Cell phone 443-418-5382
> 
> 
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
Hello,

Sorry for my first answer, I thought you only wanted to name the matrix 
columns. After reading the OP again, this time actually reading it, I 
realized you also want to create the matrix. This is even in the 
question title line :(.



create_matrix <- function(nsims, ngrps, First = "NSims", Prefix = "Value") {
   # could also be paste0(Prefix, seq_len(ngrps))
   grp_names <- sprintf("%s%d", Prefix, seq_len(ngrps))
   nms <- c(First, grp_names)
   matrix(nrow = nsims, ncol = 1L + ngrps, dimnames = list(NULL, nms))
}

NSims <- 4
Grps <- 5
create_matrix(NSims, Grps)
#>      NSims Value1 Value2 Value3 Value4 Value5
#> [1,]    NA     NA     NA     NA     NA     NA
#> [2,]    NA     NA     NA     NA     NA     NA
#> [3,]    NA     NA     NA     NA     NA     NA
#> [4,]    NA     NA     NA     NA     NA     NA



Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Mon Jul  1 20:50:09 2024
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Mon, 01 Jul 2024 11:50:09 -0700
Subject: [R] 
 Create matrix with variable number of columns AND CREATE NAMES
 FOR THE COLUMNS
In-Reply-To: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
References: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
Message-ID: <F4ADB92D-420E-41C8-9EBB-119C1CCC397E@dcn.davis.ca.us>

I think you should reconsider your goal. Matrices must have all elements of the same type, and in this case you seem to be trying to mix a number of something (integer) with mean values (double). This would normally be stored together in a data frame or separately in a vector for counts and a matrix for means.

If you are just thinking about data presentation, a data frame would be a better choice than a single matrix.

On July 1, 2024 8:54:21 AM PDT, "Sorkin, John" <jsorkin at som.umaryland.edu> wrote:
>#I am trying to write code that will create a matrix with a variable number of columns where the #number of columns is 1+Grps
>#I can do this:
>NSims <- 4
>Grps <- 5
>DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
>DiffMeans
>
>#I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps
>
># I wrote a function to build a list of length Grps
>createValuelist <- function(num_elements) {
>  for (i in 1:num_elements) {
>    cat("Item", i, "\n", sep = "")
>  }
>}
>createValuelist(Grps)
>
># When I try to assign column names I receive an error:
>#Error in dimnames(DiffMeans) <- list(NULL, c("NSim", createValuelist(Grps))) : 
># length of 'dimnames' [2] not equal to array extent
>dimnames(DiffMeans) <- list(NULL,c("NSim",createValuelist(Grps)))
>DiffMeans
>
># Thank you for your help!
>
>
>John David Sorkin M.D., Ph.D.
>Professor of Medicine, University of Maryland School of Medicine;
>Associate Director for Biostatistics and Informatics, Baltimore VA Medical Center Geriatrics Research, Education, and Clinical Center;?
>PI?Biostatistics and Informatics Core, University of Maryland School of Medicine Claude D. Pepper Older Americans Independence Center;
>Senior Statistician University of Maryland Center for Vascular Research;
>
>Division of Gerontology and Paliative Care,
>10 North Greene Street
>GRECC (BT/18/GR)
>Baltimore, MD 21201-1524
>Cell phone 443-418-5382
>
>
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From tuech|er @end|ng |rom gmx@@t  Mon Jul  1 20:55:07 2024
From: tuech|er @end|ng |rom gmx@@t (Heinz Tuechler)
Date: Mon, 1 Jul 2024 20:55:07 +0200
Subject: [R] 
 Create matrix with variable number of columns AND CREATE NAMES
 FOR THE COLUMNS
In-Reply-To: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
References: <DM6PR03MB50491491431A5556461E7BABE2D32@DM6PR03MB5049.namprd03.prod.outlook.com>
Message-ID: <13d92624-cdc5-9cf2-60a5-f76285d93723@gmx.at>

Sorkin, John wrote/hat geschrieben on/am 01.07.2024 17:54:
> #I am trying to write code that will create a matrix with a variable number of columns where the #number of columns is 1+Grps
> #I can do this:
> NSims <- 4
> Grps <- 5
> DiffMeans <- matrix(nrow=NSims,ncol=1+Grps)
> DiffMeans
>
> #I have a problem when I try to name the columns of the matrix. I want the first column to be NSims, #and the other columns to be something like Value1, Value2, . . . Valuen where N=Grps
>
> # I wrote a function to build a list of length Grps
> createValuelist <- function(num_elements) {
>   for (i in 1:num_elements) {
>     cat("Item", i, "\n", sep = "")
>   }
> }
> createValuelist(Grps)
>
> # When I try to assign column names I receive an error:
> #Error in dimnames(DiffMeans) <- list(NULL, c("NSim", createValuelist(Grps))) :
> # length of 'dimnames' [2] not equal to array extent
> dimnames(DiffMeans) <- list(NULL,c("NSim",createValuelist(Grps)))
> DiffMeans
>
> # Thank you for your help!
>
>
> John David Sorkin M.D., Ph.D.
> Professor of Medicine, University of Maryland School of Medicine;
> Associate Director for Biostatistics and Informatics, Baltimore VA Medical Center Geriatrics Research, Education, and Clinical Center;
> PI Biostatistics and Informatics Core, University of Maryland School of Medicine Claude D. Pepper Older Americans Independence Center;
> Senior Statistician University of Maryland Center for Vascular Research;
>
> Division of Gerontology and Paliative Care,
> 10 North Greene Street
> GRECC (BT/18/GR)
> Baltimore, MD 21201-1524
> Cell phone 443-418-5382
>
maybe:
NSims <- 4
Grps <- 5
DiffMeans <-
     matrix(nrow=NSims,ncol=1+Grps,
            dimnames=list(NULL, c('Nsimn', paste('Item', 1:Grps, sep=''))))
DiffMeans

best,
Heinz

>
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


From @@uer @end|ng |rom |mb|@un|-he|de|berg@de  Mon Jul  1 15:33:43 2024
From: @@uer @end|ng |rom |mb|@un|-he|de|berg@de (Sauer, Lukas Daniel)
Date: Mon, 1 Jul 2024 13:33:43 +0000
Subject: [R] summaryRprof: Unexpected unit for memory profiling
Message-ID: <0ead849446304c87ac70ee9cdc492976@imbi.uni-heidelberg.de>

Hello,

I am profiling memory usage using utils::Rprof() and subsequently summarizing the profile using utils::summaryRprof(). According to the documentation ?summaryRprof, the option `memory = "both"` reports "memory consumption in Mb in addition to the timings", i.e. the unit is megabytes. However, looking at the source code (https://github.com/wch/r-source/blob/18652de8890d89563b923ff58b45ccb04d9955fe/src/library/utils/R/summRprof.R#L170) suggests that memory is reported in mebibytes (division by 1048576 and not by 100000). This is in line with the following minimal example:

use_mb <- function(){a <- runif(1000000)}
use_mib <- function(){b <- runif(1024^2)}
Rprof("Rprof.out", memory.profiling=TRUE)
use_mb()
use_mib()
Rprof(NULL)
summaryRprof("Rprof.out", memory="both")

Do not source this code, but execute it line by line. This example returns the output:

$by.self
        self.time self.pct total.time total.pct mem.total
"runif"      0.04      100       0.04       100      15.6

$by.total
          total.time total.pct mem.total self.time self.pct
"runif"         0.04       100      15.6      0.04      100
"use_mb"        0.02        50       7.6      0.00        0
"use_mib"       0.02        50       8.0      0.00        0

$sample.interval
[1] 0.02

$sampling.time
[1] 0.04

The example was run under:

R version 4.4.0 (2024-04-24 ucrt)
Platform: x86_64-w64-mingw32/x64
Running under: Windows 11 x64 (build 22631)

If the unit were megabytes, I would expect mem.total to be 16.4, 8.0, and 8.4 -- but rather it is 15.6, 7.6, and 8.0. Do you agree that this behavior is unexpected or did I overlook something? If yes, I will file a bug report and suggest that the documentation is changed to "memory consumption in MiB in addition to the timings".

Best regards,

Lukas D Sauer
Biometrician
Institute of Medical Biometry

Heidelberg University Hospital | Im Neuenheimer Feld 130.3 | D-69120 Heidelberg
Tel. +49 6221 56-35036 | Fax. +49 6221 56-4195 | E-Mail: sauer at imbi.uni-heidelberg.de
biometrie.uni-heidelberg.de | twitter.com/imbi_heidelberg


From jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@  Tue Jul  2 09:05:53 2024
From: jdnewm|| @end|ng |rom dcn@d@v|@@c@@u@ (Jeff Newmiller)
Date: Tue, 02 Jul 2024 00:05:53 -0700
Subject: [R] summaryRprof: Unexpected unit for memory profiling
In-Reply-To: <0ead849446304c87ac70ee9cdc492976@imbi.uni-heidelberg.de>
References: <0ead849446304c87ac70ee9cdc492976@imbi.uni-heidelberg.de>
Message-ID: <EBF51C4A-6225-419C-B7B7-2EA1B7BB6E09@dcn.davis.ca.us>

There was a time when people pretty much ignored the distinction between MB and MiB in computer applications, and using the binary version was usually assumed because, well, this _is_ memory we are measuring. I think this is a leftover from that time.

On July 1, 2024 6:33:43 AM PDT, "Sauer, Lukas Daniel" <sauer at imbi.uni-heidelberg.de> wrote:
>Hello,
>
>I am profiling memory usage using utils::Rprof() and subsequently summarizing the profile using utils::summaryRprof(). According to the documentation ?summaryRprof, the option `memory = "both"` reports "memory consumption in Mb in addition to the timings", i.e. the unit is megabytes. However, looking at the source code (https://github.com/wch/r-source/blob/18652de8890d89563b923ff58b45ccb04d9955fe/src/library/utils/R/summRprof.R#L170) suggests that memory is reported in mebibytes (division by 1048576 and not by 100000). This is in line with the following minimal example:
>
>use_mb <- function(){a <- runif(1000000)}
>use_mib <- function(){b <- runif(1024^2)}
>Rprof("Rprof.out", memory.profiling=TRUE)
>use_mb()
>use_mib()
>Rprof(NULL)
>summaryRprof("Rprof.out", memory="both")
>
>Do not source this code, but execute it line by line. This example returns the output:
>
>$by.self
>        self.time self.pct total.time total.pct mem.total
>"runif"      0.04      100       0.04       100      15.6
>
>$by.total
>          total.time total.pct mem.total self.time self.pct
>"runif"         0.04       100      15.6      0.04      100
>"use_mb"        0.02        50       7.6      0.00        0
>"use_mib"       0.02        50       8.0      0.00        0
>
>$sample.interval
>[1] 0.02
>
>$sampling.time
>[1] 0.04
>
>The example was run under:
>
>R version 4.4.0 (2024-04-24 ucrt)
>Platform: x86_64-w64-mingw32/x64
>Running under: Windows 11 x64 (build 22631)
>
>If the unit were megabytes, I would expect mem.total to be 16.4, 8.0, and 8.4 -- but rather it is 15.6, 7.6, and 8.0. Do you agree that this behavior is unexpected or did I overlook something? If yes, I will file a bug report and suggest that the documentation is changed to "memory consumption in MiB in addition to the timings".
>
>Best regards,
>
>Lukas D Sauer
>Biometrician
>Institute of Medical Biometry
>
>Heidelberg University Hospital | Im Neuenheimer Feld 130.3 | D-69120 Heidelberg
>Tel. +49 6221 56-35036 | Fax. +49 6221 56-4195 | E-Mail: sauer at imbi.uni-heidelberg.de
>biometrie.uni-heidelberg.de | twitter.com/imbi_heidelberg
>
>______________________________________________
>R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
>https://stat.ethz.ch/mailman/listinfo/r-help
>PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>and provide commented, minimal, self-contained, reproducible code.

-- 
Sent from my phone. Please excuse my brevity.


From tr|ng @end|ng |rom gvdnet@dk  Wed Jul  3 10:13:59 2024
From: tr|ng @end|ng |rom gvdnet@dk (Troels Ring)
Date: Wed, 3 Jul 2024 10:13:59 +0200
Subject: [R] simple problem with unquoting argument
Message-ID: <5bd7164c-315e-458b-913a-164dfd336d4b@gvdnet.dk>

Hi? friends - I'm in problems finding out how to unquote - I have a 
series of vectors named adds1....adds11 and need to e.g. find the sum of 
each of them

So I try

SS <- c()

for (i in 1:11) {

e <- paste("adds",i,sep="")

SS[i]? <- sum(xx(e)) }

Now e looks right - but I have been unable to find out how to get the 
string e converted to the proper argument for sum()? - i.e. what? is 
function xx?

All best wishes
Troels Ring, Aalborg, Denmark


From ru|pb@rr@d@@ @end|ng |rom @@po@pt  Wed Jul  3 10:24:21 2024
From: ru|pb@rr@d@@ @end|ng |rom @@po@pt (Rui Barradas)
Date: Wed, 3 Jul 2024 09:24:21 +0100
Subject: [R] simple problem with unquoting argument
In-Reply-To: <5bd7164c-315e-458b-913a-164dfd336d4b@gvdnet.dk>
References: <5bd7164c-315e-458b-913a-164dfd336d4b@gvdnet.dk>
Message-ID: <26ef9ed0-e712-4847-8c09-c6fbd17a31c6@sapo.pt>

?s 09:13 de 03/07/2024, Troels Ring escreveu:
> Hi? friends - I'm in problems finding out how to unquote - I have a 
> series of vectors named adds1....adds11 and need to e.g. find the sum of 
> each of them
> 
> So I try
> 
> SS <- c()
> 
> for (i in 1:11) {
> 
> e <- paste("adds",i,sep="")
> 
> SS[i]? <- sum(xx(e)) }
> 
> Now e looks right - but I have been unable to find out how to get the 
> string e converted to the proper argument for sum()? - i.e. what? is 
> function xx?
> 
> All best wishes
> Troels Ring, Aalborg, Denmark
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide 
> http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
Hello,

Function xx is ?get or mget (same help page).
You can get the vectors adds all in one instruction with mget or one at 
a time with get.


adds1 <- 1:10
adds2 <- 2:10
adds3 <- 3:10
adds4 <- 4:10
adds5 <- 5:10

# create SS with the required length beforehand
SS <- numeric(5L)
for (i in 1:5) {
   e <- paste("adds",i,sep="")
   SS[i]  <- sum(get(e))
}
SS
#> [1] 55 54 52 49 45


Or all in one instruction with the assistance of ?ls.



# ls(pattern = "^adds") |> mget() |> lapply(sum)
ls(pattern = "^adds") |> mget() |> sapply(sum)
#> adds1 adds2 adds3 adds4 adds5
#>    55    54    52    49    45


Hope this helps,

Rui Barradas


-- 
Este e-mail foi analisado pelo software antiv?rus AVG para verificar a presen?a de v?rus.
www.avg.com


From |kry|ov @end|ng |rom d|@root@org  Wed Jul  3 10:25:02 2024
From: |kry|ov @end|ng |rom d|@root@org (Ivan Krylov)
Date: Wed, 3 Jul 2024 11:25:02 +0300
Subject: [R] simple problem with unquoting argument
In-Reply-To: <5bd7164c-315e-458b-913a-164dfd336d4b@gvdnet.dk>
References: <5bd7164c-315e-458b-913a-164dfd336d4b@gvdnet.dk>
Message-ID: <20240703112502.2fd088f3@Tarkus>

? Wed, 3 Jul 2024 10:13:59 +0200
Troels Ring <tring at gvdnet.dk> ?????:

> Now e looks right - but I have been unable to find out how to get the 
> string e converted to the proper argument for sum()? - i.e. what? is 
> function xx?

get(e) will return the value of the variable with the name stored in
the variable e.

A more idiomatic variant will require more changes:

1. Create the "adds" variable as a list, so that it could contain other
arbitrary R values:

adds <- list()

2. Instead of assigning adds1 <- something(), adds2 <-
something_else(), ..., assign to the elements of the list:

adds[[1]] <- something()
adds[[2]] <- something_else()
...

3. Now you can use the same syntax to access the elements of the list:

SS[i] <- sum(adds[[i]])

As a bonus, you can use the "apply" family of R functions that will
perform the loop for you: instead of SS <- c(); for (i in 1:11) SS[i]
<- sum(adds[[i]]) you can write

SS <- vapply(adds, sum, numeric(1))

...and it will perform the same loop inside it, verifying each time
that sum(adds[[i]]) returns a single number.

-- 
Best regards,
Ivan

P.S. I'm sorry for letting our project lapse.


From tr|ng @end|ng |rom gvdnet@dk  Wed Jul  3 16:16:23 2024
From: tr|ng @end|ng |rom gvdnet@dk (Troels Ring)
Date: Wed, 3 Jul 2024 16:16:23 +0200
Subject: [R] simple problem with unquoting argument
In-Reply-To: <20240703112502.2fd088f3@Tarkus>
References: <5bd7164c-315e-458b-913a-164dfd336d4b@gvdnet.dk>
 <20240703112502.2fd088f3@Tarkus>
Message-ID: <8364b241-9166-4b5a-bf9a-499a412e0e9e@gvdnet.dk>

Dear Ivan and Rui - thanks a lot for the effective help.

All best wishes Troels

Den 03-07-2024 kl. 10:25 skrev Ivan Krylov:
> ? Wed, 3 Jul 2024 10:13:59 +0200
> Troels Ring <tring at gvdnet.dk> ?????:
>
>> Now e looks right - but I have been unable to find out how to get the
>> string e converted to the proper argument for sum()? - i.e. what? is
>> function xx?
> get(e) will return the value of the variable with the name stored in
> the variable e.
>
> A more idiomatic variant will require more changes:
>
> 1. Create the "adds" variable as a list, so that it could contain other
> arbitrary R values:
>
> adds <- list()
>
> 2. Instead of assigning adds1 <- something(), adds2 <-
> something_else(), ..., assign to the elements of the list:
>
> adds[[1]] <- something()
> adds[[2]] <- something_else()
> ...
>
> 3. Now you can use the same syntax to access the elements of the list:
>
> SS[i] <- sum(adds[[i]])
>
> As a bonus, you can use the "apply" family of R functions that will
> perform the loop for you: instead of SS <- c(); for (i in 1:11) SS[i]
> <- sum(adds[[i]]) you can write
>
> SS <- vapply(adds, sum, numeric(1))
>
> ...and it will perform the same loop inside it, verifying each time
> that sum(adds[[i]]) returns a single number.
>


From r-m@||@ @end|ng |rom erez@h@org  Fri Jul  5 13:35:40 2024
From: r-m@||@ @end|ng |rom erez@h@org (Erez Shomron)
Date: Fri, 05 Jul 2024 14:35:40 +0300
Subject: [R] Bug? plot.formula does need support plot.first / plot.last
 param in plot.default
Message-ID: <a9dd2c4c-953d-4d3b-9480-06bc3454df7f@app.fastmail.com>

Is the following a bug in your opinion? I think so.

This works as expected:

```
with(mtcars, plot(wt, mpg, plot.first = {
    plot.window(range(wt), range(mpg))
    arrows(3, 15, 4, 30)
}))
```

This does not.

```
plot(mpg ~ wt, data = mtcars, plot.first = {
    plot.window(range(wt), range(mpg))
    arrows(3, 15, 4, 30)
})
```

With error:
```
Error in arrows(3, 15, 4, 30) : plot.new has not been called yet
```

The second example should work.

>From the docs:

?plot.formula
"     For the ?plot? method the formula can be of the form ?~ z + y +
     z?: the variables specified on the right-hand side are collected
     into a data frame, subsetted if specified, and displayed by
     ?plot.data.frame?.
"

?plot.data.frame
"     ...: further arguments to ?stripchart?, ?plot.default? or ?pairs?.
"

And plot.default has both plot.first and plot.last

It seems very arbitrary you can't use these parameters with the plot.formula method specifically.

> sessionInfo()
R version 4.4.1 (2024-06-14)
Platform: x86_64-suse-linux-gnu
Running under: openSUSE Tumbleweed
[...]


From murdoch@dunc@n @end|ng |rom gm@||@com  Sat Jul  6 00:05:50 2024
From: murdoch@dunc@n @end|ng |rom gm@||@com (Duncan Murdoch)
Date: Fri, 5 Jul 2024 18:05:50 -0400
Subject: [R] Bug? plot.formula does need support plot.first / plot.last
 param in plot.default
In-Reply-To: <a9dd2c4c-953d-4d3b-9480-06bc3454df7f@app.fastmail.com>
References: <a9dd2c4c-953d-4d3b-9480-06bc3454df7f@app.fastmail.com>
Message-ID: <83c5f0f0-8193-436b-94b5-d4570d1db03f@gmail.com>

That definitely looks like a bug, but not one that anyone will be eager 
to fix.  It's very old code that tried to be clever, and that's the 
hardest kind of code to fix.

Remember Kernighan's Law:  "Everyone knows that debugging is twice as 
hard as writing a program in the first place. So if you?re as clever as 
you can be when you write it, how will you ever debug it?"

Duncan Murdoch

On 2024-07-05 7:35 a.m., Erez Shomron wrote:
> Is the following a bug in your opinion? I think so.
> 
> This works as expected:
> 
> ```
> with(mtcars, plot(wt, mpg, plot.first = {
>      plot.window(range(wt), range(mpg))
>      arrows(3, 15, 4, 30)
> }))
> ```
> 
> This does not.
> 
> ```
> plot(mpg ~ wt, data = mtcars, plot.first = {
>      plot.window(range(wt), range(mpg))
>      arrows(3, 15, 4, 30)
> })
> ```
> 
> With error:
> ```
> Error in arrows(3, 15, 4, 30) : plot.new has not been called yet
> ```
> 
> The second example should work.
> 
>  From the docs:
> 
> ?plot.formula
> "     For the ?plot? method the formula can be of the form ?~ z + y +
>       z?: the variables specified on the right-hand side are collected
>       into a data frame, subsetted if specified, and displayed by
>       ?plot.data.frame?.
> "
> 
> ?plot.data.frame
> "     ...: further arguments to ?stripchart?, ?plot.default? or ?pairs?.
> "
> 
> And plot.default has both plot.first and plot.last
> 
> It seems very arbitrary you can't use these parameters with the plot.formula method specifically.
> 
>> sessionInfo()
> R version 4.4.1 (2024-06-14)
> Platform: x86_64-suse-linux-gnu
> Running under: openSUSE Tumbleweed
> [...]
> 
> ______________________________________________
> R-help at r-project.org mailing list -- To UNSUBSCRIBE and more, see
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.


